                      ; Flags saved by AGD Compiler
                      
0001                  MFLAG equ 1 ;
0000                  PFLAG equ 0 ;
0000                  SFLAG equ 0 ;
0000                  DFLAG equ 0 ;
0000                  CFLAG equ 0 ;
0001                  OFLAG equ 1 ;
0000                  LFLAG equ 0 ;
                      
                       
0000                  AFLAG equ 0 
0000                  IFLAG equ 0 
0000                  HFLAG equ 0 
0000                  GFLAG equ 0 
0000                  BFLAG equ 0 
0000                  RFLAG equ 0 
                       
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Game engine code 
                      ; Arcade Game Designer
                      ; (C) 2008 - 2018 Jonathan Cauldwell
                      ; ZX Spectrum Engine v0.7
                      ; converted to 6809 by Pere Serrat
                      ; debugged and enhanced by Kees van Oss and Pere Serrat - vU8B4 - 2019-01-04
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Conditional compilation flags
                      ; Code is installed if flag is set
                      ; Flags are set in commandline assembly or by the compiler
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Flags set by AGD compiler
                      ;       mflag           ; MENU + INV
                      ;       pflag           ; particle engine
                      ;       sflag           ; scrollytext
                      ;       dflag           ; digging mode
                      ;       cflag                   ; collectable blocks
                      ;       oflag                   ; objects
                      ;       lflag                   ; ladders
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Flags set manually
                      ;       aflag                   ; adventure mode
                      ;       bflag                   ; big sprites (16x24)
                      ;       gflag                   ; graphic colour mode
                      ;       hflag                   ; hidden sprite mode
                      ;       iflag                   ; invert mode
                      ;       rflag                   ; RAM ShiftTables
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;       if mflag 
                      ;       .out "- MEN/INV enabled"  
                      ;       endif
                      ;       if pflag 
                      ;       .out "- Particles enabled" 
                      ;       endif
                      ;       if sflag 
                      ;       .out "- Scrolling enabled" 
                      ;       endif
                      ;       if dflag
                      ;       .out "- Digging enabled" 
                      ;       endif
                      ;       if cflag
                      ;       .out "- Collectable blocks enabled" 
                      ;       endif
                      ;       if oflag
                      ;       .out "- Objects enabled" 
                      ;       endif
                      ;       if lflag
                      ;       .out "- Ladders enabled" 
                      ;       endif
                      ;       if aflag
                      ;       .out "- Adventure mode enabled" 
                      ;       endif
                      ;       if bflag
                      ;       .out "- Big Sprites (16x24) enabled" 
                      ;       endif
                      ;       if gflag
                      ;       .out "- Colourmode enabled" 
                      ;       endif
                      ;       if hflag
                      ;       .out "- Hidden sprites/foregroundblocks enabled" 
                      ;       endif
                      ;       if iflag
                      ;       .out "- Invert mode enabled" 
                      ;       endif
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; macro to create the better jump code for any possible case
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0020                  com_bra equ     $20
0021                  com_brn equ     $21
0022                  com_bhi equ     $22
0023                  com_bls equ     $23
0024                  com_bcc equ     $24
0024                  com_bhs equ     $24
0025                  com_bcs equ     $25
0025                  com_blo equ     $25
0026                  com_bne equ     $26
0027                  com_beq equ     $27
0028                  com_bvc equ     $28
0029                  com_bvs equ     $29
002A                  com_bpl equ     $2a
002B                  com_bmi equ     $2b
002C                  com_bge equ     $2c
002D                  com_blt equ     $2d
002E                  com_bgt equ     $2e
002F                  com_ble equ     $2f
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      CONDJMP MACRO
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
                                              fcb     com_\1
                                              fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
                                              ENDM
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Global definitions.                                                                                                                                                           ; Global definitions.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; SIMASK equ 248                                        ; SPRITEINK mask - allows users to set BRIGHT/FLASH/CLUT as well.
D4D9                  sprTab  equ     $d4d9                                                   ; d4d9-d5c4 - 204 bytes=12 sprites x 17 bytes   ; sprtab        fcb 204 values $ff
D5A5                  sSprit  equ     $d5a5                                                   ; d5a5-d5b5 - 17 bytes for spare sprite                 ; ssprit fcb 17 values
D5B6                  eop             equ     $d5b6                                                   ; d5b6-d8b5 - for adventure mode (768 bytes)
D8B6                  SHRAPN  equ     $d8b6                                                   ; d8b6-d9ff - uses NUMSHR*SHRSIZ=55*6=330               ; SHRAPN equ 63926            ; shrapnel table, just below screen address table.
DA00                  SCADTB  equ     $da00                                                   ; da00-dbff - uses 256*2=512 bytes                                      ; SCADTB equ 64256            ; screen address table, just below map.
DC00                  MAP             equ     $dc00                                                   ; dc00-deff - uses 768 bytes                                                    ; MAP    equ 64768            ; properties map buffer.
                                                                                                                              ;                                       24 rows 32 chars -> 768
DF00                  ENDMAP  equ     $df00                                                   ; end of MAP
                      ;Font           equ     $df00                                                   ; df00-e1ff - game fonts (768 bytes )
E200                  shift0  equ     $e200                                                   ; e200-e5ff - Preshifted tables (4 x 256)
E600                  ENDXXX  equ     $e600                                                   ; *must* be $e600 for graphics screen                                                                   
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Variables put into 1st RAM PAGE to allow for direct addressing mode
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0000                  joyVal  equ     $00                                                     ; fcb   $00                                                                                     ; joy/Keybd reading                             ; joyval defb 0              ; joystick reading.
0001                  frmNo           equ     $01                                                     ; fcb   $00                                                                                     ; selected frame                                        ; frmno  defb 0              ; selected frame.
0002                  loopA           equ     $02                                                     ; fcb   $00                                                                                     ; variable counterA                             ; loopa  equ 23681           ; loop counter system variable.
0003                  loopB           equ     $03                                                     ; fcb $00                                                                                       ; loopb  equ 23728            ; loop counter system variable.
0004                  llopC           equ     $04                                                     ; fcb $00                                                                                       ; loopc  equ 23729            ; loop counter system variable.
0005                  varA            equ     $05                                                     ; fcb   $00                                                                                     ; variable                                                      ; vara   defb 0              ; general-purpose variable.
0006                  varB            equ     $06                                                     ; fcb $00                                                                                       ; varb   defb 0               ; general-purpose variable.
0007                  varC            equ     $07                                                     ; fcb   $00                                                                                     ; variable                                                      ; varc   defb 0              ; general-purpose variable.
0008                  varD            equ     $08                                                     ; fcb   $00                                                                                     ; variable                                                      ; vard   defb 0              ; general-purpose variable.
0009                  varE            equ     $09                                                     ; fcb   $00                                                                                     ; variable                                                      ; vare   defb 0              ; general-purpose variable.
000A                  varF            equ     $0a                                                     ; fcb   $00                                                                                     ; variable                                                      ; varf   defb 0              ; general-purpose variable.
000B                  varG            equ     $0b                                                     ; fcb   $00                                                                                     ; variable                                                      ; varg   defb 0              ; general-purpose variable.
000C                  varH            equ     $0c                                                     ; fcb   $00                                                                                     ; variable                                                      ; varh   defb 0              ; general-purpose variable.
000D                  varI            equ     $0d                                                     ; fcb   $00                                                                                     ; variable                                                      ; vari   defb 0              ; general-purpose variable.
000E                  varJ            equ     $0e                                                     ; fcb   $00                                                                                     ; varj   defb 0               ; general-purpose variable.
000F                  varK            equ     $0f                                                     ; fcb   $00                                                                                     ; number of crystals                            ; vark   defb 0              ; general-purpose variable.
0010                  varL            equ     $10                                                     ; fcb   $00                                                                                     ; variable                                                      ; varl   defb 0              ; general-purpose variable.
0011                  varM            equ     $11                                                     ; fcb $00                                                                                       ; varm   defb 0               ; general-purpose variable.
0012                  varN            equ     $12                                                     ; fcb   $00                                                                                     ; varn   defb 0               ; general-purpose variable.
0013                  varO            equ     $13                                                     ; fcb   $00                                                                                     ; variable                                                      ; varo   defb 0              ; general-purpose variable.
0014                  varP            equ     $14                                                     ; fcb   $00                                                                                     ; variable                                                      ; varp   defb 0              ; general-purpose variable.
0015                  varQ            equ     $15                                                     ; fcb   $00                                                                                     ; varq   defb 0               ; general-purpose variable.
0016                  varR            equ     $16                                                     ; fcb   $00                                                                                     ; varr   defb 0               ; general-purpose variable.
0017                  varS            equ     $17                                                     ; fcb $00                                                                                       ; vars   defb 0               ; general-purpose variable.
0018                  varT            equ     $18                                                     ; fcb   $00                                                                                     ; vart   defb 0               ; general-purpose variable.
0019                  varU            equ     $19                                                     ; fcb   $00                                                                                     ; varu   defb 0               ; general-purpose variable.
001A                  varV            equ     $1a                                                     ; fcb   $00                                                                                     ; varv   defb 0               ; general-purpose variable.
001B                  varW            equ     $1b                                                     ; fcb   $00                                                                                     ; varw   defb 0               ; general-purpose variable.
001C                  varZ            equ     $1c                                                     ; fcb   $00                                                                                     ; varz   defb 0               ; general-purpose variable.
001D                  contrl  equ     $1d                                                     ; fcb   $00                                                                                     ; control, 0=KBd, 1=JoyStck     ; contrl defb 0              ; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
001E                  charX           equ     $1e                                                     ; fcb   $00                                                                     ; cursor X position.                            ; charx  defb 0              ; cursor x position.
001F                  charY           equ     $1f                                                     ; fcb   $00                                                                     ; cursor Y position.                            ; chary  defb 0              ; cursor y position.
0020                  clock           equ     $20                                                     ; fcb   $00                                                                                     ; last clock value read                 ; clock  defb 0              ; last clock reading.
0021                  nexLev  equ     $21                                                     ; fcb   $00                                                                     ; next level flag.                              ; nexlev defb 0              ; next level flag.
0022                  restFl  equ     $22                                                     ; fcb   $00                                                                     ; restart screen flag                   ; restfl defb 0              ; restart screen flag.
0023                  deadF           equ     $23                                                     ; fcb   $00                                                             ; dead flag.                                            ; deadf  defb 0              ; dead flag.
0024                  gamWon  equ     $24                                                     ; fcb   $00                                                                                     ; game won flag.                                        ; gamwon defb 0              ; game won flag.
0025                  dispX           equ     $25                                                     ; fcb   $00                                                                                     ; screen X position.                            ; dispx  defb 0              ; cursor x position.
0026                  dispY           equ     $26                                                     ; fcb   $00                                                                                     ; screen Y position.                            ; dispy  defb 0              ; cursor y position.
0027                  bWid            equ     $27                                                     ; fcb   $00                                                                                     ; box/menu width.                                       ; bwid   defb 0              ; box/menu width.
0028                  bLen            equ     $28                                                     ; fcb   $00                                                                                     ; box/menu height                                       ; blen   defb 0              ; box/menu height.
0029                  bTop            equ     $29                                                     ; fcb   $00                                                                                     ; box coordinates                                       ; btop   defb 0              ; box coordinates.
002A                  bLft            equ     $2a                                                     ; fcb   $00                                                                                     ; box/menu left                                 ; blft   defb 0
002B                  sndTyp  equ     $2b                                                     ; fcb   $00                                                                                     ; type of sound to be produced; sndtyp defb 0
002C                  comByt  equ     $2c                                                     ; fcb   $00                                                                                     ; byte type compressed                  ; combyt defb 0              ; byte type compressed.
002D                  comCnt  equ     $2d                                                     ; fcb   $00                                                                                     ; compression counter                   ; comcnt defb 0              ; compression counter.
002E                  subUnit equ     $2e                                                     ; fcb   $00                                                                                     ; value to be subtracted
002F                  cocoFlg equ     $2f                                                     ; fcb   $00                                                                                     ; CoCo machine flag
0030                  scanOff equ     $30                                                     ; fcb   $00                                                                                     ; offset to add to pointer while scanning keyboard
0031                  seed            equ     $31                                                     ; fcb $00                                                                                       ; seed   defb 0                 ; seed for random numbers.
0032                  seed3           equ     $32                                                     ; fcb $00                                                                                       ; seed3  defb 0
0033                  colPatt equ     $33                                                     ; fcb   $00
0034                  sprShft equ     $34                                                     ; fcb $00
0035                  readVar equ     $35                                                     ; fcb $00
0036                  gPalet  equ     $36                                                     ; fcb $00                                                                                       ; graphic palette (0 - 255)
0037                  prtMod  equ     $37                                                     ; fcb   $00                                                                                     ; print mode, 0 = std, 1 = double-height.       ; prtmod defb 0            ; print mode, 0 = standard, 1 = double-height.
0038                  NUMVAR  equ     prtMod+1
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
0050                  grBase  equ     $50                                                     ; fdb   $0000                                                                                   ; graphics (posx, posy)                 ; grbase defw 15360          ; graphics base address.
0052                  pbPtr           equ     $52                                                     ; fdb   $0000                                                                                   ; Add a new variable putblock pointer           ; pbptr    = $96            
0054                  tmp             equ     $54                                                     ; fdb   $0000                                                                                   ; used in Adventure mode
0056                  ogPtr           equ     $56                                                     ; fdb   $0000                                                                                   ; pointer to sprite table               ; ogptr  defw 0              ; original sprite pointer.
0058                  fontPtr equ     $58                                                     ; fdb   $0000                                                                                   ; pointer to font table - (23606) in ZX-Spectrum
005A                  spPtr           equ     $5a                                                     ; fdb $0000     - spawned sprite pointer                ; spptr  defw 0              ; spawned sprite pointer.
005C                  skPtr           equ     $5c                                                     ; fdb   $0000                                                                                   ; skptr  defw 0              ; search pointer.
005E                  bufAddr equ     $5e                                                     ; fdb $0000 - new sprites routine buffer address
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;       *** THESE ARE ASSIGNED A VALUE IN INITIALIZATION ROUTINE ***
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Pixel versions of wintop, winlft, winhgt, winwid.
006A                  wnTopX  equ     $6a                                                     ; fcb (8 * WINDOWTOP)                                                                                                                                   ; wntopx defb (8 * WINDOWTOP)
006B                  wnLftX  equ     $6b                                                     ; fcb (8 * WINDOWLFT)                                                                                                                                   ; wnlftx defb (8 * WINDOWLFT)
006C                  wnBotX  equ     $6c                                                     ; fcb ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)                                                                  ; wnbotx defb ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
006D                  wnRgtX  equ     $6d                                                     ; fcb ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)                                                                  ; wnrgtx defb ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)
006E                  scNo            equ     $6e                                                     ; fcb   $00                                                     ; present screen number                                                 ; scno   defb 0              ; present screen number.
006F                  varOpt  equ     $6f                                                     ; fcb   $ff                                                     ; last option chosen from menu                          ; varopt defb 255            ; last option chosen from menu.
0070                  numLif  equ     $70                                                     ; fcb   $03                                                     ; number of lives                                                                       ; numlif defb 3              ; number of lives.
0071                  varRnd  equ     $71                                                     ; fcb 255                                                                                                                                                                       ; varrnd defb 255            ; last random number.
0072                  varObj  equ     $72                                                     ; fcb   254                                                     ; last object number                                                            ; varobj defb 254            ; last object number.
0073                  varBlk  equ     $73                                                     ; fcb   255                                                                                                                                                                     ; varblk defb 255            ; block type.
0074                  roomTb  equ     $74                                                     ; fcb   34                                                              ; room number                                                                           ; roomtb defb 34             ; room number.
0075                  txtBit  equ     $75                                                     ; fcb   128                                                                                                                                                                     ; txtbit defb 128            ; bit to write.
0076                  txtWid  equ     $76                                                     ; fcb   16                                                                                                                                                                              ; txtwid defb 16             ; width of ticker message.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ; Don't change the order of these four.  Menu routine relies on winlft following wintop.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
0077                  winTop  equ     $77                                                     ; fcb   WINDOWTOP                                       ; top of window                                                                 ; wintop defb WINDOWTOP      ; top of window.
0078                  winLft  equ     $78                                                     ; fcb   WINDOWLFT                                       ; left edge                                                                                     ; winlft defb WINDOWLFT      ; left edge.
0079                  winHgt  equ     $79                                                     ; fcb   WINDOWHGT                                       ; window height                                                                 ; winhgt defb WINDOWHGT      ; window height.
007A                  winWid  equ     $7a                                                     ; fcb   WINDOWWID                                       ; window width                                                                          ; winwid defb WINDOWWID      ; window width.
007B                  numOb           equ     $7b                                                     ; fcb   NUMOBJ                          ; number of objects in game.                                    ; numob  defb NUMOBJ         ; number of objects in game.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ; Make sure pointers are arranged in the same order as the data itself.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
007C                  frmPtr  equ     $7c                                                     ; fdb   frmLst                          ; sprite frames                                                                 ; frmptr defw frmlst         ; sprite frames.
007E                  blkPtr  equ     $7e                                                     ; fdb   chgFx                                                   ; block graphics                                                                        ; blkptr defw chgfx          ; block graphics.
                                                                                                                                                                                                                                                                                                                              ; colptr defw bcol           ; address of char colours.
0080                  proPtr  equ     $80                                                     ; fdb   bProp                                                   ; address of char properties                                    ; proptr defw bprop          ; address of char properties.
0082                  scrPtr  equ     $82                                                     ; fdb   scDat                                                   ; address of screens                                                            ; scrptr defw scdat          ; address of screens.
0084                  nmePtr  equ     $84                                                     ; fdb   nmeDat                          ; enemy start positions                                                 ; nmeptr defw nmedat         ; enemy start positions.
0086                  andeor  equ     $86                                                     ; fdb   $ff00                                                   ; values to use in AND - EOR
0088                  txtPos  equ     $88                                                     ; fdb   msgDat                                                                                                                                                          ; txtpos defw msgdat
008A                  zero16b equ     $8a                                                     ; *** system 16 bits zero
008C                  txtIni  equ     $8c                                                     ; fdb   msgDat                                                                                                                                                          ; txtini defw msgdat
008E                  txtScr  equ     $8e                                                     ; fdb   SCRBEG                                                                                                                                                          ; txtscr defw 16406
0090                  scr_l           equ     $90                                                     ; fdb   $0000
0092                  scr_r           equ     $92                                                     ; fdb   $0000
0094                  scr_Txt equ     $94                                                     ; fdb   $0000
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0097                  dNotUs  equ     $97                                                     ; *** used for debouncing
0098                  dNotUz  equ     $98                                                     ; *** the keyboard using jsr [$A000]
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
00A0                  reg_AF  equ     $a0                                                     ; pseudo AF'($a0-a1)
00A0                  reg_A           equ     reg_AF                                          ; pseudo A' ($a0)
00A1                  reg_F           equ     reg_AF+1                                                ; pseudo F' ($a1)
00A2                  reg_BC  equ     $a2                                                     ; pseudo BC ($a2-a3)
00A2                  reg_B           equ     reg_BC                                          ; 1st byte of BC
00A3                  reg_C           equ     reg_BC+1                                                ; 2nd byte of BC
00A4                  reg_DE  equ   $a4                                               ; pseudo DE ($a4-a5)
00A4                  reg_D           equ     reg_DE                                          ; 1st byte of DE
00A5                  reg_E           equ     reg_DE+1                                                ; 2nd byte of DE
00A6                  reg_HL  equ     $a6                                                     ; pseudo HL ($a6-a7)
00A6                  reg_H           equ     reg_HL                                          ; 1st byte of HL
00A7                  reg_L           equ     reg_HL+1                                                ; 2nd byte of HL
00A8                  reg_IX  equ     $a8                                                     ; pseudo IX ($a8-a9)
00AA                  reg_IY  equ     $aa                                                     ; pseudo IY ($aa-ab)
00AA                  reg_AX  equ     reg_IY                                          ; re-use pseudo reg
00AB                  reg_AY  equ     reg_IY+1                                                ; re-use pseudo reg
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
00B0                  esp_BC  equ     $b0                                                     ; mirror register for reg_BC ($b0-b1)
00B0                  esp_B           equ     esp_BC                                          ; mirror register for reg_B
00B1                  esp_C           equ     esp_BC+1                                                ; mirror register for reg_C
00B2                  esp_DE  equ     $b2                                                     ; mirror register for reg_DE ($b2-b3)
00B4                  esp_HL  equ     $b4                                                     ; mirror register for reg_HL ($b4-b5)
00B4                  esp_H           equ     esp_HL                                          ; mirror register for reg_H
00B5                  esp_L           equ     esp_HL+1                                                ; mirror register for reg_L
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Block characteristics.                                                                                                                                                        ; Block characteristics.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0001                  PLATFM equ 1                                            ; platform.                                                                                     ; PLATFM equ 1               ; platform.
0002                  WALL   equ PLATFM + 1                                   ; solid wall.                                                                           ; WALL   equ PLATFM + 1      ; solid wall.
0003                  LADDER equ WALL + 1                                     ; ladder.                                                                                       ; LADDER equ WALL + 1        ; ladder.
0004                  FODDER equ LADDER + 1                                   ; fodder block.                                                                 ; FODDER equ LADDER + 1      ; fodder block.
0005                  DEADLY equ FODDER + 1                                   ; deadly block.                                                                 ; DEADLY equ FODDER + 1      ; deadly block.
0006                  CUSTOM equ DEADLY + 1                                   ; custom block.                                                                 ; CUSTOM equ DEADLY + 1      ; custom block.
0007                  WATER  equ CUSTOM + 1                                   ; water block.                                                                          ; WATER  equ CUSTOM + 1      ; water block.
0008                  COLECT equ WATER + 1                                    ; collectable block.                                                            ; COLECT equ WATER + 1       ; collectable block.
0009                  NUMTYP equ COLECT + 1                                   ; number of types.                                                              ; NUMTYP equ COLECT + 1      ; number of types.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Sprites                                                                                                                                                                                               ; Sprites.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF BFLAG
                      SPR_HGT equ     24
                      SPR_WID equ     16
                      NUMSPR  equ     8                                       ; number of sprites                                                             ; NUMSPR equ 12              ; number of sprites.
                              ELSE
0010                  SPR_HGT equ     16
0010                  SPR_WID equ     16
000C                  NUMSPR  equ     12                                      ; number of sprites                                                             ; NUMSPR equ 12              ; number of sprites.
                              ENDIF
                      
0011                  TABSIZ  equ     17                                      ; size of each entry                                                            ; TABSIZ equ 17              ; size of each entry.
00CC                  SPRBUF  equ     NUMSPR * TABSIZ                         ; size of entire table                                                  ; SPRBUF equ NUMSPR * TABSIZ ; size of entire table.
0004                  NMESIZ  equ     4                                       ; bytes stored in nmetab for each sprite        ; NMESIZ equ 4               ; bytes stored in nmetab for each sprite.
0008                  Xval            equ     8                                                               ; new x coordinate of sprite                                    ; X      equ 8               ; new x coordinate of sprite.
0009                  Yval            equ     Xval+1                                          ; new y coordinate of sprite                                    ; Y      equ X + 1           ; new y coordinate of sprite.
0005                  PAM1ST  equ     5                                       ; first sprite parameter, old x (ix+5)          ; PAM1ST equ 5               ; first sprite parameter, old x (ix+5).
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Particle engine                                                                                                                                                                               ; Particle engine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0037                  NUMSHR  equ     55                                                              ; pieces of shrapnel.                                                   ; NUMSHR equ 55              ; pieces of shrapnel.
0006                  SHRSIZ  equ     6                                                               ; bytes per particle.                                                   ; SHRSIZ equ 6               ; bytes per particle.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                              ; Game starts here.  No reason why screen data couldn't go between start and contrl to put them in
                                                                                                                              ; contended RAM, leaving the code and rest of the game in uncontended memory at 32768 and beyond.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0E00                                          org     $0e00                                                   ; make it CoCo compatible                                               ;                org 32000
0E00  1A50            Start           orcc    #$50                                                    ; disable interrupts                                                            ; start  equ $
0E02  BD1DA9                                  jsr     SwMap1                                          ; go MAP1 to access 64K of RAM
0E05  BD1ED5                                  jsr   Set6309                                           ; set native mode if a HD6309 is found
0E08  10CE03D6        NewGame lds     #$03d6                                          ; set stack to end of Buffer for List           ; Set up the font.
0E0C  8E6367                                  ldx     #font-256                                       ; point to font table (-256)                                    ;                ld hl,font-256      ; address of font.
0E0F  9F58                                    stx     <fontPtr                                                ; save into variable                                                            ;                ld (23606),hl       ; set up game font.
0E11  BD1E64                                  jsr     SetVars                                         ; set initial values for some variables
0E14  7E10CF                                  jmp     Game                                                    ; start the game                                                                        ;                jp game             ; start the game.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Assorted game routines which can go in contended memory.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Modify for inventory                                                                                                                                                          ; Modify for inventory.
                      ; received message number in regA
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF MFLAG
0E17                  MInve           
                              IF GFLAG
                                              ldx     #$ffaa                                          ; yellow over blue for list, blue on yellow for selected choice
                                              stx     <andeor
                              ENDIF
0E17  8E0FAC                                  ldx     #InvDis                                         ; selfmodify                                                                            ; minve  ld hl,invdis        ; routine address.
0E1A  BF0EB1                                  stx     Mod0+1                                          ; some                                                                                          ;                ld (mod0+1),hl      ; set up menu routine.
0E1D  BF0E50                                  stx     Mod2+1                                          ; points                                                                                                ;                ld (mod2+1),hl      ; set up count routine.
0E20  8E0FC0                                  ldx     #FOpt                                                   ; of                                                                                                    ;                ld hl,fopt          ; find option from available objects.
0E23  BF0F38                                  stx     Mod1+1                                          ; program                                                                                       ;                ld (mod1+1),hl      ; set up routine.
0E26  200F                                    bra     DBox                                                    ; show data                                                                                     ;                jr dbox             ; do menu routine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Modify for menu.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; converted for TESTMENU
0E28  8E1685          MMenu           ldx     #Always                                                                                                                                                         ; mmenu  ld hl,always        ; routine address.
0E2B  BF0EB1                                  stx     Mod0+1                                                                                                                                                          ;                ld (mod0+1),hl      ; set up routine.
0E2E  BF0E50                                  stx     Mod2+1                                                                                                                                                          ;                ld (mod2+1),hl      ; set up count routine.
0E31  8E0F5F                                  ldx     #FStd                                                                                                                                                                   ;                ld hl,fstd          ; standard option selection.
0E34  BF0F38                                  stx     Mod1+1                                                                                                                                                          ;                ld (mod1+1),hl      ; set up routine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drop through into box routine                                                                                                                                 ; Drop through into box routine.
                      ; Work out size of box for message or menu                                                                                                      ; Work out size of box for message or menu.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; ;dbox   ld hl,nummsg        ; total messages.
                                                                                                                                                                                                                                              ; ;       cp (hl)             ; does this one exist?
                                                                                                                                                                                                                                              ; ;       ret nc              ; no, nothing to display.
0E37  8E6367          DBox            ldx     #font-256                                       ; ensure
0E3A  9F58                                    stx     <fontPtr                                                ; font access
0E3C  8E273E                                  ldx     #msgDat                                         ; point to messaqes                                                             ; dbox   ld hl,msgdat        ; pointer to messages.
0E3F  9FA6                                    stx     <reg_HL                                         ; put into pseudoreg
0E41  BD18F4                                  jsr     GetWrd                                          ; point to text for that message                                ;                call getwrd         ; get message number.
0E44  3410                                    pshs    x                                                               ; save pointer to that message                          ;                push hl             ; store pointer to message.
0E46  CC0100                                  ldd     #$0100                                          ; height and max width                                                  ;                ld d,1              ; height.
0E49  DDA4                                    std     <reg_DE                                         ; into pseudoreg                                                                        ;                xor a               ; start at object zero.
0E4B  D72C                                    stb     <comByt                                         ; first object (zero)                                                   ;                ld (combyt),a       ; store number of object in combyt.
                                                                                                                                                                                                                                              ;                ld e,a              ; maximum width.
0E4D  0FA2            DBox5           clr     <reg_B                                          ; clear width counter                                                   ; dbox5  ld b,0              ; this line's width.
0E4F  BD1685          Mod2            jsr     Always                                          ; selfmodified code (calls InvDis)                      ; mod2   call always         ; item in player's possession?
0E52  2602                                    bne     DBox6                                                   ; not in pocket? skip next                                              ;                jr nz,dbox6         ; not in inventory, skip this line.
0E54  0CA4                                    inc     <reg_D                                          ; add to list                                                                           ;                inc d               ; add to tally.
0E56  A680            DBox6           lda     ,x+                                                     ; get a char, point to next                                     ; dbox6  ld a,(hl)           ; get character.
                                                                                                                                                                                                                                              ;                inc hl              ; next character.
0E58  812C                                    cmpa    #','                                                    ; is it ','?                                                                            ;                cp ','              ; reached end of line?
0E5A  270B                                    beq     DBox3                                                   ; yes, skip section                                                             ;                jr z,dbox3          ; yes.
0E5C  810D                                    cmpa    #13                                                     ; is it enter?                                                                          ;                cp 13               ; reached end of line?
0E5E  2707                                    beq     DBox3                                                   ; skip two                                                                                      ;                jr z,dbox3          ; yes.
0E60  0CA2                                    inc     <reg_B                                          ; increment width counter                                               ;                inc b               ; add to this line's width.
0E62  4D                                      tsta                                                                    ; test read char                                                                        ;                and a               ; end of message?
0E63  2B0E                                    bmi     DBox4                                                   ; if end of message, skip section                       ;                jp m,dbox4          ; yes, end count.
0E65  20EF                                    bra     DBox6                                                   ; loop for next char                                                            ;                jr dbox6            ; repeat until we find the end.
0E67  96A5            DBox3           lda     <reg_E                                          ; get max width                                                                 ; dbox3  ld a,e              ; maximum line width.
0E69  91A2                                    cmpa    <reg_B                                          ; is current width greater?                                     ;                cp b                ; have we exceeded longest so far?
0E6B  24E0                                    bcc     DBox5                                                   ; no, keep on looking                                                   ;                jr nc,dbox5         ; no, carry on looking.
0E6D  D6A2                                    ldb     <reg_B                                          ; update
0E6F  D7A5                                    stb     <reg_E                                          ; max width                                                                                     ;                ld e,b              ; make this the widest so far.
0E71  20DA                                    bra     DBox5                                                   ; loop for next item                                                            ;                jr dbox5            ; keep looking.
0E73  96A5            DBox4           lda     <reg_E                                          ; get max width                                                                 ; dbox4  ld a,e              ; maximum line width.
0E75  91A2                                    cmpa    <reg_B                                          ; is curent width greater?                                              ;                cp b                ; have we exceeded longest so far?
0E77  2404                                    bcc     DBox8                                                   ; no, skip update                                                                       ;                jr nc,dbox8         ; no, carry on looking.
0E79  D6A2                                    ldb     <reg_B                                          ; update
0E7B  D7A5                                    stb     <reg_E                                          ; max width                                                                                     ;                ld e,b              ; final line is the longest so far.
0E7D  0AA4            DBox8           dec     <reg_D                                          ; decrement number of items found                       ; dbox8  dec d               ; decrement items found.
0E7F  102700F8                                lbeq    DBox15                                          ; if zero exit                                                                          ;                jp z,dbox15         ; total was zero.
0E83  96A5                                    lda     <reg_E                                          ; get max width                                                                 ;                ld a,e              ; longest line.
                                                                                                                                                                                                                                              ;                and a               ; was it zero?
0E85  102700F2                                lbeq    DBox15                                          ; if zero exit                                                                          ;                jp z,dbox15         ; total was zero.
0E89  DCA4                                    ldd     <reg_DE                                         ; get height and width                                                  ;                ld (bwid),de        ; set up size.
0E8B  1E89                                    exg     a,b                                                     ; invert positions
0E8D  DD27                                    std     <bWid                                                   ; update bWid and bLen (height) 
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; That's set up our box size                                                                                                                                            ; That's set up our box size.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0E8F  9679                                    lda     <winHgt                                         ; get window height                                                             ;                ld a,(winhgt)       ; window height in characters.
0E91  90A4                                    suba    <reg_D                                          ; subtract box height                                                   ;                sub d               ; subtract height of box.
0E93  46                                      rora                                                                    ; divide by 2                                                                           ;                rra                 ; divide by 2.
0E94  8E0077                                  ldx     #winTop                                         ; point to window top edge                                              ;                ld hl,wintop        ; top edge of window.
0E97  AB84                                    adda    ,x                                                              ; add displacement                                                              ;                add a,(hl)          ; add displacement.
0E99  9729                                    sta     <bTop                                                   ; save as box top                                                                       ;                ld (btop),a         ; set up box top.
0E9B  967A                                    lda     <winWid                                         ; get window width                                                              ;                ld a,(winwid)       ; window width in characters.
0E9D  90A5                                    suba    <reg_E                                          ; subtract box width                                                            ;                sub e               ; subtract box width.
0E9F  46                                      rora                                                                    ; divide by 2                                                                           ;                rra                 ; divide by 2.
0EA0  3001                                    leax    1,x                                                     ; point to window left edge                                     ;                inc hl              ; left edge of window.
0EA2  AB84                                    adda    ,x                                                              ; add displacement                                                              ;                add a,(hl)          ; add displacement.
0EA4  972A                                    sta     <bLft                                                   ; save as box left                                                              ;                ld (blft),a         ; box left.
                                                                                                                                                                                                                                              ;                ld hl,(23606)       ; font.
                                                                                                                                                                                                                                              ;                ld (grbase),hl      ; set up for text display.
0EA6  3510                                    puls    x                                                               ; get pointer to text                                                   ;                pop hl              ; restore message pointer.
0EA8  9629                                    lda     <bTop                                                   ; set box top                                                                           ;                ld a,(btop)         ; box top.
0EAA  9726                                    sta     <dispY                                          ; as Y coordinate                                                                       ;                ld (dispx),a        ; set display coordinate.
                                                                                                                                                                                                                                              ;                xor a               ; start at object zero.
0EAC  0F2C                                    clr     <comByt                                         ; start at object zero                                                  ;                ld (combyt),a       ; store number of object in combyt.
0EAE  962C            DBox2           lda     <comByt                                         ; get object number                                                             ; dbox2  ld a,(combyt)       ; get object number.
0EB0  BD1685          Mod0            jsr     Always                                          ; selfmodified code (calls InvDis)                      ; mod0   call always         ; check inventory for display.
0EB3  102600B1                                lbne    DBox13                                          ; object not in Inv, go for next one            ;                jp nz,dbox13        ; not in inventory, skip this line.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0EB7  962A                                    lda     <bLft                                                   ; get box left                                                                          ;                ld a,(blft)         ; box left.
0EB9  9725                                    sta     <dispX                                          ; set as X coordinate                                                   ;                ld (dispy),a        ; set left display position.
0EBB  9627                                    lda     <bWid                                                   ; get box width                                                                 ;                ld a,(bwid)         ; box width.
0EBD  97A2                                    sta     <reg_B                                          ; put in reg_B                                                                          ;                ld b,a              ; store width.
0EBF  A684            DBox0           lda     ,x                                                              ; get a char                                                                            ; dbox0  ld a,(hl)           ; get character.
0EC1  812C                                    cmpa    #','                                                    ; is it ','?                                                                            ;                cp ','              ; end of line?
0EC3  273F                                    beq     DBox1                                                   ; yes, skip it                                                                          ;                jr z,dbox1          ; yes, next one.
0EC5  810D                                    cmpa    #13                                                     ; is it Enter?                                                                          ;                cp 13               ; end of option?
0EC7  273B                                    beq     DBox1                                                   ; go for next one                                                                       ;                jr z,dbox1          ; yes, on to next.
0EC9  0AA2                                    dec     <reg_B                                          ; decrement width counter                                               ;                dec b               ; one less to display.
0ECB  847F                                    anda    #127                                                    ; remove bit7                                                                           ;                and 127             ; remove terminator.
0ECD  DEA2                                    ldu     <reg_BC                                         ; get pseudoreg                                                                 ;                push bc             ; store characters remaining.
0ECF  3450                                    pshs    x,u                                                     ; push onto stack                                                                       ;                push hl             ; store address on stack.
                                                                                                                                                                                                                                              ;                push af             ; store character.
                                                                                                                              ; no                                                                                                    ;                call gaadd          ; get attribute address.
                                                                                                                              ; colours                                                                                       ;                ld a,(23693)        ; current colour.
                                                                                                                              ; by now                                                                                                ;                ld (hl),a           ; set attribute.
                                                                                                                                                                                                                                              ;                pop af              ; restore character.
0ED1  BD14E8                                  jsr     PChr0                                                   ; show char as Text (from fonts)                                ;                call pchr           ; display on screen.
0ED4  3550                                    puls    x,u                                                     ; restore pointers                                                              ;                pop hl              ; retrieve address of next character.
0ED6  DFA2                                    stu     <reg_BC                                         ; into pseudoreg                                                                        ;                pop bc              ; chars left for this line.
0ED8  A680                                    lda     ,x+                                                     ; get a char, point to next                                     ;                ld a,(hl)           ; get character.
                                                                                                                                                                                                                                              ;                inc hl              ; next character.
0EDA  8180                                    cmpa    #128                                                    ; is end of message?                                                            ;                cp 128              ; end of message?
0EDC  242F                                    bcc     DBox7                                                   ; yes, exit message printing                                    ;                jp nc,dbox7         ; yes, job done.
0EDE  96A2                                    lda     <reg_B                                          ; get remaining chars number                                    ;                ld a,b              ; chars remaining.
                                                                                                                                                                                                                                              ;                and a               ; are any left?
0EE0  26DD                                    bne     DBox0                                                   ; not yet done? loopback                                                ;                jr nz,dbox0         ; yes, continue.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Reached limit of characters per line                                                                                                                  ; Reached limit of characters per line.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0EE2  A680            DBox9           lda     ,x+                                                     ; get a char, point to next                                     ; dbox9  ld a,(hl)           ; get character.
                                                                                                                                                                                                                                              ;                inc hl              ; next one.
0EE4  812C                                    cmpa    #','                                                    ; is it ','?                                                                            ;                cp ','              ; another line?
0EE6  2721                                    beq     DBox10                                          ; yes, go next line                                                             ;                jr z,dbox10         ; yes, do next line.
0EE8  810D                                    cmpa    #13                                                     ; is it Enter?                                                                          ;                cp 13               ; another line?
0EEA  271D                                    beq     DBox10                                          ; yes, go next line                                                             ;                jr z,dbox10         ; yes, on to next.
0EEC  8180                                    cmpa    #128                                                    ; is end of message?                                                            ;                cp 128              ; end of message?
0EEE  2424                                    bcc     DBox11                                          ; yes, finish mesage                                                            ;                jr nc,dbox11        ; yes, finish message.
0EF0  20F0                                    bra     DBox9                                                   ; loopback for next char                                                ;                jr dbox9
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Fill box to end of line                                                                                                                                                       ; Fill box to end of line.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0EF2  DEA2            DBoxf           ldu     <reg_BC                                         ; get pseudoreg BC                                                              ; dboxf  push hl             ; store address on stack.
0EF4  3450                                    pshs    x,u                                                     ; push onto stack                                                                       ;                push bc             ; store characters remaining.
                                                                                                                                                                                                                                              ;                call gaadd          ; get attribute address.
                                                                                                                                                                                                                                              ;                ld a,(23693)        ; current colour.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set attribute.
0EF6  8620                                    lda     #32                                                     ; get a 'space char'                                                            ;                ld a,32             ; space character.
0EF8  BD14E8                                  jsr     PChr0                                                   ; Show char                                                                                     ;                call pchr           ; display character.
0EFB  3550                                    puls    x,u                                                     ; restore pointers                                                              ;                pop bc              ; retrieve character count.
0EFD  DFA2                                    stu     <reg_BC                                         ; into peuodreg                                                                 ;                pop hl              ; retrieve address of next character.
0EFF  0AA2                                    dec     <reg_B                                          ; decrement line chars pending counter
0F01  26EF                                    bne     DBoxf                                                   ; not yet done? loopback                                                ;                djnz dboxf          ; repeat for remaining chars on line.
0F03  39                                      rts                                                                     ; return                                                                                                ;                ret
0F04  3001            DBox1           leax    1,x                                                     ; skip read char                                                                        ; dbox1  inc hl              ; skip character.
0F06  BD0EF2                                  jsr     DBoxf                                                   ; fill box till end of right side                       ;                call dboxf          ; fill box out to right side.
0F09                  DBox10                                                                                                                                                                                                  ; dbox10 ld a,(dispx)        ; x coordinate.
                                                                                                                                                                                                                                              ;                inc a               ; down a line.
0F09  0C26                                    inc     <dispY                                          ; increment Y coordinate                                                ;                ld (dispx),a        ; next position.
0F0B  20A1                                    bra     DBox2                                                   ; go for next line                                                              ;                jp dbox2            ; next line.
0F0D  96A2            DBox7           lda     <reg_B                                          ; get remaining chars                                                   ; dbox7  ld a,b              ; chars remaining.
                                                                                                                                                                                                                                              ;                and a               ; are any left?
0F0F  2703                                    beq     DBox11                                          ; already done? skip next                                               ;                jr z,dbox11         ; no, nothing to draw.
0F11  BD0EF2                                  jsr     DBoxf                                                   ; fill line                                                                             ;                call dboxf          ; fill message to line.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drawn the box menu, now select option                                                                                                         ; Drawn the box menu, now select option.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0F14  9629            DBox11  lda     <bTop                                                   ; get box top                                                                           ; dbox11 ld a,(btop)         ; box top.
0F16  9726                                    sta     <dispY                                          ; put as Y coordinate                                                   ;                ld (dispx),a        ; set bar position.
0F18  BD102C          DBox14  jsr     VSync                                                   ; read joystick-keyboard
0F1B  9600                                    lda     <joyVal                                         ; get result
0F1D  845F                                    anda    #95                                                     ; anything pressed?                                                             ;                and 31              ; anything pressed?
0F1F  26F7                                    bne     DBox14                                          ; yes, debounce it                                                              ;                jr nz,dbox14        ; yes, debounce it.
0F21  BD0F7D                                  jsr     DBar                                                    ; draw bar                                                                                      ;                call dbar           ; draw bar.
0F24  BD102C          DBox12  jsr     VSync                                                   ; read joystick-keyboard
0F27  9600                                    lda     <joyVal                                         ; get result
0F29  8540                                    bita    #64                                                     ; is 'I' pressed?
0F2B  1026015D                                lbne    ReDraw                                          ; yes, exit inventory (do nothing)
0F2F  841C                                    anda    #28                                                     ; pressed Up-Down-Fire?                                                 ;                and 28              ; anything pressed?
0F31  27F1                                    beq     DBox12                                          ; no, wait for order                                                            ;                jr z,dbox12         ; no, nothing.
0F33  8410                                    anda    #16                                                     ; was it fire?                                                                          ;                and 16              ; fire button pressed?
0F35  2703                                    beq     1f                                                              ; no, verify moves U-D
0F37  7E0F5F          Mod1            jmp     FStd                                                    ; selfmodified code     (calls FOpt = exit)     ; mod1   jp nz,fstd          ; yes, job done.
0F3A  BD0F7D          1                       jsr     DBar                                                    ; delete bar                                                                            ;                call dbar           ; delete bar.
0F3D  9600                                    lda     <joyVal                                         ; get selected choice                                                   ;                ld a,(joyval)       ; joystick reading.
0F3F  8408                                    anda    #8                                                              ; was Up?                                                                                       ;                and 8               ; going up?
0F41  2612                                    bne     DBoxu                                                   ; yes, go Up                                                                            ;                jr nz,dboxu         ; yes, go up.
0F43  9626                                    lda     <dispY                                          ; get bar vertical position                                     ;                ld a,(dispx)        ; vertical position of bar.
0F45  4C                                      inca                                                                    ; look next one                                                                 ;                inc a               ; look down.
0F46  8E0029                                  ldx     #bTop                                                   ; point to box top                                                              ;                ld hl,btop          ; top of box.
0F49  A084                                    suba    ,x                                                              ; subtract                                                                                      ;                sub (hl)            ; find distance from top.
0F4B  301F                                    leax    -1,x                                                    ; point to bLen (height)                                                ;                dec hl              ; point to height.
0F4D  A184                                    cmpa    ,x                                                              ; are we at the end?                                                            ;                cp (hl)             ; are we at end?
0F4F  27C7                                    beq     DBox14                                          ; yes, discard command                                                  ;                jp z,dbox14         ; yes, go no further.
                                                                                                                                                                                                                                              ;                ld hl,dispx         ; coordinate.
0F51  0C26                                    inc     <dispY                                          ; move bar down                                                                 ;                inc (hl)            ; move bar.
0F53  20C3                                    bra     DBox14                                          ; loopback                                                                                      ;                jr dbox14           ; continue.
0F55  9626            DBoxu           lda     <dispY                                          ; get bar vertical position                                     ; dboxu  ld a,(dispx)        ; vertical position of bar.
                                                                                                                                                                                                                                              ;                ld hl,btop          ; top of box.
0F57  9129                                    cmpa    <bTop                                                   ; are we at top?                                                                        ;                cp (hl)             ; are we at the top?
0F59  27BD                                    beq     DBox14                                          ; yes, discard command                                                  ;                jp z,dbox14         ; yes, go no further.
                                                                                                                                                                                                                                              ;                ld hl,dispx         ; coordinate.
0F5B  0A26                                    dec     <dispY                                          ; move bar up                                                                           ;                dec (hl)            ; move bar.
0F5D  20B9                                    bra     DBox14                                          ; loopback                                                                                      ;                jr dbox14           ; continue.
0F5F  9626            FStd            lda     <dispY                                          ; get bar vertical position                                     ; fstd   ld a,(dispx)        ; bar position.
                                                                                                                                                                                                                                              ;                ld hl,btop          ; top of menu.
0F61  9029                                    suba    <bTop                                                   ; find selected option                                                  ;                sub (hl)            ; find selected option.
0F63  976F                                    sta     <varOpt                                         ; store into variable                                                   ;                ld (varopt),a       ; store the option.
0F65  160124                                  lbra    ReDraw                                          ; redraw screen                                                                                                         ;                jp redraw           ; redraw the screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Option not available.  Skip this line                                                                                                         ; Option not available.  Skip this line.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0F68  A680            DBox13  lda     ,x+                                                     ; get char, point to next                                               ; dbox13 ld a,(hl)           ; get character.
                                                                                                                                                                                                                                              ;                inc hl              ; next one.
0F6A  812C                                    cmpa    #','                                                    ; is it ','?                                                                            ;                cp ','              ; another line?
0F6C  1027FF3E                                lbeq    DBox2                                                   ; yes, go for next line                                                 ;                jp z,dbox2          ; yes, do next line.
0F70  810D                                    cmpa    #13                                                     ; is it Enter?                                                                          ;                cp 13               ; another line?
0F72  1027FF38                                lbeq    DBox2                                                   ; yes, go for next line                                                 ;                jp z,dbox2          ; yes, on to next line.
0F76  4D                                      tsta                                                                    ; end of message?                                                                       ;                and a               ; end of message?
0F77  2B9B                                    bmi     DBox11                                          ; yes, end of message                                                   ;                jp m,dbox11         ; yes, finish message.
0F79  20ED                                    bra     DBox13                                          ; loop for next char                                                            ;                jr dbox13
0F7B  3590            DBox15  puls    x,pc                                                    ; restore pointer and return                                    ; dbox15 pop hl              ; pop message pointer from the stack.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0F7D  962A            DBar            lda     <bLft                                                   ; get box left                                                                          ; dbar   ld a,(blft)         ; box left.
0F7F  9725                                    sta     <dispX                                          ; put as X coordinate                                                   ;                ld (dispy),a        ; set display coordinate.
0F81  BD1481                                  jsr     GPrad                                                   ; get printing address                                                  ;                call gprad          ; get printing address.
0F84  9E50                                    ldx     <grBase                                         ; get calculated pointer                                                ;                ex de,hl            ; flip into hl register pair.
0F86  9FA6                                    stx     <reg_HL                                         ; update pseudoreg
0F88  9627                                    lda     <bWid                                                   ; get box width                                                                 ;                ld a,(bwid)         ; box width.
0F8A  97A3                                    sta     <reg_C                                          ; store counter in pseudoreg                                    ;                ld c,a              ; loop counter in c.
0F8C  D6A6                                    ldb     <reg_H                                          ; get screen high address byte
0F8E  D7A4                                    stb     <reg_D                                          ; put in pseuroreg D                                                            ;                ld d,h              ; store screen address high byte.
0F90  C608            DBar1           ldb     #8                                                              ; pixels counter                                                                        ; dbar1  ld b,8              ; pixel height in b.
0F92  A684            DBar0           lda     ,x                                                              ; get a screen byte                                                             ; dbar0  ld a,(hl)           ; get screen byte.
0F94  43                                      coma                                                                    ; reverse all bits                                                              ;                cpl                 ; reverse all bits.
0F95  A784                                    sta     ,x                                                              ; update scrfeen                                                                        ;                ld (hl),a           ; write back to screen.
0F97  308820                                  leax    32,x                                                    ; point to next row down                                                ;                inc h               ; next line down.
0F9A  5A                                      decb                                                                    ; decrement counter
0F9B  26F5                                    bne     DBar0                                                   ; not zero? loopback                                                            ;                djnz dbar0          ; draw rest of character.
0F9D  9FA6                                    stx     <reg_HL                                         ; update pseudoreg HL
0F9F  D6A4                                    ldb     <reg_D                                          ; restore
0FA1  D7A6                                    stb     <reg_H                                          ; screen address                                                                        ;                ld h,d              ; rsetore screen address.
0FA3  0CA7                                    inc     <reg_L                                          ; one char right                                                                        ;                inc l               ; one char right.
0FA5  9EA6                                    ldx     <reg_HL                                         ; get screen pointer
0FA7  0AA3                                    dec     <reg_C                                          ; decrement counter                                                             ;                dec c               ; decrement character counter.
0FA9  26E5                                    bne     DBar1                                                   ; not done? same for whole line                         ;                jr nz,dbar1         ; repeat for whole line.
0FAB  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; called from DBox5 - Mod2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0FAC  DEA4            InvDis  ldu     <reg_DE                                         ; get pseudoreg DE (again)                                              ; invdis push hl             ; store message text pointer.
0FAE  3450                                    pshs    x,u                                                     ; push pointers                                                                 ;                push de             ; store de pair for line count.
                                                                                                                                                                                                                                              ;                ld hl,combyt        ; object number.
0FB0  962C                                    lda     <comByt                                         ; get object number                                                             ;                ld a,(hl)           ; get object number.
0FB2  0C2C                                    inc     <comByt                                         ; increment it (for next time)                          ;                inc (hl)            ; ready for next one.
0FB4  BD12A8                                  jsr     GotOb                                                   ; check we have the object (regA)                       ;                call gotob          ; check if we have object.
0FB7  1FA9                                    tfr     cc,b                                                    ; save result (flags)
0FB9  3550                                    puls    x,u                                                     ; restore pointers                                                              ;                pop de              ; retrieve de pair from stack.
0FBB  DFA4                                    stu     <reg_DE                                         ; put into pseudoreg                                                            ;                pop hl              ; retrieve text pointer.
0FBD  1F9A                                    tfr     b,cc                                                    ; set result flags
0FBF  39                                      rts                                                                     ; return                                                                                                ;                ret
                                                                                                                                                                                                                                              ; ;always xor a               ; set zero flag.
                                                                                                                                                                                                                                              ; ;       ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Find option selected                                                                                                                                                          ; Find option selected.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0FC0  9626            FOpt            lda     <dispY                                          ; get Y coordinate                                                              ; fopt   ld a,(dispx)
                                                                                                                                                                                                                                              ;                ld hl,btop          ; top of menu.
0FC2  9029                                    suba    <bTop                                                   ; subtract the one for the top element          ;                sub (hl)            ; find selected option.
0FC4  4C                                      inca                                                                    ; increment (0->1)                                                              ;                inc a               ; object 0 needs one iteration, 1 needs 2 and so on.
0FC5  97A2                                    sta     <reg_B                                          ; save in reg_B                                                                 ;                ld b,a              ; option selected in b register.
                                                                                                                                                                                                                                              ;                ld hl,combyt        ; object number.
0FC7  0F2C                                    clr     <comByt                                         ; point to first object                                                 ;                ld (hl),0           ; set to first item.
0FC9  DCA2            FOpt0           ldd     <reg_BC                                         ; get reg_BC
0FCB  3406                                    pshs    d                                                               ; save it to stack                                                              ; fopt0  push bc             ; store option counter in b register.
0FCD  8D10                                    bsr     FObj                                                    ; find next object in inventory                         ;                call fobj           ; find next object in inventory.
0FCF  3506                                    puls    d                                                               ; restore counter                                                                       ;                pop bc              ; restore option counter.
0FD1  DDA2                                    std     <reg_BC                                         ; to pseudoreg
0FD3  0AA2                                    dec     <reg_B                                          ; decrement counter
0FD5  26F2                                    bne     FOpt0                                                   ; not zero? loopback                                                            ;                djnz fopt0          ; repeat for relevant steps down the list.
0FD7  962C                                    lda     <comByt                                         ; get option                                                                            ;                ld a,(combyt)       ; get option.
0FD9  4A                                      deca                                                                    ; decrement                                                                                     ;                dec a               ; one less, due to where we increment combyt.
0FDA  976F                                    sta     <varOpt                                         ; store in variable (chosen object)                     ;                ld (varopt),a       ; store the option.
0FDC  1600AD                                  lbra    ReDraw                                          ; redraw screen                                                                 ;                jp redraw           ; redraw the screen.
                                                                                                                                                                                                                                              ; 
0FDF                  FObj                                                                                                                                                                                                            ; fobj   ld hl,combyt        ; object number.
0FDF  962C                                    lda     <comByt                                         ; get counter                                                                           ;                ld a,(hl)           ; get object number.
0FE1  0C2C                                    inc     <comByt                                         ; increment it                                                                          ;                inc (hl)            ; ready for next item.
0FE3  2705                                    beq     FOptEx                                          ; if zero, return                                                                       ;                ret z               ; in case we loop back to zero.
0FE5  BD12A8                                  jsr     GotOb                                                   ; verify if we hace this object                         ;                call gotob          ; do we have this item?
                                                                                                                                                                                                                                              ;                ret z               ; yes, it's on the list.
                                                                                                                                                                                                                                              ;                jr fobj             ; repeat until we find next item in pockets.
0FE8  26F5                                    bne     FObj                                                    ; no, next one. Optimizing jumps                                ;                jr fobj             ; repeat until we find next item in pockets.
0FEA  39              FOptEx  rts                                                                     ; return
                              ENDIF
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Wait for keypress.                                                                                                                                                                    ; Wait for keypress.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0FEB                  PrsKey                                                                                                                                                                                                  ; prskey call debkey         ; debounce key.
0FEB  BD102C                                  jsr     VSync                                                   ; synchronice with FS                                                   ; prsky0 call vsync          ; vertical synch.
0FEE  BD1DD7                                  jsr     ReadK                                                   ; read keyboard                                                                 ;                call 654            ; return keyboard state in e.
                                                                                                                                                                                                                                              ;                inc e               ; is it 255?
0FF1  27F8                                    beq     PrsKey                                          ; if no key, loopback                                                   ;                jr z,prsky0         ; yes, repeat until key pressed.
                                                                                                                              ; Debounce keypress.                                                                                                                                    ; Debounce keypress
                                                                                                                                                                                                                                              ; debkey call vsync          ; update scrolling, sounds etc.
                                                                                                                                                                                                                                              ;                call 654            ; d=shift, e=key.
                                                                                                                                                                                                                                              ;                inc e               ; is it 255?
                                                                                                                                                                                                                                              ;                jr nz,debkey        ; no - loop until key is released.
0FF3  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Delay routine                                                                                                                                                                         ; Delay routine.
                      ; register B contains de number of loops to be done
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0FF4  9EA8            Delay           ldx     <reg_IX                                         ; get pseudo register
0FF6  3410                                    pshs    x                                                               ; save onto stack
0FF8  3404            Delay1  pshs    b                                                               ; save counter                                                                          ; delay  push bc             ; store loop counter.
0FFA  BD102C                                  jsr     VSync                                                   ; wait for FS interrupt                                                 ;                call vsync          ; wait for interrupt.
0FFD  3504                                    puls    b                                                               ; restore counter                                                                       ;                pop bc              ; restore counter.
0FFF  5A                                      decb                                                                    ; decrement it                  
1000  26F6                                    bne     Delay1                                          ; not zero, loopback                                                            ;                djnz delay          ; repeat.
1002  3510                                    puls    x                                                               ; restore pseudo register
1004  9FA8                                    stx     <reg_IX                                         ; update it
1006  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Clear sprite table.                                                                                                                                                           ; Clear sprite table.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1007  8ED4D9          XSpr            ldx     #sprTab                                         ; point to sprites table                                                ; xspr   ld hl,sprtab        ; sprite table.
100A  C6DD                                    ldb     #SPRBUF+17                                      ; get table length plus spare sprite            ;                ld b,SPRBUF         ; length of table.
100C  86FF                                    lda     #255                                                    ; value to clean table                                                  ; xspr0  ld (hl),255         ; clear one byte.
100E  A780            XSpr0           sta     ,x+                                                     ; clean one byte                                                                        ;                inc hl              ; move to next byte.
1010  5A                                      decb                                                                    ; decrement counter
1011  26FB                                    bne     XSpr0                                                   ; not yet done? loopback                                                ;                djnz xspr0          ; repeat for rest of table.
1013  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; silenc call silen1         ; silence channel 1.
                      ;                                                                                                                                                                                                                       ;                call silen2         ; silence channel 2.
                      ;                                                                                                                                                                                                                       ;                call silen3         ; silence channel 3.
                      ;                                                                                                                                                                                                                       ;                jp plsnd            ; play all channels to switch them off.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Initialise all objects.                                                                                                                                                       ; Initialise all objects.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF OFLAG
1014  8E60E3          IniOb           ldx     #objDta+36                                      ; point to Object data table                                    ; iniob  ld ix,objdta        ; objects table.
1017  D67B                                    ldb     <numOb                                          ; number of objects                                                             ;                ld a,(numob)        ; number of objects in the game.
                                                                                                                                                                                                                                              ;                ld b,a              ; loop counter.
                                                                                                                                                                                                                                              ;                ld de,39            ; distance between objects.
1019  A684            IniOb0  lda     ,x                                                              ; start screen                                                                          ; iniob0 ld a,(ix+36)        ; start screen.
101B  A71D                                    sta     -3,x                                                    ; set start screen                                                              ;                ld (ix+33),a        ; set start screen.
101D  A601                                    lda     1,x                                                     ; get start X                                                                           ;                ld a,(ix+37)        ; find start x.
101F  A71E                                    sta     -2,x                                                    ; set start X                                                                           ;                ld (ix+34),a        ; set start x.
1021  A602                                    lda     2,x                                                     ; get initial Y                                                                 ;                ld a,(ix+38)        ; get initial y.
1023  A71F                                    sta     -1,x                                                    ; set it                                                                                                ;                ld (ix+35),a        ; set y coord.
1025  308827                                  leax    39,x                                                    ; point to next object                                                  ;                add ix,de           ; point to next object
1028  5A                                      decb                                                                    ; decrement counter
1029  26EE                                    bne     IniOb0                                          ; not yet done? loopback                                                ;                djnz iniob0         ; repeat.
102B  39                                      rts                                                                     ; return                                                                                                ;                ret
                              ENDIF
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Screen synchronisation.                                                                                                                                                       ; Screen synchronisation.
                      ;  - read joystick/keyboard                                                                                                                                             ;  - read joystick/keyboard
                      ;  - handle sound                                                                                                                                                                               ;  - handle sound
                      ;  - sync framerate with clock                                                                                                                                  ;  - sync framerate with clock
                      ;  - handle shrapnel                                                                                                                                                                    ;  - handle shrapnel
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
102C  BD177E          VSync           jsr     JoyKey                                          ; read joystick/keyboard                                                ; vsync  call joykey         ; read joystick/keyboard.
102F  962B                                    lda     <sndTyp                                         ; get sound type                                                                        ;                ld a,(sndtyp)       ; sound to play.
1031  2B35                                    bmi     VSync6                                          ; if negative go play white noise                       ;                and a               ; any sound?
1033  2723                                    beq     VSync1                                          ; if none, exit sound section                                   ;                jp z,vsync1         ; no.
1035  97A2                                    sta     <reg_B                                          ; save as outer loop                                                            ;                ld b,a              ; outer loop.
                                                                                                                                                                                                                                              ;                ld a,(23624)        ; border colour.
                                                                                                                                                                                                                                              ;                rra                 ; put border bits into d0, d1 and d2.
                                                                                                                                                                                                                                              ;                rra
1037  4F                                      clra                                                                    ; get min value for DAC (1st value)                     ;                rra
                                                                                                                                                                                                                                              ;                ld c,a              ; first value to write to speaker.
                                                                                                                                                                                                                                              ;                ld a,b              ; sound.
                                                                                                                                                                                                                                              ;                and a               ; test it.
                                                                                                                                                                                                                                              ;                jp m,vsync6         ; play white noise.
1038                  VSync2                                                                                                                                                                                                  ; vsync2 ld a,c            ; get speaker value.
1038  B7FF20                                  sta     $ff20                                                   ; send to DAC                                                                           ;                out (254),a         ; write to speaker.
103B  88FC                                    eora    #%11111100                                      ; invert value                                                                          ;                xor 248             ; toggle all except the border bits.
103D  D6A2                                    ldb     <reg_B                                          ; get loop counter                                                              ;                ld c,a              ; store value for next time.
103F  D7A4                                    stb     <reg_D                                          ; save in reg_D                                                                 ;                ld d,b              ; store loop counter.
1041  F60113          VSync3  ldb     TIMER                                                   ; get current clock                                                             ; vsync3 ld hl,clock       ; previous clock setting.
1044  D120                                    cmpb    <clock                                          ; compare to previous clock value                       ;                ld a,(23672)        ; current clock setting.
1046  250C                                    blo     VSync4                                          ; if clock is greater exit loop (never) ;                cp (hl)             ; subtract last reading.
                                                                                                                              ; was bne, later brn to avoid effect
1048  0AA2                                    dec     <reg_B                                          ; decrement inner loop                                                  ;                jp nz,vsync4        ; yes, no more processing please.
104A  26F5                                    bne     VSync3                                          ; not zero? loopback                                                            ;                djnz vsync3         ; loop.
104C  D6A4                                    ldb     <reg_D                                          ; get outer loop counter
104E  D7A2                                    stb     <reg_B                                          ; restore in reg_B                                                              ;                ld b,d              ; restore loop counter.
1050  0AA2                                    dec     <reg_B                                          ; decrment outer loop
1052  26E4                                    bne     VSync2                                          ; not zero? continue sound                                              ;                djnz vsync2         ; continue noise.
1054  96A4            VSync4  lda     <reg_D                                          ; get last used outer counter                                   ; vsync4 ld a,d            ; where we got to.
1056  972B            VSynca  sta     <sndTyp                                         ; save for next time                                                            ; vsynca ld (sndtyp),a     ; remember for next time.
1058                  VSync1                                                                                                                                                                                                  ; vsync1 ld a,(23672)      ; clock low.
                                                                                                                                                                                                                                              ;                rra                 ; rotate bit into carry.
1058  BD1065                                  jsr     VSync5                                          ; go for shrapnel                                                                       ;                call c,vsync5       ; time to play sound and do shrapnel/ticker stuff.
                                                                                                                                                                                                                                              ;                ld hl,clock         ; last clock reading.
105B  B60113          VSync0  lda     TIMER                                                   ; get actual timer                                                              ; vsync0 ld a,(23672)      ; current clock reading.
105E  9120                                    cmpa    <clock                                          ; compare to last read                                                  ;                cp (hl)             ; are they the same?
1060  27F9                                    beq     VSync0                                          ; yes, wait until clock changes                         ;                jr z,vsync0         ; yes, wait until clock changes.
1062  9720                                    sta     <clock                                          ; update last read value                                                ;                ld (hl),a           ; set new clock reading.
1064  39                                      rts                                                                     ; return                                                                                                ;                ret
                                                                                                                                                                                                                                              ; ;vsync5 call plsnd       ; play sound.
1065  7E10C9          VSync5  jmp     ProShr                                          ; shrapnel and others                                                   ; vsync5 jp proshr         ; shrapnel and stuff.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Play white noise.                                                                                                                                                                     ; Play white noise.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1068  3404            VSync6  pshs    b                                                               ; save parameter                                                                        ; vsync6 ld a,b            ; 128 - 255.
106A  C07F                                    subb    #127                                                    ; convert to positive                                                   ;                sub 127
                                                                                                                                                                                                                                              ;                ld b,a
                                                                                                                                                                                                                                              ;                ld hl,clock         ; previous clock setting.
106C  BD175E          VSync7  jsr     Random                                          ; get a random number                                                   ; vsync7 ld a,r              ; get random speaker value.
                                                                                                                                                                                                                                              ;                and 248             ; only retain the speaker/earphone bits.
                                                                                                                                                                                                                                              ;                or c                ; merge with border colour.
106F  84FC                                    anda    #%11111100                                      ; clear unused 2 low bits
1071  B7FF20                                  sta     $ff20                                                   ; send to DAC                                                                           ;                out (254),a         ; write to speaker.
1074  B60113                                  lda     TIMER                                                   ; get actual timer                                                              ;                ld a,(23672)        ; current clock setting.
1077  9120                                    cmpa    <clock                                          ; same than last one                                                            ;                cp (hl)             ; subtract last reading.
1079  260C                                    bne     VSync8                                          ; no, exit loop                                                                 ;                jp nz,vsync8        ; yes, no more processing please.
107B  A6E4                                    lda     ,s                                                              ; get parameter again                                                   ;                ld a,b
107D  847F                                    anda    #127                                                    ; reset bit 7 (negative)                                                ;                and 127
107F  4C                                      inca                                                                    ; increment it                                                                          ;                inc a
1080  4A              VSync9  deca                                                                    ; decrement it                                                                          ; vsync9 dec a
1081  26FD                                    bne     VSync9                                          ; not yet zero? loopback                                                ;                jr nz,vsync9        ; loop.
1083  6AE4                                    dec     ,s                                                              ; decrement parameter in stack
1085  26E5                                    bne     VSync7                                          ; not yet zero? loopback                                                ;                djnz vsync7         ; continue noise.
1087  3261            VSync8  leas    1,s                                                     ; clean stack                                                                           ; vsync8 xor a
1089  4F                                      clra                                                                    ; get value zero (not sound)                                    
108A  20CA                                    bra     VSynca                                          ; exit via VSynca                                                                       ;                jr vsynca
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                                                                                                                                                                              ; ;clock  defb 0              ; last clock reading.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Redraw the screen                                                                                                                                                                     ; Redraw the screen.
                      ; Remove old copy of all sprites for redraw                                                                                                     ; Remove old copy of all sprites for redraw.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
108C                  ReDraw  
                              IF GFLAG
                                              ldx     #$ff00                                          ; avoid changing received colours
                                              stx     <andeor                                         ; to masks
                              ENDIF
108C  9EA8                                    ldx     <reg_IX                                         ; get pseudo reg
108E  3410                                    pshs    x                                                               ; push onto stack                                                                       ; redraw push ix             ; place sprite pointer on stack.
1090  BD1583                                  jsr     DRoom                                                   ; Show screen layout (blocks)                                   ;                call droom          ; show screen layout.
                              IF OFLAG
1093  BD1244                                  jsr     ShwOb                                                   ; draw OBjects                                                                          ;                call shwob          ; draw objects.
                              ENDIF
1096  C60C            NumSp0  ldb     #NUMSPR                                         ; sprites to draw                                                                       ; numsp0 ld b,NUMSPR         ; sprites to draw.
1098  8ED4D9                                  ldx     #sprTab                                         ; point to sprites data table                                   ;                ld ix,sprtab        ; sprite table.
109B  9FA8                                    stx     <reg_IX                                         ; update pseudoreg
109D  A684            ReDrw0  lda     ,x                                                              ; get old sprite type                                                   ; redrw0 ld a,(ix+0)         ; old sprite type.
109F  4C                                      inca                                                                    ; is enabled?                                                                           ;                inc a               ; is it enabled?
10A0  270D                                    beq     ReDrw1                                          ; no, go for next one                                                   ;                jr z,redrw1         ; no, find next one.
10A2  A603                                    lda     3,x                                                     ; get Y coordinate                                                              ;                ld a,(ix+3)         ; sprite x.
10A4  81B1                                    cmpa    #177                                                    ; beyond maximum?                                                                       ;                cp 177              ; beyond maximum?
10A6  2407                                    bcc     ReDrw1                                          ; yes, do not draw                                                              ;                jr nc,redrw1        ; yes, nothing to draw.
10A8  3414                                    pshs    b,x                                                     ; put registers onto stack                                              ;                push bc             ; store sprite counter.
10AA  BD19ED                                  jsr     SSpriA                                          ; show sprite                                                                           ;                call sspria         ; show single sprite.
10AD  3514                                    puls    b,x                                                     ; restore registers                                                             ;                pop bc              ; retrieve sprite counter.
10AF                  ReDrw1                                                                                                                                                                                                  ; redrw1 ld de,TABSIZ        ; distance to next odd/even entry.
10AF  308811                                  leax    TABSIZ,x                                                ; point to next sprite                                                  ;                add ix,de           ; next sprite.
10B2  5A                                      decb                                                                    ; decrement counter
10B3  26E8                                    bne     ReDrw0                                          ; not yet done? go for next one                         ;                djnz redrw0         ; repeat for remaining sprites.
10B5                  Rpblc1
                              IF PFLAG
                                              jsr     DShrp                                                   ; redraw Shrapnel                                                                       ; rpblc1 call dshrp          ; redraw shrapnel.
                              ENDIF
                              IF AFLAG
                                              jsr     RBloc                                                   ; draw blocks for this screen
                              ENDIF   
10B5  3510                                    puls    x                                                               ; restore pointer                                                                       ;                pop ix              ; retrieve sprite pointer.
10B7  9FA8                                    stx     <reg_IX                                         ; put into pseudoreg
10B9  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Clear screen routine                                                                                                                                                          ; Clear screen routine
                      ; uses *always* the background colour (andeor+1)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
10BA                  Cls                                                                                                                                                                                                             ; cls  ld hl,16384         ; screen address.
                                                                                                                                                                                                                                              ;                ld (hl),l           ; blank first byte.
10BA  9687                                    lda     <andeor+1                                       ; create a                                                                                      ;                ld (hl),l           ; blank first byte.
                                                                                                                                                                                                                                              ;                ld de,16385         ; second byte.
10BC  1F89                                    tfr     a,b                                                     ; 16 bits background value                                              ;                ld de,16385         ; second byte.
10BE  8EE600                                  ldx     #SCRBEG                                         ; point to beginning of screen
10C1  ED81            Cls01           std     ,x++                                                    ; paint 2 bytes                                                                 ;                ld bc,6144          ; bytes to copy.
10C3  8CFE00                                  cmpx    #SCREND                                         ; end of screen?                                                                        ;                ldir                ; blank them all.
10C6  25F9                                    bcs     Cls01                                                   ; no, loopback                                                                          ;                ld a,(23693)        ; fetch attributes.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set first attribute cell.
                                                                                                                                                                                                                                              ;                ld bc,767           ; number of attributes.
                                                                                                                                                                                                                                              ;                ldir                ; set all attributes.
                                                                                                                                                                                                                                              ;                ld hl,0             ; set hl to origin (0, 0).
                                                                                                                                                                                                                                              ;                ld (charx),hl       ; reset coordinates.
10C8  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; Set palette routine and data.
                      ;                                                                                                                                                                                                                       ; Palette.
                      ;                                                                                                                                                                                                                       ; 48955 = register select port.
                      ;                                                                                                                                                                                                                       ; 65339 = data read/write port.
                      ;                                                                                                                                                                                                                       ;
                      ;                                                                                                                                                                                                                       ; 48955 = write to register:
                      ;                                                                                                                                                                                                                       ; d0-d5 : select register sub-group.
                      ;                                                                                                                                                                                                                       ; d6-d7 : select register group.
                      ;                                                                                                                                                                                                                       ;         00 = sub-group determines entry in palette table.
                      ;                                                                                                                                                                                                                       ;         64 = mode select, write d0 to 65339 to toggle mode on/off.
                      ;                                                                                                                                                                                                                       ;
                      ;                                                                                                                                                                                                                       ; 65339 = data read/write:
                      ;                                                                                                                                                                                                                       ; d0-d1 : blue intensity (last bit duplicated so Bb is Bbb)
                      ;                                                                                                                                                                                                                       ; d2-d4 : red intensity
                      ;                                                                                                                                                                                                                       ; d5-d7 : green intensity
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                       NOT NEEDED - palette is static in MC6847
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; setpal ld bc,48955         ; register select.
                      ;                                                                                                                                                                                                                       ;                ld a,64             ; mode select.
                      ;                                                                                                                                                                                                                       ;                out (c),a           ; set ULAplus mode.
                      ;                                                                                                                                                                                                                       ;                ld b,255            ; data write.
                      ;                                                                                                                                                                                                                       ;                ld a,1              ; mode on.
                      ;                                                                                                                                                                                                                       ;                out (c),a           ; switch on ULAplus.
                      ;                                                                                                                                                                                                                       ;                ld b,64             ; number of palette table entries to write.
                      ;                                                                                                                                                                                                                       ; setpa1 ld hl,palett        ; palette we want.
                      ;                                                                                                                                                                                                                       ;                ld e,0              ; register number.
                      ;                                                                                                                                                                                                                       ; setpa0 push bc             ; store counter.
                      ;                                                                                                                                                                                                                       ;                ld b,191            ; register select.
                      ;                                                                                                                                                                                                                       ;                ld a,e              ; register number to write.
                      ;                                                                                                                                                                                                                       ;                out (c),a           ; write to port.
                      ;                                                                                                                                                                                                                       ;                ld b,255            ; data select.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; get colour data from table.
                      ;                                                                                                                                                                                                                       ;                out (c),a           ; write to port.
                      ;                                                                                                                                                                                                                       ;                inc e               ; next clut entry.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; next table entry.
                      ;                                                                                                                                                                                                                       ;                pop bc              ; restore counter from stack.
                      ;                                                                                                                                                                                                                       ;                djnz setpa0         ; set rest of palette.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; endpal equ $
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #11 - T01A - DONE
                              IF PFLAG+DFLAG
                      FdChk           lda     ,x                                                              ; get cell code                                                                 ; fdchk  ld a,(hl)           ; fetch cell.
                                              cmpa    #FODDER                                         ; is it FODDER?                                                                 ;                cp FODDER           ; is it fodder?
                                              bne     FdChkEx                                         ; no, return                                                                            ;                ret nz              ; no.
                                              clr     ,x                                                              ; delete fodder to code $00                                     ;                ld (hl),0           ; rewrite block type.
                                              pshs    x                                                               ; save MAP pointer                                                              ;                push hl             ; store pointer to block.
                                              tfr     x,d                                                     ; pass address to regD                                                  ;                ld de,MAP           ; address of map.
                                              subd    #MAP                                                    ; subtract MAP beginning                                                ;                and a               ; clear carry flag for subtraction.
                                              tfr     d,x                                                     ; send block offset to regX                                     ;                sbc hl,de           ; find simple displacement for block.
                                                                                                                              ; low byte is X coordinate                                              ;                ld a,l              ; low byte is y coordinate.
                                              andb    #31                                                     ; ensure valid value                                                            ;                and 31              ; column position 0 - 31.
                                              stb     <dispX                                          ; to variable for coord X                                               ;                ld (dispy),a        ; set up y position.
                                              tfr     x,d                                                     ; get offset again
                                              lslb                                                                    ; multiply                                                                                      ;                add hl,hl           ; multiply displacement by 8.
                                              rola                                                                    ; displacement
                                              lslb                                                                    ; by                                                                                                    ;                add hl,hl
                                              rola                                                                    ; eight
                                              lslb                                                                    ;                                                                                                               ;                add hl,hl
                                              rola                                                                    ; Y coordinate                                                                          ;                ld a,h              ; x coordinate now in h.
                                              sta     <dispY                                          ; into variable                                                                         ;                ld (dispx),a        ; set the display coordinate.
                                              clra                                                                    ; set null block code                                                   ;                xor a               ; block to write.
                                              jsr     PAttr                                                   ; write it                                                                                      ;                call pattr          ; write block.
                                              puls    x                                                               ; restore MAP pointer                                                   ;                pop hl              ; restore block pointer.
                      FdChkEx rts                                                                     ; return                                                                                                ;                ret
                              ENDIF
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Colour a sprite                                                                                                                                                                               ; Colour a sprite.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                       ; NO sprite painting!!!                                                 ; cspr   ld a,(ix+8)         ; look at the vertical first.
                      ;                                                                                                                                                                                                                       ;                cp 177              ; is it out-of-range?
                      ;                                                                                                                                                                                                                       ;                ret nc              ; yes, can't colour it.
                      ;                                                                                                                                                                                                                       ;                rlca                ; divide by 64.
                      ;                                                                                                                                                                                                                       ;                rlca                ; quicker than 6 rrca operations.
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; store in e register for now.
                      ;                                                                                                                                                                                                                       ;                and 3               ; mask to find segment.
                      ;                                                                                                                                                                                                                       ;                add a,88            ; attributes start at 88*256=22528.
                      ;                                                                                                                                                                                                                       ;                ld h,a              ; that's our high byte sorted.
                      ;                                                                                                                                                                                                                       ;                ld a,l              ; vertical/64 - same as vertical*4.
                      ;                                                                                                                                                                                                                       ;                and 224             ; want a multiple of 32.
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; vertical element calculated.
                      ;                                                                                                                                                                                                                       ;                ld a,(ix+9)         ; get horizontal position.
                      ;                                                                                                                                                                                                                       ;                rra                 ; divide by 8.
                      ;                                                                                                                                                                                                                       ;                rra
                      ;                                                                                                                                                                                                                       ;                rra
                      ;                                                                                                                                                                                                                       ;                and 31              ; want result in range 0-31.
                      ;                                                                                                                                                                                                                       ;                add a,l             ; add to existing low byte.
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; that's the low byte done.
                      ;                                                                                                                                                                                                                       ;                ld de,30            ; distance to next line down.
                      ;                                                                                                                                                                                                                       ;                ld a,(ix+8)         ; x coordinate.
                      ;                                                                                                                                                                                                                       ; cspr2  ld b,3              ; default rows to write.
                      ;                                                                                                                                                                                                                       ;                and 7               ; does x straddle cells?
                      ;                                                                                                                                                                                                                       ;                jr nz,cspr0         ; yes, loop counter is good.
                      ;                                                                                                                                                                                                                       ;                dec b               ; one less row to write.
                      ;                                                                                                                                                                                                                       ; cspr0  ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ; cspr3  and SIMASK          ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ;                inc l               ; next cell.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ; cspr4  and SIMASK          ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ;                inc l               ; next cell.
                      ;                                                                                                                                                                                                                       ;                ld a,(ix+9)         ; y coordinate.
                      ;                                                                                                                                                                                                                       ;                and 7               ; straddling cells?
                      ;                                                                                                                                                                                                                       ;                jr z,cspr1          ; no, only 2 wide.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ; cspr5  and SIMASK          ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ; cspr1  add hl,de           ; next row.
                      ;                                                                                                                                                                                                                       ;                djnz cspr0
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Specialist routines                                                                                                                                                           ; Specialist routines.
                      ; Process shrapnel                                                                                                                                                                      ; Process shrapnel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #13 - VSync - DONE
10C9                  ProShr
                              IF PFLAG
                                              pshs    y                                                               ; save sprite pointer
                                              ldy     #SHRAPN                                         ; point to table beginning                                              ; proshr ld ix,SHRAPN      ; table.
                                              ldb     #NUMSHR                                         ; number of pieces                                                              ;                ld b,NUMSHR         ; shrapnel pieces to process.
                                                                                                                                                                                                                                              ;                ld de,SHRSIZ        ; distance to next.
                      ProSh0  lda     ,y                                                              ; get on-off/type flag                                                  ; prosh0 ld a,(ix+0)       ; on/off marker.
                                              rola                                                                    ; is it off?                                                                            ;                rla                 ; check its status.
                      ProShx  bcs     ProShy                                          ; yes, skip next                                                                        ; proshx call nc,prosh1    ; on, so process it.
                      ProShmod        jsr     ProSh1                                          ; process it
                      ProShy  leay    SHRSIZ,y                                                ; point to next slot                                                            ;                add ix,de           ; point there.
                                              decb                                                                    ; decrement counter
                                              bne     ProSh0                                          ; not yet done, loop                                                            ;                djnz prosh0         ; round again.
                                              puls    y                                                               ; restore sprite pointer
                              ENDIF
10C9  B60113                                  lda     TIMER                                                   ; get timer value
10CC  8401                                    anda    #1                                                              ; is it odd?
                              IF SFLAG
                                              lbne    Scrly                                                   ; yes, call Scroller routine                                    ;                jp scrly
                              ENDIF
10CE  39                                      rts                                                                     ; no, return
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                              IF PFLAG
                      ProSh1  pshs    b                                                               ; save counter                                                                          ; prosh1 push bc           ; store counter.
                                              jsr     Plot                                                    ; delete pixel                                                                          ;                call plot           ; delete the pixel.
                                              lda     ,y                                                              ; get type                                                                                      ;                ld a,(ix+0)         ; restore shrapnel type.
                                              ldx     #shrPtr                                         ; point to routines table                                               ;                ld hl,shrptr        ; shrapnel routine pointers.
                                              jsr     ProSh2                                          ; execute the requested one                                     ;                call prosh2         ; run the routine.
                                              jsr     ChkXY                                                   ; verify coordinates and display                                ;                call chkxy          ; check x and y are good before we redisplay.
                                              puls    b                                                               ; restore counter                                                                       ;                pop bc              ; restore counter.
                                                                                                                                                                                                                                              ;                ld de,SHRSIZ        ; distance to next.
                                              rts                                                                     ; return                                                                                                ;                ret
                      ProSh2  asla                                                                    ; double to calc offset                                                 ; prosh2 rlca              ; 2 bytes per address.
                                                                                                                                                                                                                                              ;                ld e,a              ; copy to de.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to address of routine.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get address low.
                                                                                                                                                                                                                                              ;                inc hl              ; point to second byte.
                                                                                                                                                                                                                                              ;                ld h,(hl)           ; fetch high byte from table.
                                                                                                                                                                                                                                              ;                ld l,a              ; put low byte in l.
                                              jmp     [a,x]                                                   ; execute sobroutine                                                            ;                jp (hl)             ; jump to routine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      shrPtr  fdb     Laser                                                   ; offset 0 - 0                                                                          ; shrptr defw laser        ; laser.
                                              fdb     Trail                                                   ; offset 2 - 1                                                                          ;                defw trail          ; vapour trail.
                                              fdb     Shrap                                           ; offset 4 - 2                                                                          ;                defw shrap          ; shrapnel from explosion.
                                              fdb     DotL                                            ; offset 6 - 3                                                                          ;                defw dotl           ; horizontal starfield left.
                                              fdb     DotR                                            ; offset 8 - 4                                                                          ;                defw dotr           ; horizontal starfield right.
                                              fdb     DotU                                            ; offset a - 5                                                                          ;                defw dotu           ; vertical starfield up.
                                              fdb     DotD                                            ; offset c - 6                                                                          ;                defw dotd           ; vertical starfield down.
                                              fdb     PtcUsr                                          ; offset e - 7                                                                          ;                defw ptcusr         ; user particle.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Explosion shrapnel                                                                                                                                                                    ; Explosion shrapnel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - T03-4-5-6-7 - DONE
                      Shrap           ldb     1,y                                                     ; angle is steps of 4 (offset)                          ; shrap  ld e,(ix+1)         ; get the angle.
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
                                              ldx     #shrSin                                         ; point to table beginning                                              ;                ld hl,shrsin        ; shrapnel sine table.
                                              abx                                                                     ; now to sine of desired offset                         ;                add hl,de           ; point to sine.
                                                                                                                                                                                                                                              ;                ld e,(hl)           ; fetch value from table.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte of table.
                                                                                                                                                                                                                                              ;                ld d,(hl)           ; fetch value from table.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte of table.
                                                                                                                                                                                                                                              ;                ld c,(hl)           ; fetch value from table.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte of table.
                                                                                                                                                                                                                                              ;                ld b,(hl)           ; fetch value from table.
                                              ldb     2,y                                                     ; get decimals of Y coordinate                          ;                ld l,(ix+2)         ; x coordinate in hl.
                                              lda     3,y                                                     ; get Y coordinate                                                              ;                ld h,(ix+3)
                                              addd    ,x                                                              ; add sine,decimals                                                             ;                add hl,de           ; add sine.
                                              stb     2,y                                                     ; update decimals of Y cordinate                                ;                ld (ix+2),l         ; store new coordinate.
                                              sta     3,y                                                     ; update Y coordinate                                                   ;                ld (ix+3),h
                                              ldb     4,y                                                     ; get decimals of X coordinate                          ;                ld l,(ix+4)         ; y coordinate in hl.
                                              lda     5,y                                                     ; get X coordinate                                                              ;                ld h,(ix+5)
                                              addd    2,x                                                     ; add cosine,decimals                                                   ;                add hl,bc           ; add cosine.
                                              stb     4,y                                                     ; update decimals of X coordinate                       ;                ld (ix+4),l         ; store new coordinate.
                                              sta     5,y                                                     ; update X coordinate                                                   ;                ld (ix+5),h
                                              rts                                                                     ; return                                                                                                ;                ret
                      DotL            dec     5,y                                                                                                                                                                     ; dotl   dec (ix+5)          ; move left.
                                              rts                                                                                                                                                                                     ;                ret
                      DotR            inc     5,y                                                                                                                                                                     ; dotr   inc (ix+5)          ; move right.
                                              rts                                                                                                                                                                                     ;                ret
                      DotU            dec     3,y                                                                                                                                                                     ; dotu   dec (ix+3)          ; move up.
                                              rts                                                                                                                                                                                     ;                ret
                      DotD            inc     3,y                                                                                                                                                                     ; dotd   inc (ix+3)          ; move down.
                                              rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Check coordinates are good before redrawing at new position                                                   ; Check coordinates are good before redrawing at new position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #01C1 - DONE - OK
                      ChkXY           ldx     #wnTopX                                                                                                                                                         ; chkxy  ld hl,wntopx        ; window top.
                                              lda     3,y                                                     ; get Y coord                                                                           ;                ld a,(ix+3)         ; fetch shrapnel coordinate.
                                              cmpa    ,x                                                                                                                                                                              ;                cp (hl)             ; compare with top window limit.
                                              bcs     KilShr                                          ; out of screen, stop it                                                ;                jr c,kilshr         ; out of window, kill shrapnel.
                                              leax    1,x                                                     ; point to Left edge                                                            ;                inc hl              ; left edge.
                                              lda     5,y                                                     ; get X coord                                                                           ;                ld a,(ix+5)         ; fetch shrapnel coordinate.
                                              cmpa    ,x                                                                                                                                                                              ;                cp (hl)             ; compare with left window limit.
                                              bcs     KilShr                                          ; out of screen, stop it                                                ;                jr c,kilshr         ; out of window, kill shrapnel.
                                              leax    1,x                                                     ; point to bottom edge                                                  ;                inc hl              ; point to bottom.
                                              lda     ,x                                                              ; get it                                                                                                ;                ld a,(hl)           ; fetch window limit.
                                              adda    #15                                                     ; add height of sprite                                                  ;                add a,15            ; add height of sprite.
                                              cmpa    3,y                                                     ; compare to Y coord                                                            ;                cp (ix+3)           ; compare with shrapnel x coordinate.
                                              bcs     KilShr                                          ; out of screen, stop it                                                ;                jr c,kilshr         ; off screen, kill shrapnel.
                                              leax    1,x                                                     ; point to right edge                                                   ;                inc hl              ; point to right edge.
                                              lda     ,x                                                              ; get it                                                                                                ;                ld a,(hl)           ; fetch shrapnel y coordinate.
                                              adda    #15                                                     ; add width of sprite                                                   ;                add a,15            ; add width of sprite.
                                              cmpa    5,y                                                     ; compare to X coord                                                            ;                cp (ix+5)           ; compare with window limit.
                                              bcs     KilShr                                          ; out of screen, stop it                                                ;                jr c,kilshr         ; off screen, kill shrapnel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drop through                                                                                                                                                                                  ; Drop through.
                      ; Display shrapnel                                                                                                                                                                      ; Display shrapnel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                               - continues from previous part
                      ; CONVERTED FOR SHRAPNEL - #01C1 - DONE
                      Plot            lda     3,y                                                     ; high byte     (Y coord)                                                       ; plot   ld l,(ix+3)         ; x integer.
                                              ldb     5,y                                                     ; low byte (X coord)                                                            ;                ld h,(ix+5)         ; y integer.
                                              std     <reg_HL                                         ; Y - X
                                              exg     a,b                                                     ; regD= X - Y (added again)
                                              std     <dispX                                          ; 3,y -> dispX                                                                          ;                ld (dispx),hl       ; workspace coordinates.
                                              lda     ,y                                                              ; get type                                                                                      ;                ld a,(ix+0)         ; type.
                                                                                                                                                                                                                                              ;                and a               ; is it a laser?
                                              beq     Plot1                                                   ; if zero, draw laser                                                   ;                jr z,plot1          ; yes, draw laser instead.
                      Plot0           lda     <reg_L                                     ; 4,y (dispX)        (original)                                              ; plot0  ld a,h              ; which pixel within byte do we
                                              anda    #7                                                              ; low byte of DE                                                                        ;                and 7               ; want to set first?
                                              clr     <reg_D                                                                                                                                                          ;                ld d,0              ; no high byte.
                                                                                                                                                                                                                                              ;                ld e,a              ; copy to de.
                                              ldx     #dots                                                   ; pointer                                                                                       ;                ld hl,dots          ; table of small pixel positions.
                                              leax    a,x                                                     ; add 1 byte offset                                                             ;                add hl,de           ; hl points to values we want to POKE to screen.
                                              lda     ,x                                                              ; get byte from table                                                   ;                ld e,(hl)           ; get value.
                                              sta     <reg_E                                          ; to pseudoreg
                                              jsr     ScAdd                                                   ; get screen address                                                            ;                call scadd          ; screen address.
                                              lda     ,x                                                              ; get what is there in screen                                   ;                ld a,(hl)           ; see what's already there.
                                              eora    <reg_E                                          ; merge pixels                                                                          ;                xor e               ; merge with pixels.
                                              sta     ,x                                                              ; update screen                                                                 ;                ld (hl),a           ; put back on screen.
                                              rts                                                                     ; return                                                                                                ;                ret
                      Plot1           jsr     ScAdd                                                   ; get screen address                                                            ; plot1  call scadd          ; screen address.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; fetch byte there.
                                              com     ,x                                                              ; toggle all bits                                                                       ;                cpl                 ; toggle all bits.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; new byte.
                                              rts                                                                     ; return                                                                                                ;                ret
                      KilShr  lda     #128                                                    ; set bit7                                                                                      ; kilshr ld (ix+0),128       ; switch off shrapnel.
                                              sta     ,y                                                              ; to disable shrapnel piece
                                              rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; ;explc  defb 0              ; explosion counter.
                      shrSin  fdb     0,1024,391,946,724,724,946,391                                                                                          ; shrsin defw 0,1024,391,946,724,724,946,391
                                              fdb     1024,0,946,65144,724,64811,391,64589                                                                            ;                defw 1024,0,946,65144,724,64811,391,64589
                                              fdb     0,64512,65144,64589,64811,64811,64589,65144                                                             ;                defw 0,64512,65144,64589,64811,64811,64589,65144
                                              fdb     64512,0,64589,391,64811,724,65144,946                                                                           ;                defw 64512,0,64589,391,64811,724,65144,946
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - T02 - DONE
                      Trail           dec     1,y                                                     ; get time remaining (?)                                                ; trail  dec (ix+1)          ; time remaining.
                                              beq     TrailK                                          ; if zero, set it out of  screen                                ;                jp z,trailk         ; time to switch it off.
                                              jsr     QRand                                                   ; get a random  number                                                  ;                call qrand          ; get a random number.
                                              rora                                                                    ; see bit0                                                                                      ;                rra                 ; x or y axis?
                                              bcs     TrailV                                          ; if set, move vertically                                               ;                jr c,trailv         ; use x.
                                              rora                                                                    ; see bit1                                                                                                              ;                rra                 ; which direction?
                                              bcs     TrailL                                          ; if set, go left                                                                       ;                jr c,traill         ; go left.
                                              inc     5,y                                                     ; else go right (inc X)                                                 ;                inc (ix+5)          ; go right.
                                              rts                                                                     ; return                                                                                                ;                ret
                      TrailL  dec     5,y                                                     ; go left (dec X)                                                                       ; traill dec (ix+5)          ; go left.
                                              rts                                                                     ; return                                                                                                ;                ret
                      TrailV  rora                                                                    ; see bit1                                                                                      ; trailv rra                 ; which direction?
                                              bcs     TrailU                                          ; if set, go up                                                                 ;                jr c,trailu         ; go up.
                                              inc     3,y                                                     ; else go down (inc Y)                                                  ;                inc (ix+3)          ; go down.
                                              rts                                                                     ; return                                                                                                ;                ret
                      TrailU  dec     3,y                                                     ; go up (dec Y)                                                                 ; trailu dec (ix+3)          ; go up.
                                              rts                                                                     ; return                                                                                                ;                ret
                      TrailK  lda     #200                                                    ; set it                                                                                                ; trailk ld (ix+3),200       ; set off-screen to kill vapour trail.
                                              sta     3,y                                                     ; out of screen
                      TrailEx rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - T01 - DONE
                      Laser           lda     1,y                                                     ; get direction                                                                 ; laser  ld a,(ix+1)         ; direction.
                                              rora                                                                    ; see bit0                                                                                      ;                rra                 ; left or right?
                                              bcc     LaserL                                          ; if not set, move left                                                 ;                jr nc,laserl        ; move left.
                                              ldb     #8                                                              ; distance to travel                                                            ;                ld b,8              ; distance to travel.
                                              bra     LaserM                                          ; move laser (right)                                                            ;                jr laserm           ; move laser.
                      LaserL  ldb     #248                                                    ; get value -8                                                                          ; laserl ld b,248            ; distance to travel.
                      LaserM  lda     5,y                                                     ; get actual position                                                   ; laserm ld a,(ix+5)         ; y position.
                                              stb     <reg_B                                          ; save displacement                                                             ;                add a,b             ; add distance.
                                              adda    <reg_B                                          ; add to position
                                              sta     5,y                                                     ; update X coord                                                                        ;                ld (ix+5),a         ; set new y coordinate.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Test new block                                                                                                                                                                                ; Test new block.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                              sta     <dispY                                          ; set new X coordinate                                                  ;                ld (dispy),a        ; set y for block collision detection purposes.
                                              lda     3,y                                                     ; get Y coordinate                                                              ;                ld a,(ix+3)         ; get x.
                                              sta     <dispX                                          ; put into disp variable                                                ;                ld (dispx),a        ; set coordinate for collision test.
                                              jsr     TstBl                                                   ; get block at this coords                                              ;                call tstbl          ; get block type there.
                                              cmpa    #WALL                                                   ; is a wall?                                                                            ;                cp WALL             ; is it solid?
                                              beq     TrailK                                          ; yes, put laser out of screen                          ;                jr z,trailk         ; yes, it cannot pass.
                              IF PFLAG+DFLAG
                                              cmpa    #FODDER                                         ; is it fodder?                                                                 ;                cp FODDER           ; is it fodder?
                                              bne     TrailEx                                         ; no, set it out of screen                                              ;                ret nz              ; no, ignore it.
                                              jsr     FdChk                                                   ; remove fodder block                                                   ;                call fdchk          ; remove fodder block.
                                              bra     TrailK                                          ; destroy laser                                                                 ;                jr trailk           ; destroy laser.
                              ELSE
                                              rts
                              ENDIF
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      dots            fcb     128,64,32,16,8,4,2,1                                                                                                                            ; dots   defb 128,64,32,16,8,4,2,1
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Plot, preserving reg_DE                                                                                                                                                       ; Plot, preserving de.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #121 - DONE
                      PlotDE  ldd     <reg_DE                                         ; get reg_DE                                                                            ; plotde push de             ; put de on stack.
                                              pshs    d                                                               ; save into stack
                                              jsr     Plot                                                    ; plot pixel                                                                            ;                call plot           ; plot pixel.
                                              puls    d                                                               ; restore                                                                                       ;                pop de              ; restore de from stack.
                                              std     <reg_DE                                         ; reg_DE
                                              rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Shoot a laser                                                                                                                                                                         ; Shoot a laser.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #01 - DONE
                                                                                                                              ; receives regA=01 to fire a Laser to the right
                      Shoot           sta     <reg_C                                          ; save direction                                                                        ; shoot  ld c,a              ; store direction in c register.
                                              ldb     8,y                                                     ; low byte (Y coord)                                                            ;                ld a,(ix+8)         ; x coordinate.
                      Shoot1  addb    #(SPR_HGT/2-1)                                                          ; move it down 7 pixels                                                 ; shoot1 add a,7             ; down 7 pixels.
                                              lda     9,y                                                     ; high byte (X coord)                                                   ;                ld l,a              ; puty x coordinate in l.
                                              std     <reg_HL                                         ; HL=XY coords                                                                          ;                ld h,(ix+9)         ; y coordinate in h.
                                              pshs    y                                                               ; save pointer                                                                          ;                push ix             ; store pointer to sprite.
                                              jsr     FPSlot                                          ; find particle slot                                                            ;                call fpslot         ; find particle slot.
                                              bcc     Vapou2                                          ; not found, restore ix                                                 ;                jr nc,vapou2        ; failed, restore ix.
                                              clr     ,y                                                              ; set up a laser                                                                        ;                ld (ix+0),0         ; set up a laser.
                                              lda     <reg_C                                          ; get requested direction
                                              sta     1,y                                                     ; set direction                                                                 ;                ld (ix+1),c         ; set the direction.
                                              lda     <reg_L                                          ; get Y coordinate
                                              sta     3,y                                                     ; set it                                                                                                ;                ld (ix+3),l         ; set x coordinate.
                                              ror     <reg_C                                          ; check direction                                                                       ;                rr c                ; check direction we want.
                                              bcs     Shootr                                          ; if set, shoot right                                                   ;                jr c,shootr         ; shoot right.
                                              lda     <reg_H                                          ; get X coord                                                                           ;                ld a,h              ; y position.
                                                                                                                                                                                                                                              ; ;       dec a               ; left a pixel.
                      Shoot0  anda    #248                                                    ; #%11111000 align to char                                              ; shoot0 and 248             ; align on character boundary.
                                              sta     5,y                                                     ; set X coordinate                                                              ;                ld (ix+5),a         ; set y coordinate.
                                              bra     Vapou0                                          ; go plot it                                                                            ;                jr vapou0           ; draw first image.
                      Shootr  lda     <reg_H                                          ; get X coord                                                                           ; shootr ld a,h              ; y position.
                                              adda    #15                                                     ; point to the right                                                            ;                add a,15            ; look right.
                                              bra     Shoot0                                          ; go back to plot it                                                            ;                jr shoot0           ; align and continue.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Create a bit of vapour trail                                                                                                                                  ; Create a bit of vapour trail.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #10 - Script - DONE
                      Vapour  pshs    y                                                               ; save pointer                                                                          ; vapour push ix             ; store pointer to sprite.
                                              ldd     8,y                                                     ; Y-X                                                                                                   ;                ld l,(ix+8)         ; x coordinate.
                                              exg     a,b                                                     ; X-Y
                                              tfr     d,x                                                     ; send to HL (X-Y)                                                              ;                ld h,(ix+9)         ; y coordinate.
                      Vapou3  leax    (SPR_HGT/2-1)*256+(SPR_HGT/2-1),x                                               
                                                                                                                              ; mid-point of sprite                                                   ; vapou3 ld de,7*256+7       ; mid-point of sprite.
                                              stx     <reg_HL                                         ; update pseudo-register                                                ;                add hl,de           ; point to centre of sprite.
                                              jsr     FPSlot                                          ; find a free slot                                                              ;                call fpslot         ; find particle slot.
                                              bcs     Vapou1                                          ; found one, use it                                                             ;                jr c,vapou1         ; no, we can use it.
                      ; CONVERTED FOR SHRAPNEL - #01B - DONE
                      Vapou2  puls    y                                                               ; restore pointer                                                                       ; vapou2 pop ix              ; restore sprite pointer.
                                              rts                                                                     ; and exit                                                                                      ;                ret                 ; out of slots, can't generate anything.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - Script01 - DONE
                      Vapou1  ldd     <reg_HL                                         ; get coordinates       (X-Y)                                                   ; vapou1 ld (ix+3),l         ; set up x.
                                              stb     3,y                                                     ; set Y coord
                                              sta     5,y                                                     ; and  X coord                                                                          ;                ld (ix+5),h         ; set up y coordinate.
                                              jsr     QRand                                                   ; get a random number                                                   ;                call qrand          ; get quick random number.
                                              anda    #15                                                     ; limit to 4 bits                                                                       ;                and 15              ; random time.
                                              adda    #15                                                     ; minimum value (time)                                                  ;                add a,15            ; minimum time on screen.
                                              sta     1,y                                                     ; set time on screen                                                            ;                ld (ix+1),a         ; set time on screen.
                                              lda     #1                                                              ; value to
                                              sta     ,y                                                              ; set it as particle trail                                              ;                ld (ix+0),1         ; define particle as vapour trail.
                      ; CONVERTED FOR SHRAPNEL - #01C - DONE
                      Vapou0  jsr     ChkXY                                                   ; plot first position                                                   ; vapou0 call chkxy          ; plot first position.
                                              bra     Vapou2                                          ; exit                                                                                          ;                jr vapou2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Create a user particle                                                                                                                                                        ; Create a user particle.
                      ; parameter in register A is the timer for the particle
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR USER PARTICLE
                      PtUsr           sta     <reg_A                                          ; save timer parameter                                                  ; ptusr  ex af,af'           ; store timer.
                                              ldx     8,y                                                     ; get Y,X coordinates from current sprite ;              ld l,(ix+8)         ; x coordinate.
                                                                                                                                                                                                                                              ;                ld h,(ix+9)         ; y coordinate.
                                                                                                                                                                                                                                              ;                ld de,7*256+7       ; mid-point of sprite.
                                              leax    $0707,x                                         ; point to sprite center                                                ;                add hl,de           ; point to centre of sprite.
                                              jsr     FPSlot                                          ; find a free slot for particle (regY)          ;                call fpslot         ; find particle slot.
                                              bcs     PtUsr1                                          ; found one, use it                                                             ;                jr c,ptusr1         ; no, we can use it.
                                              rts                                                                     ; no free slots, exit                                                   ;                ret                 ; out of slots, can't generate anything.
                      PtUsr1  tfr     x,d                                                     ; pass coordinates to regD                                              ; ptusr1 ld (ix+3),l         ; set up x.
                                              sta     3,y                                                     ; fill particle Y coordinate
                                              stb     5,y                                                     ; and particle X                                                                        ;                ld (ix+5),h         ; set up y coordinate.
                                              lda     <reg_A                                          ; restore timer                                                                 ;                ex af,af'           ; restore timer.
                                              sta     1,y                                                     ; put in direction                                                              ;                ld (ix+1),a         ; set time on screen.
                                              lda     #7                                                              ; define particle
                                              sta     ,y                                                              ; as user type                                                                          ;                ld (ix+0),7         ; define particle as user particle.
                                              lbra    ChkXY                                                   ; plot first position                                                   ;                jp chkxy            ; plot first position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Create a vertical or horizontal star                                                                                                                  ; Create a vertical or horizontal star.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #02 - DONE
                      Star            pshs    y                                                               ; save pointer                                                                          ; star   push ix             ; store pointer to sprite.
                                              bsr     FPSlot                                          ; find a slot                                                                           ;                call fpslot         ; find particle slot.
                                              bcs     Star7                                                   ; if found, use it                                                              ;                jp c,star7          ; found one we can use.
                      Star0           puls    y                                                               ; else restore pointer                                                  ; star0  pop ix              ; restore sprite pointer.
                                              rts                                                                     ; return                                                                                                ;                ret                 ; out of slots, can't generate anything.
                      Star7           lda     <reg_C                                          ; get direction                                                                 ; star7  ld a,c              ; direction.
                                              anda    #3                                                              ; is if left (0)?                                                                       ;                and 3               ; is it left?
                                              beq     Star1                                                   ; yes, go there                                                                 ;                jr z,star1          ; yes, it's horizontal.
                                              deca                                                                    ; is it right (1)?                                                              ;                dec a               ; is it right?
                                              beq     Star2                                                   ; yes, go there                                                                 ;                jr z,star2          ; yes, it's horizontal.
                                              deca                                                                    ; is it up (2)?                                                                 ;                dec a               ; is it up?
                                              beq     Star3                                                   ; yes, go there                                                                 ;                jr z,star3          ; yes, it's vertical.
                                              lda     <wnTopX                                         ; get top edge of screen                                                ;                ld a,(wntopx)       ; get edge of screen.
                                              inca                                                                    ; down one pixel                                                                        ;                inc a               ; down one pixel.
                      Star8           sta     3,y                                                     ; set Y coord                                                                           ; star8  ld (ix+3),a         ; set x coord.
                                              jsr     QRand                                                   ; get radom number                                                              ;                call qrand          ; get quick random number.
                      Star9           sta     5,y                                                     ; set as X coord                                                                        ; star9  ld (ix+5),a         ; set y position.
                                              lda     <reg_C                                          ; get direction                                                                 ;                ld a,c              ; direction.
                                              anda    #3                                                              ; use 2 lower bits                                                              ;                and 3               ; zero to three.
                                              adda    #3                                                              ; values 3-4-5-6 to starfield                                   ;                add a,3             ; 3 to 6 for starfield.
                                              sta     ,y                                                              ; define particle as star                                               ;                ld (ix+0),a         ; define particle as star.
                                              jsr     ChkXY                                                   ; plot 1st position                                                             ;                call chkxy          ; plot first position.
                                              bra     Star0                                                   ; exit                                                                                          ;                jp star0
                      Star1           jsr     QRand                                                   ; Left. get a random number                                     ; star1  call qrand          ; get quick random number.
                                              sta     3,y                                                     ; set Y coord                                                                           ;                ld (ix+3),a         ; set x coord.
                                              lda     <wnRgtX                                         ; get right edge of screen                                              ;                ld a,(wnrgtx)       ; get edge of screen.
                                              adda    #15                                                     ; add sprite width minus one                                    ;                add a,15            ; add width of sprite minus 1.
                                              bra     Star9                                                   ; set X coord                                                                           ;                jp star9
                      Star2           jsr     QRand                                                   ; Right. get a random number                                    ; star2  call qrand          ; get quick random number.
                                              sta     3,y                                                     ; set Y coord                                                                           ;                ld (ix+3),a         ; set x coord.
                                              lda     <wnLftX                                         ; get left edge of screen                                               ;                ld a,(wnlftx)       ; get edge of screen.
                                              bra     Star9                                                   ; set X coord                                                                           ;                jp star9
                      Star3           lda     <wnBotX                                         ; Up. get bottom edge of screen                         ; star3  ld a,(wnbotx)       ; get edge of screen.
                                              adda    #15                                                     ; add height of sprite minus one                                ;                add a,15            ; height of sprite minus one pixel.
                                              bra     Star8                                                   ; set Y coord                                                                           ;                jp star8
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Find particle slot for lasers or vapour trail                                                                                         ; Find particle slot for lasers or vapour trail.
                      ; Can't use alternate accumulator                                                                                                                               ; Can't use alternate accumulator.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #01A - DONE
                      FPSlot  ldy     #SHRAPN                                         ; point to table beginning                                              ; fpslot ld ix,SHRAPN        ; shrapnel table.
                                                                                                                                                                                                                                              ;                ld de,SHRSIZ        ; size of each particle.
                                              ldb     #NUMSHR                                         ; number of pieces                                                              ;                ld b,NUMSHR         ; number of pieces in table.
                      FPSlt0  lda     ,y                                                              ; get type                                                                                      ; fpslt0 ld a,(ix+0)         ; get type.
                                              rola                                                                    ; is slot free ($ff)?                                                   ;                rla                 ; is this slot in use?
                                              bcs     FPSltEx                                         ; yes, use it                                                                           ;                ret c               ; no, we can use it.
                                              leay    SHRSIZ,y                                                ; point to next slot                                                            ;                add ix,de           ; point to more shrapnel.
                                              decb                                                                    ; decrement counter
                                              bne     FPSlt0                                          ; not the end? loopback                                                 ;                djnz fpslt0         ; repeat for all shrapnel.
                      FPSltEx rts                                                                     ; return                                                                                                ;                ret                 ; out of slots, can't generate anything.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Create an explosion at sprite position                                                                                                                ; Create an explosion at sprite position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #04 - DONE
                      Explod  sta     <reg_C                                          ; save number of particles to be created        ; explod ld c,a              ; particles to create.
                                              pshs    y                                                               ; save sprite pointer                                                   ;                push ix             ; store pointer to sprite.
                                              ldd     8,y                                                     ; get Y - X coords                                                              ;                ld l,(ix+8)         ; x coordinate.
                                              std     <reg_HL                                         ; Y - X                                                                                         ;                ld h,(ix+9)         ; y coordinate.
                                              ldy     #SHRAPN                                         ; point to shrapnel data table                          ;                ld ix,SHRAPN        ; shrapnel table.
                                                                                                                                                                                                                                              ;                ld de,SHRSIZ        ; size of each particle.
                                              ldb     #NUMSHR                                         ; get number of pieces                                                  ;                ld b,NUMSHR         ; number of pieces in table.
                                              stb     <reg_B                                          ; into counter
                      Expld0  lda     ,y                                                              ; get type                                                                                      ; expld0 ld a,(ix+0)         ; get type.
                                              rola                                                                    ; see bit7, is it used?                                                 ;                rla                 ; is this slot in use?
                                              bcs     Expld1                                          ; no, we can use it                                                             ;                jr c,expld1         ; no, we can use it.
                      Expld2  leay    SHRSIZ,y                                                ; point to next table entry                                     ; expld2 add ix,de           ; point to more shrapnel.
                                              dec     <reg_B                                          ; decrement counter
                                              bne     Expld0                                          ; not done? loopback                                                            ;                djnz expld0         ; repeat for all shrapnel.
                      Expld3  puls    y                                                               ; restore pointer                                                                       ; expld3 pop ix              ; restore sprite pointer.
                                              rts                                                                     ; return                                                                                                ;                ret                 ; out of slots, can't generate any more.
                      Expld1  lda     <reg_C                                          ; get number of particles                                               ; expld1 ld a,c              ; shrapnel counter.
                                              anda    #15                                                     ; limit to 15                                                                           ;                and 15              ; 0 to 15.
                                              adda    <reg_H                                          ; add Y coord                                                                           ;                add a,l             ; add to x.
                                              sta     3,y                                                     ; set Y coord                                                                           ;                ld (ix+3),a         ; x coord.
                                              lda     <seed3                                          ; read last random number                                               ;                ld a,(seed3)        ; crap random number.
                                              anda    #15                                                     ; limit to 0-15                                                                 ;                and 15              ; 0 to 15.
                                              adda    <reg_L                                          ; add X coord                                                                           ;                add a,h             ; add to y.
                                              sta     5,y                                                     ; set X coord                                                                           ;                ld (ix+5),a         ; y coord.
                                              lda     #2                                                              ; switch
                                              sta     ,y                                                              ; shrapnel on                                                                           ;                ld (ix+0),2         ; switch it on.
                                              jsr     do_exx                                          ; store BC, DE, HL                                                              ;                exx                 ; store coordinates.
                                              jsr     ChkXY                                                   ; plot 1st position                                                             ;                call chkxy          ; plot first position.
                                              jsr     QRand                                                   ; get a random number                                                   ;                call qrand          ; quick random angle.
                                              anda    #60                                                     ; keep into angle range (0-60)                          ;                and 60              ; keep within range.
                                              sta     1,y                                                     ; put at offset 1                                                                       ;                ld (ix+1),a         ; angle.
                                              jsr     do_exx                                          ; restore old values                                                            ;                exx                 ; restore coordinates.
                                              dec     <reg_C                                          ; decrement counter                                                             ;                dec c               ; one less piece of shrapnel to generate.
                                              bne     Expld2                                          ; not done? loopback                                                            ;                jr nz,expld2        ; back to main explosion loop.
                                              bra     Expld3                                          ; exit restoring pointer                                                ;                jr expld3           ; restore sprite pointer and exit.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #02A - DONE
                      QRand           
                                                                                                                                                                                                                                              ; qrand  ld a,(seed3)        ; random seed.
                                                                                                                                                                                                                                              ;                ld l,a              ; low byte.
                      
                                                                                                                                                                                                                                              ;                ld h,0              ; no high byte.
                      
                                                                                                                                                                                                                                              ;                ld a,r              ; r register.
                                                                                                                                                                                                                                              ;                xor (hl)            ; combine with seed.
                                              jsr     Random                                          ; get a Random number
                                              eora    <seed3                                          ; merge with old seed
                                              sta     <seed3                                          ; update seed                                                                           ;                ld (seed3),a        ; new seed.
                                              rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display all shrapnel                                                                                                                                                          ; Display all shrapnel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #12 - ReDraw - DONE
                      DShrp           ldx     #PlotDE                                         ; get routine address                                                   ; dshrp  ld hl,plotde        ; display routine.
                                              stx     ProShmod+1                                      ; change called one                                                             ;                ld (proshx+1),hl    ; modify routine.
                                              jsr     ProShr                                          ; call 'caller'                                                                 ;                call proshr         ; process shrapnel.
                                              ldx     #ProSh1                                         ; get default routine address                                   ;                ld hl,prosh1        ; processing routine.
                                              stx     ProShmod+1                                      ; restore it                                                                            ;                ld (proshx+1),hl    ; modify the call.
                                              rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Particle engine                                                                                                                                                                               ; Particle engine
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      IniShr  ldx     #SHRAPN                                         ; point to shrapnel table                                               ; inishr ld hl,SHRAPN        ; table.
                                              ldb     #NUMSHR                                         ; get number of pieces                                                  ;                ld b,NUMSHR         ; shrapnel pieces to process.
                                              lda     #$ff                                                    ; value to be set                                                                       ;                ld de,SHRSIZ        ; distance to next.
                      IniSh0  sta     ,x                                                              ; set one element                                                                       ; inish0 ld (hl),255         ; kill the shrapnel.
                                              leax    SHRSIZ,x                                                ; point to next element                                                 ;                add hl,de           ; point there.
                                              decb                                                                    ; decrement counter     
                                              bne     IniSh0                                          ; not yet done, loop                                                            ;                djnz inish0         ; round again.
                                              rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Check for collision between laser and sprite                                                                                          ; Check for collision between laser and sprite.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #05 - DONE
                      LCol            ldx     #SHRAPN                                         ; point to table beginning                                              ; lcol   ld hl,SHRAPN        ; shrapnel table.
                                                                                                                                                                                                                                              ;                ld de,SHRSIZ        ; size of each particle.
                                              ldb     #NUMSHR                                         ; number of pieces                                                              ;                ld b,NUMSHR         ; number of pieces in table.
                      LCol0           lda     ,x                                                              ; get type                                                                                      ; lcol0  ld a,(hl)           ; get type.
                                                                                                                                                                                                                                              ;                and a               ; is this slot a laser?
                                              beq     LCol1                                                   ; if zero is a laser, check collision           ;                jr z,lcol1          ; yes, check collision.
                      LCol3           leax    SHRSIZ,x                                                ; point to next table entry                                     ; lcol3  add hl,de           ; point to more shrapnel.
                                              decb                                                                    ; decrement counter
                                              bne     LCol0                                                   ; not done? loopback                                                            ;                djnz lcol0          ; repeat for all shrapnel.
                                              andcc   #%11111110                                      ; clear carry
                                              rts                                                                     ; return NO collision                                                   ;                ret                 ; no collision, carry not set.
                      LCol1           
                                              pshs    x                                                               ; (added again)                                                                                                         ; lcol1  push hl             ; store pointer to laser.
                                                                                                                                                                                                                                              ;                inc hl              ; direction.
                                                                                                                                                                                                                                              ;                inc hl              ; not used.
                                                                                                                                                                                                                                              ;                inc hl              ; x position.
                                              lda     3,x                                                     ; get shrapnel Y coord                                                  ;                ld a,(hl)           ; get x.
                                              suba    Xval,y                                          ; subtract sprite Y coord                                               ;                sub (ix+X)          ; subtract sprite x.
                      LColh           cmpa    #SPR_HGT                                                        ; within range?                                                                 ; lcolh  cp 16               ; within range?
                                              bcc     LCol2                                                   ; no, missed                                                                            ;                jr nc,lcol2         ; no, missed.
                                                                                                                                                                                                                                              ;                inc hl              ; not used.
                                                                                                                                                                                                                                              ;                inc hl              ; y position.
                                              lda     5,x                                                     ; get shrapnel X coord                                                  ;                ld a,(hl)           ; get y.
                                              suba    Yval,y                                          ; subtract sprite X coord                                               ;                sub (ix+Y)          ; subtract sprite y.
                                              cmpa    #16                                                     ; within range?                                                                 ;                cp 16               ; within range?
                                              bcs     LCol4                                                   ; yes, collision detected                                               ;                jr c,lcol4          ; yes, collision occurred.
                      LCol2           
                                              puls    x                                                               ; (added again)                                                                                                         ; lcol2  pop hl              ; restore laser pointer from stack.
                                              bra     LCol3                                                   ; look for next piece                                                   ;                jr lcol3
                      LCol4           
                                         puls x                                                               ; (added again)                                                                 ; lcol4  pop hl              ; restore laser pointer.
                                              rts                                                                     ; return                                                                                                ;                ret                 ; return with carry set for collision.
                              ENDIF
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Main game engine code starts here                                                                                                                             ; Main game engine code starts here
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
10CF                  Game                                                                                                                                                                                                            ; game   equ $
                                                                                                                                                                                                                                              ; Set up screen address table.
10CF  CCE600          Setsat  ldd     #SCRBEG                                         ; get screen beginning                                                  ; setsat ld hl,16384       ; start of screen.
10D2  CEDA00                                  ldu     #SCADTB                                         ; point to table                                                                        ;                ld de,SCADTB        ; screen address table.
10D5  6FE2                                    clr     ,-s                                                     ; number of entries (256)                                               ;                ld b,0              ; vertical lines on screen.
                                                                                                                                                                                                                                              ; setsa0 ex de,hl          ; flip table and screen address.
                                                                                                                                                                                                                                              ;                ld (hl),d           ; write high byte.
10D7  EDC1            Setsa0  std     ,u++                                                    ; write word entry, inc pointer                         ;                ld (hl),d           ; write high byte.
                                                                                                                                                                                                                                              ;                inc h               ; second table.
                                                                                                                                                                                                                                              ;                ld (hl),e           ; write low byte.
                                                                                                                                                                                                                                              ;                dec h               ; back to first table.
                                                                                                                                                                                                                                              ;                inc l               ; next position in table.
                                                                                                                                                                                                                                              ;                ex de,hl            ; flip table and screen address back again.
                                                                                                                                                                                                                                              ;                call nline          ; next line down.
10D9  C30020                                  addd    #32                                                     ; add 32 to go byte below
10DC  81FE                                    cmpa    #$fe                                                    ; end of screen?
10DE  2502                                    bcs     Setsa1                                          ; no, skip next
10E0  8680                                    lda     #$80                                                    ; point to ROM (now in RAM)
10E2  6AE4            Setsa1  dec     ,s                                                              ; decrement counter
10E4  26F1                                    bne     Setsa0                                          ; not yet done? loopback                                                ;                djnz setsa0         ; repeat for all lines.
10E6  3261                                    leas    1,s                                                     ; clean stack
10E8  BD1DDC                                  jsr     SetPMode                                                ; set desired PMode                                                             ; Init graphics mode
                                                                                                                              ; not needed for 6847                                                   ;                call setpal         ; set up ULAplus palette.
10EB  BD1E00                                  jsr     CfgHdw                                          ; config Sound and Interrupts
                              IF PFLAG
                                              jsr     IniShr                                          ; initialise particle engine                                    ; rpblc2 call inishr       ; initialise particle engine.
                              ENDIF
10EE  BD2445                                  jsr     Evnt12                                          ; call intro/menu event                                                 ; evintr call evnt12       ; call intro/menu event.
10F1  8EDC00                                  ldx     #MAP                                                    ; point to MAP                                                                          ;                ld hl,MAP           ; block properties.
10F4  8602                                    lda     #WALL                                                   ; get value for WALL                                                            ;                ld de,MAP+1         ; next byte.
10F6  A780            FillMap1        sta     ,x+                                                     ; put into MAP                                                                          ;                ld bc,767           ; size of property map.
10F8  8CDF00                                  cmpx    #ENDMAP                                         ; filled all MAP?                                                                       ;                ld (hl),WALL        ; write default property.
10FB  25F9                                    blo     FillMap1                                                ; no, loopback                                                                          ;                ldir
                              IF OFLAG
10FD  BD1014                                  jsr     IniOb                                                   ; initialize objects                                                            ;                call iniob          ; initialise objects.
                              ENDIF
                                                                                                                                                                                                                                              ;                xor a               ; put zero in accumulator.
1100  0F24                                    clr     <gamWon                                         ; reset game won flag                                                   ;                ld (gamwon),a       ; reset game won flag.
1102  8E138B                                  ldx     #score                                          ; point to score                                                                        ;                ld hl,score         ; score.
1105  BD1221                                  jsr     IniSc                                                   ; init the score                                                                        ;                call inisc          ; init the score.
1108  B61F23          MapSt           lda     stMap                                                   ; get position on map                                                   ; mapst  ld a,(stmap)      ; start position on map.
110B  B70074                                  sta     roomTb                                          ; put into table                                                                        ;                ld (roomtb),a       ; set up position in table, if there is one.
110E                  IniPbl  
                              IF AFLAG                                                                                                                                                                                                ; .if aflag
                                              ldd     #eop                                    ; reset blockpointer                                                            ; lda #<eop        
                                              std     <pbPtr                                          ; put at write pointer                                                  ; sta pbptr
                                                                                                                                                                                                                                      ; lda #>eop
                                                                                                                                                                                                                                              ; sta pbptr+1
                              ENDIF                                                                                                                                                                                                   ; .endif
110E  BD1B3A                                  jsr     InitSc                                          ; setup 1st screen number                                               ; inipbl call initsc       ; set up first screen.
1111  8ED5A5                                  ldx     #sSprit                                         ; point to spare sprite                                                 ;                ld ix,ssprit        ; default to spare sprite in table.
1114  BD24F2          EvIni           jsr     Evnt13                                          ; Initialisation                                                                        ; evini  call evnt13       ; initialisation.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Two restarts                                                                                                                                                                                  ; Two restarts.
                      ; First restart - clear all sprites and initialise everything                                                   ; First restart - clear all sprites and initialise everything.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1117  BD11CF          RstRt           jsr     RsEvt                                                   ; restart events                                                                        ; rstrt  call rsevt        ; restart events.
111A  BD1007                                  jsr     XSpr                                                    ; clear sprite table                                                            ;                call xspr           ; clear sprite table.
111D  BD1C8E                                  jsr     SprLst                                          ; fetch pointer to screen sprites                       ;                call sprlst         ; fetch pointer to screen sprites.
1120  BD1CD2                                  jsr     ISpr                                                    ; initialise sprite table                                               ;                call ispr           ; initialise sprite table.
1123  200C                                    bra     RstRt0                                          ; setup player and sprites                                              ;                jr rstrt0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Second restart - clear all but player, and don't initialise him                                               ; Second restart - clear all but player, and don't initialise him.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1125  BD11CF          RstRtn  jsr     RsEvt                                                   ; restart events                                                                        ; rstrtn call rsevt        ; restart events.
1128  BD1CA3                                  jsr     NSpr                                                    ; clear all non-player sprites                          ;                call nspr           ; clear all non-player sprites.
112B  BD1C8E                                  jsr     SprLst                                          ; fetch pointer to screen sprites                       ;                call sprlst         ; fetch pointer to screen sprites.
112E  BD1CF8                                  jsr     KSpr                                                    ; initialise sprite table, no more players;              call kspr           ; initialise sprite table, no more players.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Set up the player and/or enemy sprites                                                                                                                ; Set up the player and/or enemy sprites.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1131  4F              RstRt0  clra                                                                    ; value zero                                                                            ; rstrt0 xor a             ; zero in accumulator.
1132  9721                                    sta     <nexLev                                         ; reset next level flag                                                 ;                ld (nexlev),a       ; reset next level flag.
1134  9722                                    sta     <restFl                                         ; reset restart flag                                                            ;                ld (restfl),a       ; reset restart flag.
1136  9723                                    sta     <deadF                                          ; reset dead flag                                                                       ;                ld (deadf),a        ; reset dead flag.
1138  BD1583                                  jsr     DRoom                                                   ; show screen layout                                                            ;                call droom          ; show screen layout.
113B                  RpBlc0  
                              IF PFLAG                                                                                                                                                                                                ; .if pflag
                                              jsr     IniShr                                          ; initialise particle engine                                    ; rpblc0 call inishr       ; initialise particle engine.
                              ENDIF                                                                                                                                                                                                   ; .endif
                              IF AFLAG                                                                                                                                                                                                ; .if aflag
                                              jsr     RBloc                                   ; draw blocks for this screen                                   ; jsr rbloc        
                              ENDIF                                                                                                                                                                                                   ; .endif
                              IF OFLAG
113B  BD1244                                  jsr     ShwOb                                                   ; show Objects                                                                          ;                call shwob          ; draw objects.
                              ENDIF
                                                                                                                                                                                                                                              ;                ld ix,sprtab        ; address of sprite table, even sprites.
                                                                                                                                                                                                                                              ;                call dspr           ; display sprites.
                                                                                                                                                                                                                                              ;                ld ix,sprtab+TABSIZ ; address of first odd sprite.
                                                                                                                                                                                                                                              ;                call dspr           ; display sprites.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
113E  BD102C          MLoop           jsr     VSync                                                   ; synchronize with display                                              ; mloop  call vsync        ; synchronise with display.
1141  8ED4D9                                  ldx     #sprTab                                         ; point to sprites Table                                                ;                ld ix,sprtab        ; address of sprite table, even sprites.
1144  BD193E                                  jsr     DSpr                                                    ; show sprites (even ones)                                              ;                call dspr           ; display even sprites.
                                                                                                                                                                                                                                              ; ;       call plsnd       ; play sounds.
1147  BD102C                                  jsr     VSync                                                   ; synchronize with display                                              ;                call vsync          ; synchronise with display.
114A  8ED4EA                                  ldx     #sprTab+TABSIZ                          ; point to first odd sprite                                     ;                ld ix,sprtab+TABSIZ ; address of first odd sprite.
114D  BD193E                                  jsr     DSpr                                                    ; show sprites (odd ones)                                               ;                call dspr           ; display odd sprites.
1150  8ED5A5                                  ldx     #sSprit                                                                                                                                                         ;                ld ix,ssprit        ; point to spare sprite for spawning purposes.
1153  9FA8                                    stx     <reg_IX
1155  BD22B1          EvLp1           jsr     Evnt10                                          ; call event10                                                                          ; evlp1  call evnt10       ; called once per main loop.
1158  BD18FF                                  jsr     PSpr                                                    ; process sprites                                                                       ;                call pspr           ; process sprites.
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Main loop events                                                                                                                                                                      ; Main loop events.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
115B  108ED5A5                                ldy     #sSprit                                         ; point to spare sprite data                                    ;                ld ix,ssprit        ; point to spare sprite for spawning purposes.
115F  BD2444          EvLp2           jsr     Evnt11                                          ; process event 11                                                              ; evlp2  call evnt11       ; called once per main loop.
1162  9621                                    lda     <nexLev                                         ; next level flag?                                                              ;                ld a,(nexlev)       ; finished level flag.
                                                                                                                                                                                                                                              ;                and a               ; has it been set?
1164  2614                                    bne     NewLev                                          ; yes, go to next       one                                                     ;                jr nz,newlev        ; yes, go to next level.
1166  9624                                    lda     <gamWon                                         ; game finished?                                                                        ;                ld a,(gamwon)       ; finished game flag.
                                                                                                                                                                                                                                              ;                and a               ; has it been set?
1168  261C                                    bne     EvWon                                                   ; yes, end game                                                                 ;                jr nz,evwon         ; yes, finish the game.
116A  9622                                    lda     <restFl                                         ; restart flag?                                                                 ;                ld a,(restfl)       ; finished level flag.
116C  4A                                      deca                                                                    ; was it set (=1)?                                                              ;                dec a               ; has it been set?
116D  27A8                                    beq     RstRt                                                   ; yes, restart                                                                          ;                jr z,rstrt          ; yes, go to next level.
116F  4A                                      deca                                                                    ; was restart =2?                                                                       ;                dec a               ; has it been set?
1170  27B3                                    beq     RstRtn                                          ; yes, do this restart                                                  ;                jr z,rstrtn         ; yes, go to next level.
1172  9623                                    lda     <deadF                                          ; dead flag?                                                                            ;                ld a,(deadf)        ; dead flag.
                                                                                                                                                                                                                                              ;                and a               ; is it non-zero?
1174  2615                                    bne     PDead                                                   ; yes, go player dead                                                   ;                jr nz,pdead         ; yes, player dead.
                                                                                                                                                                                                                                              ;                ld hl,frmno         ; game frame.
1176  0C01                                    inc     <frmNo                                          ; increment frame number                                                ;                inc (hl)            ; advance the frame.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; inc clock (ONLY for THE ATOM, not Z80)
1178  20C4                                    bra     MLoop                                                   ; loopback                                                                                      ; qoff   jp mloop          ; switched to a jp nz,mloop during test mode.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF AFLAG                                                                                                                                                                                                ; .if aflag
                      RBloc                                                                                                                                                                                                           ; rbloc:
                                              ldd     #eop                                                    ; reset temp blockpointer                                       ; lda #<eop        ; reset temp blockpointer
                                              std     <tmp                                                    ; store in tmp pointer (reset it)                       ; sta tmp
                                                                                                                                                                                                                                              ; lda #>eop
                                                                                                                                                                                                                                              ; sta tmp+1
                      RBloc2                                                                                                                                                                                                  ; rbloc2:
                                              ldd     <tmp                                                    ; get last block                                                                        ; lda tmp            ; check for last block
                                              cmpd    <pbPtr                                          ; compare to write pointer                                              ; cmp pbptr
                                              bne     RBloc1                                          ; not equal? process it                                                 ; bne rbloc1
                                                                                                                                                                                                                                              ; lda tmp+1
                                                                                                                                                                                                                                              ; cmp pbptr+1
                                                                                                                                                                                                                                              ; bne rbloc1
                                              rts                                                                     ; return                                                                                                ; rts
                      RBloc1                                                                                  ; READ BLOCK                                                                            ; rbloc1:
                                              ldx     <tmp                                                    ; get pointer                                                                           ; ldy #0
                                              lda     ,x                                                              ; get block room number                                         ; lda (tmp),y        ; check if block for this scno
                                              cmpa    <scNo                                                   ; matches current room?                                                 ; cmp scno
                                              bne     RBloc0                                          ; not, skip                                                                                     ; bne rbloc0        ; if not, skip
                                                                                                                                                                                                                                              ; iny
                                              lda     1,x                                                     ; get y                                                                                         ; lda (tmp),y        ; get y
                                              sta     <dispY                                          ; put into variable                                                             ; sta dispy
                                                                                                                                                                                                                                      ; iny
                                              lda     2,x                                                     ; get x                                                                                         ; lda (tmp),y        ; get x
                                              sta     <dispX                                          ; put into variable                                                             ; sta dispx
                                                                                                                                                                                                                                              ; iny
                                              lda     3,x                                                     ; get blocknr                                                                           ; lda (tmp),y        ; get blocknr
                                              jsr     PAttr2                                          ; draw block (uses regX)                                                ; jsr pattr2        ; draw block
                      RBloc0                                                                                                                                                                                                  ; rbloc0:
                                                                                                                                                                                                                                      ; clc            ; point to next block
                                              ldd     <tmp                                                    ; get pointer                                                                           ; lda tmp
                                              addd    #4                                                              ; point to next block entry                                     ; adc #4
                                                                                                                                                                                                                                              ; sta tmp
                                                                                                                                                                                                                                              ; bcc rbloc2zzz
                                              std     <tmp                                                    ; update pointer                                                                        ; inc tmp+1
                                              bra     RBloc2                                          ; loopback                                                                                      ; jmp rbloc2
                              ENDIF                                                                                                                                                                                                   ; .endif
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
117A  966E            NewLev  lda     <scNo                                                                                                                                                                   ; newlev ld a,(scno)       ; current screen.
                                                                                                                                                                                                                                              ;                ld hl,numsc         ; total number of screens.
117C  4C                                      inca                                                                                                                                                                                    ;                inc a               ; next screen.
117D  B15F00                                  cmpa    numSc                                                                                                                                                                   ;                cp (hl)             ; reached the limit?
1180  2404                                    bcc     EvWon                                                                                                                                                                   ;                jr nc,evwon         ; yes, game finished.
1182  976E                                    sta     <scNo                                                                                                                                                                   ;                ld (scno),a         ; set new level number.
                      ;;O                     lbra    RstRt                                                                                                                                                                   ;                jp rstrt            ; restart, clearing all aliens.
1184                                          CONDJMP "bra", RstRt                                                                                                                                            ;                jp rstrt            ; restart, clearing all aliens.
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1184  20                                      fcb     com_\1
1185  91                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1186  BD266F          EvWon           jsr     Evnt18                                                                                                                                                          ; evwon  call evnt18       ; game completed.
1189  2011                                    bra     TidyUp                                                                                                                                                          ;                jp tidyup           ; tidy up and return to BASIC/calling routine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Player dead                                                                                                                                                                                   ; Player dead.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
118B  109EA8          PDead           ldy     <reg_IX                                                                                                                                                         ; pdead  xor a             ; zeroise accumulator.
118E  0F23                                    clr     <deadF                                                                                                                                                                  ;                ld (deadf),a        ; reset dead flag.
1190  BD2625          EvDie           jsr     Evnt16                                                                                                                                                          ; evdie  call evnt16       ; death subroutine.
1193  9670                                    lda     <numLif                                                                                                                                                         ;                ld a,(numlif)       ; number of lives.
                                                                                                                                                                                                                                              ;                and a               ; reached zero yet?
1195  1026FF7E                                lbne    RstRt                                                                                                                                                                   ;                jp nz,rstrt         ; restart game.
1199  BD2630          EvFail  jsr     Evnt17                                                                                                                                                          ; evfail call evnt17         ; failure event.
119C  8E1391          TidyUp  ldx     #hiScor                                                                                                                                                         ; tidyup ld hl,hiscor        ; high score.
119F  CE138B                                  ldu     #score                                                                                                                                                          ;                ld de,score         ; player's score.
11A2  C606                                    ldb     #6                                                                                                                                                                              ;                ld b,6              ; digits to check.
11A4  A6C0            TidyU2  lda     ,u+                                                                                                                                                                     ; tidyu2 ld a,(de)           ; get score digit.
11A6  A180                                    cmpa    ,x+                                                                                                                                                                     ;                cp (hl)             ; are we larger than high score digit?
11A8  2505                                    bcs     TidyU0                                                                                                                                                          ;                jr c,tidyu0         ; high score is bigger.
11AA  260F                                    bne     TidyU1                                                                                                                                                          ;                jr nz,tidyu1        ; score is greater, record new high score.
                                                                                                                                                                                                                                              ;                inc hl              ; next digit of high score.
11AC  5A                                      decb                                                                                                                                                                                    ;                inc de              ; next digit of score.
11AD  26F5                                    bne     TidyU2                                          ; restart Game                                                                          ;                djnz tidyu2         ; repeat for all digits.
11AF                  TidyU0                                                                                                                                                                                                  ; tidyu0 ld hl,10072         ; BASIC likes this in alternate hl.
                                                                                                                                                                                                                                              ;                exx                 ; flip hl into alternate registers.
                                                                                                                                                                                                                                              ;                ld bc,score         ; return pointing to score.
11AF  BD0FEB                                  jsr     PrsKey                                          ; wait for a keypress
11B2  8103                                    cmpa    #3                                                              ; was it Break?
11B4  10270C10                                lbeq    ExitGame                                                ; yes, end game and reset machine
11B8  7E0E08                                  jmp     NewGame                                         ; start new game                                                                        ;                ret
11BB  8E138B          TidyU1  ldx     #score                                                                                                                                                          ; tidyu1 ld hl,score         ; score.
11BE  CE1391                                  ldu     #hiScor                                                                                                                                                         ;                ld de,hiscor        ; high score.
11C1  C606                                    ldb     #6                                                                                                                                                                              ;                ld bc,6             ; digits to copy.
11C3  A680            1                       lda     ,x+
11C5  A7C0                                    sta     ,u+
11C7  5A                                      decb
11C8  26F9                                    bne     1b                                                                                                                                                                              ;                ldir                ; copy score to high score.
11CA  BD273B          EvNewH  jsr     Evnt19                                                                                                                                                          ; evnewh call evnt19         ; new high score event.
11CD  20E0                                    bra     TidyU0                                                                                                                                                          ;                jr tidyu0           ; tidy up.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Restart event                                                                                                                                                                         ; Restart event.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
11CF  8ED5A5          RsEvt           ldx     #sSprit                                         ; point to spare sprite                                                 ; rsevt  ld ix,ssprit        ; default to spare element in table.
11D2  7E260B          Evrs            jmp     Evnt14                                          ; there is an RTS all alone                                     ; evrs   jp evnt14           ; call restart event.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Copy number passed in A to string position bc, right-justified.                                               ; Copy number passed in a to string position bc, right-justified.
                      ; regU contains the pointer to the destination string
                      ; regA contains the number to convert
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
11D5  C664            Num2Ch  ldb     #100                                                    ; do hundreds                                                                           ; num2ch ld l,a              ; put accumulator in l.
11D7  D72E                                    stb     <subUnit                                                ; save into variable                                                            ;                ld h,0              ; blank high byte of hl.
11D9  C620                                    ldb     #32                                                     ; for leading spaces                                                            ;                ld a,32             ; leading spaces.
                                                                                                                                                                                                                                              ; numdg3 ld de,100           ; hundreds column.
11DB  8D14            NumDg3  bsr     NumDg                                                   ; calculate digit for hundreds                          ;                call numdg          ; show digit.
11DD  D7A2                                    stb     <reg_B                                          ; save regB
11DF  C60A            NumDg2  ldb     #10                                                     ; do tens                                                                                       ; numdg2 ld de,10            ; tens column.
11E1  D72E                                    stb     <subUnit                                                ; save into variable
11E3  D6A2                                    ldb     <reg_B                                          ; restore regB
11E5  8D0A                                    bsr     NumDg                                                   ; calculate digit for tens                                              ;                call numdg          ; show digit.
11E7  CA10                                    orb     #16                                                     ; to force last digit to be shown                       ;                or 16               ; last digit is always shown.
11E9  D7A2                                    stb     <reg_B                                          ; save regB
11EB  C601                                    ldb     #1                                                              ; do units                                                                                      ;                ld de,1             ; units column.
11ED  D72E                                    stb     <subUnit                                                ; save into variable
11EF  D6A2                                    ldb     <reg_B                                          ; restore regB
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
11F1  C430            NumDg           andb    #48                                                     ; clear carry and previous digit                                ; numdg  and 48              ; clear carry, clear digit.
11F3  902E            NumDg1  suba    <subUnit                                                ; subtract unit (100,10,1)                                              ; numdg1 sbc hl,de           ; subtract from column.
11F5  2505                                    bcs     NumDg0                                          ; if negative, exit loop                                                ;                jr c,numdg0         ; nothing to show.
11F7  CA10                                    orb     #16                                                     ; convert to ASCII digit                                                ;                or 16               ; something to show, make it a digit.
11F9  5C                                      incb                                                                    ; increment digit                                                                       ;                inc a               ; increment digit.
11FA  20F7                                    bra     NumDg1                                          ; loopback                                                                                      ;                jr numdg1           ; repeat until column is zero.
11FC  9B2E            NumDg0  adda    <subUnit                                                ; covert to positive again                                              ; numdg0 add hl,de           ; restore total.
11FE  C120                                    cmpb    #32                                                     ; was char equal to space?                                              ;                cp 32               ; leading space?
1200  2702                                    beq     NumDEx                                          ; yes, exit                                                                                     ;                ret z               ; yes, don't write that.
1202  E7C0                                    stb     ,u+                                                     ; no, save digit, advance pointer                       ;                ld (bc),a           ; write digit to buffer.
                                                                                                                                                                                                                                              ;                inc bc              ; next buffer position.
1204  39              NumDEx  rts                                                                     ; return                                                                                                ;                ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ; CONVERTED FOR TESTDISPLAY
1205  CE1B36          Num2dd  ldu     #dispL0                                         ; keep number in register A                                     ; num2dd ld l,a              ; put accumulator in l.
                                                                                                                                                                                                                                              ;                ld h,0              ; blank high byte of hl.
                                                                                                                                                                                                                                              ;                ld a,32             ; leading spaces.
1208  C664                                    ldb     #100                                                    ; for hundreds                                                                          ;                ld de,100           ; hundreds column.
120A  D72E                                    stb     <subUnit                                                ; save into variable
120C  C620                                    ldb     #32                                                     ; for leading spaces
120E  8DE1                                    bsr     NumDg                                                   ; show digit                                                                            ;                call numdg          ; show digit.
1210  CA10                                    orb     #16                                                     ; force digit to be shown                                               ;                or 16               ; second digit is always shown.
1212  D7A2                                    stb     <reg_B                                          ; save regB
1214  20C9                                    bra     NumDg2                                          ; show number                                                                           ;                jr numdg2
1216  CE1B36          Num2td  ldu     #dispL0                                         ; keep number in register A                                     ; num2td ld l,a              ; put accumulator in l.
1219  C664                                    ldb     #100                                                    ; for hundreds                                                                          ;                ld h,0              ; blank high byte of hl.
121B  D72E                                    stb     <subUnit                                                ; save into variable
121D  C630                                    ldb     #48                                                     ; leading spaces                                                                        ;                ld a,48             ; leading spaces.
121F  20BA                                    bra     NumDg3                                          ; show number                                                                           ;                jr numdg3
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1221  CC3006          IniSc           ldd     #'0'*256+6                                      ; '0' char and numbytes to write                                ; inisc  ld b,6              ; digits to initialise.
1224  A780            IniSc0  sta     ,x+                                                     ; put one                                                                                       ; inisc0 ld (hl),'0'         ; write zero digit.
1226  5A                                      decb                                                                    ; decrement counter                                                             ;                inc hl              ; next column.
1227  26FB                                    bne     IniSc0                                          ; if not done, loop                                                             ;                djnz inisc0         ; repeat for all digits.
1229  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Multiply h by d and return in hl                                                                                                                              ; Multiply h by d and return in hl.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR TESTMUL - #09 - DONE
122A                  IMul                                                                                                                                                                                                            ; imul   ld e,d              ; HL = H * D
                                                                                                                                                                                                                                              ;                ld c,h              ; make c first multiplier.
122A  3D                                      mul                                                                     ; multiply parameters                                                   ; imul0  ld hl,0             ; zeroise total.
122B  DDA6                                    std     <reg_HL                                         ; result into reg_HL                                                            ;                ld d,h              ; zeroise high byte.
                                                                                                                                                                                                                                              ;                ld b,8              ; repeat 8 times.
                                                                                                                                                                                                                                              ; imul1  rr c                ; rotate rightmost bit into carry.
                                                                                                                                                                                                                                              ;                jr nc,imul2         ; wasn't set.
                                                                                                                                                                                                                                              ;                add hl,de           ; bit was set, so add de.
                                                                                                                                                                                                                                              ;                and a               ; reset carry.
                                                                                                                                                                                                                                              ; imul2  rl e                ; shift de 1 bit left.
                                                                                                                                                                                                                                              ;                rl d
                                                                                                                                                                                                                                              ;                djnz imul1          ; repeat 8 times.
122D  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Divide d by e and return in d, remainder in a                                                                                         ; Divide d by e and return in d, remainder in a.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
122E  97A5            IDiv            sta     <reg_E                                          ; save divisor
1230  D7A4                                    stb     <reg_D                                          ; save dividend
1232  4F                                      clra                                                                    ; reset remainder                                                                       ; idiv   xor a
1233  C608                                    ldb     #8                                                              ; bits to shift                                                                 ;                ld b,8              ; bits to shift.
1235  08A4            IDiv0           asl     <reg_D                                          ; multiply by 2                                                                 ; idiv0  sla d               ; multiply d by 2.
1237  49                                      rola                                                                    ; carry to remainder                                                            ;                rla                 ; shift carry into remainder.
1238  91A5                                    cmpa    <reg_E                                          ; reaminder greater than divisor?                       ;                cp e                ; test if e is smaller.
123A  2504                                    bcs     IDiv1                                                   ; no, skip two                                                                          ;                jr c,idiv1          ; e is greater, no division this time.
123C  90A5                                    suba    <reg_E                                          ; subtract divisor                                                              ;                sub e               ; subtract it.
123E  0CA4                                    inc     <reg_D                                          ; increment result                                                              ;                inc d               ; rotate into d.
1240  5A              IDiv1           decb                                                                    ; decrement bit counter                                                 ; idiv1  djnz idiv0
1241  26F2                                    bne     IDiv0                                                   ; not yet done, loopback                                                                                                        
1243  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Initialise a sound.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; isnd   ld de,(ch1ptr)      ; first pointer.
                      ;                                                                                                                                                                                                                       ;                ld a,(de)           ; get first byte.
                      ;                                                                                                                                                                                                                       ;                inc a               ; reached the end?
                      ;                                                                                                                                                                                                                       ;                jr z,isnd1          ; that'll do.
                      ;                                                                                                                                                                                                                       ;                ld de,(ch2ptr)      ; second pointer.
                      ;                                                                                                                                                                                                                       ;                ld a,(de)           ; get first byte.
                      ;                                                                                                                                                                                                                       ;                inc a               ; reached the end?
                      ;                                                                                                                                                                                                                       ;                jr z,isnd2          ; that'll do.
                      ;                                                                                                                                                                                                                       ;                ld de,(ch3ptr)      ; final pointer.
                      ;                                                                                                                                                                                                                       ;                ld a,(de)           ; get first byte.
                      ;                                                                                                                                                                                                                       ;                inc a               ; reached the end?
                      ;                                                                                                                                                                                                                       ;                jr z,isnd3          ; that'll do.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; isnd1  ld (ch1ptr),hl      ; set up the sound.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; isnd2  ld (ch2ptr),hl      ; set up the sound.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; isnd3  ld (ch3ptr),hl      ; set up the sound.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; ch1ptr defw spmask
                      ;                                                                                                                                                                                                                       ; ch2ptr defw spmask
                      ;                                                                                                                                                                                                                       ; ch3ptr defw spmask
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plsnd  call plsnd1         ; first channel.
                      ;                                                                                                                                                                                                                       ;                call plsnd2         ; second one.
                      ;                                                                                                                                                                                                                       ;                call plsnd3         ; final channel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; Write the contents of our AY buffer to the AY registers.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; w8912  ld hl,snddat        ; start of AY-3-8912 register data.
                      ;                                                                                                                                                                                                                       ;                ld de,14*256        ; start with register 0, 14 to write.
                      ;                                                                                                                                                                                                                       ;                ld c,253            ; low byte of port to write.
                      ;                                                                                                                                                                                                                       ; w8912a ld b,255            ; port 65533=select soundchip register.
                      ;                                                                                                                                                                                                                       ;                out (c),e           ; tell chip which register we're writing.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; value to write.
                      ;                                                                                                                                                                                                                       ;                ld b,191            ; port 49149=write value to register.
                      ;                                                                                                                                                                                                                       ;                out (c),a           ; this is what we're putting there.
                      ;                                                                                                                                                                                                                       ;                inc e               ; next sound chip register.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; next byte to write.
                      ;                                                                                                                                                                                                                       ;                dec d               ; decrement loop counter.
                      ;                                                                                                                                                                                                                       ;                jp nz,w8912a        ; repeat until done.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; snddat defw 0              ; tone registers, channel A.
                      ;                                                                                                                                                                                                                       ;                defw 0              ; channel B tone registers.
                      ;                                                                                                                                                                                                                       ;                defw 0              ; as above, channel C.
                      ;                                                                                                                                                                                                                       ; sndwnp defb 0              ; white noise period.
                      ;                                                                                                                                                                                                                       ; sndmix defb 60             ; tone/noise mixer control.
                      ;                                                                                                                                                                                                                       ; sndv1  defb 0              ; channel A amplitude/envelope generator.
                      ;                                                                                                                                                                                                                       ; sndv2  defb 0              ; channel B amplitude/envelope.
                      ;                                                                                                                                                                                                                       ; sndv3  defb 0              ; channel C amplitude/envelope.
                      ;                                                                                                                                                                                                                       ;                defw 0              ; duration of each note.
                      ;                                                                                                                                                                                                                       ;                defb 0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plwn   inc hl              ; next byte of sound.
                      ;                                                                                                                                                                                                                       ;                and 56              ; check if we're bothering with white noise.
                      ;                                                                                                                                                                                                                       ;                ret nz              ; we're not.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; fetch byte.
                      ;                                                                                                                                                                                                                       ;                ld (sndwnp),a       ; set white noise period.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plsnd2 call cksnd2         ; check sound for first channel.
                      ;                                                                                                                                                                                                                       ;                cp 255              ; reached end?
                      ;                                                                                                                                                                                                                       ;                jr z,silen2         ; silence this channel.
                      ;                                                                                                                                                                                                                       ;                and 15              ; sound bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndv2),a        ; set volume for channel.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                and 237             ; remove bits for this channel.
                      ;                                                                                                                                                                                                                       ;                ld b,a              ; store in b register.
                      ;                                                                                                                                                                                                                       ;                call plmix          ; fetch mixer details.
                      ;                                                                                                                                                                                                                       ;                and 18              ; mixer bits we want.
                      ;                                                                                                                                                                                                                       ;                or b                ; combine with mixer bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; new mixer value.
                      ;                                                                                                                                                                                                                       ;                call plwn           ; white noise check.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone low.
                      ;                                                                                                                                                                                                                       ;                ld e,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone high.
                      ;                                                                                                                                                                                                                       ;                ld d,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                ld (snddat+2),de    ; set tone.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; next bit of sound.
                      ;                                                                                                                                                                                                                       ;                ld (ch2ptr),hl      ; set pointer.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plsnd3 call cksnd3         ; check sound for first channel.
                      ;                                                                                                                                                                                                                       ;                cp 255              ; reached end?
                      ;                                                                                                                                                                                                                       ;                jr z,silen3         ; silence last channel.
                      ;                                                                                                                                                                                                                       ;                and 15              ; sound bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndv3),a        ; set volume for channel.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                and 219             ; remove bits for this channel.
                      ;                                                                                                                                                                                                                       ;                ld b,a              ; store in b register.
                      ;                                                                                                                                                                                                                       ;                call plmix          ; fetch mixer details.
                      ;                                                                                                                                                                                                                       ;                and 36              ; mixer bits we want.
                      ;                                                                                                                                                                                                                       ;                or b                ; combine with mixer bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; new mixer value.
                      ;                                                                                                                                                                                                                       ;                call plwn           ; white noise check.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone low.
                      ;                                                                                                                                                                                                                       ;                ld e,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone high.
                      ;                                                                                                                                                                                                                       ;                ld d,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                ld (snddat+4),de    ; set tone.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; next bit of sound.
                      ;                                                                                                                                                                                                                       ;                ld (ch3ptr),hl      ; set pointer.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plmix  ld a,(hl)           ; fetch mixer byte.
                      ;                                                                                                                                                                                                                       ;                and 192             ; mix bits are d6 and d7.
                      ;                                                                                                                                                                                                                       ;                rlca                ; rotate into d0 and d1.
                      ;                                                                                                                                                                                                                       ;                rlca
                      ;                                                                                                                                                                                                                       ;                ld e,a              ; displacement in de.
                      ;                                                                                                                                                                                                                       ;                ld d,0
                      ;                                                                                                                                                                                                                       ;                push hl             ; store pointer on stack.
                      ;                                                                                                                                                                                                                       ;                ld hl,mixtab        ; mixer table.
                      ;                                                                                                                                                                                                                       ;                add hl,de           ; point to mixer byte.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; fetch mixer value.
                      ;                                                                                                                                                                                                                       ;                pop hl              ; restore pointer.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; mixtab defb 63,56,7,0      ; mixer byte settings.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; silen1 xor a               ; zero.
                      ;                                                                                                                                                                                                                       ;                ld (sndv1),a        ; sound off.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                or 9                ; mix bits off.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; mixer setting for channel.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; silen2 xor a               ; zero.
                      ;                                                                                                                                                                                                                       ;                ld (sndv2),a        ; sound off.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                or 18               ; mix bits off.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; mixer setting for channel.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; silen3 xor a               ; zero.
                      ;                                                                                                                                                                                                                       ;                ld (sndv3),a        ; sound off.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                or 36               ; mix bits off.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; mixer setting for channel.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; cksnd1 ld hl,(ch1ptr)      ; pointer to sound.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; fetch mixer/flag.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; cksnd2 ld hl,(ch2ptr)      ; pointer to sound.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; fetch mixer/flag.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; cksnd3 ld hl,(ch3ptr)      ; pointer to sound.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; fetch mixer/flag.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plsnd1 call cksnd1         ; check sound for first channel.
                      ;                                                                                                                                                                                                                       ;                cp 255              ; reached end?
                      ;                                                                                                                                                                                                                       ;                jr z,silen1         ; silence first channel.
                      ;                                                                                                                                                                                                                       ;                and 15              ; sound bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndv1),a        ; set volume for channel.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                and 246             ; remove bits for this channel.
                      ;                                                                                                                                                                                                                       ;                ld b,a              ; store in b register.
                      ;                                                                                                                                                                                                                       ;                call plmix          ; fetch mixer details.
                      ;                                                                                                                                                                                                                       ;                and 9               ; mixer bits we want.
                      ;                                                                                                                                                                                                                       ;                or b                ; combine with mixer bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; new mixer value.
                      ;                                                                                                                                                                                                                       ;                call plwn           ; white noise check.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone low.
                      ;                                                                                                                                                                                                                       ;                ld e,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone high.
                      ;                                                                                                                                                                                                                       ;                ld d,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                ld (snddat),de      ; set tone.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; next bit of sound.
                      ;                                                                                                                                                                                                                       ;                ld (ch1ptr),hl      ; set pointer.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; Objects handling.
                      ;                                                                                                                                                                                                                       ; 32 bytes for image
                      ;                                                                                                                                                                                                                       ; 1 for colour
                      ;                                                                                                                                                                                                                       ; 3 for room, x and y
                      ;                                                                                                                                                                                                                       ; 3 for starting room, x and y.
                      ;                                                                                                                                                                                                                       ; 254 = disabled.
                      ;                                                                                                                                                                                                                       ; 255 = object in player's pockets.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Show items present                                                                                                                                                                    ; Show items present.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF OFLAG
1244  8E60E0          ShwOb           ldx     #objDta+33                                      ; point to objects table room number            ; shwob  ld hl,objdta        ; objects table.
                                                                                                                                                                                                                                              ;                ld de,33            ; distance to room number.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to room data.
1247  D67B                                    ldb     <numOb                                          ; number of objects in the game                         ;                ld a,(numob)        ; number of objects in the game.
                                                                                                                                                                                                                                              ;                ld b,a              ; loop counter.
1249                  ShwOb0                                                                                                                                                                                                  ; shwob0 push bc             ; store count.
                                                                                                                                                                                                                                              ;                push hl             ; store item pointer.
1249  966E                                    lda     <scNo                                                   ; get current location                                                  ;                ld a,(scno)         ; current location.
124B  A184                                    cmpa    ,x                                                              ; same as pointed object?                                               ;                cp (hl)             ; same as an item?
124D  2607                                    bne     ShwOb1                                          ; no, skip next
124F  3414                                    pshs    b,x                                                     ; save registers
1251  BD126D                                  jsr     DObjc                                                   ; show Object                                                                           ;                call z,dobjc        ; yes, display object in colour.
1254  3514                                    puls    b,x                                                     ; restore objects                                                                       ;                pop hl              ; restore pointer.
1256                  ShwOb1                                                                                                                                                                                                  ;                pop bc              ; restore counter.
                                                                                                                                                                                                                                              ;                ld de,39            ; distance to next item.
1256  308827                                  leax    39,x                                                    ; point to next object                                                  ;                add hl,de           ; point to it.
1259  5A                                      decb                                                                    ; decrement counter
125A  26ED                                    bne     ShwOb0                                          ; not yet done? loopback                                                ;                djnz shwob0         ; repeat for others.
125C  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display object                                                                                                                                                                                ; Display object.
                      ; regX points to object's room number                                                                                                                   ; hl must point to object's room number.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
125D                  DObj                                                                                                                                                                                                            ; dobj   inc hl              ; point to x.
125D  EC01                                    ldd     1,x                                                     ; get coordinates                                                                       ; dobj0  ld de,dispx         ; coordinates.
125F  DD25                                    std     <dispX                                          ; put into variables X,Y                                                ;                ldi                 ; transfer x coord.
                                                                                                                                                                                                                                              ;                ldi                 ; transfer y too.
                                                                                                                                                                                                                                              ;                ld de,65500         ; minus 36.
1261  3088DF                                  leax    -33,x                                                   ; point to object image                                                 ;                add hl,de           ; point to image.
1264  DC25            DObj1           ldd     <dispX
1266  9726                                    sta     <dispY
1268  D725                                    stb     <dispX
126A  7E150F          DObjX           jmp     Sprite                                          ; draw object as sprite                                                 ; dobj1  jp sprite           ; draw this sprite.
                                                                                                                                                                                                                                              ; 
126D  8DEE            DObjc           bsr     DObj                                                    ; display object                                                                        ; dobjc  call dobj           ; display object.
                                                                                                                                                                                                                                              ;                ld c,(hl)           ; put ink in c register.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Need to write attribute routine here.
                                                                                                                              ; NO colours to set in 6809                                     ; set up colour in c register first.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
126F                  CObj                                                                                                                                                                                                            ; cobj   ld a,(hl)           ; get colour byte.
                      ;                                                                                                                                                                                                                       ;                and a               ; test it.
                      ;                                                                                                                                                                                                                       ;                ret m               ; colour not set.
                      ;                                                                                                                                                                                                                       ;                ld h,22             ; quarter of attrubte address.
                      ;                                                                                                                                                                                                                       ;                ld a,(dispx)        ; x coord.
                      ;                                                                                                                                                                                                                       ;                and 248             ; only want multiple of 8.
                      ;                                                                                                                                                                                                                       ;                rla                 ; multiply by 4.
                      ;                                                                                                                                                                                                                       ;                rl h
                      ;                                                                                                                                                                                                                       ;                rla
                      ;                                                                                                                                                                                                                       ;                rl h                ; high byte now set up.
                      ;                                                                                                                                                                                                                       ;                ld l,a
                      ;                                                                                                                                                                                                                       ;                ld a,(dispy)        ; take y position.
                      ;                                                                                                                                                                                                                       ;                rra                 ; divide it by 8.
                      ;                                                                                                                                                                                                                       ;                rra
                      ;                                                                                                                                                                                                                       ;                rra
                      ;                                                                                                                                                                                                                       ;                and 31              ; remove unwanted bits.
                      ;                                                                                                                                                                                                                       ;                add a,l             ; add to low byte.
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; low byte of address.
                      ;                                                                                                                                                                                                                       ;                ld de,30            ; distance to next line down.
                      ;                                                                                                                                                                                                                       ;                ld a,(dispx)        ; x coordinate.
                      ;                                                                                                                                                                                                                       ;                ld b,3              ; default rows to write.
                      ;                                                                                                                                                                                                                       ;                and 7               ; does x straddle cells?
                      ;                                                                                                                                                                                                                       ;                jr nz,cobj0         ; yes, loop counter is good.
                      ;                                                                                                                                                                                                                       ;                dec b               ; one less row to write.
                      ;                                                                                                                                                                                                                       ; cobj0  ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ;                and 248             ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ;                inc l               ; next cell.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ;                and 248             ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ;                inc l               ; next cell.
                      ;                                                                                                                                                                                                                       ;                ld a,(dispy)        ; y coordinate.
                      ;                                                                                                                                                                                                                       ;                and 7               ; straddling cells?
                      ;                                                                                                                                                                                                                       ;                jr z,cobj1          ; no, only 2 wide.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ;                and 248             ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ; cobj1  add hl,de           ; next row.
                      ;                                                                                                                                                                                                                       ;                djnz cobj0
126F  39                                      rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Remove an object                                                                                                                                                                      ; Remove an object.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1270  917B            RemOb           cmpa    <numOb                                                                                                                                                          ; remob  ld hl,numob         ; number of objects in game.
1272  240E                                    bcc     RemObEx                                                                                                                                                         ;        cp (hl)             ; are we checking past the end?
                                                                                                                                                                                                                                              ;        ret nc              ; yes, can't get non-existent item.
1274  3402                                    pshs    a                                                                                                                                                                               ;        push af             ; remember object.
1276  BD1283                                  jsr     GetOb                                                                                                                                                                   ;        call getob          ; pick it up if we haven't already got it.
1279  3502                                    puls    a                                                                                                                                                                               ;        pop af              ; retrieve object number.
127B  BD12A8                                  jsr     GotOb                                                                                                                                                                   ;        call gotob          ; get its address.
127E  86FE                                    lda     #254                                                                                                                                                                    ;        ld (hl),254         ; remove it.
1280  977B                                    sta     <numOb
1282  39              RemObEx rts                                                                                                                                                                                     ;        ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Pick up object number held in the accumulator                                                                                         ; Pick up object number held in the accumulator.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1283                  GetOb                                                                                                                                                                                                           ; getob  ld hl,numob         ; number of objects in game.
1283  917B                                    cmpa    <numOb                                                                                                                                                                  ;                cp (hl)             ; are we checking past the end?
1285  2420                                    bcc     GetObEx                                                                                                                                                         ;                ret nc              ; yes, can't get non-existent item.
1287  BD12A8                                  jsr     GotOb                                                                                                                                                                   ;                call gotob          ; check if we already have it.
128A  271B                                    beq     GetObEx                                                                                                                                                         ;                ret z               ; we already do.
                                                                                                                                                                                                                                              ;                ex de,hl            ; object address in de.
128C  9EA6                                    ldx     <reg_HL                                                                                                                                                         ;                ld hl,scno          ; current screen.
128E  916E                                    cmpa    <scNo                                                                                                                                                                   ;                cp (hl)             ; is it on this screen?
                                                                                                                                                                                                                                              ;                ex de,hl            ; object address back in hl.
1290  2611                                    bne     GetOb0                                                                                                                                                          ;                jr nz,getob0        ; not on screen, so nothing to delete.
1292  86FF                                    lda     #255                                                                                                                                                                    ;                ld (hl),255         ; pick it up.
1294  A780                                    sta     ,x+                                                                                                                                                                     ;                inc hl              ; point to x coord.
1296  EC84            GetOb1  ldd     ,x                                                                                                                                                                              ; getob1 ld e,(hl)           ; x coord.
                                                                                                                                                                                                                                              ;                inc hl              ; back to y coord.
                                                                                                                                                                                                                                              ;                ld d,(hl)           ; y coord.
1298  DD25                                    std     <dispX                                          ; save inverted, DObj1 corrects it                      ;                ld (dispx),de       ; set display coords.
                                                                                                                                                                                                                                              ;                ld de,65501         ; minus graphic size.
129A  3088DE                                  leax    -34,x                                                                                                                                                                   ;                add hl,de           ; point to graphics.
                                              
129D  BD1264                                  jsr     DObj1                                                   ; delete collected object                                               ;                call dobj1          ; delete object sprite.
                                                                                                                                                                                                                                              ;                ld a,(bcol)         ; first block colour.
                                                                                                                                                                                                                                              ;                and 7               ; only want ink attribute.
                                                                                                                                                                                                                                              ;                ld c,a              ; set up colour.
12A0  7E126F                                  jmp     CObj                                                                                                                                                                    ;                jp cobj             ; colour object's old position.
12A3  86FF            GetOb0  lda     #255
12A5  A784                                    sta     ,x                                                                                                                                                                              ; getob0 ld (hl),255         ; pick it up.
12A7  39              GetObEx rts                                                                                                                                                                                     ;                ret
                              ENDIF
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Got object check                                                                                                                                                                      ; Got object check.
                      ; Call with object in accumulator, returns zero set if in pockets                                               ; Call with object in accumulator, returns zero set if in pockets.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF OFLAG+MFLAG
12A8                  GotOb                                                                                                                                                                                                           ; gotob  ld hl,numob         ; number of objects in game.
12A8  917B                                    cmpa    <numOb                                          ; are we checking past the end?                         ;                cp (hl)             ; are we checking past the end?
12AA  2406                                    bcc     GotOb0                                          ; yes, we can't have a non-existent object;              jr nc,gotob0        ; yes, we can't have a non-existent object.
12AC  BD12B6                                  jsr     FindOb                                          ; find object                                                                           ;                call findob         ; find the object.
12AF  81FF            GotOb1  cmpa    #255                                                    ; in pocket's?                                                                          ; gotob1 cp 255              ; in pockets?
12B1  39                                      rts                                                                     ; return result in flags                                                ;                ret
12B2  86FE            GotOb0  lda     #254                                                    ; disabled                                                                                      ; gotob0 ld a,254            ; missing.
12B4  20F9                                    bra     GotOb1                                          ; exit testing                                                                          ;                jr gotob1
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
12B6  3410            FindOb  pshs    x                                                               ; save working register
12B8  8E60BF                                  ldx     #objDta                                         ; point to objects table                                                ; findob ld hl,objdta        ; objects.
                                                                                                                                                                                                                                              ;                ld de,39            ; size of each object.
12BB  4D                                      tsta                                                                    ; received zero?                                                                        ;                and a               ; is it zero?
12BC  2706                                    beq     FndOb1                                          ; yes, skip loop                                                                        ;                jr z,fndob1         ; yes, skip loop.
                                                                                                                                                                                                                                              ;                ld b,a              ; loop counter in b.
12BE  308827          FndOb2  leax    39,x                                                    ; point to next object                                                  ; fndob2 add hl,de           ; point to next one.
12C1  4A                                      deca                                                                    ; decrement number of Object
12C2  26FA                                    bne     FndOb2                                          ; not zero, loopback                                                            ;                djnz fndob2         ; repeat until we find address.
12C4                  FndOb1                                                                                                                                                                                                  ; fndob1 ld e,33             ; distance to room it's in.
12C4  308821                                  leax    33,x                                                    ; point to room where object is                         ;                add hl,de           ; point to room.
12C7  9FA6                                    stx     <reg_HL                                         ; save pointer
12C9  A684                                    lda     ,x                                                              ; get status                                                                            ;                ld a,(hl)           ; fetch status.
12CB  3590                                    puls    x,pc                                                    ; restore register and return                                   ;                ret
                              ENDIF
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drop object number at (dispx, dispy)                                                                                                                  ; Drop object number at (dispx, dispy).
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF OFLAG
12CD                  DrpOb                                                                                                                                                                                                           ; drpob  ld hl,numob         ; number of objects in game.
12CD  917B                                    cmpa    <numOb                                          ; are we checking past the end?                         ;                cp (hl)             ; are we checking past the end?
12CF  2425                                    bcc     DrpOEx                                          ; yes, can't drop non-existent item                     ;                ret nc              ; yes, can't drop non-existent item.
12D1  BD12A8                                  jsr     GotOb                                                   ; make sure object is in inventory                      ;                call gotob          ; make sure object is in inventory.
12D4  9EA6                                    ldx     <reg_HL                                         ; returns location number in reg_HL
12D6  966E                                    lda     <scNo                                                   ; get screen number                                                             ;                ld a,(scno)         ; screen number.
12D8  A184                                    cmpa    ,x                                                              ; already on this screen?                                               ;                cp (hl)             ; already on this screen?
12DA  271A                                    beq     DrpOEx                                          ; yes, exit                                                                                     ;                ret z               ; yes, nothing to do.
12DC  C600            DisObj  ldb     #$00                                                    ; flag for disabling an object
12DE  2704                                    beq     DrpOb1                                          ; not set) show object
12E0  6A84                                    dec     ,x                                                              ; convert 255 (in pocket) to disabled
12E2  2012                                    bra     DrpOEx                                          ; exit
12E4  A784            DrpOb1  sta     ,x                                                              ; update location                                                                       ;                ld (hl),a           ; bring onto screen.
                                                                                                                                                                                                                                              ;                inc hl              ; point to x coord.
12E6  9626                                    lda     <dispY                                          ; get sprite x coordinate                                               ;                ld a,(dispx)        ; sprite x coordinate.
12E8  A702                                    sta     2,x                                                     ; set x coord                                                                           ;                ld (hl),a           ; set x coord.
                                                                                                                                                                                                                                              ;                inc hl              ; point to object y.
12EA  9625                                    lda     <dispX                                          ; get sprite y coordinate                                               ;                ld a,(dispy)        ; sprite y coordinate.
12EC  A701                                    sta     1,x                                                     ; set y coord                                                                           ;                ld (hl),a           ; set the y position.
                                                                                                                                                                                                                                              ;                ld de,65501         ; minus graphic size (35)
12EE  3088DF                                  leax    -33,x                                                   ; point to object beginning                                     ;                add hl,de           ; point to graphics.
12F1  9FA6                                    stx     <reg_HL                                         ; update register
12F3  BD1264                                  jsr     DObj1                                                   ; delete object sprite                                                  ;                call dobj1          ; delete object sprite.
                                                                                                                                                                                                                                              ;                ld c,(hl)           ; put ink in c register.
12F6  7F12DD          DrpOEx  clr     DisObj+1                                                ; reset to enable objects
12F9  7E126F                                  jmp     CObj                                                    ; no colors - delete old sprite                         ;                jp cobj             ; colour the object.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Seek objects at sprite position                                                                                                                               ; Seek objects at sprite position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
12FC  8E60BF          SkObj           ldx     #objDta                                                                                                                                                         ; skobj  ld hl,objdta        ; pointer to objects.
                                                                                                                                                                                                                                              ;                ld de,33            ; distance to room number.
12FF  308821                                  leax    33,x                                                                                                                                                                    ;                add hl,de           ; point to room data.
                                                                                                                                                                                                                                              ;                ld de,39            ; size of each object.
1302  967B                                    lda     <numOb                                                                                                                                                          ;                ld a,(numob)        ; number of objects in game.
1304  97A2                                    sta     <reg_B                                                                                                                                                          ;                ld b,a              ; set up the loop counter.
1306  966E            SkObj0  lda     <scNo                                                                                                                                                                   ; skobj0 ld a,(scno)         ; current room number.
1308  A184                                    cmpa    ,x                                                                                                                                                                              ;                cp (hl)             ; is object in here?
130A  2603                                    bne     SkObjZ
130C  BD1319                                  jsr     SkObj1                                                                                                                                                          ;                call z,skobj1       ; yes, check coordinates.
130F  308827          SkObjZ  leax    39,x                                                                                                                                                                    ;                add hl,de           ; point to next object in table.
1312  0AA2                                    dec     <reg_B
1314  26F0                                    bne     SkObj0                                                                                                                                                          ;                djnz skobj0         ; repeat for all objects.
1316  86FF                                    lda     #255                                                                                                                                                                    ;                ld a,255            ; end of list and nothing found, return 255.
1318  39                                      rts                                                                                                                                                                                     ;                ret
1319  3001            SkObj1  leax    1,x                                                                                                                                                                     ; skobj1 inc hl              ; point to x coordinate.
131B  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; get coordinate.
131D  A028                                    suba    8,y                                                                                                                                                                     ;                sub (ix+8)          ; subtract sprite x.
131F  8B0F                                    adda    #15                                                                                                                                                                     ;                add a,15            ; add sprite height minus one.
1321  811F                                    cmpa    #31                                                                                                                                                             ;                cp 31               ; within range?
1323  2415                                    bcc     SkObj2                                                                                                                                                          ;                jp nc,skobj2        ; no, ignore object.
1325  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; point to y coordinate now.
1327  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; get coordinate.
1329  A029                                    suba    9,y                                                                                                                                                                     ;                sub (ix+9)          ; subtract the sprite y.
132B  8B0F                                    adda    #15                                                                                                                                                                     ;                add a,15            ; add sprite width minus one.
132D  811F                                    cmpa    #31                                                                                                                                                             ;                cp 31               ; within range?
132F  2407                                    bcc     SkObj3                                                                                                                                                          ;                jp nc,skobj3        ; no, ignore object.
1331  3262                                    leas    2,s                                                                                                                                                                     ;                pop de              ; remove return address from stack.
1333  967B                                    lda     <numOb                                                                                                                                                          ;                ld a,(numob)        ; objects in game.
1335  90A2                                    suba    <reg_B                                                                                                                                                          ;                sub b               ; subtract loop counter.
1337  39                                      rts                                                                                                                                                                                     ;                ret                 ; accumulator now points to object.
1338  301F            SkObj3  leax    -1,x                                                                                                                                                                    ; skobj3 dec hl              ; back to y position.
133A  301F            SkObj2  leax    -1,x                                                                                                                                                                    ; skobj2 dec hl              ; back to room.
133C  39                                      rts                                                                                                                                                                                     ;                ret
                              ENDIF
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Spawn a new sprite                                                                                                                                                                    ; Spawn a new sprite.
                      ; from AGD script receives:  ImageNumber in <regB  
                      ;                                                               and  SpriteType  in <reg_C
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
133D  8ED4D9          Spawn           ldx     #sprTab                                         ; point to sprites data table                                   ; spawn  ld hl,sprtab        ; sprite table.
1340  860C            NumSp1  lda     #NUMSPR                                         ; number of sprites                                                             ; numsp1 ld a,NUMSPR         ; number of sprites.
1342  97A0                                    sta     <reg_AF                                         ; save counter                                                                          ;                ld de,TABSIZ        ; size of each entry.
1344                  Spaw0                                                                                                                                                                                                           ; spaw0  ex af,af'           ; store loop counter.
1344  A684                                    lda     ,x                                                              ; get type                                                                                      ;                ld a,(hl)           ; get sprite type.
1346  4C                                      inca                                                                    ; is it unused (255)?                                                   ;                inc a               ; is it an unused slot?
1347  2707                                    beq     Spaw1                                                   ; yes, use it                                                                           ;                jr z,spaw1          ; yes, we can use this one.
1349  308811                                  leax    TABSIZ,x                                                ; point to next entry                                                   ;                add hl,de           ; point to next sprite in table.
134C  0AA0                                    dec     <reg_AF                                         ; decrement counter                                                             ;                ex af,af'           ; restore loop counter.
                                                                                                                                                                                                                                              ;                dec a               ; one less iteration.
134E  26F4                                    bne     Spaw0                                                   ; not done? loopback                                                            ;                jr nz,spaw0         ; keep going until we find a slot.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Didn't find one but drop through and set up a dummy sprite instead                                    ; Didn't find one but drop through and set up a dummy sprite instead.
                      ; pointers: Y points to actual 'old' sprite.  X points to new spawned sprite
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1350  3420            Spaw1           pshs    y                                                               ; save hit 'old sprite' pointer                         ; spaw1  push ix             ; existing sprite address on stack.
1352  9F5A                                    stx     <spPtr                                          ; save 'new sprite' pointer                                     ;                ld (spptr),hl       ; store spawned sprite address.
1354  96A3                                    lda     <reg_C                                          ; get sprite type                                                                       ;                ld (hl),c           ; set the type.
1356  A784                                    sta     ,x                                                              ; put as old type                                                                       ;                inc hl              ; point to image.
1358  96A2                                    lda     <reg_B                                          ; get image number                                                              ;                ld (hl),b           ; set the image.
135A  A701                                    sta     1,x                                                     ; set as old image number                                               ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ld (hl),0           ; frame zero.
135C  6F02                                    clr     2,x                                                     ; set old frame to 0                                                            ;                inc hl              ; next byte.
135E  A628                                    lda     Xval,y                                          ; get hit sprite Y coordinate                                   ;                ld a,(ix+X)         ; x coordinate.
1360  A703                                    sta     3,x                                                     ; set as old Y coord                                                            ;                ld (hl),a           ; set sprite coordinate.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
1362  A629                                    lda     Yval,y                                          ; get hit sprite X coordinate                                   ;                ld a,(ix+Y)         ; y coordinate.
1364  A704                                    sta     4,x                                                     ; set as old X coord                                                            ;                ld (hl),a           ; set sprite coordinate.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ex de,hl            ; swap address into de.
                                                                                                                                                                                                                                              ;                ld hl,(spptr)       ; restore address of details.
1366  C605                                    ldb     #5                                                              ; bytes to copy                                                                 ;                ld bc,5             ; number of bytes to duplicate.
1368  A680            SpawCpy lda     ,x+                                                     ; get a byte from old data area                         ;                ldir                ; copy first version to new version.
136A  A704                                    sta     4,x                                                     ; copy into new data area
136C  5A                                      decb                                                                    ; decrement counter
136D  26F9                                    bne     SpawCpy                                         ; not done? copy next byte
                                                                                                                              ; regX points to offset +5
136F  3005                                    leax    5,x                                                     ; now points to offset +10 
                                                                                                                                                                                                                                              ;                ex de,hl            ; swap address into de.
1371  A62A                                    lda     10,y                                                    ; get direction of 'old sprite'                         ;                ld a,(ix+10)        ; direction of original.
1373  A780                                    sta     ,x+                                                     ; set the same for new one                                              ;                ld (hl),a           ; set the direction.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
1375  4F                                      clra                                                                    ; zero                                                                                          ;                ld (hl),b           ; reset parameter.
1376  ED81                                    std     ,x++                                                    ; set as PARAM1-PARAM2                                                  ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ld (hl),b           ; reset parameter.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
1378  ED84                                    std     ,x                                                              ; and as jump pointer (low-high bytes)          ;                ld (hl),b           ; reset parameter.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ld (hl),b           ; reset parameter.
137A  109E5A          RtsSp           ldy     <spPtr                                          ; get pointer to beginning of new sprite        ; rtssp  ld ix,(spptr)       ; address of new sprite.
137D  BD228A          Evis1           jsr     Evnt09                                          ; initializes Sprite                                                            ; evis1  call evnt09         ; call sprite initialisation event.
1380  9E5A                                    ldx     <spPtr                                          ; regX *must* point to sprite data                      ;                ld ix,(spptr)       ; address of new sprite.
1382  BD19ED                                  jsr     SSpriA                                          ; display the new Sprite old coord                      ;                call sspria         ; display the new sprite.
1385  3520                                    puls    y                                                               ; restore 'old sprite' pointe                                   ;                pop ix              ; address of original sprite.
1387  109FA8                                  sty     <reg_IX                                         ; update pseudoregister
138A  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
138B  303030303030    score           fcc     /000000/                                                ; player's score                                                                        ; score  defb '000000'       ; player's score.
1391  303030303030    hiScor  fcc     /000000/                                                ; high score                                                                            ; hiscor defb '000000'       ; high score.
1397  303030303030    bonus           fcc     /000000/                                                ; bonus                                                                                         ; bonus  defb '000000'       ; bonus.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; verify if inside screen window                                                                                                                                        ; verify if inside screen window
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
139D  9626            CheckX  lda     <dispY                                          ; get Y position                                                                        ; checkx ld a,e              ; x position.
139F  8118                                    cmpa    #24                                                     ; out of screen?                                                                        ;                cp 24               ; off screen?
13A1  2502                                    blo     Check1                                          ; no, skip next                                                                 ;                ret c               ; no, it's okay.
13A3  3510                                    puls    x                                                               ; remove return address from stack                      ;                pop hl              ; remove return address from stack.
13A5  39              Check1  rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Displays the High score
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; ADDED FOR TESTSCORE.AGD
13A6  8E1391          DHiSc           ldx     #hiScor                                         ; point to hhigh score
13A9  2003                                    bra     Dscor1                                          ; show it
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Displays the current score                                                                                                                                            ; Displays the current score.
                      ; Parameter: reg_B *must* contain the number of digits to be displayed
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #08 - DONE - VERIFIED - MODIFIED FOR TESTSCORE
13AB  8E138B          Dscor           ldx     #score                                          ; point to string to be shown
13AE  BD18EB          Dscor1  jsr     PrePrt                                          ; fontPtr->grBase - charXY->dispXY                      ; dscor  call preprt         ; set up font and print position.
13B1  BD139D                                  jsr     CheckX                                          ; Y must be < 24 or aborts                                              ;                call checkx         ; make sure we're in a printable range.
13B4  C606                                    ldb     #6                                                              ; subtract
13B6  D0A2                                    subb    <reg_B                                          ; number of digits from maximum
13B8  3A                                      abx                                                                     ; offset to begin reading
13B9  D6A2                                    ldb     <reg_B                                          ; get number of digits again
13BB  9637                                    lda     <prtMod                                         ; numbers size                                                                          ;                ld a,(prtmod)       ; get print mode.
                                                                                                                                                                                                                                              ;                and a               ; standard size text?
13BD  261B                                    bne     Bscor0                                          ; if not zero, use big digits                                   ;                jp nz,bscor0        ; no, show double-height.
13BF  3414            Dscor0  pshs    b,x                                                     ; save counter                                                                          ; dscor0 push bc             ; place counter onto the stack.
                                                                                                                              ; and pointer                                                                           ;                push hl
13C1  A684                                    lda     ,x                                                              ; get a digit                                                                           ;                ld a,(hl)           ; fetch character.
13C3  BD14AF                                  jsr     PChar                                                   ; show it                                                                                       ;                call pchar          ; display character.
                                                                                                                              ; no attributes                                                                 ;                call gaadd          ; get attribute address.
                                                                                                                              ; no colours                                                                            ;                ld a,(23693)        ; current cell colours.
                                                                                                                              ;                                                                                                               ;                ld (hl),a           ; write to attribute cell.
13C6  0C25                                    inc     <dispX                                          ; point to next row                                                             ;                ld hl,dispy         ; y coordinate.
                                                                                                                                                                                                                                              ;                inc (hl)            ; move along one.
13C8  3514                                    puls    b,x                                                     ; restore pointer and counter                                   ;                pop hl
13CA  3001                                    leax    1,x                                                     ; point to next digit                                                   ;                inc hl              ; next score column.
13CC  5A                                      decb                                                                    ; decrement counter                                                             ;                pop bc              ; retrieve character counter.
13CD  26F0                                    bne     Dscor0                                          ; not done, loop                                                                        ;                djnz dscor0         ; repeat for all digits.
13CF  BE007E                                  ldx     blkPtr                                          ; get blocks address                                                            ;                ld hl,(blkptr)      ; blocks.
13D2  BF0050                                  stx     grBase                                          ; pass to pointer                                                                       ;                ld (grbase),hl      ; set graphics base.
13D5  9E25            Dscor2  ldx     <dispX                                          ; get screen position (X,Y)                                     ; dscor2 ld hl,(dispx)       ; general coordinates.
13D7  9F1E                                    stx     <charX                                          ; save for next time                                                            ;                ld (charx),hl       ; set up display coordinates.
13D9  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Displays the current score in double-height characters                                                                        ; Displays the current score in double-height characters.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #081 - DONE
13DA  3414            Bscor0  pshs    b,x                                                     ; save counter                                                                          ; bscor0 push bc             ; place counter onto the stack.
                                                                                                                              ; and pointer                                                                           ;                push hl
13DC  A684                                    lda     ,x                                                              ; get character                                                                 ;                ld a,(hl)           ; fetch character.
13DE  BD1899                                  jsr     Bchar                                                   ; print it                                                                                      ;                call bchar          ; display big char.
13E1  3514                                    puls    b,x                                                     ; restore counter and pointer                                   ;                pop hl
13E3  3001                                    leax    1,x                                                     ; point to next char                                                            ;                inc hl              ; next score column.
13E5  5A                                      decb                                                                    ; decrement counter                                                             ;                pop bc              ; retrieve character counter.
13E6  26F2                                    bne     Bscor0                                          ; not done? loopback                                                            ;                djnz bscor0         ; repeat for all digits.
13E8  20EB                                    bra     Dscor2                                          ; exit                                                                                          ;                jp dscor2           ; tidy up line and column variables.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Adds number in the hl pair to the score                                                                                                               ; Adds number in the hl pair to the score.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #07 - DONE - VERIFIED
13EA  9EA6            AddSc           ldx     <reg_HL                                         ; get value to be added
13EC  CE138C                                  ldu     #score+1                                                ; poit to 2nd digit by the left                         ; addsc  ld de,score+1       ; ten thousands column.
13EF  CC2710                                  ldd     #10000                                          ; D=$2710                                                                                       ;                ld bc,10000         ; amount to add each time.
13F2  8D1A                                    bsr     IncSc                                                   ; process tens of thousands                                     ;                call incsc          ; add to score.
13F4  3341                                    leau    1,u                                                     ; point to thousands                                                            ;                inc de              ; thousands column.
13F6  CC03E8                                  ldd     #1000                                                   ; D=3e8                                                                                         ;                ld bc,1000          ; amount to add each time.
13F9  8D13                                    bsr     IncSc                                                   ; process thousands                                                             ;                call incsc          ; add to score.
13FB  3341                                    leau    1,u                                                     ; point to hundreds                                                             ;                inc de              ; hundreds column.
13FD  CC0064                                  ldd     #100                                                    ; D=$64                                                                                         ;                ld bc,100           ; amount to add each time.
1400  8D0C                                    bsr     IncSc                                                   ; process hundreds                                                              ;                call incsc          ; add to score.
1402  3341                                    leau    1,u                                                     ; point to tens                                                                 ;                inc de              ; tens column.
1404  CC000A                                  ldd     #10                                                     ; D=$0a                                                                                         ;                ld bc,10            ; amount to add each time.
1407  8D05                                    bsr     IncSc                                                   ; process tens                                                                          ;                call incsc          ; add to score.
1409  3341                                    leau    1,u                                                     ; point to units                                                                        ;                inc de              ; units column.
140B  CC0001                                  ldd     #1                                                              ; D=$01                                                                                         ;                ld bc,1             ; units.
140E  3416            IncSc           pshs    x,d                                                     ; save total, partial                                                   ; incsc  push hl             ; store amount to add.
                                                                                                                                                                                                                                              ;                and a               ; clear the carry flag.
1410  1F10                                    tfr     x,d                                                     ; D=64 (not yet added)                                                  ;                sbc hl,bc           ; subtract from amount to add.
1412  A3E4                                    subd    ,s                                                              ; subtract param regD
1414  250E                                    bcs     IncSc0                                          ; if carry, restore X                                                   ;                jr c,incsc0         ; too much, restore value.
                                                                                                                                                                                                                                              ;                pop af              ; delete the previous amount from the stack.
1416  1F01                                    tfr     d,x                                                     ; update amount not yet added
1418  3440                                    pshs    u                                                               ; save column pointer                                                   ;                push de             ; store column position.
141A  8D0B                                    bsr     IncSc2                                          ; update current digit (=1)                                     ;                call incsc2         ; do the increment.
141C  3540                                    puls    u                                                               ; restore column pointer                                                ;                pop de              ; restore column.
141E  3506                                    puls    d                                                               ; get parcial in use
1420  3262                                    leas    2,s                                                     ; get rid of regX
1422  20EA                                    bra     IncSc                                                   ; try again                                                                                     ;                jp incsc            ; repeat until all added.
1424  3516            IncSc0  puls    x,d                                                     ; restore pushed registers                                              ; incsc0 pop hl              ; restore previous value.
1426  39                                      rts                                                                     ; ended digit control                                                   ;                ret
1427  3406            IncSc2  pshs    d                                                               ; save curent result
1429  A6C4            IncSc2a lda     ,u                                                              ; get current digit                                                             ; incsc2 ld a,(de)           ; get amount.
142B  4C                                      inca                                                                    ; increment it                                                                          ;                inc a               ; add one to column.
142C  A7C4                                    sta     ,u                                                              ; update digit                                                                          ;                ld (de),a           ; write new column total.
142E  813A                                    cmpa    #'9'+1                                          ; exceeded '9'?                                                                 ;                cp '9'+1            ; gone beyond range of digits?
1430  2508                                    bcs     IncEx                                                   ; no, so ok, exit                                                                       ;                ret c               ; no, carry on.
1432  8630                                    lda     #'0'                                                    ; yes, put a '0'                                                                        ;                ld a,'0'            ; make it zero.
1434  A7C4                                    sta     ,u                                                              ; update digit                                                                          ;                ld (de),a           ; write new column total.
1436  335F                                    leau    -1,u                                                    ; point to letf digit                                                   ;                dec de              ; back one column.
1438  20EF                                    bra     IncSc2a                                         ; go increment it                                                                       ;                jr incsc2
143A  3586            IncEx           puls    d,pc                                                    ; clean stack and return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Add bonus to score                                                                                                                                                                    ; Add bonus to score.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED for TESTSCORE
143C  3450            AddBo           pshs    x,u                                                     ; save working registers                                                ; addbo  ld de,score+5       ; last score digit.
143E  CE1390                                  ldu     #score+5                                                ; point to score units
1441  8E139C                                  ldx     #bonus+5                                                ; point to bonust units                                                 ;                ld hl,bonus+5       ; last bonus digit.
1444  1CFE                                    andcc   #%11111110                                      ; clear carry                                                                           ;                and a               ; clear carry.
1446  CC0630                                  ldd     #$0630                                          ; 6 digits - ascii for '0'                                              ;                ld bc,6*256+48      ; 6 digits to add, ASCII '0' in c.
1449  DDA2                                    std     <reg_BC                                         ; into reg_BC
144B  A6C4            AddBo0  lda     ,u                                                              ; get digit from score                                                  ; addbo0 ld a,(de)           ; get score.
144D  A984                                    adca    ,x                                                              ; add with carry bonus                                                  ;                adc a,(hl)          ; add bonus.
144F  90A3                                    suba    <reg_C                                          ; convert to binary                                                             ;                sub c               ; 0 to 18.
1451  E784                                    stb     ,x                                                              ; zero to used bonus digit                                              ;                ld (hl),c           ; zeroise bonus.
1453  301F                                    leax    -1,x                                                    ; point one digit to the left                                   ;                dec hl              ; next bonus.
1455  813A                                    cmpa    #58                                                     ; more than 9?                                                                          ;                cp 58               ; carried?
1457  2502                                    bcs     AddBo1                                          ; no, skip next two                                                             ;                jr c,addbo1         ; no, do next one.
1459  800A                                    suba    #10                                                     ; yes, subtract 10                                                              ;                sub 10              ; subtract 10.
145B  A7C4            AddBo1  sta     ,u                                                              ; update score digit                                                            ; addbo1 ld (de),a           ; write new score.
145D  335F                                    leau    -1,u                                                    ; point one digit to the left                                   ;                dec de              ; next score digit.
145F  1CFE                                    andcc   #%11111110                                      ; clear carry for next digit                                    ;                ccf                 ; set carry for next digit.
1461  0AA2                                    dec     <reg_B                                          ; decrement digits counter
1463  26E6                                    bne     AddBo0                                          ; not done? loopback                                                            ;                djnz addbo0         ; repeat for all 6 digits.
1465  35D0                                    puls    x,u,pc                                          ; restore registers and return                          ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Swap score and bonus                                                                                                                                                          ; Swap score and bonus.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR TESTSCORE
1467  3450            SwpSB           pshs    x,u                                                                                                                                                                     ; swpsb  ld de,score         ; first score digit.
1469  CE138B                                  ldu     #score
146C  8E1397                                  ldx     #bonus                                                                                                                                                          ;                ld hl,bonus         ; first bonus digit.
146F  C606                                    ldb     #6                                                                                                                                                                              ;                ld b,6              ; digits to add.
1471  D7A2                                    stb     <reg_B
1473  A6C4            SwpSB0  lda     ,u                                                                                                                                                                              ; swpsb0 ld a,(de)           ; get score and bonus digits.
1475  E684                                    ldb     ,x                                                                                                                                                                              ;                ld c,(hl)
1477  A780                                    sta     ,x+                                                                                                                                                                     ;                ex de,hl            ; swap pointers.
1479  E7C0                                    stb     ,u+                                                                                                                                                                     ;                ld (hl),c           ; write bonus and score digits.
                                                                                                                                                                                                                                              ;                ld (de),a
                                                                                                                                                                                                                                              ;                inc hl              ; next score and bonus.
147B  0AA2                                    dec     <reg_B                                                                                                                                                          ;                inc de
147D  26F4                                    bne     SwpSB0                                                                                                                                                          ;                djnz swpsb0         ; repeat for all 6 digits.
147F  35D0                                    puls    x,u,pc                                                                                                                                                          ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get print address                                                                                                                                                                     ; Get print address
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1481  4F              GPrad           clra                                                                                                                                                                                    ; gprad:
1482  D625                                    ldb     <dispX                                                                                                                                                          ;     lda dispx        ; get x
1484  D751                                    stb     <grBase+1                                       ; save low byte                                                                 ;     sta scraddr        ; store lb address
                                                                                                                                                                                                                                              ;     lda dispx        ; Add Column/32
1486  58                                      lslb                                                                                                                                                                                    ;     rol a
1487  49                                      rola                                                                                                                                                                                    ;     rol tmp
1488  58                                      lslb                                                                                                                                                                                    ;     rol a
1489  49                                      rola                                                                                                                                                                                    ;     rol tmp
148A  58                                      lslb                                                                                                                                                                                    ;     rol a
148B  49                                      rola                                                                                                                                                                                    ;     rol tmp
                                                                                                                                                                                                                                              ;     lda tmp
148C  8407                                    anda    #7                                                              ; use only 3 lower bits                                                 ;     and #7
                                                                                                                                                                                                                                              ;     sta tmp
                                                                                                                                                                                                                                              ; 
148E  7D0037                                  tst     prtMod                                                                                                                                                          ;     lda prtmod        ; If double heigth text
1491  2701                                    beq     1f                                                                                                                                                                              ;     beq :+            ; multiply by 2
1493  48                                      asla                                                                    ; multiply by two                                                                       ;     asl tmp
1494                  1                                                                                                                                                                                                                       ; :
                                                                                                                                                                                                                                              ;     lda tmp
                                                                                                                                                                                                                                              ;     clc
1494  9B26                                    adda    <dispY                                          ; add Y cordinate                                                                       ;     adc dispy        ; get y
1496  C3E600                                  addd    #SCRBEG                                         ; add screen beginning                                                  ;     ora #$80        ; add $80
1499  9750                                    sta     <grBase                                         ; store address                                                                 ;     sta scraddr+1        ; store hb address
149B  39                                      rts                                                                     ; return                                                                                                ;     rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get property buffer address of char at (dispx, dispy) in hl                                                   ; Get property buffer address of char at (dispx, dispy) in hl
                      ; receives in regA byte number. Returns address in regX
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
149C  3406            PrAdd           pshs    a,b                                                     ; save registers
149E  9626                                    lda     <dispY                                          ; get coordinate Y                                                              ; pradd  ld a,(dispx)        ; x coordinate.
14A0  C620                                    ldb     #32                                                     ; multiply                                                                                      ;                rrca                ; multiply by 32.
14A2  3D                                      mul                                                                     ; by 32                                                                                         ;                rrca
                                                                                                                                                                                                                                              ;                rrca
                                                                                                                                                                                                                                              ;                ld l,a              ; store shift in l.
                                                                                                                                                                                                                                              ;                and 3               ; high byte bits.
14A3  8EDC00                                  ldx     #MAP                                                    ; start of properties map                                               ;                add a,253           ; 253 * 256 = 64768, start of properties map.
14A6  308B                                    leax    d,x                                                     ; add Y offset                                                                          ;                ld h,a              ; that's our high byte.
                                                                                                                                                                                                                                              ;                ld a,l              ; restore shift result.
                                                                                                                                                                                                                                              ;                and 224             ; only want low bits.
                                                                                                                                                                                                                                              ;                ld l,a              ; put into low byte.
14A8  D625                                    ldb     <dispX                                          ; get coordinate X                                                              ;                ld a,(dispy)        ; fetch y coordinate.
14AA  C41F                                    andb    #31                                                     ; keep into 0-31 range                                                  ;                and 31              ; should be in range 0 - 31.
14AC  3A                                      abx                                                                     ; add X offset                                                                          ;                add a,l             ; add to low byte.
                                                                                                                                                                                                                                              ;                ld l,a              ; new low byte.
14AD  3586                                    puls    a,b,pc                                          ; restore registers and return                          ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Get attribute address of char at (dispx, dispy) in hl.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; gaadd  ld a,(dispx)        ; x coordinate.
                      ;                                                                                                                                                                                                                       ;                rrca                ; multiply by 32.
                      ;                                                                                                                                                                                                                       ;                rrca
                      ;                                                                                                                                                                                                                       ;                rrca
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; store shift in l.
                      ;                                                                                                                                                                                                                       ;                and 3               ; high byte bits.
                      ;                                                                                                                                                                                                                       ;                add a,88            ; 88 * 256 = 22528, start of screen attributes.
                      ;                                                                                                                                                                                                                       ;                ld h,a              ; that's our high byte.
                      ;                                                                                                                                                                                                                       ;                ld a,l              ; restore shift result.
                      ;                                                                                                                                                                                                                       ;                and 224             ; only want low bits.
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; put into low byte.
                      ;                                                                                                                                                                                                                       ;                ld a,(dispy)        ; fetch y coordinate.
                      ;                                                                                                                                                                                                                       ;                and 31              ; should be in range 0 - 31.
                      ;                                                                                                                                                                                                                       ;                add a,l             ; add to low byte.
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; new low byte.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display character in A at dispx,dispy.                                                                                                                ; Display character in A at dispx,dispy.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
14AF  C608            PChar           ldb     #8                                                              ; to multiply by 8                                                              ; pchar  rlca                ; multiply char by 8.              
14B1  3D                                      mul                                                                     ; calculate offset 16 bits                                              ;                rlca
14B2  DE58                                    ldu     <fontPtr                                                ; get font table beginning                                              ;                rlca
14B4  33CB                                    leau    d,u                                                     ; add offset                                                                            ;                ld e,a              ; store shift in e.
14B6  BD1481          PChark  jsr     GPrad                                                   ; get screen address.                                                   ;                and 7               ; only want high byte bits.
14B9  9E50                                    ldx     <grBase                                         ; point to screen (destination)                         ;                ld d,a              ; store in d.
14BB  C608                                    ldb     #8                                                              ; lines to write                                                                        ;                ld a,e              ; restore shifted value.
14BD  A6C0            PChar0  lda     ,u+                                                     ; get char row byte                                                             ;                and 248             ; only want low byte bits.
                              IF GFLAG
                                              anda    <andeor
                                              eora    <andeor+1
                              ENDIF
14BF  A784                                    sta     ,x                                                              ; put on screen                                                                 ;                ld e,a              ; that's the low byte.
14C1  308820                                  leax    32,x                                                    ; point to next row                                                             ;                ld hl,(grbase)      ; address of graphics.
14C4  5A                                      decb                                                                    ; decrement counter                                                             ;                add hl,de           ; add displacement.
14C5  26F6                                    bne     PChar0                                          ; not done? loopback                                                            ; pchark call gprad          ; get screen address.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ;                ld a,(hl)                                                                                                                                                                                      ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
14C7  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Print attributes, properties and pixels                                                                                                               ; Print attributes, properties and pixels.
                      ; receives cellnum(block) in regA and repetitions in comCnt
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
14C8  9E1E            pbPAttr ldx  <charX                                                     ; get entered variables
14CA  9F25                                    stx  <dispX                                                     ; to display ones
14CC                  PAttr           
                              IF AFLAG                                                                                                                                                                                                ; .if aflag
                                              pshs    a,x                                                     ; save block number                                                             ; pha
                                              jsr     WBloc                         ; save blockinfo                                                                  ; jsr wbloc 
                                              puls    a,x                                                     ; restore block number                                                  ; pla
                              ENDIF                                                                                                                                                                                                   ; .endif
14CC                  PAttr2                                                                                                                                                                                                  ; pattr2:
14CC  97A2                                    sta     <reg_B                                          ; save block number                                                             ; pattr  ld b,a              ; store cell in b register for now.
                                                                                                                                                                                                                                              ;                ld e,a              ; displacement in e.
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
14CE  9E80                                    ldx     <proPtr                                         ; point to properties table                                     ;                ld hl,(proptr)      ; pointer to properties.
                                                                                                                                                                                                                                              ;                add hl,de           ; property cell address.
14D0  4F                                      clra                                                                    ; high byte to zero
14D1  D6A2                                    ldb     <reg_B                                          ; use value as low byte                                                 ;                ld c,(hl)           ; fetch byte.
14D3  E68B                                    ldb     d,x                                                     ; fetch byte at 16 bits offset                          ;                ld c,(hl)           ; fetch byte.
14D5  C108                                    cmpb    #COLECT                                         ; is it a collectable block?
14D7  2604                                    bne     PAttr3                                          ; no, skip next
14D9  96A2                                    lda     <reg_B                                          ; restore received block number
14DB  9733                                    sta     <colPatt                                                ; save collectable block number
14DD  BD149C          PAttr3  jsr     PrAdd                                                   ; get property buffer address                                   ;                call pradd          ; get property buffer address.
14E0  E784                                    stb     ,x                                                              ; write property                                                                        ;                ld (hl),c           ; write property.
14E2  96A2                                    lda     <reg_B                                          ; restore cell                                                                          ;                ld a,b              ; restore cell.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ;                                                                                                       ; No Attributes in 6809                                                 ; Print attributes, no properties.
                      ;                                                                                                                                                                                                                       ; panp   ld e,a              ; displacement in e.
                      ;                                                                                                                                                                                                                       ;                ld d,0              ; no high byte.
                      ;                                                                                                                                                                                                                       ;                ld hl,(colptr)      ; pointer to colours.
                      ;                                                                                                                                                                                                                       ;                add hl,de           ; colour cell address.
                      ;                                                                                                                                                                                                                       ;                ld c,(hl)           ; fetch byte.
                      ;                                                                                                                                                                                                                       ;                call gaadd          ; get attribute address.
                      ;                                                                                                                                                                                                                       ;                ld (hl),c           ; write colour.
                      ;                                                                                                                                                                                                                       ;                ld a,b              ; restore cell.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                                                                                                                                                                              ; Print character pixels, no more.
14E4  9E7E            PChr            ldx     <blkPtr                                         ; get blocks pointer
14E6  9F58                                    stx     <fontPtr                                                ; pass to used variable
14E8  BD14AF          PChr0           jsr     PChar                                                   ; print char in regA                                                            ; pchr   call pchar          ; show character in accumulator.
14EB  8E6367                                  ldx     #font-256                                       ; point to fonts table                                                                                                                                  
14EE  9F58                                    stx     <fontPtr                                                ; save into pointer                                                             ;                ld hl,dispy         ; y coordinate.
14F0  0C25                                    inc     <dispX                                          ; move to next char                                                             ;                inc (hl)            ; move along one.
14F2  0C1E                                    inc     <charX                                          ; move to next char                                                             ;                inc (hl)            ; move along one.
14F4  39                                      rts                                                                     ; return                                                                                                ;                ret
                      
                              IF AFLAG                                                                                                                                                                                                ; .if aflag
                      WBloc                                                                                           ; Write BLOCK                                                                           ; wbloc:
                                              ldx     <pbPtr                                          ; get write pointer                                                             ; ldy   #3
                                              sta     3,x                                                     ; store block number                                                            ; sta   (pbptr),y        ; store block number
                                                                                                                                                                                                                                              ; dey
                                              lda     <dispX                                          ; get Y position                                                                        ; lda   dispx
                                              sta     2,x                                                     ; write Y block position                                                ; sta   (pbptr),y        ; write x position of block.
                                                                                                                                                                                                                                              ; dey
                                              lda     <dispY                                          ; get X position                                                                        ; lda   dispy
                                              sta     1,x                                                     ; write X block position                                                ; sta   (pbptr),y        ; write y position of block.
                                                                                                                                                                                                                                              ; dey
                                              lda     <scNo                                                   ; get screen number                                                             ; lda   scno
                                              sta     ,x                                                              ; write screen number                                                   ; sta   (pbptr),y        ; write screen.
                                                                                                                                                                                                                                              ; clc            ; point to next free location
                                                                                                                                                                                                                                              ; lda   pbptr
                                              leax    4,x                                                     ; point to next bloc                                                            ; adc   #4
                                                                                                                                                                                                                                              ; sta   pbptr
                                                                                                                                                                                                                                              ; bcc   :
                                              stx     <pbPtr                                          ; update pointer                                                                        ; inc   pbptr+1
                                              rts                                                                     ; return                                                                                                ;:                      rts
                              ENDIF                                                                                                                                                                                                   ; .endif
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Shifter sprite routine for objects                                                                                                                    ; Shifter sprite routine for objects.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF OFLAG
14F5  8807            Sprit7  eora    #7                                                              ; invert thre low bits                                                  ; sprit7 xor 7
14F7  4C                                      inca                                                                    ; add one                                                                                       ;                inc a
14F8  09A7            Sprit3  rol     <reg_L                                          ; shift into position                                                   ; sprit3 rl l                ; shift into position.
14FA  09A3                                    rol     <reg_C                                          ; the 3                                                                                         ;                rl c
14FC  09A6                                    rol     <reg_H                                          ; bytes                                                                                         ;                rl h
14FE  4A                                      deca                                                                    ; decrement counter                                                             ;                dec a               ; one less iteration.
14FF  26F7                                    bne     Sprit3                                          ; not zero, shift again                                                 ;                jp nz,sprit3
1501  96A7                                    lda     <reg_L                                          ; get reg_L                                                                                     ;                ld a,l
1503  D6A3                                    ldb     <reg_C                                          ; pass reg_C
1505  D7A7                                    stb     <reg_L                                          ; to reg_L                                                                                      ;                ld l,c
1507  D6A6                                    ldb     <reg_H                                          ; pass reg_H
1509  D7A3                                    stb     <reg_C                                          ; to reg_C                                                                                      ;                ld c,h
150B  97A6                                    sta     <reg_H                                          ; save to reg_H                                                                 ;                ld h,a
150D  2031                                    bra     Sprit0                                          ; apply to screen                                                                       ;                jp sprit0           ; now apply to screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
150F  3410            Sprite  pshs    x                                                               ; save graphic address                                                  ; sprite push hl             ; store sprite graphic address.
1511  BD19D3                                  jsr     ScAdd                                                   ; get screen address in regX                                    ;                call scadd          ; get screen address in hl.
1514  3384                                    leau    ,x                                                              ; pass to regU                                                                          ;                ex de,hl            ; switch to de.
1516  3510                                    puls    x                                                               ; restore regX                                                                          ;                pop hl              ; restore graphic address.
1518  9625                                    lda     <dispX                                          ; get posY                                                                                      ;                ld a,(dispy)        ; y position.
151A  8407                                    anda    #7                                                              ; use only 3 low bits                                                   ;                and 7               ; position straddling cells.
151C  97A2                                    sta     <reg_B                                          ; save in reg_B                                                                 ;                ld b,a              ; store in b register.
151E  8610                                    lda     #16                                                     ; number of rows                                                                        ;                ld a,16             ; pixel height.
1520  97A0            Sprit1  sta     <reg_AF                                         ; save to reg_A                                                                 ; sprit1 ex af,af'
1522  A680                                    lda     ,x+                                                     ; fetch 1st byte                                                                        ;                ld c,(hl)           ; fetch first byte.
1524  97A3                                    sta     <reg_C                                          ; to reg_C                                                                                      ;                inc hl              ; next byte.
1526  3410                                    pshs    x                                                               ; save regX into stack                                                  ;                push hl             ; store source address.
1528  E684                                    ldb     ,x                                                              ; get low byte                                                                          ;                ld l,(hl)
152A  4F                                      clra                                                                    ; zero for high byte                                                            ;                ld h,0
152B  DDA6                                    std     <reg_HL                                         ; pass to reg_HL                                                                        ;                ld a,b              ; position straddling cells.
152D  96A2                                    lda     <reg_B                                          ; restore reg_B                                                                 ;                and a               ; is it zero?
152F  270F                                    beq     Sprit0                                          ; if zero, apply to screen                                              ;                jr z,sprit0         ; yes, apply to screen.
1531  8105                                    cmpa    #5                                                              ; is it lower than 6?                                                   ;                cp 5
1533  24C0                                    bcc     Sprit7                                          ; yes, go shift it                                                              ;                jr nc,sprit7
1535  1CFE                                    andcc   #%11111110                                      ; clear carry                                                                           ;                and a               ; clear carry.
1537  06A3            Sprit2  ror     <reg_C                                          ; shift                                                                                         ; sprit2 rr c
1539  06A7                                    ror     <reg_L                                          ; into                                                                                          ;                rr l
153B  06A6                                    ror     <reg_H                                          ; position                                                                                      ;                rr h
153D  4A                                      deca                                                                    ; decrement counter                                                             ;                dec a
153E  26F7                                    bne     Sprit2                                          ; not zero, shift again                                                 ;                jp nz,sprit2
1540  A6C4            Sprit0  lda     ,u                                                              ; get byte from screen                                                  ; sprit0 ld a,(de)           ; fetch screen image.
1542  98A3                                    eora    <reg_C                                          ; merge with graphic                                                            ;                xor c               ; merge with graphic.
1544  A7C0                                    sta     ,u+                                                     ; write to screen                                                                       ;                ld (de),a           ; write to screen.
                                                                                                                                                                                                                                              ;                inc e               ; next screen byte.
1546  A6C4                                    lda     ,u                                                              ; fetch next screen byte                                                ;                ld a,(de)           ; fetch screen image.
1548  98A7                                    eora    <reg_L                                          ; merge with graphic                                                            ;                xor l               ; combine with graphic.
154A  A7C0                                    sta     ,u+                                                     ; write to screen                                                                       ;                ld (de),a           ; write to screen.
                                                                                                                                                                                                                                              ;                inc de              ; next screen address.
154C  A6C4                                    lda     ,u                                                              ; fetch next screen byte                                                ;                ld a,(de)           ; fetch screen image.
154E  98A6                                    eora    <reg_H                                          ; merge with graphic                                                            ;                xor h               ; combine with graphic.
1550  A7C4                                    sta     ,u                                                              ; write to screen                                                                       ;                ld (de),a           ; write to screen.
                                                                                                                                                                                                                                              ;                dec e               ; back to start byte.
1552  33C81E                                  leau    32-2,u                                          ; point to beginning of next row                                ;                inc d               ; increment line number.
                                                                                                                              ; no segments in 6809 Screen Map                                ;                ld a,d              ; segment address.
                                                                                                                                                                                                                                              ;                and 7               ; reached end of segment?
                                                                                                                                                                                                                                              ;                jp nz,sprit6        ; no, just do next line within cell.
                                                                                                                                                                                                                                              ;                ld a,e              ; low byte.
                                                                                                                                                                                                                                              ;                add a,32            ; look down.
                                                                                                                                                                                                                                              ;                ld e,a              ; new address.
                                                                                                                                                                                                                                              ;                jp c,sprit6         ; done.
                                                                                                                                                                                                                                              ;                ld a,d              ; high byte.
                                                                                                                                                                                                                                              ;                sub 8               ; start of segment.
                                                                                                                                                                                                                                              ;                ld d,a              ; new high byte.
1555  3510            Sprit6  puls    x                                                               ; restore graphic address                                               ; sprit6 pop hl              ; restore source address.
1557  3001                                    leax    1,x                                                     ; point to next source byte                                     ;                inc hl              ; next source byte.
1559  96A0                                    lda     <reg_AF                                         ; restore row counter                                                   ;                ex af,af'
155B  4A                                      deca                                                                    ; decrement it                                                                          ;                dec a
155C  26C2                                    bne     Sprit1                                          ; not zero, loopback                                                            ;                jp nz,sprit1
155E  39                                      rts                                                                     ; return                                                                                                ;                ret
                              ENDIF
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get room address                                                                                                                                                                      ; Get room address
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
155F  966E            GRoom           lda     <scNo                                                   ; get screen number                                                             ; groom  ld a,(scno)         ; screen number.
1561  3402                                    pshs    a                                                               ; save in stack
1563  CE0000          GRoomX  ldu     #$0000                                          ; value zero                                                                            ; groomx ld de,0             ; start at zero.
1566  9E82                                    ldx     <scrPtr                                         ; point to screens table                                                ;                ld hl,(scrptr)      ; pointer to screens.
1568  4D                                      tsta                                                                    ; was the first room?                                                   ;                and a               ; is it the first one?
1569  2708            GRoom1  beq     GRoom0                                          ; yes, skip no more screens                                     ; groom1 jr z,groom0         ; no more screens to skip.
156B  EC81                                    ldd     ,x++                                                    ; get screen size (16 bits)                                     ;                ld c,(hl)           ; low byte of screen size.
                                                                                                                                                                                                                                              ;                inc hl              ; point to high byte.
                                                                                                                                                                                                                                              ;                ld b,(hl)           ; high byte of screen size.
                                                                                                                                                                                                                                              ;                inc hl              ; next address.
                                                                                                                                                                                                                                              ;                ex de,hl            ; put total in hl, pointer in de.
156D  33CB                                    leau    d,u                                                     ; add to regU                                                                           ;                add hl,bc           ; skip a screen.
                                                                                                                                                                                                                                              ;                ex de,hl            ; put total in de, pointer in hl.
156F  6AE4                                    dec     ,s                                                              ; decrement room counter                                                ;                dec a               ; one less iteration.
1571  20F6                                    bra     GRoom1                                          ; loop back                                                                                     ;                jr groom1           ; loop until we reach the end.
1573  9E82            GRoom0  ldx     <scrPtr                                         ; point to screens table                                                ; groom0 ld hl,(scrptr)      ; pointer to screens.
1575  1F30                                    tfr     u,d                                                     ; pass offset to regD
1577  308B                                    leax    d,x                                                     ; add offset to pointer                                                 ;                add hl,de           ; add displacement.
1579  F65F00                                  ldb     numSc                                                   ; get number of screens                                                 ;                ld a,(numsc)        ; number of screens.
157C  4F                                      clra                                                                    ; convert to 16 bits value                                              ;                ld d,0              ; zeroise high byte.
                                                                                                                                                                                                                                              ;                ld e,a              ; displacement in de.
157D  308B                                    leax    d,x                                                     ; skip the screens                                                              ;                add hl,de           ; add double displacement to address.
157F  308B                                    leax    d,x                                                     ; length at the beginning                                               ;                add hl,de
1581  3582                                    puls    a,pc                                                    ; discard regA and return                                               ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Draw present room                                                                                                                                                                     ; Draw present room.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1583  9677            DRoom           lda     <winTop                                         ; get top of window                                                             ; droom  ld a,(wintop)       ; window top.
1585  9726                                    sta     <dispY                                          ; put in Y coordinate                                                   ;                ld (dispx),a        ; set x coordinate.
1587  9E7E            DRoom2  ldx     <blkPtr                                         ; point to blocks table                                                 ; droom2 ld hl,(blkptr)      ; blocks.
1589  9F50                                    stx     <grBase                                         ; copy to variable                                                              ;                ld (grbase),hl      ; set graphics base.
158B  BD155F                                  jsr     GRoom                                                   ; get address of current room                                   ;                call groom          ; get address of current room.
158E  4F                                      clra                                                                    ; value zero                                                                            ;                xor a               ; zero in accumulator.
158F  972D                                    sta     <comCnt                                         ; int compression counter                                               ;                ld (comcnt),a       ; reset compression counter.
1591  9679                                    lda     <winHgt                                         ; get window height                                                             ;                ld a,(winhgt)       ; height of window.
1593  3402            DRoom0  pshs    a                                                               ; pass row counter into stack                                   ; droom0 push af             ; store row counter.
1595  9678                                    lda     <winLft                                         ; get window left edge                                                  ;                ld a,(winlft)       ; window left edge.
1597  9725                                    sta     <dispX                                          ; put in X coordinate                                                   ;                ld (dispy),a        ; set cursor position.
1599  967A                                    lda     <winWid                                         ; get width of window                                                   ;                ld a,(winwid)       ; width of window.
159B  3402            DRoom1  pshs    a                                                               ; pass column counter into stack                                ; droom1 push af             ; store column counter.
                                              
159D  BD15B4                                  jsr     FlByt                                                   ; decompress next screen byte                                   ;                call flbyt          ; decompress next byte on the fly.
15A0  3410                                    pshs    x                                                               ; save pointer                                                                          ;                push hl             ; store address of cell.
15A2  BD14CC                                  jsr     PAttr2                                          ; show block (no attributes in 6809)            ;                call pattr          ; show attributes and block.
15A5  3510                                    puls    x                                                               ; restore pointer                                                                       ;                pop hl              ; restore cell address.
15A7  3502                                    puls    a                                                               ; restore column counter                                                ;                pop af              ; restore loop counter.
15A9  4A                                      deca                                                                    ; decrement it                                                                          ;                dec a               ; one less column.
15AA  26EF                                    bne     DRoom1                                          ; not yet done? loop for next block                     ;                jr nz,droom1        ; repeat for entire line.
15AC  0C26                                    inc     <dispY                                          ; increment Y coordinate                                                ;                ld a,(dispx)        ; x coord.
                                                                                                                                                                                                                                              ;                inc a               ; move down one line.
                                                                                                                                                                                                                                              ;                ld (dispx),a        ; set new position.
15AE  3502                                    puls    a                                                               ; restore row counter                                                   ;                pop af              ; restore row counter.
15B0  4A                                      deca                                                                    ; decrement it                                                                          ;                dec a               ; one less row.
15B1  26E0                                    bne     DRoom0                                          ; not yet done? loopback                                                ;                jr nz,droom0        ; repeat for all rows.
15B3  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Decompress bytes on-the-fly                                                                                                                                           ; Decompress bytes on-the-fly
                      ; regX points to blocks  -  returns block in regA and repetitions in comCnt
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
15B4  962D            FlByt           lda     <comCnt                                         ; get compression counter                                               ; flbyt  ld a,(comcnt)       ; compression counter.
                                                                                                                                                                                                                                              ;                and a               ; any more to decompress?
15B6  260C                                    bne     FlByt1                                          ; if not zero, decompress and exit                      ;                jr nz,flbyt1        ; yes.
15B8  A680                                    lda     ,x+                                                     ; else get a byte                                                                       ;                ld a,(hl)           ; fetch next byte.
                                                                                                                                                                                                                                              ;                inc hl              ; point to next cell.
15BA  81FF                                    cmpa    #255                                                    ; is a control code?                                                            ;                cp 255              ; is this byte a control code?
15BC  260B                                    bne     FlByEx                                          ; no, exit, it is uncompressed                          ;                ret nz              ; no, this byte is uncompressed.
15BE  A680                                    lda     ,x+                                                     ; get next byte                                                                 ;                ld a,(hl)           ; fetch byte type.
15C0  972C                                    sta     <comByt                                         ; save in variable                                                              ;                ld (combyt),a       ; set up the type.
                                                                                                                                                                                                                                              ;                inc hl              ; point to quantity.
15C2  A680                                    lda     ,x+                                                     ; get next byte                                                                 ;                ld a,(hl)           ; get quantity.
                                                                                                                                                                                                                                              ;                inc hl              ; point to next byte.
15C4  4A              FlByt1  deca                                                                    ; decrement byte value by one                                   ; flbyt1 dec a               ; one less.
15C5  972D                                    sta     <comCnt                                         ; save as number of repetitons                          ;                ld (comcnt),a       ; store new quantity.
15C7  962C                                    lda     <comByt                                         ; get byte to be expanded                                               ;                ld a,(combyt)       ; byte to expand.
15C9  39              FlByEx  rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Ladder down check                                                                                                                                                                     ; Ladder down check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF LFLAG
                      LaddD           ldb     8,y                                                                                                                                                                     ; laddd  ld a,(ix+8)         ; x coordinate.
                                              andb    #254                                                                                                                                                                    ;                and 254             ; make it even.
                                              stb     8,y                                                                                                                                                                     ;                ld (ix+8),a         ; reset it.
                                              lda     9,y                                                                                                                                                                     ;                ld h,(ix+9)         ; y coordinate.
                      NumSp5  addb    #SPR_HGT                                                                                                                                                                        ; numsp5 add a,16            ; look down 16 pixels.
                                              std     <reg_HL                                                                                                                                                         ;                ld l,a              ; coords in hl.
                                              bra     LaddV                                                                                                                                                                   ;                jr laddv
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Ladder up check                                                                                                                                                                               ; Ladder up check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      LaddU           ldb     8,y                                                                                                                                                                     ; laddu  ld a,(ix+8)         ; x coordinate.
                                              andb    #254                                                                                                                                                                    ;                and 254             ; make it even.
                                              stb     8,y                                                                                                                                                                     ;                ld (ix+8),a         ; reset it.
                                              lda     9,y                                                                                                                                                                     ;                ld h,(ix+9)         ; y coordinate.
                      NumSp6  addb    #SPR_HGT-2                                                                                                                                                                      ; numsp6 add a,14            ; look 2 pixels above feet.
                                              std     <reg_HL                                                                                                                                                         ;                ld l,a              ; coords in hl.
                      LaddV           exg     a,b
                                              std     <dispX                                                                                                                                                                  ; laddv  ld (dispx),hl       ; set up test coordinates.
                                              jsr     TstBl                                                                                                                                                                   ;                call tstbl          ; get map address.
                                              jsr     LdChk                                                                                                                                                                   ;                call ldchk          ; standard ladder check.
                                              bne     LaddUEx                                                                                                                                                         ;                ret nz              ; no way through.
                                              ldx     <reg_HL
                                              leax    1,x
                                              stx     <reg_HL                                                                                                                                                         ;                inc hl              ; look right one cell.
                                              jsr     LdChk                                                                                                                                                                   ;                call ldchk          ; do the check.
                                              bne     LaddUEx                                                                                                                                                         ;                ret nz              ; impassable.
                                              lda     <dispY                                                                                                                                                                  ;                ld a,(dispy)        ; y coordinate.
                                              anda    #7                                                                                                                                                                              ;                and 7               ; position straddling block cells.
                                              beq     LaddUEx                                                                                                                                                         ;                ret z               ; no more checks needed.
                                              ldx     <reg_HL
                                              leax    1,x
                                              stx     <reg_HL                                                                                                                                                         ;                inc hl              ; look to third cell.
                                              jsr     LdChk                                                                                                                                                                   ;                call ldchk          ; do the check.
                      LaddUEx rts                                                                                                                                                                                     ;                ret                 ; return with zero flag set accordingly.
                              ENDIF
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Can go up check                                                                                                                                                                               ; Can go up check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
15CA  3420            CanGU           pshs    y
15CC  109EA8                                  ldy     <reg_IX
15CF  E628                                    ldb     8,y                                                                                                                                                                     ; cangu  ld a,(ix+8)         ; x coordinate.
15D1  A629                                    lda     9,y                                                                                                                                                                     ;                ld h,(ix+9)         ; y coordinate.
15D3  C002                                    subb    #2                                                                                                                                                                              ;                sub 2               ; look up 2 pixels.
15D5  DDA6                                    std     <reg_HL                                                                                                                                                         ;                ld l,a              ; coords in hl.
15D7  D725                                    stb     <dispX                                                                                                                                                                  ;                ld (dispx),hl       ; set up test coordinates.
15D9  9726                                    sta     <dispY
15DB  BD1717                                  jsr     TstBl                                                                                                                                                                   ;                call tstbl          ; get map address.
15DE  BD1679                                  jsr     LRChk                                                                                                                                                                   ;                call lrchk          ; standard left/right check.
15E1  261C                                    bne     CanGUex                                                                                                                                                         ;                ret nz              ; no way through.
15E3  DCA6                                    ldd     <reg_HL
15E5  C30001                                  addd    #1                                                                                                                                                                              ;                inc hl              ; look right one cell.
15E8  DDA6                                    std     <reg_HL
15EA  BD1679                                  jsr     LRChk                                                                                                                                                                   ;                call lrchk          ; do the check.
15ED  2610                                    bne     CanGUex                                                                                                                                                         ;                ret nz              ; impassable.
15EF  9626                                    lda     <dispY                                                                                                                                                                  ;                ld a,(dispy)        ; y coordinate.
15F1  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; position straddling block cells.
15F3  270A                                    beq     CanGUex                                                                                                                                                         ;                ret z               ; no more checks needed.
15F5  DCA6                                    ldd     <reg_HL
15F7  C30001                                  addd    #1                                                                                                                                                                              ;                inc hl              ; look to third cell.
15FA  DDA6                                    std     <reg_HL
15FC  BD1679                                  jsr     LRChk                                                                                                                                                                   ;                call lrchk          ; do the check.
15FF  35A0            CanGUex puls    y,pc                                                                                                                                                                    ;                ret                 ; return with zero flag set accordingly.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Can go down check                                                                                                                                                                     ; Can go down check.
                      ; here regX contains reg_IX
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1601  3420            CanGD           pshs    y
1603  109EA8                                  ldy     <reg_IX
1606  E628                                    ldb     8,y                                                                                                                                                                     ; cangd  ld a,(ix+8)         ; x coordinate.
1608  A629                                    lda     9,y                                                                                                                                                                     ;                ld h,(ix+9)         ; y coordinate.
160A                  NumSpr3
160A  CB10                                    addb    #SPR_HGT                                                                                                                                                                        ; numsp3 add a,16            ; look down 16 pixels.
160C  DDA6                                    std     <reg_HL                                                                                                                                                         ;                ld l,a              ; coords in hl.
160E  D725                                    stb     <dispX                                                                                                                                                                  ;                ld (dispx),hl       ; set up test coordinates.
1610  9726                                    sta     <dispY
1612  BD1717                                  jsr     TstBl                                                                                                                                                           ;                call tstbl          ; get map address.
1615  BD168A                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1618  261C                                    bne     CanGDex                                                                                                                                                         ;                ret nz              ; no way through.
161A  DCA6                                    ldd     <reg_HL
161C  C30001                                  addd    #1                                                                                                                                                                              ;                inc hl              ; look right one cell.
161F  DDA6                                    std     <reg_HL
1621  BD168A                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1624  2610                                    bne     CanGDex                                                                                                                                                         ;                ret nz              ; impassable.
1626  9626                                    lda     <dispY                                                                                                                                                                  ;                ld a,(dispy)        ; y coordinate.
1628  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; position straddling block cells.
162A  270A                                    beq     CanGDex                                                                                                                                                         ;                ret z               ; no more checks needed.
162C  DCA6                                    ldd     <reg_HL
162E  C30001                                  addd    #1                                                                                                                                                                              ;                inc hl              ; look to third cell.
1631  DDA6                                    std     <reg_HL
1633  BD168A                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1636  35A0            CanGDex puls    y,pc                                                                                                                                                                    ;                ret                 ; return with zero flag set accordingly.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Can go left check                                                                                                                                                                     ; Can go left check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1638  3420            CanGL           pshs    y
163A  109EA8                                  ldy     <reg_IX
163D  E628                                    ldb     8,y                                                                                                                                                                     ; cangl  ld l,(ix+8)         ; x coordinate.
163F  A629                                    lda     9,y                                                                                                                                                                     ;                ld a,(ix+9)         ; y coordinate.
1641  8002                                    suba    #2                                                                                                                                                                              ;                sub 2               ; look left 2 pixels.
1643  DDA6                                    std     <reg_HL                                                                                                                                                         ;                ld h,a              ; coords in hl.
1645  200D                                    bra     CanGH                                                                                                                                                                   ;                jr cangh            ; test if we can go there.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Can go right check                                                                                                                                                                    ; Can go right check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1647  3420            CanGR           pshs    y
1649  109EA8                                  ldy     <reg_IX
164C  E628                                    ldb     8,y                                                                                                                                                                     ; cangr  ld l,(ix+8)         ; x coordinate.
164E  A629                                    lda     9,y                                                                                                                                                                     ;                ld a,(ix+9)         ; y coordinate.
1650  8B10                                    adda    #16                                                                                                                                                                     ;                add a,16            ; look right 16 pixels.
1652  DDA6                                    std     <reg_HL                                                                                                                                                         ;                ld h,a              ; coords in hl.
1654  D725            CanGH           stb     <dispX                                                                                                                                                                  ; cangh  ld (dispx),hl       ; set up test coordinates.
1656  9726                                    sta     <dispY
1658  C603            CanGh2  ldb     #(SPR_HGT/8+1)
165A  D7A2                                    stb     <reg_B                                                                                                                                                          ; cangh2 ld b,3              ; default rows to write.
165C  96A7                                    lda     <reg_L                                                                                                                                                          ;                ld a,l              ; x position.
165E  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; does x straddle cells?
1660  2602                                    bne     CanGh0                                                                                                                                                          ;                jr nz,cangh0        ; yes, loop counter is good.
1662  0AA2                                    dec     <reg_B                                                                                                                                                          ;                dec b               ; one less row to write.
1664  BD1717          CanGh0  jsr     TstBl                                                                                                                                                                   ; cangh0 call tstbl          ; get map address.
                                                                                                                                                                                                                                              ;                ld de,32            ; distance to next cell.
1667  BD1679          CanGh1  jsr     LRChk                                                                                                                                                                   ; cangh1 call lrchk          ; standard left/right check.
166A  260B                                    bne     CanGRex                                                                                                                                                         ;                ret nz              ; no way through.
166C  9EA6                                    ldx     <reg_HL
166E  308820                                  leax    32,x                                                                                                                                                                    ;                add hl,de           ; look down.
1671  9FA6                                    stx     <reg_HL
1673  0AA2                                    dec     <reg_B
1675  26F0                                    bne     CanGh1                                                                                                                                                          ;                djnz cangh1
1677  35A0            CanGRex puls    y,pc                                                                                                                                                                    ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Check left/right movement is okay                                                                                                                             ; Check left/right movement is okay.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1679  A69F00A6        LRChk           lda     [reg_HL]                                                                                                                                                                ; lrchk  ld a,(hl)           ; fetch map cell.
167D  8102                                    cmpa    #WALL                                                                                                                                                                   ;                cp WALL             ; is it passable?
167F  2706                                    beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; no.
1681  8104                                    cmpa    #FODDER                                                                                                                                                         ;                cp FODDER           ; fodder has to be dug.
1683  2702                                    beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; not passable.
1685  4F              Always  clra                                                                                                                                                                                    ; always xor a               ; report it as okay.
1686  39                                      rts                                                                                                                                                                                     ;                ret
1687  4F              LRChkX  clra                                                                                                                                                                                    ; lrchkx xor a               ; reset all bits.
1688  4C                                      inca                                                                                                                                                                                    ;                inc a
1689  39                                      rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Check platform or solid item is not in way                                                                                                    ; Check platform or solid item is not in way.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
168A  A69F00A6        PlChk           lda     [reg_HL]                                                                                                                                                                ; plchk  ld a,(hl)           ; fetch map cell.
168E  8102                                    cmpa    #WALL                                                                                                                                                                   ;                cp WALL             ; is it passable?
1690  27F5                                    beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; no.
                              IF PFLAG+DFLAG
                                              cmpa    #FODDER                                                                                                                                                         ;                cp FODDER           ; fodder has to be dug.
                                              beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; not passable.
                              ENDIF
1692  8101                                    cmpa    #PLATFM                                                                                                                                                         ;                cp PLATFM           ; platform is solid.
1694  2702                                    beq     PlChkX                                                                                                                                                          ;                jr z,plchkx         ; not passable.
                              IF LFLAG
                                              cmpa    #LADDER                                                                                                                                                         ;                cp LADDER           ; is it a ladder?
                                              beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; on ladder, deny movement.
                              ENDIF
1696  4F              PlChk0  clra                                                                                                                                                                                    ; plchk0 xor a               ; report it as okay.
1697  39                                      rts                                                                                                                                                                                     ;                ret
1698  9625            PlChkX  lda     <dispX                                                                                                                                                          ; plchkx ld a,(dispx)        ; x coordinate.
169A  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; position straddling blocks.
169C  27E9                                    beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; on platform, deny movement.
169E  20F6                                    bra     PlChk0                                                                                                                                                          ;                jr plchk0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Check ladder is available                                                                                                                                             ; Check ladder is available.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF LFLAG
                      LdChk           lda     [reg_HL]                                                                                                                                                                ; ldchk  ld a,(hl)           ; fetch cell.
                                              cmpa    #LADDER                                                                                                                                                         ;                cp LADDER           ; is it a ladder?
                                              rts                                                                                                                                                                                     ;                ret                 ; return with zero flag set accordingly.
                              ENDIF
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get collectables                                                                                                                                                                      ; Get collectables.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF CFLAG
                      GetCol  ldb     #COLECT                                                                                                                                                         ; getcol ld b,COLECT         ; collectable blocks.
                                              stb     <reg_B
                                              jsr     TDed                                                                                                                                                                    ;                call tded           ; test for collectable blocks.
                                              cmpa    <reg_B                                                                                                                                                          ;                cp b                ; did we find one?
                                              bne     GetCEx                                                                                                                                                          ;                ret nz              ; none were found, job done.
                                              bsr     GtBlk                                                                                                                                                                   ;                call gtblk          ; get block.
                                              jsr     Evnt20                                                                                                                                                          ;                call evnt20         ; collected block event.
                                              bra     GetCol                                                                                                                                                          ;                jr getcol           ; repeat until none left.
                      GetCEx  rts
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get collectable block                                                                                                                                                         ; Get collectable block.
                      ; regX points to the MAP position for the Colectable block to be erased
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      GtBlk           clr     ,x                                                              ; clean collectable block in map                                ;       gtblk  ld (hl),0           ; make it empty now.
                                              tfr     x,d                                                     ; pass pointer to regD                                                  ;                ld de,MAP           ; map address.
                                              subd    #MAP                                                    ; subtract MAP origin                                                   ;                and a               ; clear carry.
                                              pshs    d                                                               ; save cell number                                                              ;                sbc hl,de           ; find cell number.
                                                                                                                                                                                                                                              ;                ld a,l              ; get low byte of cell number.
                                              andb    #31                                                     ; column 0-31 (X)                                                                       ;                and 31              ; 0 - 31 is column.
                                              stb     <reg_E                                          ; X coordinate                                                                          ;                ld d,a              ; store y in d register.
                                              ldd     ,s                                                              ; get cell number                                                                                                               
                                              addd    ,s                                                              ; duplicate value
                                              std     ,s                                                              ; update into stack                                                             ;                add hl,hl           ; multiply by 8.
                                              addd    ,s                                                              ; double again = 4x                                                     
                                              std     ,s                                                              ; update into stack                                                             ;                add hl,hl
                                              addd    ,s++                                                    ; double again = 8x, clean stack                                ;                add hl,hl           ; x is now in h.
                                              ldb     <reg_E                                          ; Y-X coordinates in regD                                               ;                ld e,h              ; put x in e.
                                              stb     <dispX                                          ; set display coordinates                                               ;                ld (dispx),de       ; set display coordinates.
                                              sta     <dispY                                          ; but inverting bytes                                                   ;                ld (dispx),de       ; set display coordinates.
                                              lda     <colPatt                                                ; get block number                                                              ;                ld a,(colpatt)
                                              asla                                                                    ; multiply                                                                                      ;                rlca                ; multiply char by 8.
                                              asla                                                                    ; by                                                                                                    ;                rlca
                                              asla                                                                    ; eight                                                                                         ;                rlca
                                              tfr     a,b                                                     ; save shifted value                                                            ;                ld e,a              ; store shift in e.
                                              anda    #7                                                              ; use 3 lower bits of regA (from regB)          ;                and 7               ; only want high byte bits.
                                                                                                                                                                                                                                              ;                ld d,a              ; store in d.
                                                                                                                                                                                                                                              ;                ld a,e              ; restore shifted value.
                                              andb    #%11111000                                      ; use 5 upper bits                                                              ;                and 248             ; only want low byte bits.
                                                                                                                                                                                                                                              ;                ld e,a              ; that's the low byte.
                                              ldx     <blkPtr                                         ; get graphics pointer                                                  ;                ld hl,(blkptr)      ; address of graphics.
                                              leax    d,x                                                     ; add displacement                                                              ;                add hl,de           ; add displacement.
                                              jsr     GPrad                                                   ; get screen address                                                            ;                call gprad          ; get screen address.
                                              ldu     <grBase                                         ; get pointer to screen                                                 ;
                                              ldb     #8                                                              ; rows counter
                      GtBl01  lda     ,u                                                              ; get a char from screen                                                ;                ld a,(de)           ; get image byte.
                                              eora    ,x+                                                     ; merge with block data                                                 ;                xor (hl)
                                              sta     ,u                                                              ; update cleaned block                                                  ;                ld (de),a           ; copy to screen.
                                              leau    32,u                                                    ; point to screen row below                                     ;                inc hl              ; next image byte.
                                              decb                                                                    ; decrement rows counter                                                ;                inc d               ; next screen row down.
                                              bne     GtBl01                                          ; not done? loopback
                                              rts                                                                     ; return                                                                                                ;                ret
                              ENDIF
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Touched deadly block check                                                                                                                                            ; Touched deadly block check.
                      ; Returns with DEADLY (must be non-zero) in accumulator if true                                         ; Returns with DEADLY (must be non-zero) in accumulator if true.
                      ; required block must be in reg_B
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
16A0  EC28            TDed            ldd     8,y                                                                                                                                                                     ; tded   ld l,(ix+8)         ; x coordinate.
16A2  DD25                                    std     <dispX                                                                                                                                                          ;                ld h,(ix+9)         ; y coordinate.
16A4  1E89                                    exg     a,b                                                     ; dispX receives bytes inverted                         ;                ld (dispx),hl       ; set up test coordinates.
16A6  DDA6                                    std     <reg_HL
16A8  BD1717                                  jsr     TstBl                                                                                                                                                                   ;                call tstbl          ; get map address.
16AB  CE001F                                  ldu     #31                                                                                                                                                                     ;                ld de,31            ; default distance to next line down.
16AE  DFA4                                    stu     <reg_DE
16B0  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this the required block?
16B2  2760                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
16B4  9EA6                                    ldx     <reg_HL
16B6  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; next cell.
16B8  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch type.
16BA  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this deadly/custom?
16BC  2756                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
16BE  9626                                    lda     <dispY                                                                                                                                                          ;                ld a,(dispy)        ; horizontal position.
16C0  97A3                                    sta     <reg_C                                                                                                                                                          ;                ld c,a              ; store column in c register.
16C2  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; is it straddling cells?
16C4  270C                                    beq     TDed0                                                                                                                                                                   ;                jr z,tded0          ; no.
16C6  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; last cell.
16C8  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch type.
16CA  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this the block?
16CC  2746                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
16CE  335F                                    leau    -1,u                                                                                                                                                                    ;                dec de              ; one less cell to next row down.
16D0  DFA4                                    stu     <reg_DE
16D2  DCA4            TDed0           ldd     <reg_DE
16D4  308B                                    leax    d,x                                                                                                                                                                     ; tded0  add hl,de           ; point to next row.
16D6  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch left cell block.
16D8  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this fatal?
16DA  2738                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
16DC  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; next cell.
16DE  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch type.
16E0  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this fatal?
16E2  2730                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
16E4  96A3                                    lda     <reg_C                                                                                                                                                          ;                ld a,c              ; horizontal position.
16E6  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; is it straddling cells?
16E8  2708                                    beq     TDed1                                                                                                                                                                   ;                jr z,tded1          ; no.
16EA  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; last cell.
16EC  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch type.
16EE  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this fatal?
16F0  2722                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
16F2  9625            TDed1           lda     <dispX                                                                                                                                                          ; tded1  ld a,(dispx)        ; vertical position.
16F4  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; is it straddling cells?
16F6  271C                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; no, job done.
16F8  DCA4                                    ldd     <reg_DE
16FA  308B                                    leax    d,x                                                                                                                                                                     ;                add hl,de           ; point to next row.
16FC  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch left cell block.
16FE  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this fatal?
1700  2712                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
1702  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; next cell.
1704  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch type.
1706  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this fatal?
1708  270A                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
170A  96A3                                    lda     <reg_C                                                                                                                                                          ;                ld a,c              ; horizontal position.
170C  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; is it straddling cells?
170E  2704                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; no.
1710  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; last cell.
1712  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch final type.
1714  9FA6            TDedEx  stx     <reg_HL
1716  39                                      rts                                                                                                                                                                                     ;                ret                 ; return with final type in accumulator.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Fetch block type at (dispx, dispy)                                                                                                                    ; Fetch block type at (dispx, dispy).
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1717  9625            TstBl           lda     <dispX                                                                                                                                                          ; tstbl  ld a,(dispx)        ; fetch x coord.
1719  48                                      lsla                                                                    ; to avoid bit7 being the same                          ;                rlca                ; divide by 8,
                                                                                                                              ; was asla before
171A  2402                                    bcc     TstBl1
171C  8A01                                    ora     #1
171E  48              TstBl1  lsla                                                                    ; to avoid bit7 being the same                          ;                rlca                ; and multiply by 32.
                                                                                                                              ; was asla before
171F  2402                                    bcc     TstBl2
1721  8A01                                    ora     #1
1723  97A4            TstBl2  sta     <reg_D                                                                                                                                                          ;                ld d,a              ; store in d.
1725  84E0                                    anda    #224                                                    ; %11100000     - mask off LOW bits                             ;                and 224             ; mask off high bits.
1727  97A5                                    sta     <reg_E                                                                                                                                                          ;                ld e,a              ; low byte.
1729  96A4                                    lda     <reg_D                                                                                                                                                          ;                ld a,d              ; restore shift result.
172B  8403                                    anda    #3                                                              ; %00000011 - mask off HIGH bits                                ;                and 3               ; high bits.
172D  97A4                                    sta     <reg_D                                                                                                                                                          ;                ld d,a              ; got displacement in de.
172F  9626                                    lda     <dispY                                                                                                                                                          ;                ld a,(dispy)        ; y coord.
1731  46                                      rora                                                                                                                                                                                    ;                rra                 ; divide by 8.
1732  46                                      rora                                                                                                                                                                                    ;                rra
1733  46                                      rora                                                                                                                                                                                    ;                rra
1734  841F                                    anda    #31                                                                                                                                                                     ;                and 31              ; only want 0 - 31.
1736  9BA5                                    adda    <reg_E                                                                                                                                                          ;                add a,e             ; add to displacement.
1738  97A5                                    sta     <reg_E                                                                                                                                                          ;                ld e,a              ; displacement in de.
173A  8EDC00                                  ldx     #MAP                                                                                                                                                                    ;                ld hl,MAP           ; position of dummy screen.
173D  DCA4                                    ldd     <reg_DE                                                                                                                                                         ;                add hl,de           ; point to address.
173F  308B                                    leax    d,x                                                                                                                                                                     
1741  9FA6                                    stx     <reg_HL
1743  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch byte there.
1745  39                                      rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Jump - if we can.
                                                                                                                                                                                                                                              ; Requires initial speed to be set up in accumulator prior to call.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1746  40              Jump            nega                                                                                                                                                                                    ; jump   neg                 ; switch sign so we jump up.
1747  97A3                                    sta     <reg_C                                                                                                                                                          ;                ld c,a              ; store in c register.
                                                                                                                                                                                                                                              ; ;       ld a,(ix+8)         ; x coordinate.
                                                                                                                                                                                                                                              ; ;       ld h,(ix+9)         ; y coordinate.
                                                                                                                                                                                                                                              ; ;numsp4 add a,16            ; look down 16 pixels.
                                                                                                                                                                                                                                              ; ;       ld l,a              ; coords in hl.
                                                                                                                                                                                                                                              ; ;       and 7               ; are we on platform boundary?
                                                                                                                                                                                                                                              ; ;       ret nz              ; no, cannot jump.
                                                                                                                                                                                                                                              ; ;       ld (dispx),hl       ; set up test coordinates.
                                                                                                                                                                                                                                              ; ;       ld b,a              ; copy to b register.
                                                                                                                                                                                                                                              ; ;       call tstbl          ; get map address.
                                                                                                                                                                                                                                              ; ;       call plchk          ; block, platform check.
                                                                                                                                                                                                                                              ; ;       jr nz,jump0         ; it's solid, we can jump.
                                                                                                                                                                                                                                              ; ;       inc hl              ; look right one cell.
                                                                                                                                                                                                                                              ; ;       call plchk          ; block, platform check.
                                                                                                                                                                                                                                              ; ;       jr nz,jump0         ; it's solid, we can jump.
                                                                                                                                                                                                                                              ; ;       ld a,b              ; y coordinate.
                                                                                                                                                                                                                                              ; ;       and 7               ; position straddling block cells.
                                                                                                                                                                                                                                              ; ;       ret z               ; no more checks needed.
                                                                                                                                                                                                                                              ; ;       inc hl              ; look to third cell.
                                                                                                                                                                                                                                              ; ;       call plchk          ; block, platform check.
                                                                                                                                                                                                                                              ; ;       ret z               ; not solid, don't jump.
1749  A62D            Jump0           lda     13,y
                                                                                                                                                                                                                                              ; jump0  ld a,(ix+13)        ; jumping flag.
                                                                                                                                                                                                                                              ;                and a               ; is it set?
174B  2606                                    bne     JumpEx                                                                                                                                                          ;                ret nz              ; already in the air.
174D  6C2D                                    inc     13,y                                                                                                                                                                    ;                inc (ix+13)         ; set it.
174F  96A3                                    lda     <reg_C                                                                                                                                                          ;                ld (ix+14),c        ; set jump height.
1751  A72E                                    sta     14,y
1753  39              JumpEx  rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1754  6D2D            Hop             tst     13,y                                                                                                                                                                    ; hop    ld a,(ix+13)        ; jumping flag.
                                                                                                                                                                                                                                              ;                and a               ; is it set?
1756  2605                                    bne     HopEx                                                                                                                                                                   ;                ret nz              ; already in the air.
1758  CCFF00                                  ldd     #$ff00                                                                                                                                                          ;                ld (ix+13),255      ; set it.
175B  ED2D                                    std     13,y                                                                                                                                                                    ;                ld (ix+14),0        ; set jump table displacement.
175D  39              HopEx           rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Random numbers code.
                                                                                                                                                                                                                                              ; Pseudo-random number generator, 8-bit.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR SHRAPNEL - #06 - DONE
175E                  Random  
                                                                                                                                                                                                                                              ; random ld hl,seed          ; set up seed pointer.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get last random number.
                                                                                                                                                                                                                                              ;                ld b,a              ; copy to b register.
                                                                                                                                                                                                                                              ;                rrca                ; multiply by 32.
                      
                      
                      
                                                                                                                                                                                                                                              ;                rrca
                      
                      
                      
                                                                                                                                                                                                                                              ;                rrca
                      
                      
                      
                                                                                                                                                                                                                                              ;                xor 31
                                                                                                                                                                                                                                              ;                add a,b
                                                                                                                                                                                                                                              ;                sbc a,255
                                                                                                                                                                                                                                              ;                ld (hl),a           ; store new seed.
                                                                                                                                                                                                                                              ;                ld (varrnd),a       ; return number in variable.
175E  9631                                    lda     <seed
1760  2705                                    beq     doEor
1762  48                                      lsla
1763  2704                                    beq     noEor
1765  2402                                    bcc     noEor
1767  881D            doEor           eora    #$1d
1769  9731            noEor           sta     <seed
176B  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Keyboard test routine.                                                                                                                                                        ; Keyboard test routine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
176C  B7FF02          KTest           sta     $ff02                                                   ; send to keyboard                                                              ; ktest  ld c,a              ; key to test in c.
176F  B6FF00                                  lda     $ff00                                                   ; read rows                                                                                     ;                and 7               ; mask bits d0-d2 for row.
1772  D630                                    ldb     <scanOff                                                ; get offset to codes                                                   ;                inc a               ; in range 1-8.
1774  A585                                    bita    b,x                                                     ; is that bit zero (key pressed)?                       ;                ld b,a              ; place in b.
1776  2603                                    bne     ScanK01                                         ; no, clear carry                                                                       ;                srl c               ; divide c by 8
1778  1A01                                    orcc    #%00000001                                      ; yes, set carry                                                                        ;                srl c               ; to find position within row.
177A  39                                      rts                                                                     ; return                                                                                                ;                srl c
177B  1CFE            ScanK01 andcc   #%11111110                                      ; reset carry flag                                                              ;                ld a,5              ; only 5 keys per row.
                                                                                                                                                                                                                                              ;                sub c               ; subtract position.
                                                                                                                                                                                                                                              ;                ld c,a              ; put in c.
                                                                                                                                                                                                                                              ;                ld a,254            ; high byte of port to read.
                                                                                                                                                                                                                                              ; ktest0 rrca                ; rotate into position.
                                                                                                                                                                                                                                              ;                djnz ktest0         ; repeat until we've found relevant row.
                                                                                                                                                                                                                                              ;                in a,(254)          ; read port (a=high, 254=low).
                                                                                                                                                                                                                                              ; ktest1 rra                 ; rotate bit out of result.
                                                                                                                                                                                                                                              ;                dec c               ; loop counter.
                                                                                                                                                                                                                                              ;                jp nz,ktest1        ; repeat until bit for position in carry.
177D  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Joystick and keyboard reading routines (Joystick if regA=1, else Keyboard)            ; Joystick and keyboard reading routines
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
177E  961D            JoyKey  lda     <contrl                                         ; get kind of control                                                   ; joykey ld a,(contrl)       ; control flag.
1780  4A                                      deca                                                                    ; is it 1?                                                                                      ;                dec a               ; is it the keyboard?
1781  2717                                    beq     JoyJoy                                          ; yes, process Joystick                                                 ;                jr z,joyjoy         ; no, it's Kempston joystick.
                                                                                                                              ; only one kind of Joystick                                     ;                dec a               ; Sinclair?
                                                                                                                                                                                                                                              ;                jr z,joysin         ; read Sinclair joystick.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ; Keyboard controls.                                                                                                                                                                    ; Keyboard controls.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1783  C607                                    ldb     #7                                                              ; number of keys to be read
1785  3404                                    pshs    b                                                               ; pshs counter
1787  8E6784                                  ldx     #keys+6+1                                       ; point to last key in table                                    ;                ld hl,keys+6        ; address of last key.
178A  0FA5            JoyNoCC clr     <reg_E                                          ; reset bits in output register                         ;                ld e,0              ; zero reading.
                                                                                                                                                                                                                                              ;                ld d,7              ; keys to read.
178C  A682            JoyKe0  lda     ,-x                                                     ; get value from table                                                  ; joyke0 ld a,(hl)           ; get key from table.
178E  8DDC                                    bsr     KTest                                                                                                                                                                   ;                call ktest          ; being pressed?
1790  09A5                                    rol     <reg_E                                          ; shift into output register                                                                                                                                                                                                                    ;                ccf                 ; complement the carry.
                                                                                                                                                                                                                                              ;                rl e                ; rotate into reading.
1792  6AE4                                    dec     ,s                                                              ; done all keys?                                                                        ;                dec d               ; one less to do.
1794  26F6                                    bne     JoyKe0                                          ; no, loopback                                                                          ;                jp nz,joyke0        ; repeat for all keys.
1796  3261                                    leas    1,s                                                     ; get rid of counter
1798  2075                                    bra     JoyJo1                                          ; go store value                                                                        ;                jr joyjo1           ; store the value.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ; This table is added by the compiler at the end of the user code. Here just for help
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ;                                        P        O     A        Q       spc  Z  I        1     2        3        4
                      ;keys           fcb     $fe,$7f,$fd,$fd,$7f,$fb,$fd,$fd,$fb,$f7,$ef             ; mask to the keyboard columns (only one zero)
                      ;keysD  fcb     $10,$08,$04,$10,$20,$20,$08,$01,$01,$01,$01             ; expected bit to be zero (Dragon)
                      ;keysC  fcb     $04,$02,$01,$04,$08,$08,$02,$10,$10,$10,$10             ; expected bit to be zero (CoCo)
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ; Joystick controls     - special for 6809 machines (using 6 bit DAC)
                      ; besides the 2 axis (UD, LR) and button, KEYS 'Z' and 'I' must be checked
                      ; defines three zones: UP or LEFT        (00-07) - 12,5%
                      ;                                                         NEUTRAL        (08-55) - 75%
                      ;                                                         DOWN or RIGHT (56-63) - 12,5% 
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
015E                  LeftJoy equ     $015e                                                   ; first byte past Left joystick variables
0002                  MaskLB  equ     $02
                                                                                                                      ; fills variables $015c-$015d (X - Y axis left joystick)
179A  170088          JoyJoy  lbsr    AudiOff                                         ; turn off audio
179D  8E015E                                  ldx     #LeftJoy                                                ; point to end of left joystick table
17A0  C603                                    ldb     #$03                                                    ; bits to read left joystick axis
17A2  D735                                    stb     <readVar                                                ; save as counter too
17A4  8D6E            RdJyAx  bsr     MuxBits                                         ; set both bits
17A6  C6DC                                    ldb     #55*4                                                   ; looking for 56 or greater
17A8  F7FF20                                  stb     $ff20                                                   ; send 'start' to DAC
17AB  7DFF00                                  tst     $ff00                                                   ; read data from joystick
17AE  2B11                                    bmi     SetVal63                                                ; data sent too low, so use maxValue
17B0  C61C                                    ldb     #07*4                                                   ; looking for 7 or lower
17B2  F7FF20                                  stb     $ff20                                                   ; send 'start' to DAC
17B5  7DFF00                                  tst     $ff00                                                   ; read data from joystick
17B8  2A04                                    bpl     SetVal00                                                ; data sent equal or too high, so use minValue
17BA  C620            SetVal32        ldb     #32                                                     ; else asume center value (no move)
17BC  2005                                    bra     RdSame                                          ; go use it
17BE  5F              SetVal00        clrb                                                                    ; get minimum value
17BF  2002                                    bra     RdSame                                          ; go use it
17C1  C63F            SetVal63        ldb     #63                                                     ; get maximum value
17C3  E782            RdSame  stb     ,-x                                                     ; save value in table
17C5  0A35                                    dec     <readVar                                                ; number of axis
17C7  D635                                    ldb     <readVar                                                ; get value
17C9  C101                                    cmpb    #1                                                              ; already done both axis?
17CB  26D7                                    bne     RdJyAx                                          ; no, do next one
17CD  7FFF20                                  clr     $ff20                                                   ; avoid sound spikes
17D0  5F                                      clrb                                                                    ; set bits to zero
17D1  8D41                                    bsr     MuxBits                                         ; select Audio DAC channel
17D3  8D52                                    bsr     AudiOn                                          ; set audio on again
17D5  0FA5                                    clr     <reg_E                                          ; result to zero
                                                                                                                      ; process special keys 'I','Z'
17D7  8E6783                                  ldx     #keys+6                                         ; point to values table
17DA  A684                                    lda     ,x                                                              ; get column value for 'I' (64)
17DC  8D8E                                    bsr     KTest                                                   ; test for it
17DE  09A5                                    rol     <reg_E                                          ; shift into output register
17E0  A682                                    lda     ,-x                                                     ; get colun value for 'Z' (32)
17E2  8D88                                    bsr     KTest                                                   ; test for it
17E4  09A5                                    rol     <reg_E                                          ; shift into output register
                                                                                                                      ; process button 
17E6  1CFE                                    andcc   #%11111110                                      ; clear carry
17E8  B6FF00                                  lda     $ff00                                                   ; is button of right Joystick pressed (16)?
17EB  8502                                    bita    #MaskLB                                         ; bit1 is the value (0=YES)
17ED  2602                                    bne     PutButt                                         ; not pressed
17EF  1A01                                    orcc    #%00000001                                      ; set carry (button is pressed)
17F1  09A5            PutButt rol     <reg_E                                          ; shift into output register
                                                                                                                      ; process 2 axis
17F3  B6015D          JoyAxis lda     >LeftJoy-1                                      ; get Y axis value
17F6  8108                                    cmpa    #8                                                              ; is it move Up?
17F8  09A5                                    rol     <reg_E                                          ; puts 1 if it was up (08)
17FA  8637                                    lda     #55                                                     ; is it Down?
17FC  B1015D                                  cmpa    >LeftJoy-1                                      ; compare to Y axis
17FF  09A5                                    rol     <reg_E                                          ; puts 1 if it was down (04)
1801  B6015C                                  lda     >LeftJoy-2                                      ; get X axis value
1804  8108                                    cmpa    #8                                                              ; is it move Left?
1806  09A5                                    rol     <reg_E                                          ; puts 1 if it was right (02)
1808  8637                                    lda     #55                                                     ; is it move Right?
180A  B1015C                                  cmpa    >LeftJoy-2                                      ; compare to X axis
180D  09A5                                    rol     <reg_E                                          ; puts 1 if it was right (01)
180F  96A5            JoyJo1  lda     <reg_E                                          ; get result                                                    
1811  9700            JoyJo2  sta     <joyVal                                         ; save into variable                                                            
1813  39                                      rts                                                                     ; return                                                                                                
                      ; ------------------------------------------------------------------------------
                      ; INPUT: two lower bits in regB -> mutiplex bits                                                                        
                      ; ------------------------------------------------------------------------------
1814  CEFF01          MuxBits ldu     #$ff01                                          ; point to PIA0 CRA
1817  8D00                                    bsr     MuxB01                                          ; set/reset CA2
1819  A6C4            MuxB01  lda     ,u                                                              ; get value from CRA - CRB
181B  84F7                                    anda    #$f7                                                    ; set to zero CA2 - CB2
181D  56                                      rorb                                                                    ; send bit to carry
181E  2402                                    bcc     MuxB02                                          ; not set?
1820  8A08                                    ora     #8                                                              ; set to 1 CA2 - CB2
1822  A7C1            MuxB02  sta     ,u++                                                    ; save value, point to CRB
1824  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------
1825  4F              AudiOff clra                                                                    ; bit 3 of ACCA = 0 disable analog MUX
1826  8C                                      fcb     $8c                                                     ; skip next
1827  8608            AudiOn  lda     #8                                                              ; bit 3 of ACA = 1 enable analog MUX
1829  A7E2                                    sta     ,-s                                                     ; save on stack
182B  B6FF23                                  lda     $ff23                                                   ; get ctrl register of PIA1 side-B
182E  84F7                                    anda    #$f7                                                    ; reset bit 3
1830  AAE0                                    ora     ,s+                                                     ; set desired status
1832  B7FF23                                  sta     $ff23                                                   ; update PIA
1835  39                                      rts
                      ; ------------------------------------------------------------------------------
                      ;                                                                                                       ; NOT USED FOR 6809                                                             ; Kempston joystick controls.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ;                                                                                                                                                                                                                       ; joyjoy ld bc,31            ; port for Kempston interface.
                      ;                                                                                                                                                                                                                       ;                in a,(c)            ; read it.
                      ;                                                                                                                                                                                                                       ; joyjo3 ld e,a              ; copy to e register.
                      ;                                                                                                                                                                                                                       ;                ld a,(keys+5)       ; key six.
                      ;                                                                                                                                                                                                                       ;                call ktest          ; being pressed?
                      ;                                                                                                                                                                                                                       ;                jr c,joyjo0         ; not pressed.
                      ;                                                                                                                                                                                                                       ;                set 5,e             ; set bit d5.
                      ;                                                                                                                                                                                                                       ; joyjo0 ld a,(keys+6)       ; key seven.
                      ;                                                                                                                                                                                                                       ;                call ktest          ; being pressed?
                      ;                                                                                                                                                                                                                       ;                jr c,joyjo1         ; not pressed.
                      ;                                                                                                                                                                                                                       ;                set 6,e             ; set bit d6.
                      ;                                                                                                                                                                                                                       ; joyjo1 ld a,e              ; copy e register to accumulator.
                      ;                                                                                                                                                                                                                       ; joyjo2 ld (joyval),a       ; remember value.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ;                                                                                                       ; NOT USED FOR 6809                                                             ; Sinclair joystick controls.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ;                                                                                                                                                                                                                       ; joysin ld bc,61438         ; port for Sinclair 2.
                      ;                                                                                                                                                                                                                       ;                in a,(c)            ; read joystick.
                      ;                                                                                                                                                                                                                       ;                ld d,a              ; clear values.
                      ;                                                                                                                                                                                                                       ;                xor a               ; clear accumulator.
                      ;                                                                                                                                                                                                                       ;                ld e,16             ; Kempston fire bit value.
                      ;                                                                                                                                                                                                                       ;                bit 0,d             ; fire bit pressed?
                      ;                                                                                                                                                                                                                       ;                call z,joysi0       ; add bit.
                      ;                                                                                                                                                                                                                       ;                ld e,1              ; Kempston bit value.
                      ;                                                                                                                                                                                                                       ;                bit 3,d             ; fire bit pressed?
                      ;                                                                                                                                                                                                                       ;                call z,joysi0       ; add bit.
                      ;                                                                                                                                                                                                                       ;                ld e,2              ; Kempston bit value.
                      ;                                                                                                                                                                                                                       ;                bit 4,d             ; fire bit pressed?
                      ;                                                                                                                                                                                                                       ;                call z,joysi0       ; add bit.
                      ;                                                                                                                                                                                                                       ;                ld e,8              ; Kempston bit value.
                      ;                                                                                                                                                                                                                       ;                bit 1,d             ; fire bit pressed?
                      ;                                                                                                                                                                                                                       ;                call z,joysi0       ; add bit.
                      ;                                                                                                                                                                                                                       ;                ld e,4              ; Kempston bit value.
                      ;                                                                                                                                                                                                                       ;                bit 2,d             ; fire bit pressed?
                      ;                                                                                                                                                                                                                       ;                call z,joysi0       ; add bit.
                      ;                                                                                                                                                                                                                       ;                jr joyjo3           ; read last 2 keys a la Kempston.
                      ;                                                                                                                                                                                                                       ; joysi0 add a,e           ; add bit value.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display message                                                                                                                                                                               ; Display message
                      ; Input:  regA = message number
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1836                  Dmsg                                                                                                                                                                                                            ; ;dmsg   ld hl,nummsg     ; total messages.
                                                                                                                                                                                                                                              ; ;       cp (hl)          ; does this one exist?
                                                                                                                                                                                                                                              ; ;       ret nc           ; no, nothing to display.
1836  8E273E                                  ldx     #msgDat                                         ; point to messages table                                               ; dmsg   ld hl,msgdat      ; pointer to messages.
1839  BD18F4                                  jsr     GetWrd                                          ; get word                                                                                      ;                call getwrd         ; get message number.
183C  BD18EB          Dmsg3           jsr     PrePrt                                          ; pre-printing stuff                                                            ; dmsg3  call preprt       ; pre-printing stuff.
183F  BD139D                                  jsr     CheckX                                          ; make sure we're in a printable range          ;                call checkx         ; make sure we're in a printable range.
1842  9637                                    lda     <prtMod                                         ; get print mode                                                                        ;                ld a,(prtmod)       ; print mode.
                                                                                                                                                                                                                                              ;                and a               ; standard size?
1844  262F                                    bne     Bmsg1                                                   ; if not zero, go double-height text            ;                jp nz,bmsg1         ; no, double-height text.
1846  3410            Dmsg0           pshs    x                                                               ; save string pointer in stack                          ; dmsg0  push hl             ; store string pointer.
1848  A684                                    lda     ,x                                                              ; fetch byte to display                                                 ;                ld a,(hl)           ; fetch byte to display.
184A  847F                                    anda    #127                                                    ; remove any end marker                                                 ;                and 127             ; remove any end marker.
184C  810D                                    cmpa    #13                                                     ; is Intro?                                                                                     ;                cp 13               ; newline character?
184E  2717                                    beq     Dmsg1                                                   ; yes, go for next row                                                  ;                jr z,dmsg1
1850  BD14AF                                  jsr     PChar                                                   ; display character                                                             ;                call pchar          ; display character.
                                                                                                                                                                                                                                              ;                call gaadd          ; get attribute address.
                                                                                                                                                                                                                                              ;                ld a,(23693)        ; current cell colours.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; write to attribute cell.
1853  BD18DB                                  jsr     NexPos                                          ; next display position                                                 ;                call nexpos         ; display position.
1856  2603                                    bne     Dmsg2                                                   ; if not on a new line skip next                                ;                jr nz,dmsg2         ; not on a new line.
1858  BD18E0                                  jsr     NexLin                                          ; next line down                                                                        ;                call nexlin         ; next line down.
185B  3510            Dmsg2           puls    x                                                               ; restore pointer                                                                       ; dmsg2  pop hl
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; fetch last character.
185D  A684                                    lda     ,x                                                              ; fetch last character.                                                 ;                rla                 ; was it the end?
185F  102BFB72                                lbmi    Dscor2                                          ; if it is the end, exit                                                ;                jp c,dscor2         ; yes, job done.
1863  3001                                    leax    1,x                                                     ; next character to display                                     ;                inc hl              ; next character to display.
1865  20DF                                    bra     Dmsg0                                                   ; go process it                                                                 ;                jr dmsg0
1867  0C26            Dmsg1           inc     <dispY                                          ; increment to next line                                                ; dmsg1  ld hl,dispx         ; x coordinate.
1869  9626                                    lda     <dispY                                          ; get line pos                                                                          ;                inc (hl)            ; newline.
186B  8118                                    cmpa    #24                                                     ; is it last one?                                                                       ;                ld a,(hl)           ; fetch position.
186D  2502                                    bcs     Dmsg4                                                   ; no, skip next                                                                 ;                cp 24               ; past screen edge?
186F  0F26                                    clr     <dispY                                          ; yes, set 1st row                                                              ;                jr dmsg2
                                                                                                                                                                                                                                              ;                ld (hl),0           ; restart at top.
1871  0F25            Dmsg4           clr     <dispX                                          ; set first column                                                              ; dmsg4  inc hl              ; y coordinate.
                                                                                                                                                                                                                                              ;                ld (hl),0           ; carriage return.
1873  20E6                                    bra     Dmsg2                                                   ; process next char                                                             ;      jr dmsg2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display message in BIG text                                                                                                                                           ; Display message in BIG text
                      ; Input: regX = string pointer
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1875  3410            Bmsg1           pshs    x
1877  A684                                    lda     ,x                                                      ; get character to display                                              ; bmsg1  ld a,(hl)           ; get character to display.
1879  847F                                    anda    #127                                                    ; remove any end marker                                                 ;                push hl             ; store pointer to message.
187B  810D                                    cmpa    #13                                                     ; is Intro?                                                                                     ;                and 127             ; only want 7 bits.
187D  270A                                    beq     Bmsg2                                                   ; yes, go for next row                                                  ;                cp 13               ; newline character?
187F  BD1899                                  jsr     Bchar                                           ; display big char                                                              ;                jr z,bmsg2
                                                                                                                                                                                                                                              ;                call bchar          ; display big char.
1882  3510            Bmsg3           puls    x
1884  A680                                    lda     ,x+                                                     ; fetch last character                                                  ; bmsg3  pop hl              ; retrieve message pointer.
1886  2AED                                    bpl     Bmsg1                                                   ; if not terminator flag, loopback                      ;                ld a,(hl)           ; look at last character.
                                                                                                                                                                                                                                              ;                inc hl              ; next character in list.
                                                                                                                                                                                                                                              ;                rla                 ; was terminator flag set?
                                                                                                                                                                                                                                              ;                jr nc,bmsg1         ; no, keep going.
1888  39                                      rts                                                                     ; return                                                                                                ;                ret
1889  0F25            Bmsg2           clr     <dispX                                          ; column zero                                                                           ; bmsg2  ld hl,charx         ; x coordinate.
188B  0C26                                    inc     <dispY                                          ; add two                                                                                       ;                inc (hl)            ; newline.
188D  0C26                                    inc     <dispY                                          ; rows                                                                                          ;                inc (hl)            ; newline.
188F  9626                                    lda     <dispY                                          ; get value                                                                                     ;                ld a,(hl)           ; fetch position.
1891  8117                                    cmpa    #23                                                     ; past screen end?                                                              ;                cp 23               ; past screen edge?
1893  25ED                                    bcs     Bmsg3                                                   ; no, go for next char                                                  ;                jr c,bmsg3          ; no, it's okay.
1895  0F26                                    clr     <dispY                                          ; go first row                                                                          ;                ld (hl),0           ; restart at top.
                                                                                                                                                                                                                                              ;                inc hl              ; y coordinate.
                                                                                                                                                                                                                                              ;                ld (hl),0           ; carriage return.
1897  20E9                                    bra     Bmsg3                                                   ; go for next char                                                              ;                jr bmsg3
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Big character display.                                                                                                                                                        ; Big character display.
                      ; Input: regA = character
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1899  3410            Bchar           pshs    x
189B  C608                                    ldb     #8                                                              ; to multiply by 8                                                              ;                rlca
189D  3D                                      mul                                                                     ; calculate offset 16 bits                                              ;                rlca
189E  DE58                                    ldu     <fontPtr                                                ; get font table beginning                                              ;                ld e,a              ; store shift in e.
18A0  33CB                                    leau    d,u                                                     ; add offset                                                                            ;                and 7               ; only want high byte bits.
18A2  BD1481                                  jsr     GPrad                                                   ; get screen address.                                                   ;                ld d,a              ; store in d.
18A5  9E50                                    ldx     <grBase                                         ; point to screen (destination)                         ;                ld a,e              ; restore shifted value.
18A7  C608                                    ldb     #8                                                              ; lines to write                                                                        ;                and 248             ; only want low byte bits.
18A9  A6C0            Bchar0  lda     ,u+                                                     ; get char row byte                                                             ;                ld e,a              ; that's the low byte.
                                              
                              IF GFLAG
                                              anda    <andeor
                                              eora    <andeor+1
                              ENDIF
                      
18AB  A784                                    sta     ,x                                                              ; put on screen                                                                 ;                ld hl,(23606)       ; address of font.
18AD  A78820                                  sta     32,x                                                    ; and on next row                                                                       ;                add hl,de           ; add displacement.
18B0  308840                                  leax    64,x                                                    ; point two rows below                                                  ;                call gprad          ; get screen address.
18B3  5A                                      decb                                                                    ; decrement counter                                                             ;                ex de,hl            ; font in de, screen address in hl.
18B4  26F3                                    bne     Bchar0                                          ; not done? loopback                                                            ;                ld b,8              ; height of character in font.
                                                                                                                                                                                                                                              ; bchar0 ld a,(de)           ; get a bit of the font.
                                                                                                                                                                                                                                              ;                inc de              ; next line of font.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; write to screen. 
                                                                                                                                                                                                                                              ;                inc h               ; down a line.     
                                                                                                                                                                                                                                              ;                ld (hl),a           ; write to screen. 
                                                                                                                                                                                                                                              ;                call nline          ; next line down.  
                                                                                                                                                                                                                                              ;                djnz bchar0         ; repeat.  
                                                                                                                                                                                                                                              ;                call gaadd          ; get attribute address.
                                                                                                                                                                                                                                              ;                ld a,(23693)        ; current colour.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set attribute.
                                                                                                                                                                                                                                              ;                ld c,a              ; copy colour to c.
                                                                                                                                                                                                                                              ;                ld de,32            ; distance to next line.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to second cell.
                                                                                                                                                                                                                                              ;                ld a,h              ; high byte of address.
                                                                                                                                                                                                                                              ;                cp 91               ; past edge of screen?
                                                                                                                                                                                                                                              ;                jr nc,bchar1        ; yes, don't write to printer buffer/sysvars.
                                                                                                                                                                                                                                              ;                ld (hl),c           ; set second cell's attributes.
18B6  BD18DB          Bchar1  jsr     NexPos                                          ; display position.                                                             ; bchar1 call nexpos         ; display position.
18B9  2605                                    bne     Bchar2                                          ; not on a new line.                                                            ;                jp nz,bchar2        ; not on a new line.
18BB  0C26            Bchar3  inc     <dispY                                          ; increment Y                                                                           ; bchar3 inc (hl)            ; newline.
18BD  BD18E0                                  jsr     NexLin                                          ; next line check                                                                       ;                call nexlin         ; next line check.
18C0  3510            Bchar2  puls    x
18C2  7E13D5                                  jmp     Dscor2                                          ; exit                                                                                          ; bchar2 jp dscor2           ; tidy up line and column variables.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display a character                                                                                                                                                           ; Display a character.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED for CHR COMMAND
18C5  3410            AChar           pshs    x                                                               ; it is pulled on BChar exit                                    ; achar  ld b,a            ; copy to b.
18C7  97A2                                    sta     <reg_B                                                                                                                                                          ;                call preprt         ; get ready to print.
18C9  BD18EB                                  jsr     PrePrt                                                                                                                                                          ;                ld a,(prtmod)       ; print mode.
18CC  96A2                                    lda     <reg_B                                                                                                                                                          ;                and a               ; standard size?
18CE  0D37                                    tst     <prtMod                                                                                                                                                         ;                ld a,b              ; character in accumulator.
18D0  26C7                                    bne     Bchar                                                                                                                                                                   ;                jp nz,bchar         ; no, double-height text.
18D2  BD14AF                                  jsr     PChar                                                                                                                                                                   ;                call pchar          ; display character.
                                                                                                                              ; no                                                                                                    ;                call gaadd          ; get attribute address.
                                                                                                                              ; colours                                                                                       ;                ld a,(23693)        ; current cell colours.
                                                                                                                              ; here                                                                                          ;                ld (hl),a           ; write to attribute cell.
18D5  8D04                                    bsr     NexPos                                                                                                                                                          ;                call nexpos         ; display position.
18D7  27E2                                    beq     Bchar3                                                                                                                                                          ;                jp z,bchar3         ; next line down.
18D9  20E5                                    bra     Bchar2                                                                                                                                                          ;                jp bchar2           ; tidy up.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get next print column position.                                                                                                                               ; Get next print column position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
18DB  0C25            NexPos  inc     <dispX                                          ; move along one position                                               ; nexpos ld hl,dispy         ; display position.
18DD  9625                                    lda     <dispX                                          ; get coordinate                                                                        ;                ld a,(hl)           ; get coordinate.
                                                                                                                                                                                                                                              ;                inc a               ; move along one position.
                                                                                                                                                                                                                                              ;                and 31              ; reached edge of screen?
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set new position.
                                                                                                                                                                                                                                              ;                dec hl              ; point to x now.
18DF  39                                      rts                                                                     ; return with status in zero flag                       ;                ret                 ; return with status in zero flag.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get next print line position.                                                                                                                                 ; Get next print line position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
18E0  9626            NexLin  lda     <dispY                                          ; get vertical position                                                 ; nexlin inc (hl)            ; newline.
18E2  4C                                      inca                                                                    ; increment                                                                                     ;                ld a,(hl)           ; vertical position.
18E3  8118                                    cmpa    #24                                                     ; past screen edge?                                                             ;                cp 24               ; past screen edge?
18E5  2501                                    bcs     NL01                                                    ; no, exit updating                                                             ;                ret c               ; no, still okay.
18E7  4F                                      clra                                                                    ; restart at top.                                                                       ;                ld (hl),0           ; restart at top.
18E8  9726            NL01            sta     <dispY                                          ; update variable                                                                       ;                ret
18EA  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Pre-print preliminaries.                                                                                                                                                      ; Pre-print preliminaries.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
18EB  DC58            PrePrt  ldd     <fontPtr                                                ; get font pointer.                                                             ; preprt ld de,(23606)       ; font pointer.
18ED  DD50                                    std     <grBase                                         ; put into graphics base.                                               ;                ld (grbase),de      ; set up graphics base.
18EF  DC1E            Prescr  ldd     <charX                                          ; get display coordinates.                                              ; prescr ld de,(charx)       ; display coordinates.
18F1  DD25                                    std     <dispX                                          ; update general coordinates.                                   ;                ld (dispx),de       ; set up general coordinates.
18F3  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Return message pointer in regX
                      ; Input: regX = pointer to message list beginning                                                                                       ; On entry: hl points to word list
                      ;               regA = message number                                                                                                                                   ;           a contains word number.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
18F4  4D              GetWrd  tsta                                                                    ; first message?                                                                        ; getwrd and a               ; first word in list?
18F5  2707                                    beq     GetWd1                                          ; yes, exit                                                                                     ;                ld b,a
                                                                                                                                                                                                                                              ; getwd0 ld a,(hl)
18F7  6D80            GetWd0  tst     ,x+                                                     ; found end?                                                                            ;                inc hl
18F9  2AFC                                    bpl     GetWd0                                          ; no, carry on                                                                          ;                cp 128              ; found end?
18FB  4A                                      deca                                                                    ; decrement mesg counter                                                ;                jr c,getwd0         ; no, carry on.
18FC  26F9                                    bne     GetWd0                                          ; not done? loop                                                                        ;                djnz getwd0         ; until we have right number.
18FE  39              GetWd1  rts                                                                     ; return                                                                                                ;      ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Process sprites                                                                                                                                                                               ; Process sprites.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
18FF  C60C            PSpr            ldb     #NUMSPR                                         ; number of sprites to precess (12)                     ; pspr   ld b,NUMSPR         ; sprites to process.
1901  8ED4D9                                  ldx     #sprTab                                         ; point to sprite table beginning                       ;                ld ix,sprtab        ; sprite table.
1904  3404                                    pshs    b                                                               ; save counter                                                                          ; pspr1  push bc             ; store loop counter for now.
1906  A684            PSpr1           lda     ,x                                                              ; get sprite type                                                                       ;                ld a,(ix+0)         ; fetch sprite type.
1908  8109                                    cmpa    #9                                                              ; less than 9?                                                                          ;                cp 9                ; within range of sprite types?
190A  2403                                    bcc     PSprNo                                          ; no, skip next
190C  BD1919                                  jsr     PSpr2                                                   ; process that sprite                                                   ;                call c,pspr2        ; yes, process this one.
190F                  PSprNo                                                                                                                                                                                                  ;                ld de,TABSIZ        ; distance to next odd/even entry.
190F  308811                                  leax    TABSIZ,x                                                ; point to next sprite entry                                    ;                add ix,de           ; next sprite.
1912  6AE4                                    dec     ,s                                                              ; decrement counter                                                             ;                pop bc              ; retrieve loop counter.
1914  26F0                                    bne     PSpr1                                                   ; not zero? try this one                                                ;                djnz pspr1          ; repeat for remaining sprites.
1916  3261                                    leas    1,s                                                     ; clean stack
1918  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1919  9F56            PSpr2           stx     <ogPtr                                          ; save pointer                                                                          ; pspr2  ld (ogptr),ix       ; store original sprite pointer.
191B  9FA8                                    stx     <reg_IX
191D  BD1923                                  jsr     PSpr3                                                   ; execute the proper routine                                    ;                call pspr3          ; do the routine.
1920  9E56            RtOrg           ldx     <ogPtr                                          ; restore pointer                                                                       ; rtorg  ld ix,(ogptr)       ; restore original pointer to sprite.
1922  39              RtOrg0  rts                                                                     ; return                                                                                                ; rtorg0 ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1923  8E192C          PSpr3           ldx     #EvTyp0                                         ; point to sprite's events list                         ; pspr3  ld hl,evtyp0        ; sprite type events list.
1926  48              PSpr4           asla                                                                    ; calculate offset in table                                     ; pspr4  add a,a             ; double accumulator.
                                                                                                                                                                                                                                              ;                ld e,a              ; copy to de.
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to address of routine.
                                                                                                                                                                                                                                              ;                ld e,(hl)           ; address low.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte of address.
                                                                                                                                                                                                                                              ;                ld d,(hl)           ; address high.
1927  109EA8                                  ldy     <reg_IX                                                                                                                                                         ;                ex de,hl            ; swap address into hl.
192A  6E96                                    jmp     [a,x]                                                   ; jump to calculated routine                                    ;                jp (hl)             ; go there.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                                                                                                                                                                              ; Address of each sprite type's routine.
192C  1F24            EvTyp0  fdb     Evnt00                                          ; defined by game designer                                              ; evtyp0 defw evnt00
192E  203C            EvTyp1  fdb     Evnt01                                          ; defined by game designer                                              ; evtyp1 defw evnt01
1930  20BE            EvTyp2  fdb     Evnt02                                          ; defined by game designer                                              ; evtyp2 defw evnt02
1932  2112            EvTyp3  fdb     Evnt03                                          ; defined by game designer                                              ; evtyp3 defw evnt03
1934  2168            EvTyp4  fdb     Evnt04                                          ; defined by game designer                                              ; evtyp4 defw evnt04
1936  2169            EvTyp5  fdb     Evnt05                                          ; defined by game designer                                              ; evtyp5 defw evnt05
1938  216E            EvTyp6  fdb     Evnt06                                          ; defined by game designer                                              ; evtyp6 defw evnt06
193A  2205            EvTyp7  fdb     Evnt07                                          ; defined by game designer                                              ; evtyp7 defw evnt07
193C  225D            EvTyp8  fdb     Evnt08                                          ; defined by game designer                                              ; evtyp8 defw evnt08
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display sprites                                                                                                                                                                               ; Display sprites.
                      ; regX takes the rol of IX
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
193E  9FA8            DSpr            stx     <reg_IX
1940  C606                                    ldb     #NUMSPR/2                                       ; number of sprites to display                          ; dspr   ld b,NUMSPR/2       ; number of sprites to display.
1942  3404            DSpr0           pshs    b                                                               ; save counter                                                                          ; dspr0  push bc             ; store loop counter for now.
1944  A684                                    lda     ,x                                                              ; get a sprite byte                                                             ;                ld a,(ix+0)         ; get sprite type.
1946  4C                                      inca                                                                    ; is it enabled?                                                                        ;                inc a               ; is it enabled?
1947  261F                                    bne     DSpr1                                                   ; yes, needs deleting                                                   ;                jr nz,dspr1         ; yes, it needs deleting.
1949  A605            DSpr5           lda     5,x                                                     ; get new type value                                                            ; dspr5  ld a,(ix+5)         ; new type.
194B  4C                                      inca                                                                    ; is it enabled?                                                                        ;                inc a               ; is it enabled?
194C  2637                                    bne     DSpr3                                                   ; yes, needs drawing                                                            ;                jr nz,dspr3         ; yes, it needs drawing.
194E  9EA8            DSpr2           ldx     <reg_IX                                                                                                                                                         ; dspr2  push ix             ; put ix on stack.
                                                                                                                                                                                                                                              ;                pop hl              ; pop into hl.
                                                                                                                                                                                                                                              ;                ld e,l              ; copy to de.
                                                                                                                                                                                                                                              ;                ld d,h
                                                                                                                                                                                                                                              ; ;dspr2  ld e,ixl            ; copy ix to de.
                                                                                                                                                                                                                                              ; ;       ld d,ixh
                                                                                                                                                                                                                                              ; ;       ld l,e              ; copy to hl.
                                                                                                                                                                                                                                              ; ;       ld h,d
                                                                                                                              ; copy 5 bytes from new to old                          ;                ld bc,5             ; distance to new type.
1950  EC05                                    ldd     5,x                                                     ; get new type and image                                                ;                add hl,bc           ; point to new properties.
1952  ED84                                    std     ,x                                                              ; copy to old positions                                                 ;                ldi                 ; copy to old positions.
1954  EC07                                    ldd     7,x                                                     ; get new frame and pos Y
1956  ED02                                    std     2,x                                                     ; to old
1958  A609                                    lda     9,x                                                     ; and pos X
195A  A704                                    sta     4,x                                                     ; to old
195C  C622                                    ldb     #TABSIZ*2                                       ; to skip over two sprites                                              ;                ld c,TABSIZ*2       ; distance to next odd/even entry.
195E  3085                                    leax    b,x                                                     ; point to next odd/even sprite                         ;                add ix,bc           ; next sprite.
1960  9FA8                                    stx     <reg_IX                                         ; update pseudo register
1962  3504                                    puls    b                                                               ; restore counter                                                                       ;                pop bc              ; retrieve loop counter.
1964  5A                                      decb                                                                    ; decrement
1965  26DB                                    bne     DSpr0                                                   ; not zero, loopback                                                            ;                djnz dspr0          ; repeat for remaining sprites.
1967  39                                      rts                                                                     ; return                                                                                                ;                ret
                                                                                                                                                                                                                                              ; ;dspr1  ld a,(ix+3)         ; old x coord.
                                                                                                                                                                                                                                              ; ;       cp 177              ; beyond maximum?
                                                                                                                                                                                                                                              ; ;       jr nc,dspr5         ; yes, don't delete it.
1968  A605            DSpr1           lda     5,x                                                     ; get new type                                                                          ; dspr1  ld a,(ix+5)         ; type of new sprite.
196A  4C                                      inca                                                                    ; is it enabled?                                                                        ;                inc a               ; is this enabled?
196B  2605                                    bne     DSpr4                                                   ; yes, display both                                                             ;                jr nz,dspr4         ; yes, display both.
196D  BD19ED          DSpr6           jsr     SSpriA                                          ; show a single sprite                                                  ; dspr6  call sspria         ; show single sprite.
1970  20DC                                    bra     DSpr2                                                   ; loopback                                                                                      ;                jp dspr2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Displaying two sprites.  Don't bother redrawing if nothing has changed                        ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1972  EC03            DSpr4           ldd     3,x                                                     ; get Y and X old Pos                                                   ; dspr4  ld a,(ix+4)         ; old y.
1974  10A308                                  cmpd    8,x                                                     ; are equal to new  Y and X?                                    ;                cp (ix+9)           ; compare with new value.
1977  2607                                    bne     DSpr7                                                   ; no, need to redraw                                                            ;                jr nz,dspr7         ; they differ, need to redraw.
                                                                                                                                                                                                                                              ;                ld a,(ix+3)         ; old x.
                                                                                                                                                                                                                                              ;                cp (ix+8)           ; compare against new value.
                                                                                                                                                                                                                                              ;                jr nz,dspr7         ; they differ, need to redraw.
                      
1979  EC01                                    ldd     1,x                                                     ; get old imagea and frame                                              ;                ld a,(ix+2)         ; old frame.
197B  10A306                                  cmpd    6,x                                                     ; are equal to new ones?                                                ;                cp (ix+7)           ; compare against new value.
                                                                                                                                                                                                                                              ;                jr nz,dspr7         ; they differ, need to redraw.
                                                                                                                                                                                                                                              ;                ld a,(ix+1)         ; old image.
                                                                                                                                                                                                                                              ;                cp (ix+6)           ; compare against new value.
197E  27CE                                    beq     DSpr2                                                   ; yes, so NO redrawing                                                  ;                jp z,dspr2          ; everything is the same, don't redraw.
1980  BD1A0F          DSpr7           jsr     SSpriC                                          ; delete old, draw new                                                  ; dspr7  call sspric         ; delete old sprite, draw new one simultaneously.
1983  20C9                                    bra     DSpr2                                                   ; loopback                                                                                      ;                jp dspr2
1985  9FA8            DSpr3           stx     <reg_IX
1987  BD19FD                                  jsr     SSpriB                                          ; draw a single sprite                                                  ; dspr3  call ssprib         ; show single sprite.
198A  20C2                                    bra     DSpr2                                                   ; loopback                                                                                      ;                jp dspr2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get sprite address calculations                                                                                                                               ; Get sprite address calculations.
                      ; gspran = new sprite, gsprad = old sprite                                                                                                      ; gspran = new sprite, gsprad = old sprite.
                      ; regX = IX
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
198C  DEA8            GSprAN  ldu     <reg_IX ; regU=IX
198E  E648                    ldb     8,u     ; get new coordinates           ; gspran ld l,(ix+8)         ; new x coordinate.
1990  A649                    lda     9,u     ; inverted                      ;        ld h,(ix+9)         ; new y coordinate.
1992  DD25                    std     <dispX  ; put into variables            ;        ld (dispx),hl       ; set display coordinates.
1994  A646                    lda     6,u     ; get new image                 ;        ld a,(ix+6)         ; new sprite image.
1996  BD1C83                  jsr     GFrm    ; fetch start frame in regX     ;        call gfrm           ; fetch start frame for this sprite.
1999  A684                    lda     ,x      ; get frame                     ;        ld a,(hl)           ; frame in accumulator.
199B  AB47                    adda    7,u     ; add new frame                 ;        add a,(ix+7)        ; new add frame number.
199D  2013                    bra     GSprA0  ; skip section                  ;        jp gspra0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF RFLAG                                                                                ; if REDUCED SPRITES
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Calculate old sprite address                                                                                                                                  ; Calculate old sprite address
                      ; Input:                                                                                                                                                                                                        ; Input:
                      ;  regX must arrive as IX (sprite address)                                                                                                      ;  IX = sprite address
                      ; Output:                                                                                                                                                                                               ; Output:
                      ;                                                                                                                                                                                                                       ;  B  = right byte mask
                      ; returns reg_BC = right-left byte mask                                                                                                                 ;  C  = left byte mask
                      ;                reg_DE = spriteframe address                                                                                                                   ;  DE = spriteframe address
                      ;         reg_HL (regX) = screenaddress(dispx,dispy) via ScAdd                                                  ;  scraddr = screenaddress(dispx,dispy)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      GSprAd  leau    ,x      ; regU takes the rol of reg_IX  ; gsprad:
                              stu     <reg_IX ; save reg_IX for later use     ;       ldy #var_Y
                              ldd     3,u     ; get old posXY                 ;       lda (z80_ix),y                  ; y coordinate.
                              sta     <dispY  ; put into                      ;       sta dispy
                                                                              ;       ldy #var_X
                                                                              ;       lda (z80_ix),y                  ; x coordinate.
                              stb     <dispX  ; variables                     ;       sta dispx
                                                                              ;       ldy #var_Image
                              lda     1,u     ; get old image                 ;       lda (z80_ix),y          ; sprite image.
                              jsr     GFrm    ; fetch start frame in regX     ;       jsr gfrm                                ; fetch start frame for this sprite.
                                                                              ;       ldy #0
                              lda     ,x      ; get frame                     ;       lda (z80_hl),y          ; frame in accumulator.
                                                                              ;       ldy #var_Frame
                                                                              ;       clc
                              adda    2,u     ; add old frame                 ;       adc (z80_ix),y          ; add frame number.
                      GSprA0                                                          ; gspra0:
                              IF BFLAG        ; reg_DE = reg_AF is frame*48 or 32     ; .if 0
                              ldb     #48     ; multiply by 192/4 (shiftTables)       ;       lsr a                                           ; multiply by 128.
                              ELSE                                                    ;       sta z80_d                               ; store in d.
                              ldb     #32     ; multiply by 128/4 (shiftTables)       ;       lda #0  
                              ENDIF                                                   ;       ror a
                              mul             ; multiply. Result in reg_D             ;       sta z80_e                               ; got low byte.
                                                                                                                                                                                                                                              ; .else
                                                                                                                                                                                                                                              ;       sta z80_e
                                                                                                                                                                                                                                              ;       lda #0
                                                                                                                                                                                                                                              ;       sta z80_d
                                                                                                                                                                                                                                              ;       asl z80_e
                                                                                                                                                                                                                                              ;       rol z80_d
                                                                                                                                                                                                                                              ;       asl z80_e
                                                                                                                                                                                                                                              ;       rol z80_d
                                                                                                                                                                                                                                              ;       asl z80_e
                                                                                                                                                                                                                                              ;       rol z80_d
                                                                                                                                                                                                                                              ;       asl z80_e
                                                                                                                                                                                                                                              ;       rol z80_d
                                                                                                                                                                                                                                              ;       asl z80_e
                                                                                                                                                                                                                                              ;       rol z80_d
                                                                                                                                                                                                                                              ; .endif
                                                                                                                                                                                                                                              ;       clc                                             ; address of play sprites.
                                                                                                                                                                                                                                              ;       lda z80_e
                                              ldx     #sprGfx                                                 ; point to sprites data beginning               ;       adc #<sprgfx
                                              leax    d,x                                                             ; point to right frame                                          ;       sta z80_e
                                                                                                                                                                                                                                              ;       lda z80_d
                                                                                                                                                                                                                                              ;       adc #>sprgfx
                                                                                                                                                                                                                                              ;       sta z80_d
                                              ldb     <dispX                                                  ; get Y coordinate                                                      ;       lda dispx                               ; y coordinate.
                                              andb    #%00000110                                              ; position within byte boundary                 ;       and #6                                  ; position within byte boundary.
                                              asrb                                                                            ; calculate table number (0-1-2-3)              ;       tax                                             ; low byte of table displacement.
                                              stb     <sprShft                                                        ; low byte of table displacement                        ;       stx sprshft
                                                                                                                                                                                                                                              ; 
                                                                                                                                                                                                                                              ; .if 0
                                                                                                                                                                                                                                              ;       asl a                                           ; multiply by 32.
                                                                                                                                                                                                                                              ;       asl a                                   ; already a multiple
                                                                                                                                                                                                                                              ;       asl a                                   ; of 2, so just 4
                                                                                                                                                                                                                                              ;       asl a                                   ; shifts needed.
                                                                                                                                                                                                                                              ;       clc                                             ; add to sprite address.
                                              stx     <reg_DE                                         ; save into reg_DE                                                              ;       adc z80_e
                                                                                                                                                                                                                                              ;       sta z80_e
                                                                                                                                                                                                                                              ;       bcc :+
                                                                                                                                                                                                                                              ;       inc z80_d
                                                                                                                                                                                                                                              ; :
                                              ldx     #spMask                                         ; point to mask table                                                   ; .endif
                                              aslb                                                                    ; calculate the right offset (2x)                       ;       lda spmask,x                    ; pointer to mask table.
                                              ldd     b,x                                                     ; get masks                                                                                     ;       sta z80_c                               ; left mask.
                                              sta     <reg_C                                          ; save left mask                                                                        ;       lda spmask+1,x
                                              stb     <reg_B                                          ; and right mask                                                                        ;       sta z80_b                               ; right mask.
                                                                                                                      ; Drop into screen address routine                              ; Drop into screen address routine.
                                                                                                                      ; bra   ScAdd   exists immediately below here           ;       jmp scadd
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              ELSE                                                                                    ; NORMAL sprites (4 frames per sprite)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; here regX must arrive as IX (sprite address)
                      ; returns reg_BC=right-left byte mask - reg_DE=spriteframe address
                      ;         regX   = screenaddress(dispx,dispy)                                                                                                           ;  scraddr = screenaddress(dispx,dispy)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
199F  3384            GSprAd  leau    ,x                                                              ; regU takes the rol of reg_IX
19A1  DFA8                                    stu     <reg_IX                                         ; save reg_IX for later use
19A3  EC43                                    ldd     3,u                                                     ; get old posXY                                                                 ; gsprad ld l,(ix+3)         ; x coordinate.
19A5  9726                                    sta     <dispY                                          ; put into                                                                                      ;        ld h,(ix+4)         ; y coordinate.
19A7  D725                                    stb     <dispX                                          ; variables                                                                                     ;        ld (dispx),hl       ; set display coordinates.
19A9  A641                                    lda     1,u                                                     ; get old image                                                                 ;        ld a,(ix+1)         ; sprite image.
19AB  BD1C83                                  jsr     GFrm                                                    ; fetch start frame in regX                                     ;        call gfrm           ; fetch start frame for this sprite.
19AE  A684                                    lda     ,x                                                              ; get frame                                                                                     ;        ld a,(hl)           ; frame in accumulator.
19B0  AB42                                    adda    2,u                                                     ; add old frame                                                                 ;        add a,(ix+2)        ; add frame number.
19B2                  GSprA0                                                                                  ; reg_DE = reg_AF is frame*128
                              IF BFLAG
                                              ldb     #192                                                    ; multiply by 192
                              ELSE
19B2  C680                                    ldb     #128                                                    ; multiply by 128                                                                       ; gspra0 rrca                ; multiply by 128.
                              ENDIF
19B4  3D                                      mul                                                                     ; multiply. Result in reg_D                                     ;                ld d,a              ; store in d.
                                                                                                                                                                                                                                              ;                and 128             ; low byte bit.
                                                                                                                                                                                                                                              ;                ld e,a              ; got low byte.
                                                                                                                                                                                                                                              ;                ld a,d              ; restore result.
                                                                                                                                                                                                                                              ;                and 127             ; high byte bits.
                                                                                                                                                                                                                                              ;                ld d,a              ; displacement high byte.
19B5  8E2D34                                  ldx     #sprGfx                                         ; point to sprites data beginning                       ;        ld hl,sprgfx        ; address of play sprites.
19B8  308B                                    leax    d,x                                                     ; point to right frame                                                  ;        add hl,de           ; point to frame.
19BA  D625                                    ldb     <dispX                                          ; get Y coordinate                                                              ;        ld a,(dispy)        ; y coordinate.
19BC  C406                                    andb    #%00000110                                      ; position within byte boundary                         ;        and 6               ; position within byte boundary.
19BE  D7A3                                    stb     <reg_C                                          ; low byte of table displacement                                ;        ld c,a              ; low byte of table displacement.
                              IF BFLAG
                                              lda     #24                                                     ; x 48 (already even, so just by 24)
                              ELSE
19C0  8610                                    lda     #16                                                     ; x 32 (already even, so just by 16)
                              ENDIF
19C2  3D                                      mul                                                                     ; multiply. Result in reg_D
                                                                                                                                                                                                                                              ;                rlca                ; multiply by 32.
                                                                                                                                                                                                                                              ;                rlca                ; already a multiple
                                                                                                                                                                                                                                              ;                rlca                ; of 2, so just 4
                                                                                                                                                                                                                                              ;                rlca                ; shifts needed.
                                                                                                                                                                                                                                              ;                ld e,a              ; put displacement in low byte of de.
                                                                                                                                                                                                                                              ;                ld d,0              ; zero the high byte.
                                                                                                                                                                                                                                              ;                ld b,d              ; no high byte for mask displacement either.
19C3  338B                                    leau    d,x                                                     ; add to sprite address, change to regU ;                add hl,de           ; add to sprite address.
19C5  DFA4                                    stu     <reg_DE                                         ; save into reg_DE                                                              ;                ex de,hl            ; need it in de for now.
19C7  8E19E5                                  ldx     #spMask                                         ; point to mask table                                                   ;                ld hl,spmask        ; pointer to mask table.
19CA  D6A3                                    ldb     <reg_C                                          ; get saved low byte
19CC  3A                                      abx                                                                     ; add to pointer
19CD  EC84                                    ldd     ,x                                                              ; get masks
19CF  97A3                                    sta     <reg_C                                          ; save left mask                                                                        ;                add hl,bc           ; add displacement to pointer.
19D1  D7A2                                    stb     <reg_B                                          ; and right mask                                                                        ;                ld c,(hl)           ; left mask.
                                                                                                                                                                                                                                              ;                inc hl
                                                                                                                                                                                                                                              ;                ld b,(hl)                              ; right mask.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              ENDIF
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drop into screen address routine.                                                                                                                             ; Drop into screen address routine.
                      ; This routine returns a screen address for (dispx, dispy) in hl                                                ; This routine returns a screen address for (dispx, dispy) in hl.
                      ; when used for Objects, posY and dispX arrive INVERTED!
                      ; but for Sprites arrive NORAML
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
19D3  D626            ScAdd           ldb     <dispY                                          ; get posY                                                                                      ; scadd  ld a,(dispx)        ; coordinate.
19D5  8EDA00                                  ldx     #SCADTB                                         ; point to table                                                                        ;                ld l,a              ; low byte of table.
19D8  3A                                      abx                                                                     ; add offset twice
19D9  3A                                      abx                                                                     ; as entries are words
19DA  AE84                                    ldx     ,x                                                              ; fetch address of mostleft byte in row ;                ld a,(hl)           ; fetch high byte.
19DC  D625                                    ldb     <dispX                                          ; get posX                                                                                      ;                ld h,a              ; hl points to start of line.
19DE  54                                      lsrb                                                                    ; divide                                                                                                ;                ld a,(dispy)        ; y pixel coordinate.
19DF  54                                      lsrb                                                                    ; by                                                                                                    ;                rrca                ; divide by 8.
19E0  54                                      lsrb                                                                    ; 8                                                                                                     ;                rrca
19E1  C41F                                    andb    #31                                                     ; values 0-31 accepted                                                  ;                rrca
19E3  3A                                      abx                                                                     ; add to complete address
19E4  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
19E5  FF003FC00FF003FC spMask  fcb     255,0,63,192,15,240,3,252                                                                                                               ; spmask defb 255,0,63,192,15,240,3,252
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF RFLAG                                                                                ; if REDUCED SPRITES
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; These are the sprite routines                                                                                                                                 ; These are the sprite routines.
                      ; sspria = single sprite, old (ix)                                                                                                                              ; sspria = single sprite, old (ix).
                      ; ssprib = single sprite, new (ix+5)                                                                                                                    ; ssprib = single sprite, new (ix+5).
                      ; sspric = both sprites, old (ix) and new (ix+5)                                                                                        ; sspric = both sprites, old (ix) and new (ix+5).
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; regU is used as pointer to 'new/old' sprite
                      ; So no need for self modifying code
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      SSpriA                                                                                                                                                                                                  ; sspria:
                                              jsr     GSprAd                                          ; get old sprite address                                                ;       jsr gsprad                                      ; get old sprite address.
                                                                                                                              ; returns reg_BC=right-left byte mask           ;
                                                                                                                              ; and reg_DE=spriteframe address                                ;
                      SSpri2  stx     <reg_HL                                         ; save screen address                                                   ; sspri2:
                                                                                                                                                                                                                                              ;       lda z80_e                                       ; 3c
                                                                                                                                                                                                                                              ;       sta dline_spraddr1+1            ; 4c
                                                                                                                                                                                                                                              ;       sta dline_spraddr2+1            ; 4c
                                              ldu     <reg_DE                                         ; regU is sprite data pointer
                                                                                                                                                                                                                                              ;       lda z80_d                                       ; 3c
                                                                                                                                                                                                                                              ;       sta dline_spraddr1+2            ; 4c
                                                                                                                                                                                                                                              ;       sta dline_spraddr2+2            ; 4c
                                              ldb     <sprShft                                                ; get shift table number                                                ;       ldx sprshft
                                              addb    #shift0/256                                     ; add to first one                                                              ;       sta dline_spraddr2+2            ; 4c
                                                                                                                                                                                                                                              ;       lda shift_table,x
                                                                                                                                                                                                                                              ;       sta dline_shift1+1
                                                                                                                                                                                                                                              ;       sta dline_shift2+1
                                                                                                                                                                                                                                              ;       lda shift_table+1,x
                                              stb     DLine_Shift1+1                          ; update shift high byte                                                ;       sta dline_shift1+2
                                              stb     DLine_Shift2+1                          ; update shift high byte                                                ;       sta dline_shift2+2
                                              clrb                                                                    ; vertical lines drawn                                                  ;       ldx #0                                          ; vertical lines.
                      SSpri0                                                                                                                                                                                                  ; sspri0:
                                              jsr     DLine                                                   ; draw a line                                                                           ;       jsr dline                                       ; draw a line.
                              IF BFLAG                                                                                ; big sprites(16x24)    
                                              cmpb    #48                                                     ; got to sprite end?                                                            ;       cpx #48
                              ELSE
                                              cmpb    #32                                                     ; got to sprite end?                                                            ;       cpx #32
                              ENDIF
                                              bne     SSpri0                                          ; not yet, do next line                                                 ;       bne sspri0                                      ; repeat 16 times x 2 bytes
                                              rts                                                                     ; return                                                                                                ;       rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              ELSE                                                                                    ; NORMAL sprites (4 frames per sprite)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; These are the sprite routines.                                                                                                                ; These are the sprite routines.
                      ; sspria = single sprite, old (ix).                                                                                                     ; sspria = single sprite, old (ix).
                      ; ssprib = single sprite, new (ix+5).                                                                                           ; ssprib = single sprite, new (ix+5).
                      ; sspric = both sprites, old (ix) and new (ix+5).                                                               ; sspric = both sprites, old (ix) and new (ix+5).
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; regU is used as pointer to 'new/old' sprite
                      ; So no need for self modifying code
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
19ED                  SSpriA                                                                                  ;                                                                                       sspria:
19ED  BD199F                                  jsr     GSprAd                                          ; get old sprite address                                jsr gsprad                      ; get old sprite address.
                                                                                                                              ; returns reg_BC=right-left byte mask 
                                                                                                                              ; and reg_DE=spriteframe address
19F0  9FA6            SSpri2  stx     <reg_HL                                         ; save screen address                                           
                                                                                                                              ; draw the sprite                                                       sspri2:
                                                                                                                              ;                                                                                               lda z80_e
                                                                                                                              ;                                                                                               sta dline1+1            ; Set spritedata address
19F2  DEA4                                    ldu     <reg_DE                                         ; get old sprite address                                lda z80_e
                                                                                                                              ;                                                                                               sta dline2+1
                                                                                                                              ; already                                                                       lda z80_d
                                                                                                                              ; done                                                                          sta dline1+2
                                                                                                                              ; above                                                                         sta dline2+2
                                                                                                                              ; not needed                                                            stx xtmp
19F4  5F                                      clrb                                                                    ; vertical lines drawn                                  ldx #0                          ; vertical lines.
19F5                  SSpri0                                                                                  ;                                                                                       sspri0:
19F5  BD1A2F                                  jsr     DLine                                                   ; draw a line                                                           jsr dline                       ; draw a line.
                                                                                                                              ; not needed                                                            cpx #16                         ; detect block boundery
                                                                                                                              ; not needed                                                            bne :+                          ; skip if not
                                                                                                                              ; not needed                                                            inc scraddr+1           ; jump to next blockline
                                                                                                                              ; not needed                                                            :
                              IF BFLAG                                                                                ; big sprites(16x24)                                            .if bflag                       
                                              cmpb    #48                                                     ; got to sprite end?                                            cpx #48                         ; check finished
                              ELSE
19F8  C120                                    cmpb    #32                                                     ; got to sprite end?                                            cpx #32                         ; check finished
                                                                                                                              
                              ENDIF
19FA  26F9                                    bne     SSpri0                                          ; not yet, do next line                                 bne sspri0                      ; no, repeat
                                                                                                                              ;                                                                                               ldx xtmp
19FC  39                                      rts                                                                     ; return                                                                                rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              ENDIF
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Here reg X arrives as reg_IX (sprite pointer)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
19FD                  SSpriB                                                                                  ;                                                                                       ssprib:
19FD  BD198C                                  jsr     GSprAN                                          ; get new sprite address                                jsr gspran                      ; get new sprite address.
                                                                                                                              ; returns reg_BC=right-left byte mask 
                                                                                                                              ; and reg_DE=spriteframe address
1A00  7E19F0                                  jmp     SSpri2                                          ; go draw it                                                            jmp sspri2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; interchanges contents of registers BC and HL with their mirrors (Z80 exx opcode)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A03  3410            do_rexx pshs    x                                                               ; save register                                                 exx:
1A05  9EA2                                    ldx     <reg_BC                                         ; get register BC                                                       lda z80_c
1A07  9FB0                                    stx     <esp_BC                                         ; put register into mirror                              sty z80_c
1A09  9EA6                                    ldx     <reg_HL                                         ; get register HL                                                       lda scraddr
1A0B  9FB4                                    stx     <esp_HL                                         ; put register into mirror                              sty scraddr
1A0D  3590                                    puls    x,pc                                                    ; restore registers and return          rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF RFLAG                                                                                ; if REDUCED SPRITES
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; regU is used as pointer to 'new' sprite
                      ; regY is used as pointer to 'old' sprite
                      ; So no need for self modifying code
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      SSpriC                                                                                                                                                                                                  ; sspric:
                                              jsr     GSprAd                                          ; get old sprite address                                                ;       jsr gsprad                                      ; get old sprite address.
                                                                                                                              ; returns reg_BC=right-left byte mask 
                                                                                                                              ; and reg_DE=spriteframe address
                                              stx     <reg_HL                                         ; save screen address
                                              ldy     <reg_DE                                         ; regY is old sprite data pointer                       ;       lda z80_e                                       ; 3c
                                                                                                                                                                                                                                              ;       sta ddline_spraddr3+1   ; 4c
                                                                                                                                                                                                                                              ;       sta ddline_spraddr4+1   ; 4c
                                                                                                                                                                                                                                              ;       lda z80_d                                       ; 3c
                                                                                                                                                                                                                                              ;       sta ddline_spraddr3+2   ; 4c
                                                                                                                                                                                                                                              ;       sta ddline_spraddr4+2   ; 4c
                                              ldb     <sprShft                                                ; get shift table number                                                ;       ldx sprshft
                                              addb    #shift0/256                                     ; add to first one              
                                                                                                                                                                                                                                              ;       lda shift_table,x
                                                                                                                                                                                                                                              ;       sta ddline_shift3+1
                                                                                                                                                                                                                                              ;       sta ddline_shift4+1
                                                                                                                                                                                                                                              ;       lda shift_table+1,x
                                              stb     DdLine_Shift3+1                 ; update shift high byte                                                ;       sta ddline_shift3+2
                                              stb     DdLine_Shift4+1                 ; update shift high byte                                                ;       sta ddline_shift4+2
                                              jsr     do_rexx                                         ; save old sprite pointers                                              ;       jsr exx                                         ; store addresses.
                                              jsr     GSprAN                                          ; get new sprite address                                                ;       jsr gspran                                      ; get new sprite addresses.
                                              stx     <reg_HL                                         ; save screen address
                                              ldu     <reg_DE                                         ; regU is new sprite data pointer                       ;       lda z80_e                                       ; 3c
                                                                                                                                                                                                                                              ;       sta ddline_spraddr1+1   ; 4c
                                                                                                                                                                                                                                              ;       sta ddline_spraddr2+1   ; 4c
                                                                                                                                                                                                                                              ;       lda z80_d                                       ; 3c
                                                                                                                                                                                                                                              ;       sta ddline_spraddr1+2   ; 4c
                                                                                                                                                                                                                                              ;       sta ddline_spraddr2+2   ; 4c
                                                                                                                                                                                                                                              ;       ldx sprshft
                                              ldb     <sprShft                                                ; get shift table number                                                ;       lda shift_table,x
                                              addb    #shift0/256                                     ; add to first one      
                                                                                                                                                                                                                                              ;       sta ddline_shift1+1
                                                                                                                                                                                                                                              ;       sta ddline_shift2+1
                                                                                                                                                                                                                                              ;       lda shift_table+1,x
                                              stb     DdLine_Shift1+1                 ; update shift high byte                                                ;       sta ddline_shift1+2
                                              stb     DdLine_Shift2+1                 ; update shift high byte                                                ;       sta ddline_shift2+2
                                              clrb                                                                    ; vertical lines drawn                                                  ;       ldx #0
                      Lloop                                                                                                                                                                                                           ; lloop:
                                              jsr     DdLine                                          ; erase and draw line                                                   ;       jsr ddline                                      ; draw a line.
                      
                              IF BFLAG                                                                                ; big sprites(16x24)
                                              cmpb    #48                                                     ; got to sprite end?                                                            ;       cpx #48
                              ELSE
                                              cmpb    #32                                                     ; got to sprite end?                                                            ;       cpx #32
                              ENDIF
                                              bne     Lloop                                                   ; not yet, do next line                                                 ;       bne lloop
                                              rts                                                                     ; return                                                                                                ;       rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;       This tables *must* be aligned to 256 bytes boundary
                      ;       shift_Table                                                                                                                                                                                     ; shift_table:
                      ;                       fdb     shift0                                                                                                                                                          ; .word shift0
                      ;                       fdb     shift2                                                                                                                                                          ; .word shift2
                      ;                       fdb     shift4                                                                                                                                                          ; .word shift4
                      ;                       fdb     shift6                                                                                                                                                          ; .word shift6
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Input:                                                                                                                                                                                                        ; Input:
                      ;  B  = right mask                                                                                                                                                                      ;  B  = right mask
                      ;  C  = left mask                                                                                                                                                                               ;  C  = left mask
                      ;  DE = spriteaddress                                                                                                                                                           ;  DE = spriteaddress
                      ;  reg_HL (regX) = screen address                                                                                                                               ;  scraddr = screen address
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; must preserve 6809 register B (number of drawn lines counter)
                      ; so regB = Atom reg X.  Atom reg Y is not used
                      ; regU is used as pointer to sprite data
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      DLine                                                                                                                                                                                                           ; dline:
                                              ldx     <reg_HL                                         ; get screen Address for new sprite
                                              lda     <reg_H                                          ; get high byte of screen Address
                                              cmpa    #$e6                                                    ; is it out of screen (above)?
                                              blo     1f                                                              ; yes, skip it
                                              coma                                                                    ; was it $ff? (out of screen)
                                              bne     DLine_SprAddr1                          ; no, draw it
                      1                       addb    #2                                                              ; increment counter
                                              rts                                                                     ; return
                      DLine_SprAddr1                                                                                                                                                                                  ; dline_spraddr1:
                                              lda     b,u                                                     ; get one sprite byte                                                   ;       ldy $ffff,x             ; graphic data.
                                              sta     DLine_Shift1+2                          ; set as shift low byte
                      DLine_Shift1                                                                                                                                                                                    ; dline_shift1:
                                              lda     >$0000                                          ; get preshifted value                                                  ;       lda $ffff,y
                                              sta     <reg_AF                                         ; save in pseudoreg                                                             ;       sta sprtmp
                                              anda    <reg_C                                          ; mask away unwanted                                                            ;       and z80_c                       ; mask away what's not needed.
                                                                                                                                                                                                                                              ;       ldy #0
                                              eora    ,x                                                              ; merge bits                                                                            ;       eor (scraddr),y         ; XOR with what's there.
                                              sta     ,x                                                              ; update screen                                                                 ;       sta (scraddr),y         ; bung it in.
                                                                                                                      ; carry to new screen byte                                                      ; carry to next screen byte
                                              lda     <reg_AF                                         ; get preshifted value from presudoreg          ;       lda sprtmp                      ; fetch data.
                                              anda    <reg_B                                          ; mask away unwanted                                                            ;       and z80_b                       ; mask away unwanted
                                              sta     <reg_AF                                         ; save again in pseudoreg                                               ;       sta sprtmp
                                                                                                                      ; middle screen byte                                                                    ; middle screen byte
                                              incb                                                                    ; increment sprite byte                                                 ;       inx
                      DLine_SprAddr2                                                                                                                                                                                  ; dline_spraddr2:
                                              lda     b,u                                                     ; get next sprite byte                                                  ;       ldy $ffff,x             ; second bit of data.
                                              sta     DLine_Shift2+2                          ; set as shift low byte
                      DLine_Shift2                                                                                                                                                                                    ; dline_shift2:
                                              lda     >$0000                                          ; get preshifted value                                                  ;       lda $ffff,y
                                              sta     <reg_AF+1                                       ; save in pseudoreg                                                             ;       sta sprtmp2
                                              anda    <reg_C                                          ; mask away unwanted                                                            ;       and z80_c                       ; mask away what's not needed.
                                              ora     <reg_AF                                         ; add to previous part                                                  ;       ora sprtmp
                                                                                                                                                                                                                                              ;       ldy #8
                                              eora    1,x                                                     ; merge bits                                                                            ;       eor (scraddr),y         ; XOR with what's there.
                                              sta     1,x                                                     ; update screen                                                                 ;       sta (scraddr),y         ; bung it in.
                                                                                                                      ; carry to last screen byte                                             ; carry to last screen byte
                                              lda     <reg_AF+1                                       ; get preshifted value from presudoreg          ;       lda sprtmp2
                                              anda    <reg_B                                          ; mask away unwanted                                                            ;       and z80_b                       ; mask away unwanted
                                                                                                                                                                                                                                              ;       ldy #16
                                              eora    2,x                                                     ; merge bits                                                                            ;       eor (scraddr),y         ; XOR with what's there.
                                              sta     2,x                                                     ; update screen                                                                 ;       sta (scraddr),y         ; bung it in.
                                              leax    32,x                                                    ; point to next row             
                                              stx     <reg_HL                                         ; update screen pointer 
                      DLEx01  incb                                                                    ; increment sprite byte                                                 ;       inx
                                              rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Line drawn, now work out next target address                                                                                          ; Line drawn, now work out next target address.
                      ; _BEEB screen arrangement                                                                                                                                                      ; _BEEB screen arrangement
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; nline:
                      ;                                                                                                                                                                                                                       ;       lda scraddr             ; get low byte of address.
                      ;                                                                                                                                                                                                                       ;       and #7                          
                      ;                                                                                                                                                                                                                       ;       cmp #7                          ; is this last line of row?
                      ;                                                                                                                                                                                                                       ;       beq beeb_next_row
                      ;                                                                                                                                                                                                                       ;       ; within same row
                      ;                                                                                                                                                                                                                       ;       inc scraddr                     ; new low byte of address.
                      ;                                                                                                                                                                                                                       ;       rts
                      ;                                                                                                                                                                                                                       ; beeb_next_row:
                      ;                                                                                                                                                                                                                       ;       clc
                      ;                                                                                                                                                                                                                       ;       lda scraddr
                      ;                                                                                                                                                                                                                       ;       adc #<(ScreenRowBytes-7)
                      ;                                                                                                                                                                                                                       ;       sta scraddr                     ; new low byte of address.
                      ;                                                                                                                                                                                                                       ;       lda scraddr+1
                      ;                                                                                                                                                                                                                       ;       adc #>(ScreenRowBytes-7)
                      ;                                                                                                                                                                                                                       ;       sta scraddr+1           ; new high byte of address.
                      ;                                                                                                                                                                                                                       ;       rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Input:                                                                                                                                                                                                        ; Input:
                      ;  B  = right mask                                                                                                                                                                      ;  B  = right mask
                      ;  C  = left mask                                                                                                                                                                               ;  C  = left mask
                      ;  DE = spriteaddress                                                                                                                                                           ;  DE = spriteaddress
                      ;  HL (regX) = screen address                                                                                                                                           ;  scraddr = screen address
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; must preserve 6809 register B (number of drawn lines counter)
                      ; so regB = Atom reg X.  Atom reg Y is not used
                      ; regU is used as pointer to NEW sprite data
                      ; regY is used as pointer to OLD sprite data
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      DdLine                                                                                                                                                                                                  ; ddline:
                                              ldx     <reg_HL                                         ; get screen Address for new sprite
                                              lda     <reg_H                                          ; get screen address high byte
                                              cmpa    #$e6                                                    ; is it out of screen (above)?
                                              blo     1f                                                              ; yes, skip it
                                              coma                                                                    ; was it $ff? (out of screen)
                                              bne     DdLine_SprAddr1                 ; no, draw it
                      1                       incb                                                                    ; increment counter
                                              bra     DdLEx01                                         ; go do old sprite
                                                                                                                      ; NEW SPRITE                                                                                    ; NEW SPRITE
                                                                                                                      ; first screen byte                                                                     ; first screen byte
                      DdLine_SprAddr1                                                                                                                                                                         ; dline_spraddr1:
                                              lda     b,u                                                     ; get one sprite byte                                                   ;       ldy $ffff,x             ; graphic data.
                                              sta     DdLine_Shift1+2                 ; set as shift low byte
                      DdLine_Shift1                                                                                                                                                                                   ; ddline_shift1:
                                              lda     >$0000                                          ; get preshifted value                                                  ;       lda $ffff,y
                                              sta     <reg_AF                                         ; save in pseudoreg                                                             ;       sta sprtmp
                                              anda    <reg_C                                          ; mask away unwanted                                                            ;       and z80_c                       ; mask away what's not needed.
                                                                                                                                                                                                                                              ;       ldy #0
                                              eora    ,x                                                              ; merge bits                                                                            ;       eor (scraddr),y         ; XOR with what's there.
                                              sta     ,x                                                              ; update screen                                                                 ;       sta (scraddr),y         ; bung it in.
                                                                                                                      ; carry to next screen byte                                             ; carry to next screen byte
                                              lda     <reg_AF                                         ; get preshifted value from presudoreg          ;       lda sprtmp                      ; fetch data.
                                              anda    <reg_B                                          ; mask away unwanted                                                            ;       and z80_b                       ; mask away unwanted
                                              sta     <reg_AF                                         ; save again in pseudoreg                                               ;       sta sprtmp
                                                                                                                      ; middle screen byte                                                                    ; middle screen byte
                                              incb                                                                    ; increment counter                                                             ;       inx
                      DdLine_SprAddr2                                                                                                                                                                         ; ddline_spraddr2:
                                              lda     b,u                                                     ; get next sprite byte                                                  ;       ldy $ffff,x             ; second bit of data.
                                              sta     DdLine_Shift2+2                 ; set as shift low byte
                      DdLine_Shift2                                                                                                                                                                                   ; ddline_shift2:
                                              lda     >$0000                                          ; get preshifted value                                                  ;       lda $ffff,y
                                              sta     <reg_AF+1                                       ; save in pseudoreg                                                             ;       sta sprtmp2
                                              anda    <reg_C                                          ; mask away unwanted                                                            ;       and z80_c                       ; mask away what's not needed.
                                              ora     <reg_AF                                         ; add to previous part                                                  ;       ora sprtmp
                                                                                                                                                                                                                                              ;       ldy #8
                                              eora    1,x                                                     ; merge bits                                                                            ;       eor (scraddr),y         ; XOR with what's there.
                                              sta     1,x                                                     ; update screen                                                                 ;       sta (scraddr),y         ; bung it in.
                                                                                                                      ; carry to last screen byte                                             ; carry to last screen byte
                                              lda     <reg_AF+1                                       ; get preshifted value from pseudoreg           ;       lda sprtmp2
                                              anda    <reg_B                                          ; mask away unwanted                                                            ;       and z80_b                       ; mask away unwanted
                                                                                                                                                                                                                                              ;       ldy #16
                                              eora    2,x                                                     ; merge bits                                                                            ;       eor (scraddr),y         ; XOR with what's there.
                                              sta     2,x                                                     ; update screen                                                                 ;       sta (scraddr),y         ; bung it in.
                                                                                                                      ; 6809 next row                                                                         ; _BEEB next row
                                              leax    32,x                                                    ; point to next row                                                             ;       lda scraddr             ; get low byte of address.
                                              stx     <reg_HL                                         ; update screen pointer                                                 ;       and #7                          
                                                                                                                                                                                                                                              ;       cmp #7                          ; is this last line of row?
                                                                                                                                                                                                                                              ;       beq :+
                                                                                                                                                                                                                                              ; within same row can't increment page
                                                                                                                                                                                                                                              ;       inc scraddr                     ; new low byte of address.
                                                                                                                                                                                                                                              ;       bne ddline2
                                                                                                                                                                                                                                              ; :
                                                                                                                                                                                                                                              ;       clc
                                                                                                                                                                                                                                              ;       lda scraddr
                                                                                                                                                                                                                                              ;       adc #<(ScreenRowBytes-7)
                                                                                                                                                                                                                                              ;       sta scraddr                     ; new low byte of address.
                                                                                                                                                                                                                                              ;       lda scraddr+1
                                                                                                                                                                                                                                              ;       adc #>(ScreenRowBytes-7)
                      DdLEx01                                                                                 ; end of New Sprite                                                             ;       sta scraddr+1           ; new high byte of address.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
                                                                                                                      ; OLD SPRITE                                                                                    ; OLD SPRITE
                                              ldx     <esp_HL                                         ; get screen Address for old sprite
                                              lda     <esp_HL                                         ; get screen address high byte
                                              cmpa    #$e6                                                    ; is it out of screen (above)?
                                              blo     DdLEx02                                         ; yes, skip it
                                              coma                                                                    ; was it $ff? (out of screen)
                                              beq     DdLEx02                                         ; yes, go do old sprite
                      DdLine2                                                                                                                                                                                                 ; ddline2
                                                                                                                      ; still first row but different data!                   ; still first row but different data!
                                              decb                                                                    ; decrement counter                                                             ;       dex
                                                                                                                      ; first screen byte                                                                     ; first screen byte
                      DdLine_SprAddr3                                                                                                                                                                         ; ddline_spraddr3:
                                              lda     b,y                                                     ; get one sprite byte                                                   ;       ldy $ffff,x                     ; graphic data.
                                              sta     DdLine_Shift3+2                 ; set as shift low byte
                      DdLine_Shift3                                                                                                                                                                                   ; ddline_shift3:
                                              lda     >$0000                                          ; get preshifted value                                                  ;       lda $ffff,y
                                              sta     <reg_AF                                         ; save in pseudoreg                                                             ;       sta sprtmp
                                              anda    <esp_C                                          ; mask away unwanted                                                            ;       and z80_cp                      ; mask away what's not needed.
                                                                                                                                                                                                                                              ;       ldy #0
                                              eora    ,x                                                              ; merge bits                                                                            ;       eor (z80_hlp),y         ; XOR with what's there.
                                              sta     ,x                                                              ; update screen                                                                 ;       sta (z80_hlp),y         ; bung it in.
                                                                                                                      ; carry to next screen byte                                             ; carry to next screen byte
                                              lda     <reg_AF                                         ; get reshifted value from pseudoreg            ;       lda sprtmp
                                              anda    <esp_B                                          ; mask away unwanted                                                            ;       and z80_bp                      ; mask away unwanted
                                              sta     <reg_AF                                         ; save again in pseudoreg                                               ;       sta sprtmp
                                                                                                                      ; middle screen byte                                                                    ; middle screen byte
                                              incb                                                                    ; increment counter                                                             ;       inx
                      DdLine_SprAddr4                                                                                                                                                                         ; ddline_spraddr4:
                                              lda     b,y                                                     ; get next sprite byte                                                  ;       ldy $ffff,x             ; second bit of data.
                                              sta     DdLine_Shift4+2                 ; set as shift low byte
                      DdLine_Shift4                                                                                                                                                                                   ; ddline_shift4:
                                              lda     >$0000                                          ; get preshifted value                                                  ;       lda $ffff,y
                                              sta     <reg_AF+1                                       ; save in pseudoreg                                                             ;       sta sprtmp2
                                              anda    <esp_C                                          ; mask away unwanted                                                            ;       and z80_cp                      ; mask away what's not needed.
                                              ora     <reg_AF                                         ; add to previous part                                                  ;       ora sprtmp
                                                                                                                                                                                                                                              ;       ldy #8
                                              eora    1,x                                                     ; merge bits                                                                            ;       eor (z80_hlp),y         ; XOR with what's there.
                                              sta     1,x                                                     ; update screen                                                                 ;       sta (z80_hlp),y         ; bung it in.
                                                                                                                      ; last screen byte                                                                      ; last screen byte
                                              lda     <reg_AF+1                                       ; get preshifted value from pseudoreg           ;       lda sprtmp2                     ; fetch data.
                                              anda    <esp_B                                          ; mask away unwanted                                                            ;       and z80_bp                      ; mask away unwanted
                                                                                                                                                                                                                                              ;       ldy #16
                                              eora    2,x                                                     ; merge bits                                                                            ;       eor (z80_hlp),y         ; XOR with what's there.
                                              sta     2,x                                                     ; update screen                                                                 ;       sta (z80_hlp),y         ; bung it in.
                                                                                                                      ; neext row of sprite data                                                      ; next row of sprite data
                      DdLEx02 incb                                                                    ; increment counter                                                             ;       inx
                                                                                                                      ; end of Old Sprite
                                                                                                                      ; 6809 screen arrangement                                                       ; _BEEB screen arrangement
                                              leax    32,x                                                    ; point to next row                                                             ;       lda z80_lp                      ; get low byte of address.
                                              stx     <esp_HL                                         ; update screen pointer                                                 ;       and #7                          
                                                                                                                                                                                                                                              ;       cmp #7                          ; is this last line of row?
                                                                                                                                                                                                                                              ;       beq :+
                                                                                                                                                                                                                                              ; within same row can't increment page
                                                                                                                                                                                                                                              ;       inc z80_lp                      ; new low byte of address.
                                                                                                                                                                                                                                              ;       rts
                                                                                                                                                                                                                                              ; :
                                                                                                                                                                                                                                              ;       clc
                                                                                                                                                                                                                                              ;       lda z80_lp
                                                                                                                                                                                                                                              ;       adc #<(ScreenRowBytes-7)
                                                                                                                                                                                                                                              ;       sta z80_lp                      ; new low byte of address.
                                                                                                                                                                                                                                              ;       lda z80_lp+1
                                                                                                                                                                                                                                              ;       adc #>(ScreenRowBytes-7)
                                                                                                                                                                                                                                              ;       sta z80_lp+1            ; new high byte of address.
                                              rts                                                                     ; return                                                                                                ;       rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              ELSE                                                                                    ; NORMAL sprites (4 frames per sprite)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; regY is used as pointer to 'old' sprite
                      ; regU is used as pointer to 'new' sprite
                      ; So no need for self modifying code
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A0F                  SSpriC                                                                                  ;                                                                                       sspric:
1A0F  BD199F                                  jsr     GSprAd                                          ; get old sprite address                                jsr gsprad                      ; get old sprite address.
                                                                                                                              ; returns reg_BC=right-left byte mask 
                                                                                                                              ; and reg_DE=spriteframe address
1A12  9FA6                                    stx     <reg_HL                                         ; save screen address                                           
                                                                                                                              ;                                                                                               lda z80_e
                                                                                                                              ;                                                                                               sta ddline1+1           ; Set spritedata address
1A14  109EA4                                  ldy     <reg_DE                                         ; get address                                                           lda z80_e
                                                                                                                              ;                                                                                               sta ddline2+1
                                                                                                                              ; already                                                                       lda z80_d
                                                                                                                              ; done                                                                          sta ddline1+2
                                                                                                                              ; above                                                                         sta ddline2+2
1A17  BD1A03                                  jsr     do_rexx                                         ; save old sprite pointers                              jsr exx                         ; store addresses.
1A1A  BD198C                                  jsr     GSprAN                                          ; get new sprite address                                jsr gspran                      ; get new sprite addresses.
1A1D  9FA6                                    stx     <reg_HL                                         ; save screen address                                           
                                                                                                                              ;                                                                                               lda z80_e
                                                                                                                              ;                                                                                               sta dline1+1            ; Set spritedata address
1A1F  DEA4                                    ldu     <reg_DE                                         ; get address                                                           lda z80_e
                                                                                                                              ;                                                                                               sta dline2+1
                                                                                                                              ; already                                                                       lda z80_d
                                                                                                                              ; done                                                                          sta dline1+2
                                                                                                                              ; above                                                                         sta dline2+2
                                                                                                                              ; not needed                                                            stx xtmp
1A21  5F                                      clrb                                                                    ; vertical lines drawn                                  ldx #0                          ; vertical lines.
1A22                  Lloop                                                                                           ;                                                                                       lloop:
1A22  BD1A2F                                  jsr     DLine                                                   ; draw a line of new sprite                     jsr dline                       ; draw a line.
                                                                                                                              ;                                                                                               dex
1A25  C002                                    subb    #2                                                              ; decrement counter twice                               dex
1A27  BD1A5D                                  jsr     DdLine                                          ; draw, so delete old sprite line       jsr ddline                      ; delete a line.
                                                                                                                              ; not needed                                                            cpx #16                         ; detect block boundery
                                                                                                                              ; not needed                                                            bne :+                          ; skip if not
                                                                                                                              ; not needed                                                            inc scraddr+1           ; jump to next blockline
                                                                                                                              ; not needed                                                            inc z80_hlp+1           ; jump to next blockline
                                                                                                                              ; not needed                                                    :
                              IF BFLAG                                                                                ; big sprites(16x24)                                            .if bflag
                                              cmpb    #48                                                     ; got to sprite end?    
                              ELSE
1A2A  C120                                    cmpb    #32                                                     ; got to sprite end?                                            cpx #32                         ; check finished
                              ENDIF
                                                                                                                              
1A2C  26F4                                    bne     Lloop                                                   ; not yet, do next line                                 bne lloop                       ; no, repeat
1A2E  39                                      rts                                                                     ; return                                                                                rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; must preserve 6809 register B (number of drawn lines counter)
                      ; so regB = Atom reg X.  Atom reg Y is not used
                      ; regU is used as a discretional pointer, so saved/restored too
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A2F                  DLine                                                                                           ;                                                                                       dline:
1A2F  9EA6                                    ldx     <reg_HL                                         ; get screen Address for new sprite
1A31  96A6                                    lda     <reg_H                                          ; get high byte of screen Address
1A33  81E6                                    cmpa    #$e6                                                    ; is it out of screen?
1A35  2503                                    blo     1f                                                              ; yes, skip it
1A37  43                                      coma                                                                    ; was it $ff (out of screen)?
1A38  2603                                    bne     DLine1                                          ; no, draw it
1A3A  CB02            1                       addb    #2                                                              ; increment counter
1A3C  39                                      rts                                                                     ; return
                                                                                                                              ; not used                                                                      ldy sprline,x           ; point to screenleft
1A3D                  DLine1                                                                                  ;                                                                                       dline1:
1A3D  A6C5                                    lda     b,u                                                     ; get byte at this offset                               lda objdta,x            ; fetch spriteleft byte
1A3F  97A0                                    sta     <reg_AF                                         ; save read byte                                                        sta z80_a                       ; save spriteright byte
                                                                                                                              ; not used                                                                      ldy ytmp
                                                                                                                              ; regA already has read byte                    lda z80_a
1A41  94A3                                    anda    <reg_C                                          ; mask left                                                                     and z80_c                       ; mask left
1A43  A884                                    eora    ,x                                                              ; merge bits                                                            eor (scraddr),y ; merge with screenleft
1A45  A784                                    sta     ,x                                                              ; update screen                                                 sta (scraddr),y ; write screenleft
1A47                  SLine                                                                                           ;                                                                                       sline:
1A47  5C                                      incb                                                                    ; increment Atom x (sprite byte)                inx                                     ; next spritebyte
                                                                                                                              ; not needed                                                            iny                                     ; point to screenmiddle
1A48                  DLine2                                                                                  ;                                                                                       dline2:
                                                                                                                              ;                                                                                               lda objdta,x            ; fetch spritemiddle byte
                                                                                                                              ; to point to sprite data
1A48  A6C5                                    lda     b,u                                                     ; get byte at this offset
1A4A  A801                                    eora    1,x                                                     ; merge bits                                                            eor (scraddr),y ; merge with screenmiddle
1A4C  A701                                    sta     1,x                                                     ; update screen                                                 sta (scraddr),y ; write screenmiddle
1A4E                  SLine2                                                                                  ;                                                                                       sline2:
                                                                                                                              ; not needed                                                            iny                                     ; point to screenright  
1A4E  96A0                                    lda     <reg_AF                                         ; get saved read byte                                   lda z80_a                       ; fetch spriteright byte
1A50  94A2                                    anda    <reg_B                                          ; mask right                                                            and z80_b                       ; mask right
1A52  A802                                    eora    2,x                                                     ; merge bits                                                            eor (scraddr),y ; merge with screenright
1A54  A702                                    sta     2,x                                                     ; update screen                                                 sta (scraddr),y ; write screenright
1A56                  SLine3                                                                                  ;                                                                                       sline3:
1A56  308820                                  leax    32,x                                                    ; point to next row
1A59  9FA6                                    stx     <reg_HL                                         ; update screen pointer
1A5B  5C              DLEx01  incb                                                                    ; increment Atom x (sprite byte)                inx                                     ; next spritebyte
1A5C  39                                      rts                                                                     ; return                                                                                rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; must preserve 6809 register B (number of drawn lines counter)
                      ; so regB = Atom reg X.  Atom reg Y is not used
                      ; regU is used as a discretional pointer, so saved/restored too
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A5D                  DdLine                                                                                  ;                                                                                       ddline:
1A5D  9EB4                                    ldx     <esp_HL                                         ; get screen Address for old sprite
1A5F  96B4                                    lda     <esp_H                                          ; get high byte of screen Address
1A61  81E6                                    cmpa    #$e6                                                    ; is it out of screen?
1A63  2503                                    blo     1f                                                              ; yes, skip it
1A65  43                                      coma                                                                    ; is it out of screen?
1A66  2603                                    bne     DdLine1                                         ; no, draw line
1A68  CB02            1                       addb    #2                                                              ; increment counter
1A6A  39                                      rts                                                                     ; return
1A6B                  DdLine1                                                                                 ;                                                                                       ddline1:
1A6B  A6A5                                    lda     b,y                                                     ; get byte at this offset                               lda objdta,x            ; fetch spriteleft byte
1A6D  97A0                                    sta     <reg_AF                                         ; save read byte                                                        sta z80_a                       ; save spriteright byte
                                                                                                                              ; not used                                                                      ldy ytmp
                                                                                                                              ; regA already has read byte                    lda z80_a
1A6F  94B1                                    anda    <esp_C                                          ; mask left                                                                     and z80_cp                      ; mask left
1A71  A884                                    eora    ,x                                                              ; merge bits                                                            eor (z80_hlp),y ; merge with screenleft
1A73  A784                                    sta     ,x                                                              ; update screen                                                 sta (z80_hlp),y ; write screenleft
1A75                  DsLine                                                                                  ;                                                                                       dsline:
1A75  5C                                      incb                                                                    ; increment Atom x (sprite byte)                        inx                                     ; next spritebyte
                                                                                                                              ; not needed                                                            iny                                     ; point to screenmiddle
1A76                  DdLine2                                                                                 ;                                                                                       ddline2:
                                                                                                                              ;                                                                                               lda objdta,x            ; fetch spritemiddle byte
                                                                                                                              ; to point to sprite data
1A76  A6A5                                    lda     b,y                                                     ; get byte at this offset
1A78  A801                                    eora    1,x                                                     ; merge bits                                                            eor (z80_hlp),y ; merge with screenmiddle
1A7A  A701                                    sta     1,x                                                     ; update screen                                                 sta (z80_hlp),y ; write screenmiddle
1A7C                  DsLine2                                                                                 ;                                                                                       dsline2:
                                                                                                                              ; not needed                                                                    iny                                     ; point to screenright  
1A7C  96A0                                    lda     <reg_AF                                         ; get saved read byte                                   lda z80_a                       ; fetch spriteright byte
1A7E  94B0                                    anda    <esp_B                                          ; mask right                                                            and z80_bp                      ; mask right
1A80  A802                                    eora    2,x                                                     ; merge bits                                                            eor (z80_hlp),y ; merge with screenright
1A82  A702                                    sta     2,x                                                     ; update screen                                                 sta (z80_hlp),y ; write screenright
1A84                  DsLine3                                                                                 ;                                                                                       dsline3:
1A84  308820                                  leax    32,x                                                    ; point to next row
1A87  9FB4                                    stx     <esp_HL                                         ; update screen pointer
1A89  5C              DdLEx01 incb                                                                    ; increment Atom x (sprite byte)                inx                                     ; next spritebyte
1A8A  39                                      rts                                                                     ; return                                                                                rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Line drawn, now work out next target address.                                                                 ; Line drawn, now work out next target address.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                               nline:
                      ;                                                                                                                                                                                                       clc
                      ;                                                                                                                                                                                                       lda scraddr             ; get low byte of address.
                      ;                                                                                                                                                                                                       adc #$20
                      ;
                      ;
                      ;
                      ;                                                                                                                                                                                                       sta scraddr             ; new low byte of address.
                      ;                                                                                                                                                                                                       bcc :+
                      ;                                                                                                                                                                                                       inc scraddr+1           ; new high byte of address.
                      ;                                                                                                                                                                                               :
                      ;                                                                                                                                                                                                       rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              ENDIF
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Animates a sprite                                                                                                                                                                     ; Animates a sprite.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A8B                  AnimSp                                                                                                                                                                                                  ; animsp ld hl,frmno         ; game frame.
1A8B  9401                                    anda    <frmNo                                                                                                                                                          ;                and (hl)            ; is it time to change the frame?
1A8D  2616                                    bne     AnimSpex                                                                                                                                                                ;                ret nz              ; not this frame.
1A8F  109EA8                                  ldy     <reg_IX
1A92  A626                                    lda     6,y                                                                                                                                                                     ;                ld a,(ix+6)         ; sprite image.
1A94  BD1C83                                  jsr     GFrm                                                    ; returns regX as HL                                                            ;                call gfrm           ; get frame data.
1A97  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; point to frames.
1A99  9FA6                                    stx     <reg_HL
1A9B  A627                                    lda     7,y                                                                                                                                                                     ;                ld a,(ix+7)         ; sprite frame.
1A9D  4C                                      inca                                                                                                                                                                                    ;                inc a               ; next one along.
1A9E  A184                                    cmpa    ,x                                                                                                                                                                              ;                cp (hl)             ; reached the last frame?
1AA0  2501                                    bcs     AnimS0                                                                                                                                                          ;                jr c,anims0         ; no, not yet.
1AA2  4F                                      clra                                                                                                                                                                                    ;                xor a               ; start at first frame.
1AA3  A727            AnimS0  sta     7,y                                                                                                                                                                     ; anims0 ld (ix+7),a         ; new frame.
1AA5  39              AnimSpex        rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1AA6                  AnimBk                                                                                                                                                                                                  ; animbk ld hl,frmno         ; game frame.
1AA6  9401                                    anda    <frmNo                                                                                                                                                                  ;                and (hl)            ; is it time to change the frame?
1AA8  26FB                                    bne     AnimSpex                                                                                                                                                                ;                ret nz              ; not this frame.
1AAA  109EA8                                  ldy     <reg_IX
1AAD  A626                                    lda     6,y                                                                                                                                                                     ;                ld a,(ix+6)         ; sprite image.
1AAF  BD1C83                                  jsr     GFrm                                                                                                                                                                    ;                call gfrm           ; get frame data.
1AB2  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; point to frames.
1AB4  9FA6                                    stx     <reg_HL
1AB6  A627                                    lda     7,y                                                                                                                                                                     ;                ld a,(ix+7)         ; sprite frame.
                                                                                                                                                                                                                                              ;                and a               ; first one?
1AB8  2602                                    bne     RTanb0                                                                                                                                                          ;                jr nz,rtanb0        ; yes, start at end.
1ABA  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; last sprite.
1ABC  4A              RTanb0  deca                                                                                                                                                                                    ; rtanb0 dec a               ; next one along.
1ABD  BD1AA3                                  jsr     AnimS0                                                                                                                                                          ;                jr anims0           ; set new frame.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Check for collision with other sprite, strict enforcement                                                             ; Check for collision with other sprite, strict enforcement.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1AC0  8ED4D9          SkTyp           ldx     #sprTab                                                                                                                                                         ; sktyp  ld hl,sprtab        ; sprite table.
1AC3  9FA6                                    stx     <reg_HL
1AC5  860C            NumSP2  lda     #NUMSPR                                                                                                                                                         ; numsp2 ld a,NUMSPR         ; number of sprites.
1AC7  97A0            SkTyp0  sta     <reg_AF                                                                                                                                                         ; sktyp0 ex af,af'           ; store loop counter.
1AC9  9F5C                                    stx     <skPtr                                                                                                                                                                  ;                ld (skptr),hl       ; store pointer to sprite.
1ACB  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; get sprite type.
1ACD  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is it the type we seek?
1ACF  2714                                    beq     ColTyp                                                                                                                                                          ;                jr z,coltyp         ; yes, we can use this one.
1AD1  9E5C            SkTyp1  ldx     <skPtr                                                                                                                                                                  ; sktyp1 ld hl,(skptr)       ; retrieve sprite pointer.
1AD3  308811                                  leax    TABSIZ,x                                                                                                                                                                ;                ld de,TABSIZ        ; size of each entry.
1AD6  9FA6                                    stx     <reg_HL                                                                                                                                                         ;                add hl,de           ; point to next sprite in table.
1AD8  96A0                                    lda     <reg_AF                                                                                                                                                         ;                ex af,af'           ; restore loop counter.
1ADA  4A                                      deca                                                                                                                                                                                    ;                dec a               ; one less iteration.
1ADB  26EA                                    bne     SkTyp0                                                                                                                                                          ;                jp nz,sktyp0        ; keep going until we find a slot.
1ADD  CC0000                                  ldd     #$0000                                                                                                                                                          ;                ld hl,0             ; default to ROM address - no sprite.
1AE0  DD5C                                    std     <skPtr                                                                                                                                                                  ;                ld (skptr),hl       ; store pointer to sprite.
1AE2  1CFA                                    andcc   #%11111010                                      ; clear zero and carry flags                                    ;                or h                ; don't return with zero flag set.
1AE4  39                                      rts                                                                                                                                                                                     ;                ret                 ; didn't find one.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1AE5  A69F00A8        ColTyp  lda     [reg_IX]                                                                                                                                                                ; coltyp ld a,(ix+0)         ; current sprite type.
1AE9  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; seeking sprite of same type?
1AEB  272E                                    beq     ColTy1                                                                                                                                                          ;                jr z,colty1         ; yes, need to check we're not detecting ourselves.
1AED  9EA6            ColTy0  ldx     <reg_HL                                                                                                                                                         ; colty0 ld de,X             ; distance to x position in table.
1AEF  3008                                    leax    Xval,x                                                                                                                                                          ;                add hl,de           ; point to coords.
1AF1  EC80                                    ldd     ,x+                                                                                                                                                                     ;                ld e,(hl)           ; fetch x coordinate.
1AF3  D7A4                                    stb     <reg_D                                                                                                                                                          ;                inc hl              ; now point to y.
1AF5  97A5                                    sta     <reg_E
1AF7  9FA6                                    stx     <reg_HL                                                                                                                                                         ;                ld d,(hl)           ; that's y coordinate.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drop into collision detection                                                                                                                                 ; Drop into collision detection.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1AF9  109EA8          Colc16  ldy     <reg_IX
1AFC  A628                                    lda     Xval,y                                                                                                                                                          ; colc16 ld a,(ix+X)         ; x coord.
1AFE  90A5                                    suba    <reg_E                                                                                                                                                          ;                sub e               ; subtract x.
1B00  2401                                    bcc     Colc1a                                                                                                                                                          ;                jr nc,colc1a        ; result is positive.
1B02  40                                      nega                                                                                                                                                                                    ;                neg                 ; make negative positive.
1B03  8110            Colc1a  cmpa    #16                                                                                                                                                                     ; colc1a cp 16               ; within x range?
1B05  24CA                                    bcc     SkTyp1                                                                                                                                                          ;                jr nc,sktyp1        ; no - they've missed.
1B07  97A3                                    sta     <reg_C                                                                                                                                                          ;                ld c,a              ; store difference.
1B09  A629                                    lda     Yval,y                                                                                                                                                          ;                ld a,(ix+Y)         ; y coord.
1B0B  90A4                                    suba    <reg_D                                                                                                                                                          ;                sub d               ; subtract y.
1B0D  2401                                    bcc     Colc1b                                                                                                                                                          ;                jr nc,colc1b        ; result is positive.
1B0F  40                                      nega                                                                                                                                                                                    ;                neg                 ; make negative positive.
1B10  8110            Colc1b  cmpa    #16                                                                                                                                                                     ; colc1b cp 16               ; within y range?
1B12  24BD                                    bcc     SkTyp1                                                                                                                                                          ;                jr nc,sktyp1        ; no - they've missed.
1B14  9BA3                                    adda    <reg_C                                                                                                                                                          ;                add a,c             ; add x difference.
1B16  811A                                    cmpa    #26                                                                                                                                                                     ;                cp 26               ; only 5 corner pixels touching?
1B18  24B7                                    bcc     SkTyp1                                                                                                                                                          ;                ret c               ; carry set if there's a collision.
1B1A  39                                      rts                                                                                                                                                                                     ;                jp sktyp1           ; try next sprite in table.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1B1B  DCA8            ColTy1  ldd     <reg_IX                                                                                                                                                         ; colty1 push ix             ; base sprite address onto stack.
                                                                                                                                                                                                                                              ;                pop de              ; pop it into de.
                                                                                                                                                                                                                                              ;                ex de,hl            ; flip hl into de.
1B1D  1093A6                                  cmpd    <reg_HL                                                                                                                                                         ;                sbc hl,de           ; compare the two.
                                                                                                                                                                                                                                              ;                ex de,hl            ; restore hl.
1B20  27AF                                    beq     SkTyp1                                                                                                                                                          ;                jr z,sktyp1         ; addresses are identical.
1B22  20C9                                    bra     ColTy0                                                                                                                                                          ;                jp colty0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display number.       (regA=number to be converted)                                                                                           ; Display number.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1B24  CE1B36          Disply  ldu     #dispL0                                         ; point to string area                                                  ; disply ld bc,displ0        ; display workspace.
1B27  BD11D5                                  jsr     Num2Ch                                          ; convert number to char                                                ;                call num2ch         ; convert accumulator to string.
1B2A  A65F            DispL1  lda     -1,u                                                    ; get last calculated digit                                     ; displ1 dec bc              ; back one character.
                                                                                                                                                                                                                                              ;                ld a,(bc)           ; fetch digit.
1B2C  8A80                                    ora     #128                                                    ; raise bit 7 (end of string)                                   ;                or 128              ; insert end marker.
1B2E  A75F                                    sta     -1,u                                                    ; update string                                                                 ;                ld (bc),a           ; new value.
1B30  8E1B36                                  ldx     #dispL0                                         ; point to string                                                                       ;                ld hl,displ0        ; display space.
1B33  7E183C                                  jmp     Dmsg3                                                   ; show it                                                                                       ;                jp dmsg3            ; display the string.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1B36  0000008D        dispL0  fcb     0,0,0,13+128                            ; area for converted number                                     ; displ0 defb 0,0,0,13+128
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Initialise screen.                                                                                                                                                                    ; Initialise screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1B3A  B60074          InitSc  lda     roomTb                                          ; get room number                                                                       ; initsc ld a,(roomtb)       ; whereabouts in the map are we?
1B3D  BD1B47                                  jsr     TstSc                                                   ; find associated code                                                  ;                call tstsc          ; find displacement.
1B40  2B03                                    bmi     InitSc1                                         ; if out of map, return zero                                    ;                cp 255              ; is it valid?
                                                                                                                                                                                                                                              ;                ret z               ; no, it's rubbish.
1B42  976E                                    sta     <scNo                                                   ; store code as present room                                    ;                ld (scno),a         ; store new room number.
1B44  39                                      rts                                                                     ; return                                                                                                ;                ret
1B45  4F              InitSc1 clra                                                                    ; clear zero flag                               
1B46  39                                      rts                                                                     ; return                                                                
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Test screen.                                                                                                                                                                                  ; Test screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1B47  8E1EE4          TstSc           ldx     #mapDat-MAPWID                          ; start of MAP data                                                             ; tstsc  ld hl,mapdat-MAPWID ; start of map data, subtract width for negative.
1B4A  97A2                                    sta     <reg_B                                                                                                                                                          ;                ld b,a              ; store room in b for now.
1B4C  8B09                                    adda    #MAPWID                                         ; add MAPWID to skip negatives                          ;                add a,MAPWID        ; add width in case we're negative.
                                                                                                                                                                                                                                              ;                ld e,a              ; screen into e.
1B4E  3086                                    leax    a,x                                                                                                                                                                     ;                ld d,0              ; zeroise d.
1B50  9FA6                                    stx     <reg_HL                                                                                                                                                         ;                add hl,de           ; add displacement to map data.
1B52  A684                                    lda     ,x                                                              ; get room number                                                                       ;                ld a,(hl)           ; find room number there.
1B54  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Screen left                                                                                                                                                                                   ; Screen left.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1B55  B60074          ScrL            lda     roomTb                                                                                                                                                          ; scrl   ld a,(roomtb)       ; present room table pointer.
1B58  4A                                      deca                                                                                                                                                                                    ;                dec a               ; room left.
1B59  BD1B47          Scr10           jsr     TstSc                                                                                                                                                                   ; scrl0  call tstsc          ; test screen.
1B5C  4C                                      inca                                                                                                                                                                                    ;                inc a               ; is there a screen this way?
1B5D  270C                                    beq     ScrLEx                                                                                                                                                          ;                ret z               ; no, return to loop.
1B5F  96A2                                    lda     <reg_B                                                                                                                                                          ;                ld a,b              ; restore room displacement.
1B61  B70074                                  sta     roomTb                                                                                                                                                          ;                ld (roomtb),a       ; new room table position.
1B64  BD1B3A          Scr11           jsr     InitSc                                                                                                                                                          ; scrl1  call initsc         ; set new screen.
1B67  8602                                    lda     #2                                                                                                                                                                              ;                ld hl,restfl        ; restart screen flag.
1B69  9722                                    sta     <restFl                                                                                                                                                         ;                ld (hl),2           ; set it.
1B6B  39              ScrLEx  rts                                                                                                                                                                                     ;                ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1B6C  B60074          ScrR            lda     roomTb                                                                                                                                                          ; scrr   ld a,(roomtb)       ; room table pointer.
1B6F  4C                                      inca                                                                                                                                                                                    ;                inc a               ; room right.
1B70  20E7                                    bra     Scr10                                                                                                                                                                   ;                jr scrl0
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1B72  B60074          ScrU            lda     roomTb                                                                                                                                                          ; scru   ld a,(roomtb)       ; room table pointer.
1B75  8009                                    suba    #MAPWID                                                                                                                                                         ;                sub MAPWID          ; room up.
1B77  20E0                                    bra     Scr10                                                                                                                                                                   ;                jr scrl0
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1B79  B60074          ScrD            lda     roomTb                                                                                                                                                          ; scrd   ld a,(roomtb)       ; room table pointer.
1B7C  8B09                                    adda    #MAPWID                                                                                                                                                         ;                add a,MAPWID        ; room down.
1B7E  20D9                                    bra     Scr10                                                                                                                                                                   ;                jr scrl0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Jump to new screen                                                                                                                                                                    ; Jump to new screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1B80  8E1EED          NwScr           ldx     #mapDat                                                                                                                                                         ; nwscr  ld hl,mapdat        ; start of map data.
1B83  C650                                    ldb     #80                                                                                                                                                                     ;                ld bc,256*80        ; zero room count, 80 to search.
1B85  6FE2                                    clr     ,-s
1B87  A180            NwScr0  cmpa    ,x+                                                                                                                                                                     ; nwscr0 cp (hl)             ; have we found a match for screen?
1B89  2707                                    beq     NwScr1                                                                                                                                                          ;                jr z,nwscr1         ; yes, set new point in map.
                                                                                                                                                                                                                                              ;                inc hl              ; next room.
1B8B  6CE4                                    inc     ,s                                                                                                                                                                              ;                inc c               ; count rooms.
1B8D  5A                                      decb
1B8E  26F7                                    bne     NwScr0                                                                                                                                                          ;                djnz nwscr0         ; keep looking.
1B90  3584                                    puls    b,pc                                                    ; clean stack and return                                                ;                ret
1B92  A6E0            NwScr1  lda     ,s+                                                                                                                                                                     ; nwscr1 ld a,c              ; room displacement.
1B94  B70074                                  sta     roomTb                                                                                                                                                          ;                ld (roomtb),a       ; set the map position.
1B97  20CB                                    bra     Scr11                                                                                                                                                                   ;                jr scrl1            ; draw new room.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Gravity processing                                                                                                                                                                    ; Gravity processing.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1B99  A62D            Grav            lda     13,y                                                                                                                                                                    ; grav   ld a,(ix+13)        ; in-air flag.
                                                                                                                                                                                                                                              ;                and a               ; are we in the air?
1B9B  2744                                    beq     GravEx                                                                                                                                                          ;                ret z               ; no we are not.
1B9D  4C                                      inca                                                                                                                                                                                    ;                inc a               ; increment it.
1B9E  2742                                    beq     OGrv                                                                                                                                                                    ;                jp z,ogrv           ; set to 255, use old gravity.
1BA0  A72D                                    sta     13,y                                                                                                                                                                    ;                ld (ix+13),a        ; write new setting.
1BA2  46                                      rora                                                                                                                                                                                    ;                rra                 ; every other frame.
1BA3  2408                                    bcc     Grav0                                                                                                                                                                   ;                jr nc,grav0         ; don't apply gravity this time.
1BA5  A62E                                    lda     14,y                                                                                                                                                                    ;                ld a,(ix+14)        ; pixels to move.
1BA7  8110                                    cmpa    #16                                                                                                                                                                     ;                cp 16               ; reached maximum?
1BA9  2702                                    beq     Grav0                                                                                                                                                                   ;                jr z,grav0          ; yes, continue.
1BAB  6C2E                                    inc     14,y                                                                                                                                                                    ;                inc (ix+14)         ; slow down ascent/speed up fall.
1BAD  A62E            Grav0           lda     14,y                                                                                                                                                                    ; grav0  ld a,(ix+14)        ; get distance to move.
1BAF  47                                      asra                                                                                                                                                                                    ;                sra a               ; divide by 2.
                                                                                                                                                                                                                                              ;                and a               ; any movement required?
1BB0  272F                                    beq     GravEx                                                                                                                                                          ;                ret z               ; no, not this time.
1BB2  8180                                    cmpa    #128                                                                                                                                                                    ;                cp 128              ; is it up or down?
1BB4  240E                                    bcc     GravU                                                                                                                                                                   ;                jr nc,gravu         ; it's up.
1BB6  97A2            GravD           sta     <reg_B                                                                                                                                                          ; gravd  ld b,a              ; set pixels to move.
1BB8  BD1601          GravD0  jsr     CanGD                                                                                                                                                                   ; gravd0 call cangd          ; can we go down?
1BBB  2618                                    bne     GravSt                                                                                                                                                          ;                jr nz,gravst        ; can't move down, so stop.
1BBD  6C28                                    inc     8,y                                                                                                                                                                     ;                inc (ix+8)          ; adjust new x coord.
1BBF  0AA2                                    dec     <reg_B
1BC1  26F5                                    bne     GravD0                                                                                                                                                          ;                djnz gravd0
1BC3  39                                      rts                                                                                                                                                                                     ;                ret
1BC4  40              GravU           nega                                                                                                                                                                                    ; gravu  neg                 ; flip the sign so it's positive.
1BC5  97A2                                    sta     <reg_B                                                                                                                                                          ;                ld b,a              ; set pixels to move.
1BC7  BD15CA          GravU0  jsr     CanGU                                                                                                                                                                   ; gravu0 call cangu          ; can we go up?
1BCA  1026009E                                lbne    IFalls                                                                                                                                                          ;                jp nz,ifalls        ; can't move up, go down next.
1BCE  6A28                                    dec     8,y                                                                                                                                                                     ;                dec (ix+8)          ; adjust new x coord.
1BD0  0AA2                                    dec     <reg_B
1BD2  26F3                                    bne     GravU0                                                                                                                                                          ;                djnz gravu0
1BD4  39                                      rts                                                                                                                                                                                     ;                ret
1BD5  A62E            GravSt  lda     14,y                                                                                                                                                                    ; gravst ld a,(ix+14)        ; jump pointer high.
1BD7  6F2D                                    clr     13,y                                                                                                                                                                    ;                ld (ix+13),0        ; reset falling flag.
1BD9  6F2E                                    clr     14,y                                                                                                                                                                    ;                ld (ix+14),0        ; store new speed.
1BDB  8108                                    cmpa    #8                                                                                                                                                                              ;                cp 8                ; was speed the maximum?
1BDD  10270A39        EvFtf           lbeq    Evnt15                                                                                                                                                          ; evftf  jp z,evnt15         ; yes, fallen too far.
1BE1  39              GravEx  rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Old gravity processing for compatibility with 4.6 and 4.7                                                             ; Old gravity processing for compatibility with 4.6 and 4.7.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1BE2  E62E            OGrv            ldb     14,y                                                                                                                                                                    ; ogrv   ld e,(ix+14)        ; get index to table.
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
1BE4  8E6767                                  ldx     #jTab                                                                                                                                                                   ;                ld hl,jtab          ; jump table.
1BE7  3A                                      abx                                                                                                                                                                                     ;                add hl,de           ; hl points to jump value.
1BE8  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; pixels to move.
1BEA  8163                                    cmpa    #99                                                                                                                                                                     ;                cp 99               ; reached the end?
1BEC  2606                                    bne     OGrv0                                                                                                                                                                   ;                jr nz,ogrv0         ; no, continue.
1BEE  301F                                    leax    -1,x                                                                                                                                                                    ;                dec hl              ; go back to previous value.
1BF0  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch that from table.
1BF2  2002                                    bra     OGrv1                                                                                                                                                                   ;                jr ogrv1
1BF4  6C2E            OGrv0           inc     14,y                                                                                                                                                                    ; ogrv0  inc (ix+14)         ; point to next table entry.
1BF6  4D              OGrv1           tsta                                                                                                                                                                                    ; ogrv1  and a               ; any movement required?
1BF7  2742                                    beq     OGrvEx                                                                                                                                                          ;                ret z               ; no, not this time.
1BF9  8180                                    cmpa    #128                                                                                                                                                                    ;                cp 128              ; is it up or down?
1BFB  240E                                    bcc     OGrvU                                                                                                                                                                   ;                jr nc,ogrvu         ; it's up.
1BFD  97A2            OGrvD           sta     <reg_B                                                                                                                                                          ; ogrvd  ld b,a              ; set pixels to move.
1BFF  BD1601          OGrvD0  jsr     CanGD                                                                                                                                                                   ; ogrvd0 call cangd          ; can we go down?
1C02  2616                                    bne     OGrvSt                                                                                                                                                          ;                jr nz,ogrvst        ; can't move down, so stop.
1C04  6C28                                    inc     8,y                                                                                                                                                                     ;                inc (ix+8)          ; adjust new x coord.
1C06  0AA2                                    dec     <reg_B
1C08  26F5                                    bne     OGrvD0                                                                                                                                                          ;                djnz ogrvd0
1C0A  39                                      rts                                                                                                                                                                                     ;                ret
1C0B  40              OGrvU           nega                                                                                                                                                                                    ; ogrvu  neg                 ; flip the sign so it's positive.
1C0C  97A2                                    sta     <reg_B                                                                                                                                                          ;                ld b,a              ; set pixels to move.
1C0E  BD15CA          OGrvU0  jsr     CanGU                                                                                                                                                                   ; ogrvu0 call cangu          ; can we go up?
1C11  2617                                    bne     OGrv2                                                                                                                                                                   ;                jr nz,ogrv2         ; can't move up, go down next.
1C13  6A28                                    dec     8,y                                                                                                                                                                     ;                dec (ix+8)          ; adjust new x coord.
1C15  0AA2                                    dec     <reg_B  
1C17  26F5                                    bne     OGrvU0                                                                                                                                                          ;                djnz ogrvu0
1C19  39                                      rts                                                                                                                                                                                     ;                ret
1C1A  E62E            OGrvSt  ldb     14,y                                                                                                                                                                    ; ogrvst ld e,(ix+14)        ; get index to table.
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
1C1C  8E6767                                  ldx     #jTab                                                                                                                                                                   ;                ld hl,jtab          ; jump table.
1C1F  3A                                      abx                                                                                                                                                                                     ;                add hl,de           ; hl points to jump value.
1C20  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch byte from table.
1C22  6F2D                                    clr     13,y                                                                                                                                                                    ;                cp 99               ; is it the end marker?
1C24  6F2E                                    clr     14,y                                                                                                                                                                    ;                ld (ix+13),0        ; reset jump flag.
1C26  8163                                    cmpa    #99                                                     ; moved to avoid flag zero modified                     ;                ld (ix+14),0        ; reset pointer.
1C28  20B3                                    bra     EvFtf                                                                                                                                                                   ;                jp evftf
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1C2A  8E6767          OGrv2           ldx     #jTab                                                                                                                                                                   ; ogrv2  ld hl,jtab          ; jump table.
1C2D  5F                                      clrb                                                                                                                                                                                    ;                ld b,0              ; offset into table.
1C2E  A684            OGrv4           lda     ,x                                                                                                                                                                              ; ogrv4  ld a,(hl)           ; fetch table byte.
1C30  8164                                    cmpa    #100                                                                                                                                                                    ;                cp 100              ; hit end or downward move?
1C32  2505                                    bcs     OGrv3                                                                                                                                                                   ;                jr c,ogrv3          ; yes.
1C34  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; next byte of table.
1C36  5C                                      incb                                                                                                                                                                                    ;                inc b               ; next offset.
1C37  20F5                                    bra     OGrv4                                                                                                                                                                   ;                jr ogrv4            ; keep going until we find crest/end of table.
1C39  E72E            OGrv3           stb     14,y                                                                                                                                                                    ; ogrv3  ld (ix+14),b        ; set next table offset.
1C3B  39              OGrvEx  rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Initiate fall check                                                                                                                                                           ; Initiate fall check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1C3C  A62D            IFall           lda     13,y                                                                                                                                                                    ; ifall  ld a,(ix+13)        ; jump pointer flag.
                                                                                                                                                                                                                                              ;                and a               ; are we in the air?
1C3E  2630                                    bne     IFallEx                                                                                                                                                         ;                ret nz              ; if set, we're already in the air.
1C40  EC28                                    ldd     8,y                                                     ; inverted HL for dispX                                                 ;                ld h,(ix+9)         ; y coordinate.
1C42                  NumSp7
1C42  8B10                                    adda    #SPR_HGT                                                                                                                                                                        ;                ld a,16             ; look down 16 pixels.
1C44  DD25                                    std     <dispX                                          ; into dispXY                                                                           ;                add a,(ix+8)        ; add x coordinate.
1C46  1E89                                    exg     a,b                                                     ; invert bytes                                                                          ;                ld l,a              ; coords in hl.
1C48  1F01                                    tfr     d,x                                                     ; to regX                                                                                       ;                ld (dispx),hl       ; set up test coordinates.
1C4A  9FA6                                    stx     <reg_HL                                         ; and to pseudo register
1C4C  BD1717                                  jsr     TstBl                                                                                                                                                                   ;                call tstbl          ; get map address.
1C4F  BD168A                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1C52  261C                                    bne     IFallEx                                                                                                                                                         ;                ret nz              ; it's solid, don't fall.
1C54  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; look right one cell.
1C56  9FA6                                    stx     <reg_HL
1C58  BD168A                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1C5B  2613                                    bne     IFallEx                                                                                                                                                         ;                ret nz              ; it's solid, don't fall.
1C5D  9626                                    lda     <dispY                                                                                                                                                                  ;                ld a,(dispy)        ; y coordinate.
1C5F  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; position straddling block cells.
1C61  2709                                    beq     IFalls                                                                                                                                                          ;                jr z,ifalls         ; no more checks needed.
1C63  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; look to third cell.
1C65  9FA6                                    stx     <reg_HL
1C67  BD168A                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1C6A  2604                                    bne     IFallEx                                                                                                                                                         ;                ret nz              ; it's solid, don't fall.
1C6C  6C2D            IFalls  inc     13,y                                                                                                                                                                    ; ifalls inc (ix+13)         ; set in air flag.
1C6E  6F2E                                    clr     14,y                                                                                                                                                                    ;                ld (ix+14),0        ; initial speed = 0.
1C70  39              IFallEx rts                                                                                                                                                                                     ;                ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1C71  A62D            TFall           lda     13,y                                                                                                                                                                    ; tfall  ld a,(ix+13)        ; jump pointer flag.
                                                                                                                                                                                                                                              ;                and a               ; are we in the air?
1C73  26FB                                    bne     IFallEx                                                                                                                                                         ;                ret nz              ; if set, we're already in the air.
1C75  BD1C3C                                  jsr     IFall                                                                                                                                                                   ;                call ifall          ; do fall test.
1C78  A62D                                    lda     13,y                                                                                                                                                                    ;                ld a,(ix+13)        ; get falling flag.
                                                                                                                                                                                                                                              ;                and a               ; is it set?
1C7A  27F4                                    beq     IFallEx                                                                                                                                                         ;                ret z               ; no.
1C7C  8601                                    lda     #1
1C7E  A72D                                    sta     13,y                                                                                                                                                                    ;                ld (ix+13),255      ; we're using the table.
1C80  7E1C2A                                  jmp     OGrv2                                                                                                                                                                   ;                jr ogrv2            ; find position in table.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get frame data for a particular sprite                                                                                                                ; Get frame data for a particular sprite.
                      ; receives in regA frameNumber
                      ; returns regX (HL)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1C83  48              GFrm            asla                                                                    ; multiple of 2                                                                 ; gfrm   rlca                ; multiple of 2.
1C84  8900                                    adca    #0                                                              ; pass bit7 to bit0
1C86  1F89                                    tfr     a,b                                                     ; pass to low byte                                                              ;                ld e,a              ; copy to de.
1C88  4F                                      clra                                                                    ; zero to high byte                                                             ;                ld d,0              ; no high byte as max sprite is 128.
1C89  9E7C                                    ldx     <frmPtr                                         ; get frame pointer                                                             ;                ld hl,(frmptr)      ; frames used by game.
1C8B  308B                                    leax    d,x                                                     ; apply offset                                                                          ;                add hl,de           ; point to frame start.
1C8D  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Find sprite list for current room                                                                                                                             ; Find sprite list for current room.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1C8E  9E84            SprLst  ldx     <nmePtr                                         ; point to enemies array                                                ; sprlst ld a,(scno)         ; screen number.
1C90  D66E                                    ldb     <scNo                                                   ; get screen number                                                             ; sprls2 ld hl,(nmeptr)      ; pointer to enemies.
1C92  270E                                    beq     SprLsEx                                         ; if zero, exit. Ptr OK                                                 ;                ld b,a              ; loop counter in b register.
                                                                                                                                                                                                                                              ;                and a               ; is it the first screen?
                                                                                                                                                                                                                                              ;                ret z               ; yes, don't need to search data.
                                                                                                                                                                                                                                              ;                ld de,NMESIZ        ; bytes to skip.
1C94  A684            SprLs1  lda     ,x                                                              ; get byte from array                                                   ; sprls1 ld a,(hl)           ; fetch type of sprite.
1C96  4C                                      inca                                                                    ; was it 255?                                                                           ;                inc a               ; is it an end marker?
1C97  2704                                    beq     SprLs0                                          ; yes, go for next screen                                               ;                jr z,sprls0         ; yes, end of this room.
1C99  3004                                    leax    NMESIZ,x                                                ; no, point to next sprite in list                      ;                add hl,de           ; point to next sprite in list.
1C9B  20F7                                    bra     SprLs1                                          ; loopback                                                                                      ;                jr sprls1           ; continue until end of room.
1C9D  3001            SprLs0  leax    1,x                                                     ; point to next screen 1st sprite                       ; sprls0 inc hl              ; point to start of next screen.
1C9F  5A                                      decb                                                                    ; decrement counter
1CA0  26F2                                    bne     SprLs1                                          ; not yet done? loopback                                                ;                djnz sprls1         ; continue until room found.
1CA2  39              SprLsEx rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Clear all but a single player sprite                                                                                                                  ; Clear all but a single player sprite.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1CA3  C60C            NSpr            ldb     #NUMSPR                                                                                                                                                         ; nspr   ld b,NUMSPR         ; sprite slots in table.
1CA5  108ED4D9                                ldy     #sprTab                                                                                                                                                         ;                ld ix,sprtab        ; sprite table.
                                                                                                                                                                                                                                              ;                ld de,TABSIZ        ; distance to next odd/even entry.
1CA9  A6A4            NSpr0           lda     ,y                                                                                                                                                                              ; nspr0  ld a,(ix+0)         ; fetch sprite type.
                                                                                                                                                                                                                                              ;                and a               ; is it a player?
1CAB  270D                                    beq     NSpr1                                                                                                                                                                   ;                jr z,nspr1          ; yes, keep this one.
1CAD  86FF                                    lda     #255
1CAF  A7A4                                    sta     ,y                                                                                                                                                                              ;                ld (ix+0),255       ; delete sprite.
1CB1  A725                                    sta     5,y                                                                                                                                                                     ;                ld (ix+5),255       ; remove next type.
1CB3  31A811                                  leay    TABSIZ,y                                                                                                                                                                ;                add ix,de           ; next sprite.
1CB6  5A                                      decb
1CB7  26F0                                    bne     NSpr0                                                                                                                                                                   ;                djnz nspr0          ; one less space in the table.
1CB9  39                                      rts                                                                                                                                                                                     ;                ret
1CBA  86FF            NSpr1           lda     #255
1CBC  A7A4                                    sta     ,y                                                                                                                                                                              ; nspr1  ld (ix+0),255       ; delete sprite.
1CBE  31A811                                  leay    TABSIZ,y                                                                                                                                                                ;                add ix,de           ; point to next sprite.
1CC1  5A                                      decb
1CC2  2601                                    bne     NSpr2                                                                                                                                                                   ;                djnz nspr2          ; one less to do.
1CC4  39                                      rts                                                                                                                                                                                     ;                ret
1CC5  86FF            NSpr2           lda     #255    
1CC7  A7A4                                    sta     ,y                                                                                                                                                                              ; nspr2  ld (ix+0),255       ; delete sprite.
1CC9  A725                                    sta     5,y                                                                                                                                                                     ;                ld (ix+5),255       ; remove next type.
1CCB  31A811                                  leay    TABSIZ,y                                                                                                                                                                ;                add ix,de           ; next sprite.
1CCE  5A                                      decb
1CCF  26F4                                    bne     NSpr2                                                                                                                                                                   ;                djnz nspr2          ; one less space in the table.
1CD1  39                                      rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Two initialisation routines.
                      ; Initialise sprites - copy everything from list to table.                                                              ; Initialise sprites - copy everything from list to table.
                      ; regX (HL) gets here pointing to the beginning of 1st sprite for that screen
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1CD2  C60C            ISpr            ldb     #NUMSPR                                         ; number of sprites in table                                    ; ispr   ld b,NUMSPR         ; sprite slots in table.
1CD4  108ED4D9                                ldy     #sprTab                                         ; point to destination table                                    ;                ld ix,sprtab        ; sprite table.
1CD8  A684            ISpr2           lda     ,x                                                              ; get a byte from source                                                ; ispr2  ld a,(hl)           ; fetch byte.
1CDA  81FF                                    cmpa    #255                                                    ; is it end marker?                                                             ;                cp 255              ; is it an end marker?
1CDC  2712                                    beq     ISprEx                                          ; yes, exit                                                                                     ;                ret z               ; yes, no more to do.
1CDE  A6A4            ISpr1           lda     ,y                                                              ; get a byte from destination                                   ; ispr1  ld a,(ix+0)         ; fetch sprite type.
1CE0  81FF                                    cmpa    #255                                                    ; is it enabled?                                                                        ;                cp 255              ; is it enabled yet?
1CE2  2606                                    bne     ISpr4                                                   ; yes, already in use, skip it                          ;                jr nz,ispr4         ; yes, try another slot.
1CE4  A625                                    lda     5,y                                                     ; get 1st byte next sprite                                              ;                ld a,(ix+5)         ; next type.
1CE6  81FF                                    cmpa    #255                                                    ; is it enabled?                                                                        ;                cp 255              ; is it enabled yet?
1CE8  2707                                    beq     ISpr3                                                   ; no, copy it                                                                           ;                jr z,ispr3          ; no, process this one.
1CEA  31A811          ISpr4           leay    TABSIZ,y                                                ; point to next destination sprite                      ; ispr4  ld de,TABSIZ        ; distance to next odd/even entry.
1CED  5A                                      decb                                                                    ; decrement counter                                                             ;                add ix,de           ; next sprite.
1CEE  26EE                                    bne     ISpr1                                                   ; not yet done? loopback                                                ;                djnz ispr1          ; repeat for remaining sprites.
1CF0  39              ISprEx  rts                                                                     ; return                                                                                                ;                ret                 ; no more room in table.
1CF1  BD1D25          ISpr3           jsr     CpSp                                                    ; Do copy sprite to destination                         ; ispr3  call cpsp           ; initialise a sprite.
1CF4  5A                                      decb                                                                    ; decrement counter
1CF5  26E1                                    bne     ISpr2                                                   ; not yet done? loopback                                                ;                djnz ispr2          ; one less space in the table.
1CF7  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Initialise sprites - but not player, we're keeping the old one                                                ; Initialise sprites - but not player, we're keeping the old one.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1CF8  C60C            KSpr            ldb     #NUMSPR                                                                                                                                                         ; kspr   ld b,NUMSPR         ; sprite slots in table.
1CFA  108ED4D9                                ldy     #sprTab                                                                                                                                                         ;                ld ix,sprtab        ; sprite table.
1CFE  A684            KSpr2           lda     ,x                                                                                                                                                                              ; kspr2  ld a,(hl)           ; fetch byte.
1D00  81FF                                    cmpa    #255                                                                                                                                                                    ;                cp 255              ; is it an end marker?
1D02  2720                                    beq     KSprEx                                                                                                                                                          ;                ret z               ; yes, no more to do.
1D04  4D                                      tsta                                                                                                                                                                                    ;                and a               ; is it a player sprite?
1D05  2604                                    bne     KSpr1                                                                                                                                                                   ;                jr nz,kspr1         ; no, add to table as normal.
                                                                                                                                                                                                                                              ;                ld de,NMESIZ        ; distance to next item in list.
1D07  3004                                    leax    NMESIZ,x                                                                                                                                                                ;                add hl,de           ; point to next one.
1D09  20F3                                    bra     KSpr2                                                                                                                                                                   ;                jr kspr2
1D0B  A6A4            KSpr1           lda     ,y                                                                                                                                                                              ; kspr1  ld a,(ix+0)         ; fetch sprite type.
1D0D  81FF                                    cmpa    #255                                                                                                                                                                    ;                cp 255              ; is it enabled yet?
1D0F  2606                                    bne     KSpr4                                                                                                                                                                   ;                jr nz,kspr4         ; yes, try another slot.
1D11  A625                                    lda     5,y                                                                                                                                                                     ;                ld a,(ix+5)         ; next type.
1D13  81FF                                    cmpa    #255                                                                                                                                                                    ;                cp 255              ; is it enabled yet?
1D15  2707                                    beq     KSpr3                                                                                                                                                                   ;                jr z,kspr3          ; no, process this one.
1D17                  KSpr4                                                                                                                                                                                                           ; kspr4  ld de,TABSIZ        ; distance to next odd/even entry.
1D17  31A811                                  leay    TABSIZ,y                                                                                                                                                                ;                add ix,de           ; next sprite.
1D1A  5A                                      decb
1D1B  26EE                                    bne     KSpr1                                                                                                                                                                   ;                djnz kspr1          ; repeat for remaining sprites.
1D1D  39                                      rts                                                                                                                                                                                     ;                ret                 ; no more room in table.
1D1E  BD1D25          KSpr3           jsr     CpSp                                                                                                                                                                    ; kspr3  call cpsp           ; copy sprite to table.
1D21  5A                                      decb
1D22  26DA                                    bne     KSpr2                                                                                                                                                                   ;                djnz kspr2          ; one less space in the table.
1D24  39              KSprEx  rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Copy sprite from list to table                                                                                                                                        ; Copy sprite from list to table
                      ; regB arrives with number of sprites to deal with (saved register)
                      ; regX points to source of data. regY points to destination
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1D25  3404            CpSp            pshs    b                                                               ; save working register
1D27  A680                                    lda     ,x+                                                     ; get a byte from source                                                ; cpsp   ld a,(hl)           ; fetch byte from table.
1D29  A7A4                                    sta     ,y                                                              ; save to destination                                                   ;                ld (ix+0),a         ; set up type.
1D2B  A725                                    sta     PAM1ST,y                                                ; set up type                                                                           ;                ld (ix+PAM1ST),a    ; set up type.
                                                                                                                                                                                                                                              ;                inc hl              ; move to next byte.
1D2D  A680                                    lda     ,x+                                                     ; get 2nd byte                                                                          ;                ld a,(hl)           ; fetch byte from table.
1D2F  A726                                    sta     6,y                                                     ; set up image                                                                          ;                ld (ix+6),a         ; set up image.
                                                                                                                                                                                                                                              ;                inc hl              ; move to next byte.
1D31  EC81                                    ldd     ,x++                                                    ; get 3rd and 4th byte                                                  ;                ld a,(hl)           ; fetch byte from table.
                                                                                                                                                                                                                                              ;                ld (ix+3),200       ; set initial coordinate off screen.
1D33  ED28                                    std     8,y                                                     ; set up coordinates                                                            ;                ld (ix+8),a         ; set up coordinate.
1D35  C6C8                                    ldb     #200                                                    ; use this value to                                                             ;                inc hl              ; move to next byte.
1D37  E723                                    stb     3,y                                                     ; set initial coordinate                                                ;                ld a,(hl)           ; fetch byte from table.
                                                                                                                                                                                                                                              ;                ld (ix+9),a         ; set up coordinate.
                                                                                                                                                                                                                                              ;                inc hl              ; move to next byte.
1D39  4F                                      clra                                                                    ; value zero                                                                            ;                xor a               ; zeroes in accumulator.
1D3A  A727                                    sta     7,y                                                     ; reset frame number                                                            ;                ld (ix+7),a         ; reset frame number.
1D3C  A72A                                    sta     10,y                                                    ; reset direction                                                                       ;                ld (ix+10),a        ; reset direction.
                                                                                                                                                                                                                                              ; ;       ld (ix+12),a        ; reset parameter B.
1D3E  A72D                                    sta     13,y                                                    ; reset jump pointer low                                                ;                ld (ix+13),a        ; reset jump pointer low.
1D40  A72E                                    sta     14,y                                                    ; reset jump pointer high.                                              ;                ld (ix+14),a        ; reset jump pointer high.
1D42  4A                                      deca
1D43  A7A810                                  sta     16,y                                                    ; reset data pointer to auto-restore            ;                ld (ix+16),255      ; reset data pointer to auto-restore.
1D46  3430                                    pshs    x,y                                                     ; save pointers                                                                 ;                push ix             ; store ix pair.
                                                                                                                                                                                                                                              ;                push hl             ; store hl pair.
                                                                                                                                                                                                                                              ;                push bc
1D48  BD228A          Evis0           jsr     Evnt09                                          ; perform event                                                                 ; evis0  call evnt09         ; perform event.
1D4B  3530                                    puls    x,y                                                     ; restore pointers                                                              ;                pop bc
                                                                                                                                                                                                                                              ;                pop hl              ; restore hl.
                                                                                                                                                                                                                                              ;                pop ix              ; restore ix.
                                                                                                                                                                                                                                              ;                ld de,TABSIZ        ; distance to next odd/even entry.
1D4D  31A811                                  leay    TABSIZ,y                                                ; poit to next sprite                                                   ;                add ix,de           ; next sprite.
1D50  3584                                    puls    b,pc                                                    ; restore counter and return                                    ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Clear the play area window                                                                                                                                            ; Clear the play area window.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1D52  DC77            ClW             ldd     <winTop                                         ; get WinTop,winLft                                                             ; clw    ld hl,(wintop)      ; get coordinates of window.
1D54  1F89                                    tfr     a,b                                                     ; A=Left(X), B=Top(Y)
1D56  DD25                                    std     <dispX                                          ; dispX=Left, dispY=Top                                                 ;                ld (dispx),hl       ; put into dispx for calculation.
1D58  9679                                    lda     <winHgt                                         ; get window height                                                             ;                ld a,(winhgt)       ; height of window.
1D5A  3402            ClW3            pshs    a                                                               ; save row counter                                                              ; clw3   push bc             ; store lines on stack.
1D5C  967A                                    lda     <winWid                                         ; get window width                                                              ;                ld a,(winwid)       ; width of window.
1D5E  97A0            ClW2            sta     <reg_A                                          ; save column counter                                                   ; clw2   ex af,af'           ; store column counter.
1D60  BD1481                                  jsr     GPrad                                                   ; returns result in regD (grBase)                       ;                call gprad          ; get print address.
1D63  1F01                                    tfr     d,x                                                     ; pass to screen pointer
1D65  4F                                      clra                                                                    ; get a null byte                                                                       ;                xor a               ; zero byute to write.
1D66  C608                                    ldb     #8                                                              ; number of pixel rows per char                         ;                ld b,8              ; pixel height of each cell.
1D68  A784            ClW1            sta     ,x                                                              ; clean one pixels row of the char                      ; clw1   ld (de),a           ; copy to screen.
1D6A  308820                                  leax    32,x                                                    ; point to pixels row below                                     ;                inc d               ; next screen row down.
1D6D  5A                                      decb                                                                    ; decrement pixels rows counter
1D6E  26F8                                    bne     ClW1                                                    ; not yet done? do next row (byte)                      ;                djnz clw1
                                                                                                                              ; no colour                                                                                     ;                call gaadd          ; get attribute address.
                                                                                                                              ; by now                                                                                                ;                ld a,(23693)        ; get colour.
                                                                                                                              ; here                                                                                          ;                ld (hl),a           ; write colour.
1D70  0C25                                    inc     <dispX                                          ; next column                                                                           ;                ld hl,dispy         ; column position.
                                                                                                                                                                                                                                              ;                inc (hl)            ; next column.
1D72  96A0                                    lda     <reg_A                                          ; get column counter                                                            ;                ex af,af'           ; restore column counter.
1D74  4A                                      deca                                                                    ; decrement it                                                                          ;                dec a               ; one less to do.
1D75  26E7                                    bne     ClW2                                                    ; not yet done? do next char in row                     ;                jr nz,clw2          ; repeat for remaining columns.
1D77  9678                                    lda     <winLft                                         ; get left edge                                                                 ;                ld a,(winlft)       ; get left edge.
1D79  9725                                    sta     <dispX                                          ; reset X position                                                              ;                ld (dispy),a        ; reset y.
1D7B  0C26                                    inc     <dispY                                          ; point to next char row                                                ;                ld hl,dispx         ; line.
                                                                                                                                                                                                                                              ;                inc (hl)            ; next line down.
1D7D  3502                                    puls    a                                                               ; get row counter                                                                       ;                pop bc              ; restore line counter.
1D7F  4A                                      deca                                                                    ; decrement it
1D80  26D8                                    bne     ClW3                                                    ; not yet done? do next row                                     ;                djnz clw3           ; repeat down the screen.
1D82  9E77                                    ldx     <winTop                                         ; get coordinates of top-left                                   ;                ld hl,(wintop)      ; get coordinates of window.
1D84  1F89                                    tfr     a,b                                                     ; invert them
1D86  9F1E                                    stx     <charX                                          ; put into variables                                                            ;                ld (charx),hl       ; put into display position.
1D88  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Effects code                                                                                                                                                                                  ; Effects code.
                      ; Called on each VSync for 6809 code                                                                                                                    ; Ticker routine is called 25 times per second.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; CONVERTED FOR TESTSCROLL - Only used one code line!
                      ; regX = reg_HL
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF SFLAG
                      Scrly                                                                                           ;                                                                                                               scrly:
                                              rts                                                                     ; will be a ldd txtScr                                                          rts
                                              fdb     txtScr                                          ; a=High, b=Low                                                                         .word txtscr            ; get left screen address.
                                                                                                                              ;                                                                                                                       sta scr_l
                                                                                                                              ;                                                                                                                       lda txtscr+1
                                              std     <scr_l                                          ; left screen address                                                           sta scr_l+1
                                                                                                                              ;                                                                                                                       sta scr_r+1
                                                                                                                              ;                                                                                                                       stx xtmp
                                                                                                                              ;                                                                                                                       clc                     ; get right screen address.
                                              addb    <txtWid                                         ; add width of window                                                           lda scr_l
                                              adca    #0                                                              ; pass carry                                                                                    adc txtwid
                                              subd    #1                                                              ; subtract one                                                                                  sta scr_r
                                              std     <scr_r                                          ; right screen address                                                          dec scr_r
                                              ldb     #8                                                              ; number of rows to work
                                              stb     <reg_B                                          ; into pseudoreg
                      Scrly1                                                                                  ;                                                                                                               scrly1:
                                              ldb     <txtWid                                         ; get window width                                                                      ldy txtwid              ; set txtwide
                                              decb                                                                    ; subtract one                                                                                  dey
                                              andcc   #%11111110                                      ; clear carry to enter zero by the right                clc
                                              ldx     <scr_l                                          ; point to left screen address
                      Scrly0                                                                                  ;                                                                                                               scrly0:
                                              lda     b,x                                                     ; get byte                                                                                              lda (scr_l),y           ; scroll 1 line
                                              rola                                                                    ; shift it left                                                                         rol a
                                              sta     b,x                                                     ; update screen                                                                         sta (scr_l),y
                                              decb                                                                    ; decrement width counter                                                       dey
                                              bpl     Scrly0                                          ; not done? do next char                                                        bpl scrly0
                                                                                                                              ;                                                                                                                       clc                     ; point to next line
                                                                                                                              ;                                                                                                                       lda scr_l
                                              leax    32,x                                                    ; point row below                                                                               adc #32
                                              stx     <scr_l                                          ; update pointer                                                                                sta scr_l
                                              dec     <reg_B                                          ; decrement row counter
                                              bne     Scrly1                                          ; not done? do next one                                                         bcc scrly1              ; repeat 8 times
                                              ldx     <txtPos                                         ; get text pointer                                                                      lda txtpos              ; get text pointer.
                                              stx     <scr_Txt                                                ; put at screen pointer                                                         sta scr_txt
                                                                                                                              ;                                                                                                                       lda txtpos+1
                                                                                                                              ; points to screen pointer                                                      sta scr_txt+1
                                                                                                                              ;                                                                                                                       ldy #0
                                              ldb     ,x                                                              ; get char                                                                                              lda (scr_txt),y                 ; find character we're displaying.
                                              andb    #%01111111                                      ; mask out bit 7                                                                                and #127                ; remove end marker bit if applicable.
                                              cmpb    #13                                                     ; is it Intro?                                                                                  cmp #13                 ; is it newline?
                                              bne     Scrly5                                          ; no, skip next                                                                         bne scrly5              ; no, it's okay.
                                              ldb     #32                                                     ; get space instead                                                                     lda #32                 ; convert to a space instead.
                      Scrly5                                                                                  ;                                                                                                               scrly5:
                                              clra                                                                    ; multiply                                                                                              sta fntaddr             ; calculate char address
                                              aslb                                                                    ; this                                                                                                  lda #0
                                              rola                                                                    ; value                                                                                                 sta fntaddr+1
                                              aslb                                                                    ; by 8                                                                                                  asl fntaddr             ; multiply char by 8.
                                              rola                                                                    ; to get                                                                                                        rol fntaddr+1
                                              aslb                                                                    ; offset                                                                                                        asl fntaddr
                                              rola                                                                    ; to desired char                                                                               rol fntaddr+1
                                                                                                                              ;                                                                                                                       asl fntaddr
                                                                                                                              ;                                                                                                                       rol fntaddr+1
                                                                                                                              ;                                                                                                                       lda fntaddr
                                              ldx     #font-256                                       ; point to FONT table -256                                                      clc
                                              leax    d,x                                                     ; now to desired char                                                           adc #<(FONT-256)
                                                                                                                              ;                                                                                                                       sta scrly3+1            ; that's the low byte.
                                                                                                                              ;                                                                                                                       lda fntaddr+1
                                                                                                                              ;                                                                                                                       adc #>(FONT-256)
                                              ldu     <scr_r                                          ; point to SCREEN                                                                               sta scrly3+2            ; add displacement.
                                              clrb                                                                    ; reset char byte counter                                                       ldx #0
                      Scrly3                                                                                  ;                                                                                                               scrly3:
                                              lda     b,x                                                     ; get byte from font table                                                      lda $3333,x             ; get image of char line.
                                              anda    <txtBit                                         ; mask with bit value                                                           and txtbit
                                              beq     Scrly2                                          ; if zero don't plot pixel                                                      beq scrly2              ; don't plot pixel
                                                                                                                              ;                                                                                                                       ldy scrline,x
                                                                                                                              ;                                                                                                                       lda (scr_r),y
                                              lda     ,u                                                              ; get byte at offset                                                                    lda (scr_r),y
                                                                                                                              ;                                                                                                                       clc
                                              ora     #1                                                              ; set bit 0                                                                                             ora #1
                                              sta     ,u                                                              ; update that byte                                                                      sta (scr_r),y           ; plot pixel
                      Scrly2  leau    32,u                                                    ; point to row below                                                                    scrly2:
                                              incb                                                                    ; increment counter                                                                     inx                     ; next line of char.
                                              cmpb    #8                                                              ; already 8?                                                                                    cpx #8
                                              bne     Scrly3                                          ; no, get nex byte from table                                           bne scrly3
                                              lsr     <txtBit                                         ; next bit to be displayed                                                      lsr txtbit              ; bit of text to display.
                                              bcs     1f                                                              ; if carry, skip next                                                           bcs :+
                                              rts                                                                     ; return                                                                                                        rts
                      1                                                                                                       ;                                                                                                               :
                                              clrb                                                                    ; clear counter                                                                         ldy #0
                                              ldx     <scr_Txt                                                ; get text pointer
                                              lda     b,x                                                     ; get char                                                                                              lda (scr_txt),y         ; what was the character?
                                              asla                                                                    ; end of message?                                                                               asl a                   ; end of message?
                                              bcs     Scrly4                                          ; yes, exit                                                                                             bcs scrly4
                                              inc     <txtPos+1                                       ; increment                                                                                             inc txtpos
                                              bne     2f                                                              ; pointer                                                                                               bne :+
                                              inc     <txtPos                                         ; to text                                                                                               inc txtpos+1
                      2                                                                                                       ;                                                                                                               :
                                              bra     Scrly6                                          ; loopback                                                                                              jmp scrly6              ; not yet - continue.
                      Scrly4                                                                                  ;                                                                                                               scrly4:
                                              ldd     <txtIni                                         ; get start of scrolling message                                        lda txtini              ; start of scrolling message.
                                              std     <txtPos                                         ; put into      text position                                                   sta txtpos
                                                                                                                              ;                                                                                                                       lda txtini+1
                                                                                                                              ;                                                                                                                       sta txtpos+1
                      Scrly6                                                                                  ;                                                                                                               scrly6:
                                              lda     #128                                                    ; set bit7                                                                                              lda #128
                                              sta     <txtBit                                         ; in bit variable                                                                               sta txtbit
                                                                                                                              ;                                                                                                                       ldx xtmp
                                              rts                                                                     ; return                                                                                                        rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; NEVER CALLED IN 6809 ENGINE
                      IScrly  jsr     Prescr                                          ; pass charXY to dispXY                                                 ; iscrly call prescr         ; set up display position.
                                              ldx     #msgDat                                         ; point to messages beginning                                   ;                ld hl,msgdat        ; text messages.
                                              lda     <reg_C                                          ; get width (number of chars ?)                         ;                ld a,b              ; width.
                                              deca                                                                    ; decrement it                                                                          ;                dec a               ; subtract one.
                                              cmpa    #32                                                     ; is it between 1-31?                                                   ;                cp 32               ; is it between 1 and 32?
                                              bcs     1f                                                              ; if lower than 32 skip disabling
                                              lda     #$39                                                    ; code for rts
                                              bra     IScrl0                                          ; to disable scrolling                                                  ;                jr nc,iscrl0        ; no, disable messages.
                      1                       lda     <reg_B                                          ; get message number                                                            ;                ld a,c              ; message number.
                                                                                                                                                                                                                                              ;                ld d,b              ; copy width to d.
                                              jsr     GetWrd                                          ; find beginning of message                                     ;                call getwrd         ; find message start.
                                                                                                                                                                                                                                              ;                ld b,d              ; restore width to b register.
                                              stx     <txtIni                                         ; set pointer to text beginning                         ;                ld (txtini),hl      ; set initial text position.
                                              lda     #$fc                                                    ; code for "ldd" extended addressing            ;                ld a,42             ; code for ld hl,(nn).
                      IScrl0  sta     Scrly                                                   ; modify code to enable routine                         ; iscrl0 ld (scrly),a        ; enable/disable scrolling routine.
                                              jsr     Prescr                                          ; pre-print routine                                                             ;                call prescr         ; set up display position.
                                              jsr     GPrad                                                   ; get print address                                                             ;                call gprad          ; get print address.
                                                                                                                                                                                                                                              ;                ld l,b              ; width in b so copy to hl.
                                                                                                                                                                                                                                              ;                ld h,0              ; no high byte.
                                                                                                                                                                                                                                              ;                dec hl              ; width minus one.
                                                                                                                                                                                                                                              ;                add hl,de           ; add width.
                                              std     <txtScr                                         ; set text screen pointer                                               ;                ld (txtscr),hl      ; set text screen address.
                                              lda     <reg_C                                          ; get width                                                                                     ;                ld a,b              ; width.
                                              sta     <txtWid                                         ; into variable                                                                 ;                ld (txtwid),a       ; set width in working storage.
                                                                                                                                                                                                                                              ;                ld hl,txtbit        ; bit of text to display.
                                              lda     #128                                                    ; set bit 7
                                              sta     <txtBit                                         ; in that byte                                                                          ;                ld (hl),128         ; start with leftmost bit.
                                              bra     Scrly4                                          ; exit updating pointer                                                 ;                jr scrly4
                              ENDIF
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Dig routine, conditional assembly depending on DFLAG
                      ; register A arrives with the dig direction
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF DFLAG                                                                                                                                                                                                ; .if dflag
                      Dig             ldy     <reg_IX                                         ; get sprite pointer                                                            ; dig:
                                              sta     <reg_A                                          ; save move direction
                                              ldd     8,y                                                     ; get Y and X coordinates
                      
                                              tst     <reg_A                                          ; was 0?                                                                                                ;       and #3
                                              beq     DigR                                                    ; yes, move right                                                                       ;       beq digr                ; dig right
                                              dec     <reg_A                                          ; was it 1?                                                                                     ;       cmp #1
                                              beq     DigL                                                    ; yes, move left                                                                        ;       beq digl                ; dig left
                                              dec     <reg_A                                          ; was it 2?                                                                                     ;       cmp #2
                                              beq     DigD                                                    ; yes, move down                                                                        ;       beq digd                ; dig down
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      DigU                                                                                            ; it was 3, move up                                                             ; digu:                         ; dig up
                                                                                                                                                                                                                                              ;       ldy #8
                                                                                                                                                                                                                                              ;       lda (z80_ix),y
                                                                                                                                                                                                                                              ;       sec
                                              suba    #2                                                              ; point 1st block above                                                 ;       sbc #2
                                                                                                                                                                                                                                              ;       sta dispy               ; set y
                                                                                                                                                                                                                                              ;       iny
                                                                                                                                                                                                                                              ;       lda (z80_ix),y
                                                                                                                                                                                                                                              ;       sta dispx               ; set x
                                              bra     DigV                                                    ; go move vertically                                                            ;       jmp digv
                                                                                                                                                                                                                                              ; 
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      DigD                                                                                                                                                                                                            ; digd:
                                                                                                                                                                                                                                              ;       ldy #9
                                                                                                                                                                                                                                              ;       lda (z80_ix),y
                                                                                                                                                                                                                                              ;       sta dispx               ; set y
                                                                                                                                                                                                                                              ;       dey
                                                                                                                                                                                                                                              ;       clc
                                                                                                                                                                                                                                              ;       lda (z80_ix),y
                                              adda    #16                                                     ; point to first block below                                    ;       adc #16
                                                                                                                                                                                                                                              ;       sta dispy               ; set y
                                                                                                                                                                                                                                              ;       jmp digv
                                                                                                                                                                                                                                              ; 
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                                                                                                                                                                              ; ; Vertical digging
                      DigV                                                                                                                                                                                                            ; digv:
                                                                                                                                                                                                                                              ;       jsr tstbl               ; check blocktype in MAP
                                              std     <dispX                                          ; update Y and X variables                                              ;       jsr fdchk               ; test if FODDER
                                              bsr     TstFod
                                                                                                                                                                                                                                              ;       clc
                                              lda     <dispY                                          ; get X variable                                                                        ;       lda dispx               ; look 1 cell down
                                              adda    #8                                                              ; point to block on the right                                   ;       adc #8
                                              sta     <dispY                                          ; update X variable                                                             ;       sta dispx
                                                                                                                                                                                                                                              ;       jsr tstbl               ; check blocktype in MAP
                                                                                                                                                                                                                                              ;       jsr fdchk
                                              bsr     TstFod
                                              lda     <dispY                                          ; get X variable                                                                        ;       lda dispx
                                              anda    #7                                                              ; test 3 lower bits                                                             ;       and #7
                                              bne     DigV1                                                   ; if not zero skip next                                                 ;       bne :+
                                              rts                                                                     ; return                                                                                                ;       rts
                      DigV1                                                                                                                                                                                                           ; :
                                                                                                                                                                                                                                              ;       clc
                                              lda     <dispY                                          ; get X variable                                                                        ;       lda dispx               ; look 1 cell down
                                              adda    #8                                                              ; point to next block on the right                      ;       adc #8
                                              sta     <dispY                                          ; update X variable                                                             ;       sta dispx
                                                                                                                                                                                                                                              ;       jsr tstbl               ; check blocktype in MAP
                                              bra     TstFod                                                                                                                                                          ;       jmp fdchk
                                      
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      DigL                                                                                                                                                                                                            ; digl:
                                                                                                                                                                                                                                              ;       ldy #8
                                                                                                                                                                                                                                              ;       lda (z80_ix),y
                                                                                                                                                                                                                                              ;       sta dispy               ; set y
                                                                                                                                                                                                                                              ;       iny
                                                                                                                                                                                                                                              ;       lda (z80_ix),y
                                                                                                                                                                                                                                              ;       sec
                                              subb    #2                                                              ; point to 1st block on the left                                ;       sbc #2                  ; x=x-2
                                                                                                                                                                                                                                              ;       sta dispx               ; set x
                                              bra     DigH                                                    ; go move horizontally                                                  ;       jmp digh
                                                                                                                                                                                                                                              ; 
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      DigR                                                                                                                                                                                                            ; digr:
                                                                                                                                                                                                                                              ;       ldy #8
                                                                                                                                                                                                                                              ;       lda (z80_ix),y
                                                                                                                                                                                                                                              ;       sta dispy               ; set y
                                                                                                                                                                                                                                              ;       iny
                                                                                                                                                                                                                                              ;       lda (z80_ix),y
                                                                                                                                                                                                                                              ;       clc
                                              addb    #16                                                     ; point to 1st block on the right                       ;       adc #16
                                                                                                                                                                                                                                              ;       sta dispx               ; set x+16
                                                                                                                                                                                                                                              ;       jmp digh
                                                                                                                                                                                                                                              ; 
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                                                                                                                                                                              ; ; Horizontal digging
                      DigH                                                                                                                                                                                                            ; digh:
                                                                                                                                                                                                                                              ;       jsr tstbl               ; check blocktype in MAP
                                              std     <dispX                                          ; update Y and X variables                                              ;       jsr fdchk               ; test if FODDER
                                              bsr     TstFod
                                                                                                                                                                                                                                              ;       clc
                                              lda     <dispX                                          ; get Y variable                                                                        ;       lda dispy               ; look 1 cell down
                                              adda    #8                                                              ; point to next block below                                     ;       adc #8
                                              sta     <dispX                                          ; update Y variable                                                             ;       sta dispy
                                                                                                                                                                                                                                              ;       jsr tstbl               ; check blocktype in MAP
                                                                                                                                                                                                                                              ;       jsr fdchk
                                              bsr     TstFod
                                              lda     <dispX                                          ; get Y variable                                                                        ;       lda dispy
                                              anda    #7                                                              ; test 3 lower bits                                                             ;       and #7
                                              bne     DigH1                                                   ; if not zero skip next                                                 ;       bne :+
                                              rts                                                                     ; return                                                                                                ;       rts
                      DigH1                                                                                                                                                                                                           ; :
                                                                                                                                                                                                                                              ;       clc
                                              lda     <dispX                                          ; get Y variable                                                                        ;       lda dispy               ; look 1 cell down
                                              adda    #8                                                              ; point to next block below                                     ;       adc #8
                                              sta     <dispX                                          ; update Y variable                                                             ;       sta dispy
                                                                                                                                                                                                                                              ;       jsr tstbl               ; check blocktype in MAP
                                                                                                                                                                                                                                              ;       jmp fdchk
                                                                                                                                                                                                                                              ; digcnt:       .byte 0
                                                                                                                                                                                                                                              ; 
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      TstFod  ldd     <dispX                                          ; get both variables
                                              pshs    d                                                               ; save onto stack
                                              jsr     TstBl                                                   ; check type of pointed block in map
                                              jsr     FdChk                                                   ; clean it if it is Fodder
                                              puls    d                                                               ; restore pushed values
                                              std     <dispX                                          ; set variables again
                                              rts                                                                     ; return
                              ENDIF                                                                                                                                                                                                   ; .endif
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Sprite table.
                                                                                                                                                                                                                                              ; ix+0  = type.
                                                                                                                                                                                                                                              ; ix+1  = sprite image number.
                                                                                                                                                                                                                                              ; ix+2  = frame.
                                                                                                                                                                                                                                              ; ix+3  = x coord.
                                                                                                                                                                                                                                              ; ix+4  = y coord.
                      
                                                                                                                                                                                                                                              ; ix+5  = new type.
                                                                                                                                                                                                                                              ; ix+6  = new image number.
                                                                                                                                                                                                                                              ; ix+7  = new frame.
                                                                                                                                                                                                                                              ; ix+8  = new x coord.
                                                                                                                                                                                                                                              ; ix+9  = new y coord.
                      
                                                                                                                                                                                                                                              ; ix+10 = direction.
                                                                                                                                                                                                                                              ; ix+11 = parameter 1.
                                                                                                                                                                                                                                              ; ix+12 = parameter 2.
                                                                                                                                                                                                                                              ; ix+13 = jump pointer low.
                                                                                                                                                                                                                                              ; ix+14 = jump pointer high.
                                                                                                                                                                                                                                              ; ix+15 = data pointer low.
                                                                                                                                                                                                                                              ; ix+16 = data pointer high.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; User routine.  Put your own code in here to be called with USER instruction.
                      ; if USER has an argument it will be passed in the accumulator.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1D89  39              User   rts
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                               END OF STD ENGINE ###1
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                       NEW functions added to the script AGD system ###2
                      ; -----------------------------------------------------------------------       
                      ; Sets the foreground mask at andeor so that foreground pixels 
                      ; that are red designed do convert to the FG desired colour
                      ; when finally eor BG mask is applied
                      ; receives colour at register A (0-1-2-3)
                      ; -----------------------------------------------------------------------       
1D8A  8403            SetFGcol        anda    #3                                                              ; avoid values greater than 3
1D8C  8E1DA5                                  ldx     #codCol                                         ; point to colour table
1D8F  E686                                    ldb     a,x                                                     ; get its value
1D91  200D                                    bra     CalFGC                                          ; calculate AND mask
                      ; -----------------------------------------------------------------------       
                      ; -----------------------------------------------------------------------       
                      ; Sets the background mask at andeor+1 so that background pixels 
                      ; that are green designed do convert to the BG desired colour
                      ; At the same time corrects the mask for foreground colour
                      ; receives colour at register A (0-1-2-3)
                      ; -----------------------------------------------------------------------       
1D93  8403            SetBGcol        anda    #3                                                              ; avoid values greater than 3
1D95  8E1DA5          CalBGC  ldx     #codCol                                         ; point to colours table
1D98  A686                                    lda     a,x                                                     ; get chosen one
1D9A  D686                                    ldb     <andeor                                         ; get value for FG colour
1D9C  D887                                    eorb    <andeor+1                                       ; calculate 'real' desired colour
1D9E  9787                                    sta     <andeor+1                                       ; set new value for Backgroud (EOR mask)
1DA0  D887            CalFGC  eorb    <andeor+1                                       ; apply eor with current BG colour to current FG
1DA2  D786                                    stb     <andeor                                         ; save as value for Foreground (AND mask)
1DA4  39              CalEx1  rts                                                                     ; return
                      ; -----------------------------------------------------------------------       
                                                                                                                              ; GREEN - YELLOW - BLUE - RED
1DA5  0055AAFF        codCol  fcb     $00,$55,$aa,$ff                 ; values for 4 pixels coloured 
                      ; -----------------------------------------------------------------------       
                      
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                       6809 Added constants, variables and subroutines ###3
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
A000                  READKEY         equ     $a000                                           ; indirect call to read keyboard (both machines)
0152                  KEYMATRIX       equ     $0152
E600                  SCRBEG          equ     $e600                                           ; to make it CoCo-Compatible (with discs)
FE00                  SCREND          equ     SCRBEG+$1800                    ; $e600+6144=$fe00
                              IF GFLAG
                      scrMode         equ     $e0                                             ; $e0   PMODE3 green palete
                                                                                                                              ; $e8 PMODE3 buff palete
                              ELSE
00F8                  scrMode         equ     $f8                                             ; $f8 PMODE4 artifacted colors
                                                                                                                              ; $f0 PMODE4 green monochrome
                              ENDIF
FF22                  setPIA          equ     $ff22                                           ; Screen selection address
00C0                  SCRROWS         equ     192                                             ; number of screen rows
0113                  TIMER                   equ     $0113                                           ; IRQ managed 1 byte timer
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; switch to MAP1 copying only the Basic Interpreter, NO DOS
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1DA9  8E015E          SwMap1  ldx     #$015e                                          ; point to hooks beginning
1DAC  8639                                    lda     #$39                                                    ; opcode for RTS
1DAE  A780            SwML01  sta     ,x+                                                     ; disable hoop
1DB0  8C01A9                                  cmpx    #$1a9                                                   ; got to the end?
1DB3  25F9                                    blo     SwML01                                          ; no, loopback
1DB5  8E8000                                  ldx     #$8000                                          ; point to std BASIC ROM
1DB8  B7FFDE          SwML02  sta     $ffde                                                   ; switch to MAP0 (RAM-ROM)
1DBB  EC84                                    ldd     ,x                                                              ; get a word
1DBD  B7FFDF                                  sta     $ffdf                                                   ; switch to MAP1 (all 64k RAM)
1DC0  ED81                                    std     ,x++                                                    ; put at destination
1DC2  8CC000                                  cmpx    #$c000                                          ; copied full ROMs?
1DC5  25F1                                    blo     SwML02                                          ; no, loopback
1DC7  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; exit the program and return to the Interpreter 
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1DC8  113D00          ExitGame        fcb     $11,$3d,$00                                     ; ldmd #0 (enter emulation mode)
1DCB  7F0071                                  clr     $71                                                     ; set cold restart
1DCE  B7FFDE                                  sta     $ffde                                                   ; back to MAP0
1DD1  1CAF                                    andcc   #$af                                                    ; enable interrupts
1DD3  6E9FFFFE                                jmp     [$fffe]                                         ; restart computer
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; reads keyboard returns keypress in A (zero or a column number)
                      ;  changed to avoid last ROM call. Now 1st RAM page is free for variables!!
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1DD7  AD9FA000        ReadK           jsr     [READKEY]                                       ; system call to read keyboard
1DDB  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Sets the graphic Mode and points to the graph page beginning
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1DDC  B7FFC0          SetPMode        sta     $ffc0                                                   ; set SAM
1DDF  B7FFC3                                  sta     $ffc3                                                   ;   for 
1DE2  B7FFC5                                  sta     $ffc5                                                   ;   PMODE4
1DE5  86F8                                    lda     #scrMode                                                ; set PIA
1DE7  B7FF22                                  sta     setPIA                                          ;   to PM4 green palete
                                                                                                                      ; set page = $e600/$200 = $73 = 115 = %1110011
1DEA  B7FFD3                                  sta     $ffd3                                                   ; bit6 = 1
1DED  B7FFD1                                  sta     $ffd1                                                   ; bit5 = 1
1DF0  B7FFCF                                  sta     $ffcf                                                   ; bit4 = 1
1DF3  B7FFCC                                  sta     $ffcc                                                   ; bit3 = 0
1DF6  B7FFCA                                  sta     $ffca                                                   ; bit2 = 0
1DF9  B7FFC9                                  sta     $ffc9                                                   ; bit1 = 1
1DFC  B7FFC7                                  sta     $ffc7                                                   ; bit0 = 1
1DFF  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; config DAC sound and VSync detection at the end of frame
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1E00  5F              CfgHdw  clrb                                                                    ; flag for Dragon machine
1E01  B6FFFE                                  lda     $fffe                                                   ; read high byte for Reset address
1E04  81B3                                    cmpa    #$b3                                                    ; is it a Dragon? ($b3b4)
1E06  2701                                    beq     CfgHdw1                                         ; yes, skip next
1E08  5C                                      incb                                                                    ; set flag for CoCo machine
1E09  D72F            CfgHdw1 stb     <cocoFlg                                                ; write to variable
1E0B  C60B                                    ldb     #keysD-keys                                     ; get offset to Dragon codes
1E0D  0D2F                                    tst     <cocoFlg                                                ; is this a CoCo?
1E0F  2702                                    beq     CfgNoCC                                         ; no, skip next
1E11  C616                                    ldb     #keysC-keys                                     ; get offset to CoCo codes
1E13  D730            CfgNoCC stb     <scanOff                                                ; offset for scanning keys / joysticks
1E15  B6FF01                                  lda     $ff01                                                   ; get config PIA0-SideA
1E18  84F4                                    anda    #%11110100                                      ; reset LSB of MUX. Disable HS IRQ to CPU
1E1A  B7FF01                                  sta     $ff01                                                   ; update config PIA0-SideA
1E1D  B6FF03                                  lda     $ff03                                                   ; get config PIA0-SideB
1E20  84F4                                    anda    #%11110100                                      ; reset MSB of MUX -> %00 select DAC sound. Flag set on falling edge
1E22  8A01                                    ora     #%00000001                                      ; Enable FS IRQ to CPU
1E24  B7FF03                                  sta     $ff03                                                   ; update config PIA0-SideB
1E27  7FFF20                                  clr     $ff20                                                   ; set zero sound volume
1E2A  B6FF23                                  lda     $ff23                                                   ; get config PIA1-SideB
1E2D  8A08                                    ora     #%00001000                                      ; enable DAC sound
1E2F  B7FF23                                  sta     $ff23                                                   ; update config PIA1-SideB
1E32  8E1E3B                                  ldx     #IRQHndlr                                       ; get new IRQ dispatcher address
1E35  BF010D                                  stx     $010d                                                   ; set in system hook
1E38  1CEF                                    andcc   #$ef                                                    ; allow IRQ                     
1E3A  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; new IRQ Handler (for Vertical Blanking interrupt)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1E3B  B6FF03          IRQHndlr        lda     $ff03                                                   ; is an FS IRQ?
1E3E  2B01                                    bmi     IRQRcvd                                         ; yes, skip next
1E40  3B                                      rti                                                                     ; return from interrupt
1E41  B6FF02          IRQRcvd lda     $ff02                                                   ; clear flag
1E44  7C0113                                  inc     TIMER                                                   ; increment counter
1E47  3B                                      rti                                                                     ; return from interrupt
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                              ; interchanges contents of registers BC, DE and HL with their mirrors (Z80 exx opcode)
                                                                                                                              ; here they are: reg_BC, reg_DE, reg_HL with esp_BC, esp_DE, esp_HL
1E48  3450            do_exx  pshs    x,u                                                     ; save registers
1E4A  9EA2                                    ldx     <reg_BC                                         ; get register BC
1E4C  DEB0                                    ldu     <esp_BC                                         ; get mirror BC
1E4E  9FB0                                    stx     <esp_BC                                         ; put register into mirror
1E50  DFA2                                    stu     <reg_BC                                         ; put mirror into register
1E52  9EA4                                    ldx     <reg_DE                                         ; get register DE
1E54  DEB2                                    ldu     <esp_DE                                         ; get mirror DE
1E56  9FB2                                    stx     <esp_DE                                         ; put register into mirror
1E58  DFA4                                    stu     <reg_DE                                         ; put mirror into register
1E5A  9EA6                                    ldx     <reg_HL                                         ; get register HL
1E5C  DEB4                                    ldu     <esp_HL                                         ; get mirror HL
1E5E  9FB4                                    stx     <esp_HL                                         ; put register into mirror
1E60  DFA6                                    stu     <reg_HL                                         ; put mirror into register
1E62  35D0                                    puls    x,u,pc                                          ; restore registers and return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1E64  8E0000          SetVars ldx     #$0000                                          ; poit to the beginning of variables - pointers
1E67  C638                                    ldb     #NUMVAR                                         ; set counter
1E69  4F                                      clra                                                                    ; create a 
1E6A  A780            SetMore sta     ,x+                                                     ; initialize 1 byte
1E6C  5A                                      decb                                                                    ; got past end?
1E6D  26FB                                    bne     SetMore                                         ; no, loop
1E6F  8E1EAF                                  ldx     #valTable                                       ; point to values table
1E72  108E006A                                ldy     #wnTopX                                         ; point to first variable to be set
1E76  C613                                    ldb     #(endTabV-valTable)/2   ; 10 words to be copied
1E78  EE81            GetVVal ldu     ,x++                                                    ; get one word  
1E7A  EFA1                                    stu     ,y++                                                    ; put into two variables or a pointer   
1E7C  5A                                      decb                                                                    ; decrement counter
1E7D  26F9                                    bne     GetVVal                                         ; not yet done, loop
1E7F  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; KeyGet - Calculates mask and value expected for row
                      ; Input: <reg_A = index to choice to modify (0-10)
                      ; Output: none
                      ; Effect: modifies 2 tables: keys and (keysD or keysC (upon machine))
                      ; at the requested index with calculated values on the key pressed
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; offset from keys to keysD = +11, to keysC = +22
                      ; <scanOff has the correct value for the machine being run
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1E80  AD9FA000        KGet            jsr     [READKEY]                                       ; read keyboard
1E84  27FA                                    beq     KGet                                                    ; no keypress? loopback
1E86  86FF                                    lda     #$ff                                                    ; no column
1E88  1CFE                                    andcc   #%11111110                                      ; clear carry. This is the zero to move left
1E8A  8E0152                                  ldx     #KEYMATRIX                                      ; point to 1st column
1E8D  49              KGet01  rola                                                                    ; create columns mask sequence: $FE-$FD-$FB-$F7-$EF-$DF-$BF-$7F
1E8E  E680                                    ldb     ,x+                                                     ; read this column result
1E90  C1FF                                    cmpb    #255                                                    ; any key pressed?
1E92  2608                                    bne     KGetFnd                                         ; yes, process it
1E94  817F                                    cmpa    #$7f                                                    ; all columns verified?
1E96  2716                                    beq     KGetEx                                          ; yes, exit. Should NEVER happen with 'normal' keystrokes
1E98  1A01                                    orcc    #%00000001                                      ; set carry. A one must enter by the right
1E9A  20F1                                    bra     KGet01                                          ; read next column
1E9C  D7A2            KGetFnd stb     <reg_B                                          ; save column received value
1E9E  8E677D                                  ldx     #keys                                                   ; point to offsets table
1EA1  D6A0                                    ldb     <reg_A                                          ; get offset to requested choice to be modified
1EA3  3A                                      abx                                                                     ; point to requested choice
1EA4  A784                                    sta     ,x                                                              ; update offset with calculated one
1EA6  C6FF                                    ldb     #$ff                                                    ; get no key
1EA8  D0A2                                    subb    <reg_B                                          ; subtract received value. Result = expected value for key
1EAA  9630                                    lda     <scanOff                                                ; get offset to expected values for current computer
1EAC  E786                                    stb     a,x                                                     ; update expected value. Only on table for the current computer
1EAE  39              KGetEx  rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Initial values to be assigned to some variables 
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1EAF  080888          valTable        fcb     8*WINDOWTOP,8*WINDOWLFT,WINDOWTOP*8+WINDOWHGT*8-16              ; wnTopX,wnLftX,wnBotX
1EB2  E8                                      fcb     WINDOWLFT*8+WINDOWWID*8-16                                                                              ; wnRgtX
1EB3  00FF03FFFEFF228010                         fcb     $00,$ff,$03,255,254,255,34,128,16                                                       ; scNo,varOpt,numLif,varRnd,varObj,varBlk,roomTb,txtBit,txtWid
1EBC  0101121E18                              fcb     WINDOWTOP,WINDOWLFT,WINDOWHGT,WINDOWWID,NUMOBJ                  ; winTop,winLft,winHgt,winWid,numOb
1EC1  4C342A0A2CDA4C545F01FF00                         fdb     frmLst,chgFx,bProp,scDat,nmeDat,$ff00                                           ; frmPtr,blkPtr,proPtr,scrPtr,nmePtr,andeor
1ECD  273E0000273EE600                         fdb     msgDat,$0000,msgDat,SCRBEG                                                                              ; txtPos,zero16b,tstIni,tstScr
1ED5                  endTabV equ     *
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1ED5  10865555        Set6309 fcb   $10,$86,$55,$55                   ; ldw   #$5555  (load the double register W = regE+regF)
1ED9  1F61                                    fcb   $1f,$61                                           ; tfr   w,x             (transfer to regX)
1EDB  8CFFFF                                  cmpx  #$ffff                                            ; did it fail?  (will fail on a 6809)
1EDE  2703                                    beq   ES6309                                            ; yes, skip next                                                
1EE0  113D01                                  fcb   $11,$3d,$01                               ; ldmd  #$01    (enter native mode)
1EE3  39              ES6309  rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1EE4                  EndMotor        equ     *
10E4                  MotorLen        equ     EndMotor-Start
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      
0001                  WINDOWTOP equ 1
0001                  WINDOWLFT equ 1
0012                  WINDOWHGT equ 18
001E                  WINDOWWID equ 30 ;a
0009                  MAPWID  equ 9
1EE4  FFFFFFFFFFFFFFFFFF         fcb 255,255,255,255,255,255,255,255,255
1EED                  mapDat
1EED  FFFFFFFF00FFFFFFFFFFFF0102030405FFFFFF060708090A0BFFFFFF0C0D0E0F101112FFFF131415FFFFFFFFFF         fcb 255,255,255,255,0,255,255,255,255,255,255,1,2,3,4,5,255,255,255,6,7,8,9,10,11,255,255,255,12,13,14,15,16,17,18,255,255,19,20,21,255,255,255,255,255
1F1A  FFFFFFFFFFFFFFFFFF         fcb 255,255,255,255,255,255,255,255,255
1F23  04              stMap   fcb 4
                      
1F24                  Evnt00 
1F24  C606                    ldb  #CUSTOM    ; CUSTOM
1F26  D7A2                    stb  <reg_B
1F28  BD16A0                  jsr  TDed
1F2B  91A2                    cmpa <reg_B
1F2D                          CONDJMP "bne", a00036
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F2D  26                                      fcb     com_\1
1F2E  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F2F  0C14                    inc  <varP
1F31  8628            a00036  lda  #40
1F33  9114                    cmpa <varP
1F35                          CONDJMP "bcc", a00061
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F35  24                                      fcb     com_\1
1F36  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F37  8628                    lda  #40
1F39  9714                    sta  <varP
1F3B  9600            a00061  lda  <joyVal    ; KEY
1F3D  8420                    anda #32
1F3F                          CONDJMP "beq", a00098
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F3F  27                                      fcb     com_\1
1F40  08                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F41  8603                    lda  #3         ; MENU
1F43  BD0E28                  jsr  MMenu
1F46  BD108C                  jsr  ReDraw     ; REDRAW
1F49  86FF            a00098  lda  #255
1F4B  9106                    cmpa <varB
1F4D                          CONDJMP "bne", a00149
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F4D  26                                      fcb     com_\1
1F4E  0E                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F4F  86FF                    lda  #255
1F51  9107                    cmpa <varC
1F53                          CONDJMP "bne", a00149
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F53  26                                      fcb     com_\1
1F54  08                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F55  A628                    lda  8,y
1F57  9706                    sta  <varB
1F59  A629                    lda  9,y
1F5B  9707                    sta  <varC
1F5D  6C2B            a00149  inc  11,y
1F5F  8602                    lda  #2
1F61  A12B                    cmpa 11,y
1F63                          CONDJMP "bcc", a00174
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F63  24                                      fcb     com_\1
1F64  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F65  6F2B                    clr  11,y
1F67  BD12FC          a00174  jsr  SkObj      ; DETECTOBJECT
1F6A  9772                    sta  <varObj
1F6C  8603                    lda  #3
1F6E  9172                    cmpa <varObj
1F70                          CONDJMP "bcc", a00233
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F70  24                                      fcb     com_\1
1F71  0A                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F72  860A                    lda  #10
1F74  9172                    cmpa <varObj
1F76                          CONDJMP "bcs", a00233
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F76  25                                      fcb     com_\1
1F77  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F78  865A                    lda  #90        ; BEEP
1F7A  972B                    sta  <sndTyp
1F7C  86FF            a00233  lda  #255
1F7E  9172                    cmpa <varObj
1F80                          CONDJMP "bne", a00258
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F80  26                                      fcb     com_\1
1F81  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F82                          CONDJMP "bra", a00297
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F82  20                                      fcb     com_\1
1F83  11                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F84  9672            a00258  lda  <varObj    ; GET
1F86  BD1283                  jsr  GetOb
1F89  CC000A                  ldd  #10        ; SCORE
1F8C  DDA6                    std  <reg_HL
1F8E  BD13EA                  jsr  AddSc
1F91  865A                    lda  #90        ; BEEP
1F93  972B                    sta  <sndTyp
1F95  BD1C71          a00297  jsr  TFall      ; TABLEFALL
1F98  860C                    lda  #12
1F9A  A128                    cmpa 8,y
1F9C                          CONDJMP "bcs", a00341
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1F9C  25                                      fcb     com_\1
1F9D  09                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1F9E  867E                    lda  #126
1FA0  A728                    sta  8,y
1FA2  BD1B72                  jsr  ScrU       ; SCREENUP
1FA5  0F08                    clr  <varD
1FA7  8684            a00341  lda  #132
1FA9  A128                    cmpa 8,y
1FAB                          CONDJMP "bcc", a00379
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1FAB  24                                      fcb     com_\1
1FAC  09                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1FAD  860D                    lda  #13
1FAF  A728                    sta  8,y
1FB1  BD1B79                  jsr  ScrD       ; SCREENDOWN
1FB4  0F08                    clr  <varD
1FB6  9600            a00379  lda  <joyVal    ; KEY
1FB8  8401                    anda #1
1FBA                          CONDJMP "beq", a00513
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1FBA  27                                      fcb     com_\1
1FBB  29                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1FBC  86E6                    lda  #230
1FBE  A129                    cmpa 9,y
1FC0                          CONDJMP "bcc", a00447
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1FC0  24                                      fcb     com_\1
1FC1  0C                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1FC2  BD1B6C                  jsr  ScrR       ; SCREENRIGHT
1FC5  0F08                    clr  <varD
1FC7  8610                    lda  #16
1FC9  A729                    sta  9,y
1FCB  39                      rts             ; EXIT
1FCC                          CONDJMP "bra", a00513
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1FCC  20                                      fcb     com_\1
1FCD  17                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1FCE  BD1647          a00447  jsr  CanGR      ; CANGORIGHT
1FD1                          CONDJMP "bne", a00513
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1FD1  26                                      fcb     com_\1
1FD2  12                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1FD3  6F26                    clr  6,y
1FD5  4F                      clra            ; ANIMATE
1FD6  BD1A8B                  jsr  AnimSp
1FD9  6D2B                    tst  11,y
1FDB                          CONDJMP "bne", a00501
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1FDB  26                                      fcb     com_\1
1FDC  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1FDD  8605                    lda  #5 ; BEEP
1FDF  972B                    sta  <sndTyp
1FE1  6C29            a00501  inc  9,y        ; SPRITERIGHT
1FE3  6C29                    inc  9,y
1FE5  9600            a00513  lda  <joyVal    ; KEY
1FE7  8402                    anda #2
1FE9                          CONDJMP "beq", a00650
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1FE9  27                                      fcb     com_\1
1FEA  2B                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1FEB  8608                    lda  #8
1FED  A129                    cmpa 9,y
1FEF                          CONDJMP "bcs", a00580
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1FEF  25                                      fcb     com_\1
1FF0  0C                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1FF1  BD1B55                  jsr  ScrL       ; SCREENLEFT
1FF4  0F08                    clr  <varD
1FF6  86E4                    lda  #228
1FF8  A729                    sta  9,y
1FFA  39                      rts             ; EXIT
1FFB                          CONDJMP "bra", a00650
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
1FFB  20                                      fcb     com_\1
1FFC  19                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
1FFD  BD1638          a00580  jsr  CanGL      ; CANGOLEFT
2000                          CONDJMP "bne", a00650
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2000  26                                      fcb     com_\1
2001  14                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2002  8601                    lda  #1
2004  A726                    sta  6,y
2006  4F                      clra            ; ANIMATE
2007  BD1A8B                  jsr  AnimSp
200A  6D2B                    tst  11,y
200C                          CONDJMP "bne", a00638
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
200C  26                                      fcb     com_\1
200D  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
200E  8605                    lda  #5 ; BEEP
2010  972B                    sta  <sndTyp
2012  6A29            a00638  dec  9,y        ; SPRITELEFT
2014  6A29                    dec  9,y
2016  9600            a00650  lda  <joyVal    ; KEY
2018  8410                    anda #16
201A                          CONDJMP "beq", a00710
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
201A  27                                      fcb     com_\1
201B  0E                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
201C  BD1754                  jsr  Hop            ; TABLEJUMP
201F  BD1601                  jsr  CanGD      ; CANGODOWN
2022                          CONDJMP "bne", a00699
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2022  26                                      fcb     com_\1
2023  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2024                          CONDJMP "bra", a00710
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2024  20                                      fcb     com_\1
2025  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2026  863C            a00699  lda  #60        ; BEEP
2028  972B                    sta  <sndTyp
202A  C605            a00710  ldb  #DEADLY    ; DEADLY
202C  D7A2                    stb  <reg_B
202E  BD16A0                  jsr  TDed
2031  91A2                    cmpa <reg_B
2033                          CONDJMP "bne", a00752
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2033  26                                      fcb     com_\1
2034  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2035  8623                    lda  #deadF     ; KILL
2037  9723                    sta  <deadF
2039  7E1B99          a00752  jmp  Grav
203C                  Evnt01 
203C  8603                    lda  #3
203E  A126                    cmpa 6,y
2040                          CONDJMP "bne", b00033
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2040  26                                      fcb     com_\1
2041  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2042  8601                    lda  #1
2044  A72C                    sta  12,y
2046                          CONDJMP "bra", b00042
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2046  20                                      fcb     com_\1
2047  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2048  8601            b00033  lda  #1
204A  A72C                    sta  12,y
204C  6D2B            b00042  tst  11,y
204E                          CONDJMP "bne", b00198
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
204E  26                                      fcb     com_\1
204F  33                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2050  A62C                    lda  12,y       ; REPEAT
2052  9702                    sta  <loopA
2054  BD1638          b00066  jsr  CanGL      ; CANGOLEFT
2057                          CONDJMP "bne", b00153
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2057  26                                      fcb     com_\1
2058  1C                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2059  6A29                    dec  9,y        ; SPRITELEFT
205B  6A29                    dec  9,y
205D  8610                    lda  #16
205F  40                      nega
2060  AB29                    adda 9,y
2062  A729                    sta  9,y
2064  BD1601                  jsr  CanGD      ; CANGODOWN
2067                          CONDJMP "bne", b00132
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2067  26                                      fcb     com_\1
2068  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2069  8601                    lda  #1
206B  A72B                    sta  11,y
206D  8610            b00132  lda  #16
206F  AB29                    adda 9,y
2071  A729                    sta  9,y
2073                          CONDJMP "bra", b00161
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2073  20                                      fcb     com_\1
2074  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2075  8601            b00153  lda  #1
2077  A72B                    sta  11,y
2079  0A02            b00161  dec  <loopA     ; ENDREPEAT
207B                          CONDJMP "bne",       b00066
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
207B  26                                      fcb     com_\1
207C  D7                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
207D  4F                      clra            ; ANIMATEBACK
207E  BD1AA6                  jsr  AnimBk
2081                          CONDJMP "bra", b00325
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2081  20                                      fcb     com_\1
2082  2D                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2083  A62C            b00198  lda  12,y       ; REPEAT
2085  9702                    sta  <loopA
2087  BD1647          b00209  jsr  CanGR      ; CANGORIGHT
208A                          CONDJMP "bne", b00293
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
208A  26                                      fcb     com_\1
208B  1A                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
208C  6C29                    inc  9,y        ; SPRITERIGHT
208E  6C29                    inc  9,y
2090  8610                    lda  #16
2092  AB29                    adda 9,y
2094  A729                    sta  9,y
2096  BD1601                  jsr  CanGD      ; CANGODOWN
2099                          CONDJMP "bne", b00269
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2099  26                                      fcb     com_\1
209A  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
209B  6F2B                    clr  11,y
209D  8610            b00269  lda  #16
209F  40                      nega
20A0  AB29                    adda 9,y
20A2  A729                    sta  9,y
20A4                          CONDJMP "bra", b00297
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20A4  20                                      fcb     com_\1
20A5  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20A6  6F2B            b00293  clr  11,y
20A8  0A02            b00297  dec  <loopA     ; ENDREPEAT
20AA                          CONDJMP "bne",       b00209
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20AA  26                                      fcb     com_\1
20AB  DB                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20AC  4F                      clra            ; ANIMATE
20AD  BD1A8B                  jsr  AnimSp
20B0  8600            b00325  lda  #0 ; COLLISION
20B2  97A2                    sta  <reg_B
20B4  BD1AC0                  jsr  SkTyp
20B7                          CONDJMP "bcc", b00361
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20B7  24                                      fcb     com_\1
20B8  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20B9  8623                    lda  #deadF     ; KILL
20BB  9723                    sta  <deadF
20BD  39              b00361  rts
20BE                  Evnt02 
20BE  8605                    lda  #5
20C0  A126                    cmpa 6,y
20C2                          CONDJMP "bne", c00033
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20C2  26                                      fcb     com_\1
20C3  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20C4  8602                    lda  #2
20C6  A72C                    sta  12,y
20C8                          CONDJMP "bra", c00042
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20C8  20                                      fcb     com_\1
20C9  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20CA  8601            c00033  lda  #1
20CC  A72C                    sta  12,y
20CE  6D2B            c00042  tst  11,y
20D0                          CONDJMP "bne", c00132
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20D0  26                                      fcb     com_\1
20D1  19                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20D2  A62C                    lda  12,y       ; REPEAT
20D4  9702                    sta  <loopA
20D6  BD15CA          c00066  jsr  CanGU      ; CANGOUP
20D9                          CONDJMP "bne", c00099
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20D9  26                                      fcb     com_\1
20DA  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20DB  6A28                    dec  8,y        ; SPRITEUP
20DD  6A28                    dec  8,y
20DF                          CONDJMP "bra", c00108
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20DF  20                                      fcb     com_\1
20E0  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20E1  8601            c00099  lda  #1
20E3  A72B                    sta  11,y
20E5  0A02            c00108  dec  <loopA     ; ENDREPEAT
20E7                          CONDJMP "bne",       c00066
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20E7  26                                      fcb     com_\1
20E8  ED                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20E9                          CONDJMP "bra", c00200
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20E9  20                                      fcb     com_\1
20EA  15                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20EB  A62C            c00132  lda  12,y       ; REPEAT
20ED  9702                    sta  <loopA
20EF  BD1601          c00144  jsr  CanGD      ; CANGODOWN
20F2                          CONDJMP "bne", c00178
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20F2  26                                      fcb     com_\1
20F3  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20F4  6C28                    inc  8,y        ; SPRITEDOWN
20F6  6C28                    inc  8,y
20F8                          CONDJMP "bra", c00183
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20F8  20                                      fcb     com_\1
20F9  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
20FA  6F2B            c00178  clr  11,y
20FC  0A02            c00183  dec  <loopA     ; ENDREPEAT
20FE                          CONDJMP "bne",       c00144
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
20FE  26                                      fcb     com_\1
20FF  EF                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2100  4F              c00200  clra            ; ANIMATE
2101  BD1A8B                  jsr  AnimSp
2104  8600                    lda  #0 ; COLLISION
2106  97A2                    sta  <reg_B
2108  BD1AC0                  jsr  SkTyp
210B                          CONDJMP "bcc", c00247
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
210B  24                                      fcb     com_\1
210C  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
210D  8623                    lda  #deadF     ; KILL
210F  9723                    sta  <deadF
2111  39              c00247  rts
2112                  Evnt03 
2112  6D2B                    tst  11,y
2114                          CONDJMP "bne", d00064
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2114  26                                      fcb     com_\1
2115  11                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2116  BD1638                  jsr  CanGL      ; CANGOLEFT
2119                          CONDJMP "bne", d00048
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2119  26                                      fcb     com_\1
211A  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
211B  6A29                    dec  9,y        ; SPRITELEFT
211D  6A29                    dec  9,y
211F                          CONDJMP "bra", d00057
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
211F  20                                      fcb     com_\1
2120  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2121  8601            d00048  lda  #1
2123  A72B                    sta  11,y
2125                  d00057  CONDJMP "bra", d00104
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2125  20                                      fcb     com_\1
2126  0D                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2127  BD1647          d00064  jsr  CanGR      ; CANGORIGHT
212A                          CONDJMP "bne", d00099
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
212A  26                                      fcb     com_\1
212B  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
212C  6C29                    inc  9,y        ; SPRITERIGHT
212E  6C29                    inc  9,y
2130                          CONDJMP "bra", d00104
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2130  20                                      fcb     com_\1
2131  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2132  6F2B            d00099  clr  11,y
2134  6D2A            d00104  tst  10,y
2136                          CONDJMP "bne", d00165
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2136  26                                      fcb     com_\1
2137  11                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2138  BD15CA                  jsr  CanGU      ; CANGOUP
213B                          CONDJMP "bne", d00149
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
213B  26                                      fcb     com_\1
213C  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
213D  6A28                    dec  8,y        ; SPRITEUP
213F  6A28                    dec  8,y
2141                          CONDJMP "bra", d00158
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2141  20                                      fcb     com_\1
2142  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2143  8601            d00149  lda  #1
2145  A72A                    sta  10,y
2147                  d00158  CONDJMP "bra", d00204
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2147  20                                      fcb     com_\1
2148  0D                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2149  BD1601          d00165  jsr  CanGD      ; CANGODOWN
214C                          CONDJMP "bne", d00200
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
214C  26                                      fcb     com_\1
214D  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
214E  6C28                    inc  8,y        ; SPRITEDOWN
2150  6C28                    inc  8,y
2152                          CONDJMP "bra", d00204
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2152  20                                      fcb     com_\1
2153  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2154  6F2A            d00200  clr  10,y
2156  4F              d00204  clra            ; ANIMATE
2157  BD1A8B                  jsr  AnimSp
215A  8600                    lda  #0 ; COLLISION
215C  97A2                    sta  <reg_B
215E  BD1AC0                  jsr  SkTyp
2161                          CONDJMP "bcc", d00251
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2161  24                                      fcb     com_\1
2162  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2163  8623                    lda  #deadF     ; KILL
2165  9723                    sta  <deadF
2167  39              d00251  rts
2168                  Evnt04 
2168  39                      rts
2169                  Evnt05 
2169  4F                      clra            ; ANIMATE
216A  BD1A8B                  jsr  AnimSp
216D  39                      rts
216E                  Evnt06 
216E  BD12FC                  jsr  SkObj      ; DETECTOBJECT
2171  9772                    sta  <varObj
2173  86FE                    lda  #254
2175  9172                    cmpa <varObj
2177                          CONDJMP "bcs", g00049
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2177  25                                      fcb     com_\1
2178  05                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2179  86FF                    lda  #255       ; REMOVE
217B  A725                    sta  5,y
217D  39                      rts             ; EXIT
217E  960E            g00049  lda  <varJ
2180  916E                    cmpa <scNo
2182                          CONDJMP "bne", g00135
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2182  26                                      fcb     com_\1
2183  19                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2184  4F                       clra   ; GOT
2185  BD12A8                  jsr  GotOb
2188                          CONDJMP "bcs", g00091
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2188  25                                      fcb     com_\1
2189  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
218A                          CONDJMP "bra", g00119
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
218A  20                                      fcb     com_\1
218B  0C                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
218C  A629            g00091  lda  9,y        ; PUT
218E  9726                    sta  <dispY
2190  A628                    lda  8,y
2192  9725                    sta  <dispX
2194  4F                      clra
2195  BD12CD                  jsr  DrpOb
2198  86FF            g00119  lda  #255       ; REMOVE
219A  A725                    sta  5,y
219C  39                      rts             ; EXIT
219D  960F            g00135  lda  <varK
219F  916E                    cmpa <scNo
21A1                          CONDJMP "bne", g00222
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
21A1  26                                      fcb     com_\1
21A2  1B                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
21A3  8601                    lda  #1         ; GOT
21A5  BD12A8                  jsr  GotOb
21A8                          CONDJMP "bcs", g00177
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
21A8  25                                      fcb     com_\1
21A9  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
21AA                          CONDJMP "bra", g00206
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
21AA  20                                      fcb     com_\1
21AB  0D                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
21AC  A629            g00177  lda  9,y        ; PUT
21AE  9726                    sta  <dispY
21B0  A628                    lda  8,y
21B2  9725                    sta  <dispX
21B4  8601                    lda  #1
21B6  BD12CD                  jsr  DrpOb
21B9  86FF            g00206  lda  #255       ; REMOVE
21BB  A725                    sta  5,y
21BD  39                      rts             ; EXIT
21BE  9610            g00222  lda  <varL
21C0  916E                    cmpa <scNo
21C2                          CONDJMP "bne", g00309
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
21C2  26                                      fcb     com_\1
21C3  1B                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
21C4  8602                    lda  #2         ; GOT
21C6  BD12A8                  jsr  GotOb
21C9                          CONDJMP "bcs", g00265
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
21C9  25                                      fcb     com_\1
21CA  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
21CB                          CONDJMP "bra", g00293
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
21CB  20                                      fcb     com_\1
21CC  0D                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
21CD  A629            g00265  lda  9,y        ; PUT
21CF  9726                    sta  <dispY
21D1  A628                    lda  8,y
21D3  9725                    sta  <dispX
21D5  8602                    lda  #2
21D7  BD12CD                  jsr  DrpOb
21DA  86FF            g00293  lda  #255       ; REMOVE
21DC  A725                    sta  5,y
21DE  39                      rts             ; EXIT
21DF  960D            g00309  lda  <varI
21E1  916E                    cmpa <scNo
21E3                          CONDJMP "bne", g00397
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
21E3  26                                      fcb     com_\1
21E4  1B                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
21E5  8603                    lda  #3         ; GOT
21E7  BD12A8                  jsr  GotOb
21EA                          CONDJMP "bcs", g00352
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
21EA  25                                      fcb     com_\1
21EB  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
21EC                          CONDJMP "bra", g00381
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
21EC  20                                      fcb     com_\1
21ED  0D                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
21EE  A629            g00352  lda  9,y        ; PUT
21F0  9726                    sta  <dispY
21F2  A628                    lda  8,y
21F4  9725                    sta  <dispX
21F6  8603                    lda  #3
21F8  BD12CD                  jsr  DrpOb
21FB  86FF            g00381  lda  #255       ; REMOVE
21FD  A725                    sta  5,y
21FF  39                      rts             ; EXIT
2200  86FF            g00397  lda  #255       ; REMOVE
2202  A725                    sta  5,y
2204  39                      rts
2205                  Evnt07 
2205  8600                    lda  #0 ; COLLISION
2207  97A2                    sta  <reg_B
2209  BD1AC0                  jsr  SkTyp
220C                          CONDJMP "bcc", h00135
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
220C  24                                      fcb     com_\1
220D  26                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
220E  6D27                    tst  7,y
2210                          CONDJMP "bne", h00045
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2210  26                                      fcb     com_\1
2211  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2212                          CONDJMP "bra", h00135
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2212  20                                      fcb     com_\1
2213  20                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2214  109E5C          h00045  ldy  <skPtr     ; OTHER
2217  8601                    lda  #1
2219  A126                    cmpa 6,y
221B                          CONDJMP "bne", h00092
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
221B  26                                      fcb     com_\1
221C  08                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
221D  6C29                    inc  9,y        ; SPRITERIGHT
221F  6C29                    inc  9,y
2221  6C29                    inc  9,y        ; SPRITERIGHT
2223  6C29                    inc  9,y
2225  6D26            h00092  tst  6,y
2227                          CONDJMP "bne", h00127
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2227  26                                      fcb     com_\1
2228  08                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2229  6A29                    dec  9,y        ; SPRITELEFT
222B  6A29                    dec  9,y
222D  6A29                    dec  9,y        ; SPRITELEFT
222F  6A29                    dec  9,y
2231  109E56          h00127  ldy  <ogPtr     ; ENDSPRITE
2234  6D2B            h00135  tst  11,y
2236                          CONDJMP "beq", h00174
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2236  27                                      fcb     com_\1
2237  0A                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2238  8604                    lda  #4
223A  A12B                    cmpa 11,y
223C                          CONDJMP "bcs", h00174
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
223C  25                                      fcb     com_\1
223D  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
223E  4F                      clra            ; ANIMATE
223F  BD1A8B                  jsr  AnimSp
2242  8619            h00174  lda  #25
2244  A12B                    cmpa 11,y
2246                          CONDJMP "bcc", h00219
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2246  24                                      fcb     com_\1
2247  0A                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2248  861D                    lda  #29
224A  A12B                    cmpa 11,y
224C                          CONDJMP "bcs", h00219
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
224C  25                                      fcb     com_\1
224D  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
224E  4F                      clra            ; ANIMATEBACK
224F  BD1AA6                  jsr  AnimBk
2252  6C2B            h00219  inc  11,y
2254  8696                    lda  #150
2256  A12B                    cmpa 11,y
2258                          CONDJMP "bne", h00244
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2258  26                                      fcb     com_\1
2259  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
225A  6F2B                    clr  11,y
225C  39              h00244  rts
225D                  Evnt08 
225D  4F                      clra            ; ANIMATE
225E  BD1A8B                  jsr  AnimSp
2261  8600                    lda  #0 ; COLLISION
2263  97A2                    sta  <reg_B
2265  BD1AC0                  jsr  SkTyp
2268                          CONDJMP "bcc", i00121
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2268  24                                      fcb     com_\1
2269  1F                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
226A  4F                       clra   ; GOT
226B  BD12A8                  jsr  GotOb
226E                          CONDJMP "bcs", i00121
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
226E  25                                      fcb     com_\1
226F  19                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2270  8601                    lda  #1         ; GOT
2272  BD12A8                  jsr  GotOb
2275                          CONDJMP "bcs", i00121
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2275  25                                      fcb     com_\1
2276  12                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2277  8602                    lda  #2         ; GOT
2279  BD12A8                  jsr  GotOb
227C                          CONDJMP "bcs", i00121
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
227C  25                                      fcb     com_\1
227D  0B                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
227E  8603                    lda  #3         ; GOT
2280  BD12A8                  jsr  GotOb
2283                          CONDJMP "bcs", i00121
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2283  25                                      fcb     com_\1
2284  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2285  8601                    lda  #1         ; ENDGAME
2287  9724                    sta  <gamWon
2289  39              i00121  rts
228A                  Evnt09 
228A  6D25                    tst  5,y
228C                          CONDJMP "bne", j00099
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
228C  26                                      fcb     com_\1
228D  22                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
228E  86FF                    lda  #255
2290  9106                    cmpa <varB
2292                          CONDJMP "beq", j00065
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2292  27                                      fcb     com_\1
2293  0E                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2294  86FF                    lda  #255
2296  9107                    cmpa <varC
2298                          CONDJMP "beq", j00065
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2298  27                                      fcb     com_\1
2299  08                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
229A  9606                    lda  <varB
229C  A728                    sta  8,y
229E  9607                    lda  <varC
22A0  A729                    sta  9,y
22A2  8602            j00065  lda  #2
22A4  A125                    cmpa 5,y
22A6                          CONDJMP "bne", j00099
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
22A6  26                                      fcb     com_\1
22A7  08                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
22A8  0C05                    inc  <varA
22AA  6F2B                    clr  11,y
22AC  8645                    lda  #69
22AE  A72C                    sta  12,y
22B0  39              j00099  rts
22B1                  Evnt10 
22B1  8615                    lda  #21
22B3  971F                    sta  <charY
22B5  8618                    lda  #24
22B7  971E                    sta  <charX
22B9  8606                    lda  #6    ; SHOWSCORE
22BB  97A2                    sta  <reg_B
22BD  BD13AB                  jsr  Dscor
22C0  8618                    lda  #24
22C2  971E                    sta  <charX
22C4  8603                    lda  #3 ; REPEAT
22C6  9702                    sta  <loopA
22C8  4F              k00058  clra            ; PUTBLOCK
22C9  BD14C8                  jsr  pbPAttr
22CC  0A02                    dec  <loopA     ; ENDREPEAT
22CE                          CONDJMP "bne",       k00058
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
22CE  26                                      fcb     com_\1
22CF  F8                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
22D0  860C                    lda  #12
22D2  971E                    sta  <charX
22D4  4F                       clra   ; GOT
22D5  BD12A8                  jsr  GotOb
22D8                          CONDJMP "bcs", k00134
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
22D8  25                                      fcb     com_\1
22D9  07                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
22DA  8649                    lda  #73                ; PUTBLOCK
22DC  BD14C8                  jsr  pbPAttr
22DF                          CONDJMP "bra", k00147
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
22DF  20                                      fcb     com_\1
22E0  05                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
22E1  8646            k00134  lda  #70                ; PUTBLOCK
22E3  BD14C8                  jsr  pbPAttr
22E6  8601            k00147  lda  #1         ; GOT
22E8  BD12A8                  jsr  GotOb
22EB                          CONDJMP "bcs", k00185
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
22EB  25                                      fcb     com_\1
22EC  07                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
22ED  864A                    lda  #74                ; PUTBLOCK
22EF  BD14C8                  jsr  pbPAttr
22F2                          CONDJMP "bra", k00198
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
22F2  20                                      fcb     com_\1
22F3  05                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
22F4  8647            k00185  lda  #71                ; PUTBLOCK
22F6  BD14C8                  jsr  pbPAttr
22F9  8602            k00198  lda  #2         ; GOT
22FB  BD12A8                  jsr  GotOb
22FE                          CONDJMP "bcs", k00236
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
22FE  25                                      fcb     com_\1
22FF  07                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2300  864B                    lda  #75                ; PUTBLOCK
2302  BD14C8                  jsr  pbPAttr
2305                          CONDJMP "bra", k00249
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2305  20                                      fcb     com_\1
2306  05                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2307  8648            k00236  lda  #72                ; PUTBLOCK
2309  BD14C8                  jsr  pbPAttr
230C  8603            k00249  lda  #3         ; GOT
230E  BD12A8                  jsr  GotOb
2311                          CONDJMP "bcs", k00287
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2311  25                                      fcb     com_\1
2312  07                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2313  864C                    lda  #76                ; PUTBLOCK
2315  BD14C8                  jsr  pbPAttr
2318                          CONDJMP "bra", k00300
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2318  20                                      fcb     com_\1
2319  05                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
231A  864D            k00287  lda  #77                ; PUTBLOCK
231C  BD14C8                  jsr  pbPAttr
231F  0D11            k00300  tst  <varM
2321                          CONDJMP "bne", k00350
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2321  26                                      fcb     com_\1
2322  0D                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2323  0D12                    tst  <varN
2325                          CONDJMP "bne", k00350
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2325  26                                      fcb     com_\1
2326  09                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2327  8601                    lda  #1
2329  9770                    sta  <numLif
232B  8623                    lda  #deadF     ; KILL
232D  9723                    sta  <deadF
232F  39                      rts             ; EXIT
2330  0C05            k00350  inc  <varA
2332  860A                    lda  #10
2334  9105                    cmpa <varA
2336                          CONDJMP "bne", k00376
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2336  26                                      fcb     com_\1
2337  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2338  0F05                    clr  <varA
233A  8615            k00376  lda  #21
233C  971F                    sta  <charY
233E  8607                    lda  #7
2340  971E                    sta  <charX
2342  8654                    lda  #84                ; PUTBLOCK
2344  BD14C8                  jsr  pbPAttr
2347  0C1E                    inc  <charX
2349  9670                    lda  <numLif    ; DISPLAY
234B  BD1B24                  jsr  Disply
234E  8615                    lda  #21
2350  971F                    sta  <charY
2352  8613                    lda  #19
2354  971E                    sta  <charX
2356  8659                    lda  #89                ; PUTBLOCK
2358  BD14C8                  jsr  pbPAttr
235B  4F                      clra            ; PUTBLOCK
235C  BD14C8                  jsr  pbPAttr
235F  9614                    lda  <varP
2361  9717                    sta  <varS
2363  9617                    lda  <varS
2365  44                      lsra
2366  44                      lsra
2367  44                      lsra
2368  9717                    sta  <varS
236A  0D17                    tst  <varS
236C                          CONDJMP "beq", k00551
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
236C  27                                      fcb     com_\1
236D  0D                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
236E  9617                    lda  <varS      ; REPEAT
2370  9702                    sta  <loopA
2372  8653            k00521  lda  #83                ; PUTBLOCK
2374  BD14C8                  jsr  pbPAttr
2377  0A02                    dec  <loopA     ; ENDREPEAT
2379                          CONDJMP "bne",       k00521
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2379  26                                      fcb     com_\1
237A  F7                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
237B  9617            k00551  lda  <varS
237D  48                      asla
237E  48                      asla
237F  48                      asla
2380  9717                    sta  <varS
2382  9617                    lda  <varS
2384  40                      nega
2385  9B14                    adda <varP
2387  9714                    sta  <varP
2389  9614                    lda  <varP
238B  9718                    sta  <varT
238D  9618                    lda  <varT
238F  44                      lsra
2390  9718                    sta  <varT
2392  864F                    lda  #79
2394  9B18                    adda <varT
2396  9718                    sta  <varT
2398  860A                    lda  #10
239A  9118                    cmpa <varT
239C                          CONDJMP "bcc", k00661
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
239C  24                                      fcb     com_\1
239D  07                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
239E  9618                    lda  <varT              ; PUTBLOCK
23A0  BD14C8                  jsr  pbPAttr
23A3                          CONDJMP "bra", k00674
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
23A3  20                                      fcb     com_\1
23A4  05                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
23A5  864F            k00661  lda  #79                ; PUTBLOCK
23A7  BD14C8                  jsr  pbPAttr
23AA  9617            k00674  lda  <varS
23AC  9B14                    adda <varP
23AE  9714                    sta  <varP
23B0  0A15                    dec  <varQ
23B2  861E                    lda  #30
23B4  9115                    cmpa <varQ
23B6                          CONDJMP "bcs", k00718
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
23B6  25                                      fcb     com_\1
23B7  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
23B8  8664                    lda  #100
23BA  9715                    sta  <varQ
23BC  8664            k00718  lda  #100
23BE  9115                    cmpa <varQ
23C0                          CONDJMP "bne", k00740
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
23C0  26                                      fcb     com_\1
23C1  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
23C2  0A14                    dec  <varP
23C4  0D14            k00740  tst  <varP
23C6                          CONDJMP "bne", k00782
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
23C6  26                                      fcb     com_\1
23C7  0C                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
23C8  8623                    lda  #deadF     ; KILL
23CA  9723                    sta  <deadF
23CC  8628                    lda  #40
23CE  9714                    sta  <varP
23D0  8663                    lda  #99
23D2  9715                    sta  <varQ
23D4  0A13            k00782  dec  <varO
23D6  86FF                    lda  #255
23D8  9113                    cmpa <varO
23DA                          CONDJMP "bne", k00817
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
23DA  26                                      fcb     com_\1
23DB  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
23DC  8619                    lda  #25
23DE  9713                    sta  <varO
23E0  0A12                    dec  <varN
23E2  86FF            k00817  lda  #255
23E4  9112                    cmpa <varN
23E6                          CONDJMP "bne", k00848
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
23E6  26                                      fcb     com_\1
23E7  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
23E8  863B                    lda  #59
23EA  9712                    sta  <varN
23EC  0A11                    dec  <varM
23EE  0D11            k00848  tst  <varM
23F0                          CONDJMP "bne", k00904
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
23F0  26                                      fcb     com_\1
23F1  10                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
23F2  861E                    lda  #30
23F4  9112                    cmpa <varN
23F6                          CONDJMP "bcs", k00904
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
23F6  25                                      fcb     com_\1
23F7  0A                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
23F8  8619                    lda  #25
23FA  9113                    cmpa <varO
23FC                          CONDJMP "bne", k00904
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
23FC  26                                      fcb     com_\1
23FD  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
23FE  8628                    lda  #40        ; BEEP
2400  972B                    sta  <sndTyp
2402  8615            k00904  lda  #21
2404  971F                    sta  <charY
2406  8602                    lda  #2
2408  971E                    sta  <charX
240A  9611                    lda  <varM      ; DISPLAY
240C  BD1B24                  jsr  Disply
240F  8605                    lda  #5
2411  9113                    cmpa <varO
2413                          CONDJMP "bcc", k00970
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2413  24                                      fcb     com_\1
2414  06                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2415  4F                      clra            ; PUTBLOCK
2416  BD14C8                  jsr  pbPAttr
2419                          CONDJMP "bra", k00983
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2419  20                                      fcb     com_\1
241A  05                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
241B  864E            k00970  lda  #78                ; PUTBLOCK
241D  BD14C8                  jsr  pbPAttr
2420  8609            k00983  lda  #9
2422  9112                    cmpa <varN
2424                          CONDJMP "bcs", k01010
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2424  25                                      fcb     com_\1
2425  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2426  4F                      clra    ; DISPLAY
2427  BD1B24                  jsr  Disply
242A  9612            k01010  lda  <varN      ; DISPLAY
242C  BD1B24                  jsr  Disply
242F  4F                      clra            ; PUTBLOCK
2430  BD14C8                  jsr  pbPAttr
2433  8608                    lda  #8
2435  9114                    cmpa <varP
2437                          CONDJMP "bcs", k01078
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2437  25                                      fcb     com_\1
2438  0A                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2439  8602                    lda  #2
243B  9105                    cmpa <varA
243D                          CONDJMP "bcs", k01078
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
243D  25                                      fcb     com_\1
243E  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
243F  8628                    lda  #40        ; BEEP
2441  972B                    sta  <sndTyp
2443  39              k01078  rts
2444                  Evnt11 
2444  39                      rts
2445                  Evnt12 
2445  8601                    lda  #1
2447  971F                    sta  <charY
2449  8609                    lda  #9
244B  971E                    sta  <charX
244D  4F                      clra    ; MESSAGE
244E  BD1836                  jsr  Dmsg
2451  860A                    lda  #10        ; INK
2453  BD1D8A                  jsr  SetFGcol
2456  8608                    lda  #8         ; PAPER
2458  BD1D93                  jsr  SetBGcol
245B  8602                    lda  #2
245D  971F                    sta  <charY
245F  8606                    lda  #6
2461  971E                    sta  <charX
2463  8601                    lda  #1         ; PRINTMODE
2465  9737                    sta  <prtMod
2467  8601                    lda  #1         ; MESSAGE
2469  BD1836                  jsr  Dmsg
246C  4F                      clra            ; PRINTMODE
246D  9737                    sta  <prtMod
246F  860C                    lda  #12        ; INK
2471  BD1D8A                  jsr  SetFGcol
2474  8608                    lda  #8         ; PAPER
2476  BD1D93                  jsr  SetBGcol
2479  8605                    lda  #5
247B  971F                    sta  <charY
247D  8607                    lda  #7
247F  971E                    sta  <charX
2481  8609                    lda  #9         ; MESSAGE
2483  BD1836                  jsr  Dmsg
2486  8609                    lda  #9
2488  971F                    sta  <charY
248A  0F1E                    clr  <charX
248C  860F                    lda  #15        ; INK
248E  BD1D8A                  jsr  SetFGcol
2491  8608                    lda  #8         ; PAPER
2493  BD1D93                  jsr  SetBGcol
2496  8602                    lda  #2         ; MESSAGE
2498  BD1836                  jsr  Dmsg
249B  8616                    lda  #22
249D  971F                    sta  <charY
249F  8606                    lda  #6
24A1  971E                    sta  <charX
24A3  8609                    lda  #9         ; INK
24A5  BD1D8A                  jsr  SetFGcol
24A8  8608                    lda  #8         ; PAPER
24AA  BD1D93                  jsr  SetBGcol
24AD  8608                    lda  #8         ; MESSAGE
24AF  BD1836                  jsr  Dmsg
24B2  8663                    lda  #99
24B4  971D                    sta  <contrl
24B6  8663            m00271  lda  #99
24B8  911D                    cmpa <contrl
24BA                          CONDJMP "bne", m00409
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
24BA  26                                      fcb     com_\1
24BB  35                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
24BC  8E6784                  ldx  #keys+7    ; KEY
24BF  A684                    lda  ,x
24C1  BD176C                  jsr  KTest
24C4                          CONDJMP "bcc", m00316
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
24C4  24                                      fcb     com_\1
24C5  02                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
24C6  0F1D                    clr  <contrl
24C8  8E6785          m00316  ldx  #keys+8    ; KEY
24CB  A684                    lda  ,x
24CD  BD176C                  jsr  KTest
24D0                          CONDJMP "bcc", m00349
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
24D0  24                                      fcb     com_\1
24D1  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
24D2  8601                    lda  #1
24D4  971D                    sta  <contrl
24D6  8E6786          m00349  ldx  #keys+9    ; KEY
24D9  A684                    lda  ,x
24DB  BD176C                  jsr  KTest
24DE                          CONDJMP "bcc", m00381
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
24DE  24                                      fcb     com_\1
24DF  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
24E0  8602                    lda  #2
24E2  971D                    sta  <contrl
24E4  8E6787          m00381  ldx  #keys+10   ; KEY
24E7  A684                    lda  ,x
24E9  BD176C                  jsr  KTest
24EC                          CONDJMP "bcc", m00404
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
24EC  24                                      fcb     com_\1
24ED  00                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
24EE  7E24B6          m00404  jmp  m00271
24F1  39              m00409  rts
24F2                  Evnt13 
24F2  860E                    lda  #14        ; INK
24F4  BD1D8A                  jsr  SetFGcol
24F7  8608                    lda  #8         ; PAPER
24F9  BD1D93                  jsr  SetBGcol
24FC  BD10BA                  jsr  Cls                ; CLS
24FF  0F05                    clr  <varA
2501  86FF                    lda  #255
2503  9706                    sta  <varB
2505  86FF                    lda  #255
2507  9707                    sta  <varC
2509  8628                    lda  #40
250B  9714                    sta  <varP
250D  8663                    lda  #99
250F  9715                    sta  <varQ
2511  8604                    lda  #4
2513  9711                    sta  <varM
2515  863B                    lda  #59
2517  9712                    sta  <varN
2519  8619                    lda  #25
251B  9713                    sta  <varO
251D  861D                    lda  #29                ; PUTBLOCK
251F  BD14C8                  jsr  pbPAttr
2522  861E                    lda  #30        ; REPEAT
2524  9702                    sta  <loopA
2526  8621            n00123  lda  #33                ; PUTBLOCK
2528  BD14C8                  jsr  pbPAttr
252B  0A02                    dec  <loopA     ; ENDREPEAT
252D                          CONDJMP "bne",       n00123
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
252D  26                                      fcb     com_\1
252E  F7                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
252F  861E                    lda  #30                ; PUTBLOCK
2531  BD14C8                  jsr  pbPAttr
2534  0F1F                    clr  <charY
2536  8612                    lda  #18        ; REPEAT
2538  9702                    sta  <loopA
253A  0C1F            n00182  inc  <charY
253C  0F1E                    clr  <charX
253E  8622                    lda  #34                ; PUTBLOCK
2540  BD14C8                  jsr  pbPAttr
2543  861F                    lda  #31
2545  971E                    sta  <charX
2547  8622                    lda  #34                ; PUTBLOCK
2549  BD14C8                  jsr  pbPAttr
254C  0A02                    dec  <loopA     ; ENDREPEAT
254E                          CONDJMP "bne",       n00182
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
254E  26                                      fcb     com_\1
254F  EA                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2550  0C1F                    inc  <charY
2552  0F1E                    clr  <charX
2554  8625                    lda  #37                ; PUTBLOCK
2556  BD14C8                  jsr  pbPAttr
2559  861E                    lda  #30        ; REPEAT
255B  9702                    sta  <loopA
255D  8621            n00278  lda  #33                ; PUTBLOCK
255F  BD14C8                  jsr  pbPAttr
2562  0A02                    dec  <loopA     ; ENDREPEAT
2564                          CONDJMP "bne",       n00278
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2564  26                                      fcb     com_\1
2565  F7                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2566  8625                    lda  #37                ; PUTBLOCK
2568  BD14C8                  jsr  pbPAttr
256B  8603                    lda  #3 ; REPEAT
256D  9702                    sta  <loopA
256F  0C1F            n00332  inc  <charY
2571  0F1E                    clr  <charX
2573  8622                    lda  #34                ; PUTBLOCK
2575  BD14C8                  jsr  pbPAttr
2578  861F                    lda  #31
257A  971E                    sta  <charX
257C  8622                    lda  #34                ; PUTBLOCK
257E  BD14C8                  jsr  pbPAttr
2581  0A02                    dec  <loopA     ; ENDREPEAT
2583                          CONDJMP "bne",       n00332
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2583  26                                      fcb     com_\1
2584  EA                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2585  0F1E                    clr  <charX
2587  8617                    lda  #23
2589  971F                    sta  <charY
258B  8620                    lda  #32                ; PUTBLOCK
258D  BD14C8                  jsr  pbPAttr
2590  861E                    lda  #30        ; REPEAT
2592  9702                    sta  <loopA
2594  8621            n00432  lda  #33                ; PUTBLOCK
2596  BD14C8                  jsr  pbPAttr
2599  0A02                    dec  <loopA     ; ENDREPEAT
259B                          CONDJMP "bne",       n00432
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
259B  26                                      fcb     com_\1
259C  F7                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
259D  861F                    lda  #31                ; PUTBLOCK
259F  BD14C8                  jsr  pbPAttr
25A2  8605                    lda  #5
25A4  9770                    sta  <numLif
25A6  8605                    lda  #5         ; GETRANDOM
25A8  97A4                    sta  <reg_D
25AA  BD175E                  jsr  Random
25AD  D6A4                    ldb  <reg_D
25AF  BD122A                  jsr  IMul
25B2  96A6                    lda  <reg_H
25B4  9771                    sta  <varRnd
25B6  0C71                    inc  <varRnd
25B8  9671                    lda  <varRnd
25BA  970E                    sta  <varJ
25BC  8605                    lda  #5         ; GETRANDOM
25BE  97A4                    sta  <reg_D
25C0  BD175E                  jsr  Random
25C3  D6A4                    ldb  <reg_D
25C5  BD122A                  jsr  IMul
25C8  96A6                    lda  <reg_H
25CA  9771                    sta  <varRnd
25CC  8607                    lda  #7
25CE  9B71                    adda <varRnd
25D0  9771                    sta  <varRnd
25D2  9671                    lda  <varRnd
25D4  970F                    sta  <varK
25D6  8605                    lda  #5         ; GETRANDOM
25D8  97A4                    sta  <reg_D
25DA  BD175E                  jsr  Random
25DD  D6A4                    ldb  <reg_D
25DF  BD122A                  jsr  IMul
25E2  96A6                    lda  <reg_H
25E4  9771                    sta  <varRnd
25E6  860D                    lda  #13
25E8  9B71                    adda <varRnd
25EA  9771                    sta  <varRnd
25EC  9671                    lda  <varRnd
25EE  9710                    sta  <varL
25F0  8603                    lda  #3         ; GETRANDOM
25F2  97A4                    sta  <reg_D
25F4  BD175E                  jsr  Random
25F7  D6A4                    ldb  <reg_D
25F9  BD122A                  jsr  IMul
25FC  96A6                    lda  <reg_H
25FE  9771                    sta  <varRnd
2600  8613                    lda  #19
2602  9B71                    adda <varRnd
2604  9771                    sta  <varRnd
2606  9671                    lda  <varRnd
2608  970D                    sta  <varI
260A  39                      rts
260B                  Evnt14 
260B  0F05                    clr  <varA
260D  0D08                    tst  <varD
260F                          CONDJMP "bne", o00037
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
260F  26                                      fcb     com_\1
2610  08                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2611  86FF                    lda  #255
2613  9706                    sta  <varB
2615  86FF                    lda  #255
2617  9707                    sta  <varC
2619  39              o00037  rts
261A                  Evnt15 
261A  8609                    lda  #9
261C  A125                    cmpa 5,y
261E                          CONDJMP "bne", p00029
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
261E  26                                      fcb     com_\1
261F  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2620  8623                    lda  #deadF     ; KILL
2622  9723                    sta  <deadF
2624  39              p00029  rts
2625                  Evnt16 
2625  867F                    lda  #127       ; BEEP
2627  972B                    sta  <sndTyp
2629  0A70                    dec  <numLif
262B  8601                    lda  #1
262D  9708                    sta  <varD
262F  39                      rts
2630                  Evnt17 
2630  860F                    lda  #15        ; INK
2632  BD1D8A                  jsr  SetFGcol
2635  8608                    lda  #8         ; PAPER
2637  BD1D93                  jsr  SetBGcol
263A  BD10BA                  jsr  Cls                ; CLS
263D  8608                    lda  #8
263F  971F                    sta  <charY
2641  860B                    lda  #11
2643  971E                    sta  <charX
2645  8601                    lda  #1         ; PRINTMODE
2647  9737                    sta  <prtMod
2649  8607                    lda  #7         ; MESSAGE
264B  BD1836                  jsr  Dmsg
264E  4F                      clra            ; PRINTMODE
264F  9737                    sta  <prtMod
2651  860E                    lda  #14        ; INK
2653  BD1D8A                  jsr  SetFGcol
2656  8608                    lda  #8         ; PAPER
2658  BD1D93                  jsr  SetBGcol
265B  0C1F                    inc  <charY
265D  0F1E                    clr  <charX
265F  8605                    lda  #5         ; MESSAGE
2661  BD1836                  jsr  Dmsg
2664  C6FA                    ldb  #250       ; DELAY
2666  BD0FF4                  jsr  Delay
2669  C6C8                    ldb  #200       ; DELAY
266B  BD0FF4                  jsr  Delay
266E  39                      rts
266F                  Evnt18 
266F  9670                    lda  <numLif    ; REPEAT
2671  9702                    sta  <loopA
2673  CC0064          s00014  ldd  #100       ; SCORE
2676  DDA6                    std  <reg_HL
2678  BD13EA                  jsr  AddSc
267B  0A02                    dec  <loopA     ; ENDREPEAT
267D                          CONDJMP "bne",       s00014
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
267D  26                                      fcb     com_\1
267E  F4                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
267F  9611                    lda  <varM      ; REPEAT
2681  9702                    sta  <loopA
2683  CC003C          s00060  ldd  #60        ; SCORE
2686  DDA6                    std  <reg_HL
2688  BD13EA                  jsr  AddSc
268B  0A02                    dec  <loopA     ; ENDREPEAT
268D                          CONDJMP "bne",       s00060
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
268D  26                                      fcb     com_\1
268E  F4                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
268F  9612                    lda  <varN      ; REPEAT
2691  9702                    sta  <loopA
2693  CC0001          s00105  ldd  #1 ; SCORE
2696  DDA6                    std  <reg_HL
2698  BD13EA                  jsr  AddSc
269B  0A02                    dec  <loopA     ; ENDREPEAT
269D                          CONDJMP "bne",       s00105
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
269D  26                                      fcb     com_\1
269E  F4                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
269F  860E                    lda  #14        ; INK
26A1  BD1D8A                  jsr  SetFGcol
26A4  8608                    lda  #8         ; PAPER
26A6  BD1D93                  jsr  SetBGcol
26A9  BD10BA                  jsr  Cls                ; CLS
26AC  8609                    lda  #9
26AE  971F                    sta  <charY
26B0  8609                    lda  #9
26B2  971E                    sta  <charX
26B4  860F                    lda  #15        ; INK
26B6  BD1D8A                  jsr  SetFGcol
26B9  8608                    lda  #8         ; PAPER
26BB  BD1D93                  jsr  SetBGcol
26BE  8601                    lda  #1         ; PRINTMODE
26C0  9737                    sta  <prtMod
26C2  8606                    lda  #6         ; MESSAGE
26C4  BD1836                  jsr  Dmsg
26C7  4F                      clra            ; PRINTMODE
26C8  9737                    sta  <prtMod
26CA  C664                    ldb  #100       ; DELAY
26CC  BD0FF4                  jsr  Delay
26CF  860E                    lda  #14        ; INK
26D1  BD1D8A                  jsr  SetFGcol
26D4  8608                    lda  #8         ; PAPER
26D6  BD1D93                  jsr  SetBGcol
26D9  8604                    lda  #4         ; MESSAGE
26DB  BD1836                  jsr  Dmsg
26DE  860E                    lda  #14
26E0  971F                    sta  <charY
26E2  860A                    lda  #10
26E4  971E                    sta  <charX
26E6  9611                    lda  <varM      ; DISPLAY
26E8  BD1B24                  jsr  Disply
26EB  864E                    lda  #78                ; PUTBLOCK
26ED  BD14C8                  jsr  pbPAttr
26F0  8609                    lda  #9
26F2  9112                    cmpa <varN
26F4                          CONDJMP "bcs", s00361
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
26F4  25                                      fcb     com_\1
26F5  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
26F6  4F                      clra    ; DISPLAY
26F7  BD1B24                  jsr  Disply
26FA  9612            s00361  lda  <varN      ; DISPLAY
26FC  BD1B24                  jsr  Disply
26FF  8641                    lda  #65
2701  9705                    sta  <varA
2703  86FA                    lda  #250       ; REPEAT
2705  9702                    sta  <loopA
2707  8605            s00394  lda  #5         ; INK
2709  BD1D8A                  jsr  SetFGcol
270C  8607                    lda  #7         ; PAPER
270E  BD1D93                  jsr  SetBGcol
2711  8610                    lda  #16
2713  971F                    sta  <charY
2715  8611                    lda  #17
2717  971E                    sta  <charX
2719  8606                    lda  #6    ; SHOWSCORE
271B  97A2                    sta  <reg_B
271D  BD13AB                  jsr  Dscor
2720  C602                    ldb  #2 ; DELAY
2722  BD0FF4                  jsr  Delay
2725  8647                    lda  #71
2727  9105                    cmpa <varA
2729                          CONDJMP "bne", s00489
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2729  26                                      fcb     com_\1
272A  04                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
272B  8641                    lda  #65
272D  9705                    sta  <varA
272F  0C05            s00489  inc  <varA
2731  0A02                    dec  <loopA     ; ENDREPEAT
2733                          CONDJMP "bne",       s00394
                              IF      (((\2 - *) >= 0) && ((\2 - *) <= 131)) || (((* - \2) > 0) && ((* - \2) <= 126))
2733  26                                      fcb     com_\1
2734  D2                                      fcb     \2 - * - 1
                              ELSE
                                      IF (\1 == "bra")
                                              fcb     $16
                                      ELSE
                                              fcb     $10,com_\1
                                      ENDIF
                                              fdb     \2 - * - 2
                              ENDIF
2735  C632                    ldb  #50        ; DELAY
2737  BD0FF4                  jsr  Delay
273A  39                      rts
273B                  Evnt19 
273B  39                      rts
273C                  Evnt20 
273C  39                      rts
273D  39              PtcUsr  rts
273E                  msgDat
273E  524F424F545F315F494E2E2E2E8D         fcc "ROBOT_1_IN...",141
274C  5448455F534849505F4F465F444F4F4D3B3B8D         fcc "THE_SHIP_OF_DOOM;;",141
275F  5F5448455F435245575F4C4546545F594F555F424548494E442E2E2E2E0D         fcc "_THE_CREW_LEFT_YOU_BEHIND....",13
277D  5F5448455F534849505F57494C4C5F43524153485F494E544F5F5448450D         fcc "_THE_SHIP_WILL_CRASH_INTO_THE",13
279B  5F53554E5F494E5F355F4D494E555445532E0D         fcc "_SUN_IN_5_MINUTES.",13
27AE  5F544F5F534156455F594F555253454C462C5F434F4C4C4543545F414C4C0D         fcc "_TO_SAVE_YOURSELF,_COLLECT_ALL",13
27CD  5F464F55525F4B4559535F414E445F4745545F544F5F5448450D         fcc "_FOUR_KEYS_AND_GET_TO_THE",13
27E7  5F54454C45504F52545F524F4F4D2E0D         fcc "_TELEPORT_ROOM.",13
27F7  5F434F4C4C4543545F444154415F4B4559535F464F525F504F494E54532E0D         fcc "_COLLECT_DATA_KEYS_FOR_POINTS.",13
2816  5F52454348415247455F534F434B4554535F4152455F4C4F43415445440D         fcc "_RECHARGE_SOCKETS_ARE_LOCATED",13
2834  5F5448524F5547484F55545F5448455F534849502E0D         fcc "_THROUGHOUT_THE_SHIP.",13
284A  0D                      fcc 13
284B  5F52554E5F4F55545F4F465F424154544552592E5F594F555F4449452E0D         fcc "_RUN_OUT_OF_BATTERY._YOU_DIE.",13
2869  5F5F52554E5F4F55545F4F465F54494D452E5F594F555F4449452E0D         fcc "__RUN_OUT_OF_TIME._YOU_DIE.",13
2885  5F5F5F5F5F5F5F5F5F444F4E27         fcc "_________DON",39
2892  545F4449453B8D          fcc "T_DIE;",141
2899  47414D455F5041555345448D         fcc "GAME_PAUSED",141
28A5  0D                      fcc 13
28A6  5F5F5F5F5F5F524F424F545F315F455343415045445F410D         fcc "______ROBOT_1_ESCAPED_A",13
28BE  5F5F5F5F46495245595F44454154485F574954485F4A5553540D         fcc "____FIREY_DEATH_WITH_JUST",13
28D8  5F5F5F5F5F5F5F5F5F5F585858585F4C4546540D         fcc "__________XXXX_LEFT",13
28EC  0D                      fcc 13
28ED  5F594F555F414C534F5F53434F5245445F5858585858585F504F494E54533B8D         fcc "_YOU_ALSO_SCORED_XXXXXX_POINTS;",141
290D  5F5F5F5F5F5F5F5F5F5F5F594F555F5F444945440D         fcc "___________YOU__DIED",13
2922  0D                      fcc 13
2923  5F4549544845525F594F555F4449444E545F4745545F4F46465F5448455F0D         fcc "_EITHER_YOU_DIDNT_GET_OFF_THE_",13
2942  5F534849505F494E5F54494D455F4F525F594F555F52414E5F4F55545F4F460D         fcc "_SHIP_IN_TIME_OR_YOU_RAN_OUT_OF",13
2962  5F4C495645532E0D         fcc "_LIVES.",13
296A  5F5F5F5F5F5F5F4549544845525F5741592C5F594F5527         fcc "_______EITHER_WAY,_YOU",39
2981  52455F444541442E0D         fcc "RE_DEAD.",13
298A  8D                      fcc 141
298B  57454C4C5F444F4E453B8D         fcc "WELL_DONE;",141
2996  47414D455F4F5645528D         fcc "GAME_OVER",141
29A0  7F323031375F4D61745F5265636172646F0D         fcc "2017_Mat_Recardo",13
29B2  5F5F5F5F4D757369635F62795F5365726765795F4B6F736F768D         fcc "____Music_by_Sergey_Kosov",141
29CC  315F464F525F4B4559535F285A5850290D         fcc "1_FOR_KEYS_(ZXP)",13
29DD  5F5F5F5F5F5F5F325F464F525F4B454D5053544F4E0D         fcc "_______2_FOR_KEMPSTON",13
29F3  5F5F5F5F5F5F5F335F464F525F53494E434C4149528D         fcc "_______3_FOR_SINCLAIR",141
2A09  0A              numMsg  fcb 10
2A0A                  chgFx
2A0A  0000000000000000         fcb 0,0,0,0,0,0,0,0
2A12  97AB97AB97AB97AB         fcb 151,171,151,171,151,171,151,171
2A1A  D5E9D5E9D5E9D5E9         fcb 213,233,213,233,213,233,213,233
2A22  FFFF996600000000         fcb 255,255,153,102,0,0,0,0
2A2A  FFAA55FF00000000         fcb 255,170,85,255,0,0,0,0
2A32  FF99FF0000000000         fcb 255,153,255,0,0,0,0,0
2A3A  FFFF00FF00000000         fcb 255,255,0,255,0,0,0,0
2A42  FFFF55AA55AA0000         fcb 255,255,85,170,85,170,0,0
2A4A  FFFF00FF00FF0000         fcb 255,255,0,255,0,255,0,0
2A52  FF4422FF00000000         fcb 255,68,34,255,0,0,0,0
2A5A  80FF80FF80FF80FF         fcb 128,255,128,255,128,255,128,255
2A62  FFBDA5A5A5420000         fcb 255,189,165,165,165,66,0,0
2A6A  FF55FF005A5A1800         fcb 255,85,255,0,90,90,24,0
2A72  FF0022666644FF00         fcb 255,0,34,102,102,68,255,0
2A7A  FF0023130B050201         fcb 255,0,35,19,11,5,2,1
2A82  FF0023130B0502FD         fcb 255,0,35,19,11,5,2,253
2A8A  FC82442810204080         fcb 252,130,68,40,16,32,64,128
2A92  62524A46464A5262         fcb 98,82,74,70,70,74,82,98
2A9A  464A526262524A46         fcb 70,74,82,98,98,82,74,70
2AA2  FF81422418FF0000         fcb 255,129,66,36,24,255,0,0
2AAA  8142241818244281         fcb 129,66,36,24,24,36,66,129
2AB2  FF80BFBFFF007F00         fcb 255,128,191,191,255,0,127,0
2ABA  FF00FFFFFF00FF00         fcb 255,0,255,255,255,0,255,0
2AC2  FF05FFFFFF00FE00         fcb 255,5,255,255,255,0,254,0
2ACA  8082848294AA80FF         fcb 128,130,132,130,148,170,128,255
2AD2  808182858A95AAFF         fcb 128,129,130,133,138,149,170,255
2ADA  000000004444EEFF         fcb 0,0,0,0,68,68,238,255
2AE2  3F2000003F200000         fcb 63,32,0,0,63,32,0,0
2AEA  FC040000FC040000         fcb 252,4,0,0,252,4,0,0
2AF2  00030D1D3D39717F         fcb 0,3,13,29,61,57,113,127
2AFA  00C0B0C8F4F4FAFE         fcb 0,192,176,200,244,244,250,254
2B02  FEFAF4F4C8B0C000         fcb 254,250,244,244,200,176,192,0
2B0A  7F713D3D1D0F0300         fcb 127,113,61,61,29,15,3,0
2B12  00FF00FFFFAA5500         fcb 0,255,0,255,255,170,85,0
2B1A  7A7A7A7A7A7A7A7A         fcb 122,122,122,122,122,122,122,122
2B22  7A00FDFDFDFD007A         fcb 122,0,253,253,253,253,0,122
2B2A  7A003C007A003C00         fcb 122,0,60,0,122,0,60,0
2B32  347A7A7A7A7A0034         fcb 52,122,122,122,122,122,0,52
2B3A  00FE00FE00FE00FE         fcb 0,254,0,254,0,254,0,254
2B42  559515E509F102FC         fcb 85,149,21,229,9,241,2,252
2B4A  5555555555555500         fcb 85,85,85,85,85,85,85,0
2B52  0000000003050A0D         fcb 0,0,0,0,3,5,10,13
2B5A  00000000FF55AAFF         fcb 0,0,0,0,255,85,170,255
2B62  000000008060B0D0         fcb 0,0,0,0,128,96,176,208
2B6A  B0D0B0D0B0D0B0D0         fcb 176,208,176,208,176,208,176,208
2B72  B050A0C000000000         fcb 176,80,160,192,0,0,0,0
2B7A  FF55AAFF00000000         fcb 255,85,170,255,0,0,0,0
2B82  0B0D060300000000         fcb 11,13,6,3,0,0,0,0
2B8A  0B0D0B0D0B0D0B0D         fcb 11,13,11,13,11,13,11,13
2B92  CF006767676767CF         fcb 207,0,103,103,103,103,103,207
2B9A  FE0078B87878B400         fcb 254,0,120,184,120,120,180,0
2BA2  0060773B1C6E7703         fcb 0,96,119,59,28,110,119,3
2BAA  0000FEFE00FE7E80         fcb 0,0,254,254,0,254,126,128
2BB2  7D7E007F7F007F00         fcb 125,126,0,127,127,0,127,0
2BBA  DEEE70BADC0EF600         fcb 222,238,112,186,220,14,246,0
2BC2  FFA4FF001F1F0F03         fcb 255,164,255,0,31,31,15,3
2BCA  FF24FF00FFFFFFFF         fcb 255,36,255,0,255,255,255,255
2BD2  FF25FF00F8F8F0C0         fcb 255,37,255,0,248,248,240,192
2BDA  FF0055FF00000000         fcb 255,0,85,255,0,0,0,0
2BE2  FF0059AD2C2C2C2C         fcb 255,0,89,173,44,44,44,44
2BEA  2C2C2C2C2C002C5E         fcb 44,44,44,44,44,0,44,94
2BF2  555454534847201F         fcb 85,84,84,83,72,71,32,31
2BFA  FF3F001F101F1F1F         fcb 255,63,0,31,16,31,31,31
2C02  80E018FC07F9FEFF         fcb 128,224,24,252,7,249,254,255
2C0A  00000000FCFFF8F0         fcb 0,0,0,0,252,255,248,240
2C12  0000000000804070         fcb 0,0,0,0,0,128,64,112
2C1A  00FC0300FDFDFDFE         fcb 0,252,3,0,253,253,253,254
2C22  E03F3F7F7F70BF00         fcb 224,63,63,127,127,112,191,0
2C2A  FFFFFFFFFC00FF00         fcb 255,255,255,255,252,0,255,0
2C32  FCFEFFFF0302FC00         fcb 252,254,255,255,3,2,252,0
2C3A  FF818181818181FF         fcb 255,129,129,129,129,129,129,255
2C42  3C4281818181423C         fcb 60,66,129,129,129,129,66,60
2C4A  18242442428181FF         fcb 24,36,36,66,66,129,129,255
2C52  FF818181818181FF         fcb 255,129,129,129,129,129,129,255
2C5A  3C4281818181423C         fcb 60,66,129,129,129,129,66,60
2C62  18242442428181FF         fcb 24,36,36,66,66,129,129,255
2C6A  3C24E78181E7243C         fcb 60,36,231,129,129,231,36,60
2C72  3C24E78181E7243C         fcb 60,36,231,129,129,231,36,60
2C7A  0000100000100000         fcb 0,0,16,0,0,16,0,0
2C82  0000000000000000         fcb 0,0,0,0,0,0,0,0
2C8A  0040404040404000         fcb 0,64,64,64,64,64,64,0
2C92  0050505050505000         fcb 0,80,80,80,80,80,80,0
2C9A  0054545454545400         fcb 0,84,84,84,84,84,84,0
2CA2  0055555555555500         fcb 0,85,85,85,85,85,85,0
2CAA  0E3D6DEDE57E817E         fcb 14,61,109,237,229,126,129,126
2CB2  0718204055FF80FF         fcb 7,24,32,64,85,255,128,255
2CBA  FF00000055FF00FF         fcb 255,0,0,0,85,255,0,255
2CC2  F00C020155FF01FF         fcb 240,12,2,1,85,255,1,255
2CCA  FEFEDAFAAEFEFE00         fcb 254,254,218,250,174,254,254,0
2CD2  0810207E04081000         fcb 8,16,32,126,4,8,16,0
2CDA                  bProp
2CDA  00                      fcb 0
2CDB  02                      fcb 2
2CDC  02                      fcb 2
2CDD  01                      fcb 1
2CDE  02                      fcb 2
2CDF  01                      fcb 1
2CE0  01                      fcb 1
2CE1  01                      fcb 1
2CE2  02                      fcb 2
2CE3  01                      fcb 1
2CE4  02                      fcb 2
2CE5  01                      fcb 1
2CE6  01                      fcb 1
2CE7  01                      fcb 1
2CE8  01                      fcb 1
2CE9  01                      fcb 1
2CEA  01                      fcb 1
2CEB  02                      fcb 2
2CEC  02                      fcb 2
2CED  01                      fcb 1
2CEE  00                      fcb 0
2CEF  02                      fcb 2
2CF0  02                      fcb 2
2CF1  02                      fcb 2
2CF2  02                      fcb 2
2CF3  02                      fcb 2
2CF4  05                      fcb 5
2CF5  03                      fcb 3
2CF6  03                      fcb 3
2CF7  00                      fcb 0
2CF8  00                      fcb 0
2CF9  00                      fcb 0
2CFA  00                      fcb 0
2CFB  00                      fcb 0
2CFC  00                      fcb 0
2CFD  00                      fcb 0
2CFE  00                      fcb 0
2CFF  00                      fcb 0
2D00  00                      fcb 0
2D01  00                      fcb 0
2D02  00                      fcb 0
2D03  00                      fcb 0
2D04  00                      fcb 0
2D05  00                      fcb 0
2D06  00                      fcb 0
2D07  00                      fcb 0
2D08  00                      fcb 0
2D09  00                      fcb 0
2D0A  00                      fcb 0
2D0B  02                      fcb 2
2D0C  02                      fcb 2
2D0D  02                      fcb 2
2D0E  02                      fcb 2
2D0F  02                      fcb 2
2D10  02                      fcb 2
2D11  01                      fcb 1
2D12  01                      fcb 1
2D13  01                      fcb 1
2D14  01                      fcb 1
2D15  01                      fcb 1
2D16  00                      fcb 0
2D17  02                      fcb 2
2D18  02                      fcb 2
2D19  02                      fcb 2
2D1A  02                      fcb 2
2D1B  02                      fcb 2
2D1C  02                      fcb 2
2D1D  02                      fcb 2
2D1E  02                      fcb 2
2D1F  02                      fcb 2
2D20  00                      fcb 0
2D21  02                      fcb 2
2D22  00                      fcb 0
2D23  00                      fcb 0
2D24  00                      fcb 0
2D25  00                      fcb 0
2D26  00                      fcb 0
2D27  00                      fcb 0
2D28  00                      fcb 0
2D29  00                      fcb 0
2D2A  00                      fcb 0
2D2B  00                      fcb 0
2D2C  00                      fcb 0
2D2D  00                      fcb 0
2D2E  00                      fcb 0
2D2F  02                      fcb 2
2D30  02                      fcb 2
2D31  02                      fcb 2
2D32  06                      fcb 6
2D33  06                      fcb 6
2D34                  sprGfx
                              ; Sprite nr.0
2D34  0000400043EF4C3950F923FB268B4EEF4E0EFFFF80015B6C90092BD590086DB6         fcb 0,0,64,0,67,239,76,57,80,249,35,251,38,139,78,239,78,14,255,255,128,1,91,108,144,9,43,213,144,8,109,182
2D54  00001000D0FB530E543EC8FEC9A2D3BB9383FFFF600016DB64024AF524029B6D         fcb 0,0,16,0,208,251,83,14,84,62,200,254,201,162,211,187,147,131,255,255,96,0,22,219,100,2,74,245,36,2,155,109
2D74  00000400F43E94C3950FB23FB268F4EEE4E0FFFF1800C5B6990052BD890066DB         fcb 0,0,4,0,244,62,148,195,149,15,178,63,178,104,244,238,228,224,255,255,24,0,197,182,153,0,82,189,137,0,102,219
2D94  00000100BD0FE530E543EC8F2C9ABD3B3938FFFF0600B16D264054AF2240D9B6         fcb 0,0,1,0,189,15,229,48,229,67,236,143,44,154,189,59,57,56,255,255,6,0,177,109,38,64,84,175,34,64,217,182
                      
2DB4  0000400043EF4C3950F923FB268B4EEF4E0EFFFF80016DB61008ABD590095B6C         fcb 0,0,64,0,67,239,76,57,80,249,35,251,38,139,78,239,78,14,255,255,128,1,109,182,16,8,171,213,144,9,91,108
2DD4  00001000D0FB530E543EC8FEC9A2D3BB9383FFFF60009B6D04026AF5640216DB         fcb 0,0,16,0,208,251,83,14,84,62,200,254,201,162,211,187,147,131,255,255,96,0,155,109,4,2,106,245,100,2,22,219
2DF4  00000400F43E94C3950FB23FB268F4EEE4E0FFFF180066DB81005ABD9900C5B6         fcb 0,0,4,0,244,62,148,195,149,15,178,63,178,104,244,238,228,224,255,255,24,0,102,219,129,0,90,189,153,0,197,182
2E14  00000100BD0FE530E543EC8F2C9ABD3B3938FFFF0600D9B6204056AF2640B16D         fcb 0,0,1,0,189,15,229,48,229,67,236,143,44,154,189,59,57,56,255,255,6,0,217,182,32,64,86,175,38,64,177,109
                      
2E34  800083EF4C3950F923FB268B4EEF4E0EFFFF8001000036DA9009ABD4100936DA         fcb 128,0,131,239,76,57,80,249,35,251,38,139,78,239,78,14,255,255,128,1,0,0,54,218,144,9,171,212,16,9,54,218
2E54  2000E0FB530E543EC8FEC9A2D3BB9383FFFF600000008DB664022AF544028DB6         fcb 32,0,224,251,83,14,84,62,200,254,201,162,211,187,147,131,255,255,96,0,0,0,141,182,100,2,42,245,68,2,141,182
2E74  0800F83E94C3950FB23FB268F4EEE4E0FFFF18000000A36D99004ABD9100A36D         fcb 8,0,248,62,148,195,149,15,178,63,178,104,244,238,228,224,255,255,24,0,0,0,163,109,153,0,74,189,145,0,163,109
2E94  0200BE0FE530E543EC8F2C9ABD3B3938FFFF0600000068DB264052AF244068DB         fcb 2,0,190,15,229,48,229,67,236,143,44,154,189,59,57,56,255,255,6,0,0,0,104,219,38,64,82,175,36,64,104,219
                      
                              ; Sprite nr.1
2EB4  00000002F7C29C329F0ADFC4D164F7727072FFFF800136DA9009ABD410096DB6         fcb 0,0,0,2,247,194,156,50,159,10,223,196,209,100,247,114,112,114,255,255,128,1,54,218,144,9,171,212,16,9,109,182
2ED4  00008000BDF0A70CA7C237F13459BDDC9C1CFFFF60008DB664022AF544029B6D         fcb 0,0,128,0,189,240,167,12,167,194,55,241,52,89,189,220,156,28,255,255,96,0,141,182,100,2,42,245,68,2,155,109
2EF4  000020002F7C29C3A9F04DFC4D162F772707FFFF1800A36D99004ABD910066DB         fcb 0,0,32,0,47,124,41,195,169,240,77,252,77,22,47,119,39,7,255,255,24,0,163,109,153,0,74,189,145,0,102,219
2F14  000008000BDFCA702A7C137F9345CBDDC9C1FFFF060068DB264052AF2440D9B6         fcb 0,0,8,0,11,223,202,112,42,124,19,127,147,69,203,221,201,193,255,255,6,0,104,219,38,64,82,175,36,64,217,182
                      
2F34  00000002F7C29C329F0ADFC4D164F7727072FFFF80016DB61008ABD5900936DA         fcb 0,0,0,2,247,194,156,50,159,10,223,196,209,100,247,114,112,114,255,255,128,1,109,182,16,8,171,213,144,9,54,218
2F54  00008000BDF0A70CA7C237F13459BDDC9C1CFFFF60009B6D04026AF564028DB6         fcb 0,0,128,0,189,240,167,12,167,194,55,241,52,89,189,220,156,28,255,255,96,0,155,109,4,2,106,245,100,2,141,182
2F74  000020002F7C29C3A9F04DFC4D162F772707FFFF180066DB81005ABD9900A36D         fcb 0,0,32,0,47,124,41,195,169,240,77,252,77,22,47,119,39,7,255,255,24,0,102,219,129,0,90,189,153,0,163,109
2F94  000008000BDFCA702A7C137F9345CBDDC9C1FFFF0600D9B6204056AF264068DB         fcb 0,0,8,0,11,223,202,112,42,124,19,127,147,69,203,221,201,193,255,255,6,0,217,182,32,64,86,175,38,64,104,219
                      
2FB4  0001F7C19C329F0ADFC4D164F7727072FFFF800100005B6C90092BD590085B6C         fcb 0,1,247,193,156,50,159,10,223,196,209,100,247,114,112,114,255,255,128,1,0,0,91,108,144,9,43,213,144,8,91,108
2FD4  40007DF0A70CA7C237F13459BDDC9C1CFFFF6000000016DB64024AF5240216DB         fcb 64,0,125,240,167,12,167,194,55,241,52,89,189,220,156,28,255,255,96,0,0,0,22,219,100,2,74,245,36,2,22,219
2FF4  10001F7C29C3A9F04DFC4D162F772707FFFF18000000C5B6990052BD8900C5B6         fcb 16,0,31,124,41,195,169,240,77,252,77,22,47,119,39,7,255,255,24,0,0,0,197,182,153,0,82,189,137,0,197,182
3014  040007DFCA702A7C137F9345CBDDC9C1FFFF06000000B16D264054AF2240B16D         fcb 4,0,7,223,202,112,42,124,19,127,147,69,203,221,201,193,255,255,6,0,0,0,177,109,38,64,84,175,34,64,177,109
                      
                              ; Sprite nr.2
3034  0180066008101088204420244012401240024002200420041008081006600180         fcb 1,128,6,96,8,16,16,136,32,68,32,36,64,18,64,18,64,2,64,2,32,4,32,4,16,8,8,16,6,96,1,128
3054  0060019802040422081108099004900490009000080108010402020401980060         fcb 0,96,1,152,2,4,4,34,8,17,8,9,144,4,144,4,144,0,144,0,8,1,8,1,4,2,2,4,1,152,0,96
3074  0018006600818108420442022401240124002400420042008100008100660018         fcb 0,24,0,102,0,129,129,8,66,4,66,2,36,1,36,1,36,0,36,0,66,0,66,0,129,0,0,129,0,102,0,24
3094  0006801940202042108190804900490009000900108010802040402080190006         fcb 0,6,128,25,64,32,32,66,16,129,144,128,73,0,73,0,9,0,9,0,16,128,16,128,32,64,64,32,128,25,0,6
                      
30B4  000003C00C30100820C4202440124012400240022004200410080C3003C00000         fcb 0,0,3,192,12,48,16,8,32,196,32,36,64,18,64,18,64,2,64,2,32,4,32,4,16,8,12,48,3,192,0,0
30D4  000000F0030C0402083108099004900490009000080108010402030C00F00000         fcb 0,0,0,240,3,12,4,2,8,49,8,9,144,4,144,4,144,0,144,0,8,1,8,1,4,2,3,12,0,240,0,0
30F4  0000003C00C38100420C4202240124012400240042004200810000C3003C0000         fcb 0,0,0,60,0,195,129,0,66,12,66,2,36,1,36,1,36,0,36,0,66,0,66,0,129,0,0,195,0,60,0,0
3114  0000000FC0302040108390804900490009000900108010802040C030000F0000         fcb 0,0,0,15,192,48,32,64,16,131,144,128,73,0,73,0,9,0,9,0,16,128,16,128,32,64,192,48,0,15,0,0
                      
3134  000003C00C30100820C4402240128009800940024002200410080C3003C00000         fcb 0,0,3,192,12,48,16,8,32,196,64,34,64,18,128,9,128,9,64,2,64,2,32,4,16,8,12,48,3,192,0,0
3154  000000F0030C0402083190089004600260029000900008010402030C00F00000         fcb 0,0,0,240,3,12,4,2,8,49,144,8,144,4,96,2,96,2,144,0,144,0,8,1,4,2,3,12,0,240,0,0
3174  0000003C00C38100420C2402240198009800240024004200810000C3003C0000         fcb 0,0,0,60,0,195,129,0,66,12,36,2,36,1,152,0,152,0,36,0,36,0,66,0,129,0,0,195,0,60,0,0
3194  0000000FC0302040108389004900260026000900090010802040C030000F0000         fcb 0,0,0,15,192,48,32,64,16,131,137,0,73,0,38,0,38,0,9,0,9,0,16,128,32,64,192,48,0,15,0,0
                      
31B4  03C00C30100820C440224012800980098001800140024002200410080C3003C0         fcb 3,192,12,48,16,8,32,196,64,34,64,18,128,9,128,9,128,1,128,1,64,2,64,2,32,4,16,8,12,48,3,192
31D4  00F0030C040208319008900460026002600060009000900008010402030C00F0         fcb 0,240,3,12,4,2,8,49,144,8,144,4,96,2,96,2,96,0,96,0,144,0,144,0,8,1,4,2,3,12,0,240
31F4  003C00C38100420C240224019800980018001800240024004200810000C3003C         fcb 0,60,0,195,129,0,66,12,36,2,36,1,152,0,152,0,24,0,24,0,36,0,36,0,66,0,129,0,0,195,0,60
3214  000FC030204010838900490026002600060006000900090010802040C030000F         fcb 0,15,192,48,32,64,16,131,137,0,73,0,38,0,38,0,6,0,6,0,9,0,9,0,16,128,32,64,192,48,0,15
                      
                              ; Sprite nr.3
3234  0000000000003FFC20043FFC06600180FFFF87E133CC4992B5ADA5A94812300C         fcb 0,0,0,0,0,0,63,252,32,4,63,252,6,96,1,128,255,255,135,225,51,204,73,146,181,173,165,169,72,18,48,12
3254  0000000000000FFF08010FFF01980060FFFF61F80CF392646D6B696A92040C03         fcb 0,0,0,0,0,0,15,255,8,1,15,255,1,152,0,96,255,255,97,248,12,243,146,100,109,107,105,106,146,4,12,3
3274  000000000000C3FF4200C3FF00660018FFFF187EC33C2499DB5A9A5A2481C300         fcb 0,0,0,0,0,0,195,255,66,0,195,255,0,102,0,24,255,255,24,126,195,60,36,153,219,90,154,90,36,129,195,0
3294  000000000000F0FF1080F0FF80190006FFFF861F30CF4926B6D6A696492030C0         fcb 0,0,0,0,0,0,240,255,16,128,240,255,128,25,0,6,255,255,134,31,48,207,73,38,182,214,166,150,73,32,48,192
                      
32B4  00000000000000003FFC20043FFC0660FFFF87E133CC4992B5AD95A54812300C         fcb 0,0,0,0,0,0,0,0,63,252,32,4,63,252,6,96,255,255,135,225,51,204,73,146,181,173,149,165,72,18,48,12
32D4  00000000000000000FFF08010FFF0198FFFF61F80CF392646D6B656992040C03         fcb 0,0,0,0,0,0,0,0,15,255,8,1,15,255,1,152,255,255,97,248,12,243,146,100,109,107,101,105,146,4,12,3
32F4  0000000000000000C3FF4200C3FF0066FFFF187EC33C2499DB5A595A2481C300         fcb 0,0,0,0,0,0,0,0,195,255,66,0,195,255,0,102,255,255,24,126,195,60,36,153,219,90,89,90,36,129,195,0
3314  0000000000000000F0FF1080F0FF8019FFFF861F30CF4926B6D69656492030C0         fcb 0,0,0,0,0,0,0,0,240,255,16,128,240,255,128,25,255,255,134,31,48,207,73,38,182,214,150,86,73,32,48,192
                      
3334  0000000000003FFC20043FFC06600180FFFF87E133CC499295A5B5AD4812300C         fcb 0,0,0,0,0,0,63,252,32,4,63,252,6,96,1,128,255,255,135,225,51,204,73,146,149,165,181,173,72,18,48,12
3354  0000000000000FFF08010FFF01980060FFFF61F80CF3926465696D6B92040C03         fcb 0,0,0,0,0,0,15,255,8,1,15,255,1,152,0,96,255,255,97,248,12,243,146,100,101,105,109,107,146,4,12,3
3374  000000000000C3FF4200C3FF00660018FFFF187EC33C2499595ADB5A2481C300         fcb 0,0,0,0,0,0,195,255,66,0,195,255,0,102,0,24,255,255,24,126,195,60,36,153,89,90,219,90,36,129,195,0
3394  000000000000F0FF1080F0FF80190006FFFF861F30CF49269656B6D6492030C0         fcb 0,0,0,0,0,0,240,255,16,128,240,255,128,25,0,6,255,255,134,31,48,207,73,38,150,86,182,214,73,32,48,192
                      
33B4  000000003FFC20043FFC066001800660FFFF87E133CC4992A5A9B5AD4812300C         fcb 0,0,0,0,63,252,32,4,63,252,6,96,1,128,6,96,255,255,135,225,51,204,73,146,165,169,181,173,72,18,48,12
33D4  000000000FFF08010FFF019800600198FFFF61F80CF39264696A6D6B92040C03         fcb 0,0,0,0,15,255,8,1,15,255,1,152,0,96,1,152,255,255,97,248,12,243,146,100,105,106,109,107,146,4,12,3
33F4  00000000C3FF4200C3FF006600180066FFFF187EC33C24999A5ADB5A2481C300         fcb 0,0,0,0,195,255,66,0,195,255,0,102,0,24,0,102,255,255,24,126,195,60,36,153,154,90,219,90,36,129,195,0
3414  00000000F0FF1080F0FF801900068019FFFF861F30CF4926A696B6D6492030C0         fcb 0,0,0,0,240,255,16,128,240,255,128,25,0,6,128,25,255,255,134,31,48,207,73,38,166,150,182,214,73,32,48,192
                      
                              ; Sprite nr.4
3434  0180BFFD01800FF0100820142014201420043FFC140818080FF0042004200E70         fcb 1,128,191,253,1,128,15,240,16,8,32,20,32,20,32,20,32,4,63,252,20,8,24,8,15,240,4,32,4,32,14,112
3454  00606FFF006003FC040208050805080508010FFF0502060203FC01080108039C         fcb 0,96,111,255,0,96,3,252,4,2,8,5,8,5,8,5,8,1,15,255,5,2,6,2,3,252,1,8,1,8,3,156
3474  0018DBFF001800FF81004201420142014200C3FF8140818000FF0042004200E7         fcb 0,24,219,255,0,24,0,255,129,0,66,1,66,1,66,1,66,0,195,255,129,64,129,128,0,255,0,66,0,66,0,231
3494  0006F6FF0006C03F20405080508050801080F0FF20502060C03F80108010C039         fcb 0,6,246,255,0,6,192,63,32,64,80,128,80,128,80,128,16,128,240,255,32,80,32,96,192,63,128,16,128,16,192,57
                      
34B4  01800FF001800FF0100820442044204420043FFC110812080FF0042004700E00         fcb 1,128,15,240,1,128,15,240,16,8,32,68,32,68,32,68,32,4,63,252,17,8,18,8,15,240,4,32,4,112,14,0
34D4  006003FC006003FC040208110811081108010FFF0442048203FC0108011C0380         fcb 0,96,3,252,0,96,3,252,4,2,8,17,8,17,8,17,8,1,15,255,4,66,4,130,3,252,1,8,1,28,3,128
34F4  001800FF001800FF81004204420442044200C3FF8110812000FF0042004700E0         fcb 0,24,0,255,0,24,0,255,129,0,66,4,66,4,66,4,66,0,195,255,129,16,129,32,0,255,0,66,0,71,0,224
3514  0006C03F0006C03F20401081108110811080F0FF20442048C03F8010C0110038         fcb 0,6,192,63,0,6,192,63,32,64,16,129,16,129,16,129,16,128,240,255,32,68,32,72,192,63,128,16,192,17,0,56
                      
3534  018003C001800FF0100822042204220420043FFC104810880FF004200E700000         fcb 1,128,3,192,1,128,15,240,16,8,34,4,34,4,34,4,32,4,63,252,16,72,16,136,15,240,4,32,14,112,0,0
3554  006000F0006003FC040208810881088108010FFF0412042203FC0108039C0000         fcb 0,96,0,240,0,96,3,252,4,2,8,129,8,129,8,129,8,1,15,255,4,18,4,34,3,252,1,8,3,156,0,0
3574  0018003C001800FF81004220422042204200C3FF8104810800FF004200E70000         fcb 0,24,0,60,0,24,0,255,129,0,66,32,66,32,66,32,66,0,195,255,129,4,129,8,0,255,0,66,0,231,0,0
3594  0006000F0006C03F20401088108810881080F0FF20412042C03F8010C0390000         fcb 0,6,0,15,0,6,192,63,32,64,16,136,16,136,16,136,16,128,240,255,32,65,32,66,192,63,128,16,192,57,0,0
                      
35B4  01800FF001800FF0100828042804280420043FFC101810280FF004200E200070         fcb 1,128,15,240,1,128,15,240,16,8,40,4,40,4,40,4,32,4,63,252,16,24,16,40,15,240,4,32,14,32,0,112
35D4  006003FC006003FC04020A010A010A0108010FFF0406040A03FC01080388001C         fcb 0,96,3,252,0,96,3,252,4,2,10,1,10,1,10,1,8,1,15,255,4,6,4,10,3,252,1,8,3,136,0,28
35F4  001800FF001800FF81004280428042804200C3FF8101810200FF004200E20007         fcb 0,24,0,255,0,24,0,255,129,0,66,128,66,128,66,128,66,0,195,255,129,1,129,2,0,255,0,66,0,226,0,7
3614  0006C03F0006C03F204010A010A010A01080F0FF6040A040C03F80108038C001         fcb 0,6,192,63,0,6,192,63,32,64,16,160,16,160,16,160,16,128,240,255,96,64,160,64,192,63,128,16,128,56,192,1
                      
                              ; Sprite nr.5
3634  03C00C3010082664299448124A527FFE20043FFC081010081FF8000000000000         fcb 3,192,12,48,16,8,38,100,41,148,72,18,74,82,127,254,32,4,63,252,8,16,16,8,31,248,0,0,0,0,0,0
3654  00F0030C040209990A65920492949FFF08010FFF0204040207FE000000000000         fcb 0,240,3,12,4,2,9,153,10,101,146,4,146,148,159,255,8,1,15,255,2,4,4,2,7,254,0,0,0,0,0,0
3674  003C00C3810042664299248124A5E7FF4200C3FF0081810081FF000000000000         fcb 0,60,0,195,129,0,66,102,66,153,36,129,36,165,231,255,66,0,195,255,0,129,129,0,129,255,0,0,0,0,0,0
3694  000FC0302040909950A649204929F9FF1080F0FF40202040E07F000000000000         fcb 0,15,192,48,32,64,144,153,80,166,73,32,73,41,249,255,16,128,240,255,64,32,32,64,224,127,0,0,0,0,0,0
                      
36B4  03C00C30100820042004466249927FFE20043FFC081010081FF8024001800000         fcb 3,192,12,48,16,8,32,4,32,4,70,98,73,146,127,254,32,4,63,252,8,16,16,8,31,248,2,64,1,128,0,0
36D4  00F0030C040208010801919892649FFF08010FFF0204040207FE009000600000         fcb 0,240,3,12,4,2,8,1,8,1,145,152,146,100,159,255,8,1,15,255,2,4,4,2,7,254,0,144,0,96,0,0
36F4  003C00C381004200420024662499E7FF4200C3FF0081810081FF002400180000         fcb 0,60,0,195,129,0,66,0,66,0,36,102,36,153,231,255,66,0,195,255,0,129,129,0,129,255,0,36,0,24,0,0
3714  000FC03020401080108089194926F9FF1080F0FF40202040E07F000900060000         fcb 0,15,192,48,32,64,16,128,16,128,137,25,73,38,249,255,16,128,240,255,64,32,32,64,224,127,0,9,0,6,0,0
                      
3734  03C00C3010082664299448124A527FFE20043FFC081010081FF8042002400180         fcb 3,192,12,48,16,8,38,100,41,148,72,18,74,82,127,254,32,4,63,252,8,16,16,8,31,248,4,32,2,64,1,128
3754  00F0030C040209990A65920492949FFF08010FFF0204040207FE010800900060         fcb 0,240,3,12,4,2,9,153,10,101,146,4,146,148,159,255,8,1,15,255,2,4,4,2,7,254,1,8,0,144,0,96
3774  003C00C3810042664299248124A5E7FF4200C3FF0081810081FF004200240018         fcb 0,60,0,195,129,0,66,102,66,153,36,129,36,165,231,255,66,0,195,255,0,129,129,0,129,255,0,66,0,36,0,24
3794  000FC0302040909950A649204929F9FF1080F0FF40202040E07F801000090006         fcb 0,15,192,48,32,64,144,153,80,166,73,32,73,41,249,255,16,128,240,255,64,32,32,64,224,127,128,16,0,9,0,6
                      
37B4  03C00C301008266429944A5248127FFE20043FFC081010081FF81008081007E0         fcb 3,192,12,48,16,8,38,100,41,148,74,82,72,18,127,254,32,4,63,252,8,16,16,8,31,248,16,8,8,16,7,224
37D4  00F0030C040209990A65929492049FFF08010FFF0204040207FE0402020401F8         fcb 0,240,3,12,4,2,9,153,10,101,146,148,146,4,159,255,8,1,15,255,2,4,4,2,7,254,4,2,2,4,1,248
37F4  003C00C381004266429924A52481E7FF4200C3FF0081810081FF81000081007E         fcb 0,60,0,195,129,0,66,102,66,153,36,165,36,129,231,255,66,0,195,255,0,129,129,0,129,255,129,0,0,129,0,126
3814  000FC0302040909950A649294920F9FF1080F0FF40202040E07F20404020801F         fcb 0,15,192,48,32,64,144,153,80,166,73,41,73,32,249,255,16,128,240,255,64,32,32,64,224,127,32,64,64,32,128,31
                      
                              ; Sprite nr.6
3834  018003400240018001006186DFFD95A961060180010001800180034002400180         fcb 1,128,3,64,2,64,1,128,1,0,97,134,223,253,149,169,97,6,1,128,1,0,1,128,1,128,3,64,2,64,1,128
3854  006000D0009000600040986177FF656A9841006000400060006000D000900060         fcb 0,96,0,208,0,144,0,96,0,64,152,97,119,255,101,106,152,65,0,96,0,64,0,96,0,96,0,208,0,144,0,96
3874  001800340024001800106618DDFF995A66100018001000180018003400240018         fcb 0,24,0,52,0,36,0,24,0,16,102,24,221,255,153,90,102,16,0,24,0,16,0,24,0,24,0,52,0,36,0,24
3894  0006000D0009000600041986F77FA65619840006000400060006000D00090006         fcb 0,6,0,13,0,9,0,6,0,4,25,134,247,127,166,86,25,132,0,6,0,4,0,6,0,6,0,13,0,9,0,6
                      
38B4  06600DD0099007E00100199837F425A4191801800100018007E00DD009900660         fcb 6,96,13,208,9,144,7,224,1,0,25,152,55,244,37,164,25,24,1,128,1,0,1,128,7,224,13,208,9,144,6,96
38D4  01980374026401F8004006660DFD0969064600600040006001F8037402640198         fcb 1,152,3,116,2,100,1,248,0,64,6,102,13,253,9,105,6,70,0,96,0,64,0,96,1,248,3,116,2,100,1,152
38F4  006600DD0099007E00108199437F425A8191001800100018007E00DD00990066         fcb 0,102,0,221,0,153,0,126,0,16,129,153,67,127,66,90,129,145,0,24,0,16,0,24,0,126,0,221,0,153,0,102
3914  801940374026801F00046066D0DF90966064000600040006801F403740268019         fcb 128,25,64,55,64,38,128,31,0,4,96,102,208,223,144,150,96,100,0,6,0,4,0,6,128,31,64,55,64,38,128,25
                      
3934  199837F42524199801000180034002400180018001000180199837F425641818         fcb 25,152,55,244,37,36,25,152,1,0,1,128,3,64,2,64,1,128,1,128,1,0,1,128,25,152,55,244,37,100,24,24
3954  06660DFD094906660040006000D00090006000600040006006660DFD09590606         fcb 6,102,13,253,9,73,6,102,0,64,0,96,0,208,0,144,0,96,0,96,0,64,0,96,6,102,13,253,9,89,6,6
3974  8199437F42528199001000180034002400180018001000188199437F42568181         fcb 129,153,67,127,66,82,129,153,0,16,0,24,0,52,0,36,0,24,0,24,0,16,0,24,129,153,67,127,66,86,129,129
3994  6066D0DF9094606600040006000D000900060006000400066066D0DF90956060         fcb 96,102,208,223,144,148,96,102,0,4,0,6,0,13,0,9,0,6,0,6,0,4,0,6,96,102,208,223,144,149,96,96
                      
39B4  06600DD0099007E00100199837F425A4191801800100018007E00DD009900660         fcb 6,96,13,208,9,144,7,224,1,0,25,152,55,244,37,164,25,24,1,128,1,0,1,128,7,224,13,208,9,144,6,96
39D4  01980374026401F8004006660DFD0969064600600040006001F8037402640198         fcb 1,152,3,116,2,100,1,248,0,64,6,102,13,253,9,105,6,70,0,96,0,64,0,96,1,248,3,116,2,100,1,152
39F4  006600DD0099007E00108199437F425A8191001800100018007E00DD00990066         fcb 0,102,0,221,0,153,0,126,0,16,129,153,67,127,66,90,129,145,0,24,0,16,0,24,0,126,0,221,0,153,0,102
3A14  801940374026801F00046066D0DF90966064000600040006801F403740268019         fcb 128,25,64,55,64,38,128,31,0,4,96,102,208,223,144,150,96,100,0,6,0,4,0,6,128,31,64,55,64,38,128,25
                      
                              ; Sprite nr.7
3A34  0FE017F013F800007E7801903E60000C0FB03AC044FC82C29298A2A444343818         fcb 15,224,23,240,19,248,0,0,126,120,1,144,62,96,0,12,15,176,58,192,68,252,130,194,146,152,162,164,68,52,56,24
3A54  03F805FC04FE00001F9E00640F98000303EC0EB0113FA0B024A628A9110D0E06         fcb 3,248,5,252,4,254,0,0,31,158,0,100,15,152,0,3,3,236,14,176,17,63,160,176,36,166,40,169,17,13,14,6
3A74  00FE017F813F000087E7001903E6C00000FB03ACC44F282C89294A2A44438381         fcb 0,254,1,127,129,63,0,0,135,231,0,25,3,230,192,0,0,251,3,172,196,79,40,44,137,41,74,42,68,67,131,129
3A94  803FC05FE04F0000E1F9400680F93000C03E00EBF1130A0B624A928AD11060E0         fcb 128,63,192,95,224,79,0,0,225,249,64,6,128,249,48,0,192,62,0,235,241,19,10,11,98,74,146,138,209,16,96,224
                      
3AB4  0FE017F013F800007E7801903E60000C0FB03AC044FCA2C2929882B444243818         fcb 15,224,23,240,19,248,0,0,126,120,1,144,62,96,0,12,15,176,58,192,68,252,162,194,146,152,130,180,68,36,56,24
3AD4  03F805FC04FE00001F9E00640F98000303EC0EB0113FA8B024A620AD11090E06         fcb 3,248,5,252,4,254,0,0,31,158,0,100,15,152,0,3,3,236,14,176,17,63,168,176,36,166,32,173,17,9,14,6
3AF4  00FE017F813F000087E7001903E6C00000FB03ACC44F2A2C8929482B44428381         fcb 0,254,1,127,129,63,0,0,135,231,0,25,3,230,192,0,0,251,3,172,196,79,42,44,137,41,72,43,68,66,131,129
3B14  803FC05FE04F0000E1F9400680F93000C03E00EBF1130A8B624AD20A911060E0         fcb 128,63,192,95,224,79,0,0,225,249,64,6,128,249,48,0,192,62,0,235,241,19,10,139,98,74,210,10,145,16,96,224
                      
3B34  0FE017F013F800007E7801903E60000C0FB03AC044FC8AC2929882AC44243818         fcb 15,224,23,240,19,248,0,0,126,120,1,144,62,96,0,12,15,176,58,192,68,252,138,194,146,152,130,172,68,36,56,24
3B54  03F805FC04FE00001F9E00640F98000303EC0EB0113FA2B024A620AB11090E06         fcb 3,248,5,252,4,254,0,0,31,158,0,100,15,152,0,3,3,236,14,176,17,63,162,176,36,166,32,171,17,9,14,6
3B74  00FE017F813F000087E7001903E6C00000FB03ACC44F28AC8929C82A44428381         fcb 0,254,1,127,129,63,0,0,135,231,0,25,3,230,192,0,0,251,3,172,196,79,40,172,137,41,200,42,68,66,131,129
3B94  803FC05FE04F0000E1F9400680F93000C03E00EBF1130A2B624AB20A911060E0         fcb 128,63,192,95,224,79,0,0,225,249,64,6,128,249,48,0,192,62,0,235,241,19,10,43,98,74,178,10,145,16,96,224
                      
3BB4  0FE017F013F800007E7801903E60000C0FB03AC044FC82C292988AA4442C3818         fcb 15,224,23,240,19,248,0,0,126,120,1,144,62,96,0,12,15,176,58,192,68,252,130,194,146,152,138,164,68,44,56,24
3BD4  03F805FC04FE00001F9E00640F98000303EC0EB0113FA0B024A622A9110B0E06         fcb 3,248,5,252,4,254,0,0,31,158,0,100,15,152,0,3,3,236,14,176,17,63,160,176,36,166,34,169,17,11,14,6
3BF4  00FE017F813F000087E7001903E6C00000FB03ACC44F282C892948AAC4428381         fcb 0,254,1,127,129,63,0,0,135,231,0,25,3,230,192,0,0,251,3,172,196,79,40,44,137,41,72,170,196,66,131,129
3C14  803FC05FE04F0000E1F9400680F93000C03E00EBF1130A0B624A922AB11060E0         fcb 128,63,192,95,224,79,0,0,225,249,64,6,128,249,48,0,192,62,0,235,241,19,10,11,98,74,146,42,177,16,96,224
                      
                              ; Sprite nr.8
3C34  000020202FA01FC036E032607FF070703FE01040202040108008C018C018C018         fcb 0,0,32,32,47,160,31,192,54,224,50,96,127,240,112,112,63,224,16,64,32,32,64,16,128,8,192,24,192,24,192,24
3C54  000008080BE807F00DB80C981FFC1C1C0FF80410080810042002300630063006         fcb 0,0,8,8,11,232,7,240,13,184,12,152,31,252,28,28,15,248,4,16,8,8,16,4,32,2,48,6,48,6,48,6
3C74  0000020202FA01FC036E032607FF070703FE01040202040188008C018C018C01         fcb 0,0,2,2,2,250,1,252,3,110,3,38,7,255,7,7,3,254,1,4,2,2,4,1,136,0,140,1,140,1,140,1
3C94  0000808080BE007F80DB80C9C1FFC1C180FF0041808041002200630063006300         fcb 0,0,128,128,128,190,0,127,128,219,128,201,193,255,193,193,128,255,0,65,128,128,65,0,34,0,99,0,99,0,99,0
                      
3CB4  101017D00FE01B7019303FF838381FF00820101020084004800CC00CC00CC000         fcb 16,16,23,208,15,224,27,112,25,48,63,248,56,56,31,240,8,32,16,16,32,8,64,4,128,12,192,12,192,12,192,0
3CD4  040405F403F806DC064C0FFE0E0E07FC02080404080210012003300330033000         fcb 4,4,5,244,3,248,6,220,6,76,15,254,14,14,7,252,2,8,4,4,8,2,16,1,32,3,48,3,48,3,48,0
3CF4  0101017D00FE01B7019383FF838301FF0082010182004400C800CC00CC000C00         fcb 1,1,1,125,0,254,1,183,1,147,131,255,131,131,1,255,0,130,1,1,130,0,68,0,200,0,204,0,204,0,12,0
3D14  4040405F803FC06DC064E0FFE0E0C07F80204040208011003200330033000300         fcb 64,64,64,95,128,63,192,109,192,100,224,255,224,224,192,127,128,32,64,64,32,128,17,0,50,0,51,0,51,0,3,0
                      
3D34  08080BE807F00DB80C981FFC1C1C0FF804100808100420023001300330030003         fcb 8,8,11,232,7,240,13,184,12,152,31,252,28,28,15,248,4,16,8,8,16,4,32,2,48,1,48,3,48,3,0,3
3D54  020202FA01FC036E032607FF070703FE01040202040188004C00CC00CC00C000         fcb 2,2,2,250,1,252,3,110,3,38,7,255,7,7,3,254,1,4,2,2,4,1,136,0,76,0,204,0,204,0,192,0
3D74  808080BE007F80DB80C9C1FFC1C180FF00418080410022001300330033003000         fcb 128,128,128,190,0,127,128,219,128,201,193,255,193,193,128,255,0,65,128,128,65,0,34,0,19,0,51,0,51,0,48,0
3D94  2020A02FC01FE0366032F07F7070E03F401020201040088004C00CC00CC00C00         fcb 32,32,160,47,192,31,224,54,96,50,240,127,112,112,224,63,64,16,32,32,16,64,8,128,4,192,12,192,12,192,12,0
                      
3DB4  08080BE807F00DB80C981FFC1C1C0FF804100408040404020401060306030603         fcb 8,8,11,232,7,240,13,184,12,152,31,252,28,28,15,248,4,16,4,8,4,4,4,2,4,1,6,3,6,3,6,3
3DD4  020202FA01FC036E032607FF070703FE01040102010181004100C180C180C180         fcb 2,2,2,250,1,252,3,110,3,38,7,255,7,7,3,254,1,4,1,2,1,1,129,0,65,0,193,128,193,128,193,128
3DF4  808080BE007F80DB80C9C1FFC1C180FF00418040404020401040306030603060         fcb 128,128,128,190,0,127,128,219,128,201,193,255,193,193,128,255,0,65,128,64,64,64,32,64,16,64,48,96,48,96,48,96
3E14  2020A02FC01FE0366032F07F7070E03F401020101010081004100C180C180C18         fcb 32,32,160,47,192,31,224,54,96,50,240,127,112,112,224,63,64,16,32,16,16,16,8,16,4,16,12,24,12,24,12,24
                      
3E34  0000040405F403F806DC064C0FFE0E0E07FC0208040408021001180318031803         fcb 0,0,4,4,5,244,3,248,6,220,6,76,15,254,14,14,7,252,2,8,4,4,8,2,16,1,24,3,24,3,24,3
3E54  00000101017D00FE01B7019383FF838301FF0082010182004400C600C600C600         fcb 0,0,1,1,1,125,0,254,1,183,1,147,131,255,131,131,1,255,0,130,1,1,130,0,68,0,198,0,198,0,198,0
3E74  00004040405F803FC06DC064E0FFE0E0C07F8020404020801100318031803180         fcb 0,0,64,64,64,95,128,63,192,109,192,100,224,255,224,224,192,127,128,32,64,64,32,128,17,0,49,128,49,128,49,128
3E94  00001010D017E00F701B3019F83F3838F01F20081010082004400C600C600C60         fcb 0,0,16,16,208,23,224,15,112,27,48,25,248,63,56,56,240,31,32,8,16,16,8,32,4,64,12,96,12,96,12,96
                      
3EB4  0000040405F403F806DC064C0FFE0E0E07FC0608180820084008601860186018         fcb 0,0,4,4,5,244,3,248,6,220,6,76,15,254,14,14,7,252,6,8,24,8,32,8,64,8,96,24,96,24,96,24
3ED4  00000101017D00FE01B7019383FF838301FF0182060208021002180618061806         fcb 0,0,1,1,1,125,0,254,1,183,1,147,131,255,131,131,1,255,1,130,6,2,8,2,16,2,24,6,24,6,24,6
3EF4  00004040405F803FC06DC064E0FFE0E0C07F8060818082008400860186018601         fcb 0,0,64,64,64,95,128,63,192,109,192,100,224,255,224,224,192,127,128,96,129,128,130,0,132,0,134,1,134,1,134,1
3F14  00001010D017E00F701B3019F83F3838F01F2018206020802100618061806180         fcb 0,0,16,16,208,23,224,15,112,27,48,25,248,63,56,56,240,31,32,24,32,96,32,128,33,0,97,128,97,128,97,128
                      
                              ; Sprite nr.9
3F34  07E0187820344012400E80078005FFFFB0C3430E2C3C10D80B10042002C00180         fcb 7,224,24,120,32,52,64,18,64,14,128,7,128,5,255,255,176,195,67,14,44,60,16,216,11,16,4,32,2,192,1,128
3F54  01F8061E080D90049003E0016001FFFFEC3090C30B0F043602C4010800B00060         fcb 1,248,6,30,8,13,144,4,144,3,224,1,96,1,255,255,236,48,144,195,11,15,4,54,2,196,1,8,0,176,0,96
3F74  007E818742032401E40078005800FFFF3B0CE430C2C3810D00B10042002C0018         fcb 0,126,129,135,66,3,36,1,228,0,120,0,88,0,255,255,59,12,228,48,194,195,129,13,0,177,0,66,0,44,0,24
3F94  801FE061D080490039001E001600FFFF0EC3390CF0B06043402C8010000B0006         fcb 128,31,224,97,208,128,73,0,57,0,30,0,22,0,255,255,14,195,57,12,240,176,96,67,64,44,128,16,0,11,0,6
                      
3FB4  07E0189820444022402280118011FFFF98616186261C187809B0062002400180         fcb 7,224,24,152,32,68,64,34,64,34,128,17,128,17,255,255,152,97,97,134,38,28,24,120,9,176,6,32,2,64,1,128
3FD4  01F8062608119008900860046004FFFF661898610987061E026C018800900060         fcb 1,248,6,38,8,17,144,8,144,8,96,4,96,4,255,255,102,24,152,97,9,135,6,30,2,108,1,136,0,144,0,96
3FF4  007E818942042402240218011801FFFF19866618C2618187009B006200240018         fcb 0,126,129,137,66,4,36,2,36,2,24,1,24,1,255,255,25,134,102,24,194,97,129,135,0,155,0,98,0,36,0,24
4014  801F606210818900890046004600FFFF866119867098E061C026801800090006         fcb 128,31,96,98,16,129,137,0,137,0,70,0,70,0,255,255,134,97,25,134,112,152,224,97,192,38,128,24,0,9,0,6
                      
4034  07E0189820844082404280418041FFFF8C3170C2230C1C3808F0076002400180         fcb 7,224,24,152,32,132,64,130,64,66,128,65,128,65,255,255,140,49,112,194,35,12,28,56,8,240,7,96,2,64,1,128
4054  01F8062608219020901060106010FFFF630C9C3008C3070E023C01D800900060         fcb 1,248,6,38,8,33,144,32,144,16,96,16,96,16,255,255,99,12,156,48,8,195,7,14,2,60,1,216,0,144,0,96
4074  007E818942082408240418041804FFFF18C3270CC23081C3008F007600240018         fcb 0,126,129,137,66,8,36,8,36,4,24,4,24,4,255,255,24,195,39,12,194,48,129,195,0,143,0,118,0,36,0,24
4094  801F606210820902090106010601FFFFC63009C3308CE070C023801D00090006         fcb 128,31,96,98,16,130,9,2,9,1,6,1,6,1,255,255,198,48,9,195,48,140,224,112,192,35,128,29,0,9,0,6
                      
40B4  07E0191821044102420282018201FFFF8619586221841618087005E002C00180         fcb 7,224,25,24,33,4,65,2,66,2,130,1,130,1,255,255,134,25,88,98,33,132,22,24,8,112,5,224,2,192,1,128
40D4  01F8064608419040908060806080FFFF6186961808610586021C017800B00060         fcb 1,248,6,70,8,65,144,64,144,128,96,128,96,128,255,255,97,134,150,24,8,97,5,134,2,28,1,120,0,176,0,96
40F4  007E819142102410242018201820FFFF98612586421881610087005E002C0018         fcb 0,126,129,145,66,16,36,16,36,32,24,32,24,32,255,255,152,97,37,134,66,24,129,97,0,135,0,94,0,44,0,24
4114  801F606410840904090806080608FFFF6618896110866058C0218017000B0006         fcb 128,31,96,100,16,132,9,4,9,8,6,8,6,8,255,255,102,24,137,97,16,134,96,88,192,33,128,23,0,11,0,6
                      
4134  07E0191822044402440288018801FFFF830D4C3230C413080C3004E003400180         fcb 7,224,25,24,34,4,68,2,68,2,136,1,136,1,255,255,131,13,76,50,48,196,19,8,12,48,4,224,3,64,1,128
4154  01F8064608819100910062006200FFFF60C3930C0C3104C2030C013800D00060         fcb 1,248,6,70,8,129,145,0,145,0,98,0,98,0,255,255,96,195,147,12,12,49,4,194,3,12,1,56,0,208,0,96
4174  007E819142202440244018801880FFFFD83024C3430C813000C3004E00340018         fcb 0,126,129,145,66,32,36,64,36,64,24,128,24,128,255,255,216,48,36,195,67,12,129,48,0,195,0,78,0,52,0,24
4194  801F606410880910091006200620FFFF360CC93010C3204CC0308013000D0006         fcb 128,31,96,100,16,136,9,16,9,16,6,32,6,32,255,255,54,12,201,48,16,195,32,76,192,48,128,19,0,13,0,6
                      
41B4  07E01E18280448027002E001A001FFFF8187461E386C11880E10046003C00180         fcb 7,224,30,24,40,4,72,2,112,2,224,1,160,1,255,255,129,135,70,30,56,108,17,136,14,16,4,96,3,192,1,128
41D4  01F807860A0192009C0078006800FFFFE06191870E1B04620384011800F00060         fcb 1,248,7,134,10,1,146,0,156,0,120,0,104,0,255,255,224,97,145,135,14,27,4,98,3,132,1,24,0,240,0,96
41F4  007E81E14280248027001E001A00FFFF7818E461C386811800E10046003C0018         fcb 0,126,129,225,66,128,36,128,39,0,30,0,26,0,255,255,120,24,228,97,195,134,129,24,0,225,0,70,0,60,0,24
4214  801F607810A0092009C007800680FFFF1E067918B0E1204640388011000F0006         fcb 128,31,96,120,16,160,9,32,9,192,7,128,6,128,255,255,30,6,121,24,176,225,32,70,64,56,128,17,0,15,0,6
                      
                              ; Sprite nr.10
4234  000001800240033C006600721F7A207E503C40405048585C4D4820801F000000         fcb 0,0,1,128,2,64,3,60,0,102,0,114,31,122,32,126,80,60,64,64,80,72,88,92,77,72,32,128,31,0,0,0
4254  00000060009000CF8019801C87DE881F140F1010141216171352082007C00000         fcb 0,0,0,96,0,144,0,207,128,25,128,28,135,222,136,31,20,15,16,16,20,18,22,23,19,82,8,32,7,192,0,0
4274  000000180024C03360062007A1F7E207C50304048504C58584D4020801F00000         fcb 0,0,0,24,0,36,192,51,96,6,32,7,161,247,226,7,197,3,4,4,133,4,197,133,132,212,2,8,1,240,0,0
4294  000000060009F00C9801C801E87DF881F14001012141716121350082007C0000         fcb 0,0,0,6,0,9,240,12,152,1,200,1,232,125,248,129,241,64,1,1,33,65,113,97,33,53,0,130,0,124,0,0
                      
42B4  01E00330039003C003C0019800240734089810441452125A088C070000000000         fcb 1,224,3,48,3,144,3,192,3,192,1,152,0,36,7,52,8,152,16,68,20,82,18,90,8,140,7,0,0,0,0,0
42D4  007800CC00E400F000F00066000901CD0226041185148496022301C000000000         fcb 0,120,0,204,0,228,0,240,0,240,0,102,0,9,1,205,2,38,4,17,133,20,132,150,2,35,1,192,0,0,0,0
42F4  001E00330039003C003C801940024073808941042145A125C088007000000000         fcb 0,30,0,51,0,57,0,60,0,60,128,25,64,2,64,115,128,137,65,4,33,69,161,37,192,136,0,112,0,0,0,0
4314  8007C00C400E000F000F60069000D01C60221041485168493022001C00000000         fcb 128,7,192,12,64,14,0,15,0,15,96,6,144,0,208,28,96,34,16,65,72,81,104,73,48,34,0,28,0,0,0,0
                      
4334  00C0012001A000D000380010000E0633093910BD10BF091E0600000000000000         fcb 0,192,1,32,1,160,0,208,0,56,0,16,0,14,6,51,9,57,16,189,16,191,9,30,6,0,0,0,0,0,0,0
4354  0030004800680034000E00048003C18C424E442FC42F82470180000000000000         fcb 0,48,0,72,0,104,0,52,0,14,0,4,128,3,193,140,66,78,68,47,196,47,130,71,1,128,0,0,0,0,0,0
4374  000C0012001A000D80030001E00030639093D10BF10BE0910060000000000000         fcb 0,12,0,18,0,26,0,13,128,3,0,1,224,0,48,99,144,147,209,11,241,11,224,145,0,96,0,0,0,0,0,0
4394  0003800480064003E00040003800CC18E424F442FC4278240018000000000000         fcb 0,3,128,4,128,6,64,3,224,0,64,0,56,0,204,24,228,36,244,66,252,66,120,36,0,24,0,0,0,0,0,0
                      
43B4  0000008001C000A000700020001E00330639093D093F061E0000000000000000         fcb 0,0,0,128,1,192,0,160,0,112,0,32,0,30,0,51,6,57,9,61,9,63,6,30,0,0,0,0,0,0,0,0
43D4  0000002000700028001C00088007C00C418E424FC24F81870000000000000000         fcb 0,0,0,32,0,112,0,40,0,28,0,8,128,7,192,12,65,142,66,79,194,79,129,135,0,0,0,0,0,0,0,0
43F4  00000008001C000A00070002E00130039063D093F093E0610000000000000000         fcb 0,0,0,8,0,28,0,10,0,7,0,2,224,1,48,3,144,99,208,147,240,147,224,97,0,0,0,0,0,0,0,0
4414  0000000200078002C00180007800CC00E418F424FC2478180000000000000000         fcb 0,0,0,2,0,7,128,2,192,1,128,0,120,0,204,0,228,24,244,36,252,36,120,24,0,0,0,0,0,0,0,0
                      
                              ; Sprite nr.11
4434  00000000000000000000000000000000000000000000000000000000000097FF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,255
4454  000000000000000000000000000000000000000000000000000000000000E5FF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,255
4474  000000000000000000000000000000000000000000000000000000000000F97F         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,127
4494  000000000000000000000000000000000000000000000000000000000000FE5F         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,95
                      
44B4  00000000000000000000000000000000000000000000000097FF00004BFE0000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,255,0,0,75,254,0,0
44D4  000000000000000000000000000000000000000000000000E5FF000092FF0000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,255,0,0,146,255,0,0
44F4  000000000000000000000000000000000000000000000000F97F0000E4BF0000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,127,0,0,228,191,0,0
4514  000000000000000000000000000000000000000000000000FE5F0000F92F0000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,95,0,0,249,47,0,0
                      
4534  0000000000000000000000000000000097FF00004BFE0000AFFF97FEAFFD97FE         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,255,0,0,75,254,0,0,175,255,151,254,175,253,151,254
4554  00000000000000000000000000000000E5FF000092FF0000EBFFA5FF6BFFA5FF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,255,0,0,146,255,0,0,235,255,165,255,107,255,165,255
4574  00000000000000000000000000000000F97F0000E4BF0000FAFFE97FDAFFE97F         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,127,0,0,228,191,0,0,250,255,233,127,218,255,233,127
4594  00000000000000000000000000000000FE5F0000F92F0000FEBFFA5FF6BFFA5F         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,95,0,0,249,47,0,0,254,191,250,95,246,191,250,95
                      
45B4  0000000000000000000097FF00004BFE0000AFFF97FEAFFD97FEAFFD97FEAFFD         fcb 0,0,0,0,0,0,0,0,0,0,151,255,0,0,75,254,0,0,175,255,151,254,175,253,151,254,175,253,151,254,175,253
45D4  00000000000000000000E5FF000092FF0000EBFFA5FF6BFFA5FF6BFFA5FF6BFF         fcb 0,0,0,0,0,0,0,0,0,0,229,255,0,0,146,255,0,0,235,255,165,255,107,255,165,255,107,255,165,255,107,255
45F4  00000000000000000000F97F0000E4BF0000FAFFE97FDAFFE97FDAFFE97FDAFF         fcb 0,0,0,0,0,0,0,0,0,0,249,127,0,0,228,191,0,0,250,255,233,127,218,255,233,127,218,255,233,127,218,255
4614  00000000000000000000FE5F0000F92F0000FEBFFA5FF6BFFA5FF6BFFA5FF6BF         fcb 0,0,0,0,0,0,0,0,0,0,254,95,0,0,249,47,0,0,254,191,250,95,246,191,250,95,246,191,250,95,246,191
                      
4634  97FF00004BFE0000AFFF97FEAFFD97FEAFFD97FEAFFD97FEAFFD97FEAFFD97FE         fcb 151,255,0,0,75,254,0,0,175,255,151,254,175,253,151,254,175,253,151,254,175,253,151,254,175,253,151,254,175,253,151,254
4654  E5FF000092FF0000EBFFA5FF6BFFA5FF6BFFA5FF6BFFA5FF6BFFA5FF6BFFA5FF         fcb 229,255,0,0,146,255,0,0,235,255,165,255,107,255,165,255,107,255,165,255,107,255,165,255,107,255,165,255,107,255,165,255
4674  F97F0000E4BF0000FAFFE97FDAFFE97FDAFFE97FDAFFE97FDAFFE97FDAFFE97F         fcb 249,127,0,0,228,191,0,0,250,255,233,127,218,255,233,127,218,255,233,127,218,255,233,127,218,255,233,127,218,255,233,127
4694  FE5F0000F92F0000FEBFFA5FF6BFFA5FF6BFFA5FF6BFFA5FF6BFFA5FF6BFFA5F         fcb 254,95,0,0,249,47,0,0,254,191,250,95,246,191,250,95,246,191,250,95,246,191,250,95,246,191,250,95,246,191,250,95
                      
                              ; Sprite nr.12
46B4  00000000200400000420800180010000200420040420800181010000A005FFFF         fcb 0,0,0,0,32,4,0,0,4,32,128,1,128,1,0,0,32,4,32,4,4,32,128,1,129,1,0,0,160,5,255,255
46D4  000000000801000001086000600000000801080101086000604000006801FFFF         fcb 0,0,0,0,8,1,0,0,1,8,96,0,96,0,0,0,8,1,8,1,1,8,96,0,96,64,0,0,104,1,255,255
46F4  000000004200000000421800180000004200420000421800181000005A00FFFF         fcb 0,0,0,0,66,0,0,0,0,66,24,0,24,0,0,0,66,0,66,0,0,66,24,0,24,16,0,0,90,0,255,255
4714  000000001080000080100600060000001080108080100600060400001680FFFF         fcb 0,0,0,0,16,128,0,0,128,16,6,0,6,0,0,0,16,128,16,128,128,16,6,0,6,4,0,0,22,128,255,255
                      
4734  000000000420000080010000200420040420810180010000200420048421FFFF         fcb 0,0,0,0,4,32,0,0,128,1,0,0,32,4,32,4,4,32,129,1,128,1,0,0,32,4,32,4,132,33,255,255
4754  000000000108000060000000080108010108604060000000080108016108FFFF         fcb 0,0,0,0,1,8,0,0,96,0,0,0,8,1,8,1,1,8,96,64,96,0,0,0,8,1,8,1,97,8,255,255
4774  000000000042000018000000420042000042181018000000420042001842FFFF         fcb 0,0,0,0,0,66,0,0,24,0,0,0,66,0,66,0,0,66,24,16,24,0,0,0,66,0,66,0,24,66,255,255
4794  000000008010000006000000108010808010060406000000108010808610FFFF         fcb 0,0,0,0,128,16,0,0,6,0,0,0,16,128,16,128,128,16,6,4,6,0,0,0,16,128,16,128,134,16,255,255
                      
47B4  000000000000000021042004042080018001000020042004042080018001FFFF         fcb 0,0,0,0,0,0,0,0,33,4,32,4,4,32,128,1,128,1,0,0,32,4,32,4,4,32,128,1,128,1,255,255
47D4  000000000000000008410801010860006000000008010801010860006000FFFF         fcb 0,0,0,0,0,0,0,0,8,65,8,1,1,8,96,0,96,0,0,0,8,1,8,1,1,8,96,0,96,0,255,255
47F4  000000000000000042104200004218001800000042004200004218001800FFFF         fcb 0,0,0,0,0,0,0,0,66,16,66,0,0,66,24,0,24,0,0,0,66,0,66,0,0,66,24,0,24,0,255,255
4814  000000000000000010841080801006000600000010801080801006000600FFFF         fcb 0,0,0,0,0,0,0,0,16,132,16,128,128,16,6,0,6,0,0,0,16,128,16,128,128,16,6,0,6,0,255,255
                      
                              ; Sprite nr.13
4834  0000800000000200000100000000100000400000000000040000200000000000         fcb 0,0,128,0,0,0,2,0,0,1,0,0,0,0,16,0,0,64,0,0,0,0,0,4,0,0,32,0,0,0,0,0
4854  0000200000000080400000000000040000100000000000010000080000000000         fcb 0,0,32,0,0,0,0,128,64,0,0,0,0,0,4,0,0,16,0,0,0,0,0,1,0,0,8,0,0,0,0,0
4874  0000080000000020100000000000010000040000000040000000020000000000         fcb 0,0,8,0,0,0,0,32,16,0,0,0,0,0,1,0,0,4,0,0,0,0,64,0,0,0,2,0,0,0,0,0
4894  0000020000000008040000000000004000010000000010000000008000000000         fcb 0,0,2,0,0,0,0,8,4,0,0,0,0,0,0,64,0,1,0,0,0,0,16,0,0,0,0,128,0,0,0,0
                      
48B4  0000000200000800000400000000400001000000000000100000800000000000         fcb 0,0,0,2,0,0,8,0,0,4,0,0,0,0,64,0,1,0,0,0,0,0,0,16,0,0,128,0,0,0,0,0
48D4  0000800000000200000100000000100000400000000000040000200000000000         fcb 0,0,128,0,0,0,2,0,0,1,0,0,0,0,16,0,0,64,0,0,0,0,0,4,0,0,32,0,0,0,0,0
48F4  0000200000000080400000000000040000100000000000010000080000000000         fcb 0,0,32,0,0,0,0,128,64,0,0,0,0,0,4,0,0,16,0,0,0,0,0,1,0,0,8,0,0,0,0,0
4914  0000080000000020100000000000010000040000000040000000020000000000         fcb 0,0,8,0,0,0,0,32,16,0,0,0,0,0,1,0,0,4,0,0,0,0,64,0,0,0,2,0,0,0,0,0
                      
4934  0000000800002000001000000000000104000000000000400000000200000000         fcb 0,0,0,8,0,0,32,0,0,16,0,0,0,0,0,1,4,0,0,0,0,0,0,64,0,0,0,2,0,0,0,0
4954  0000000200000800000400000000400001000000000000100000800000000000         fcb 0,0,0,2,0,0,8,0,0,4,0,0,0,0,64,0,1,0,0,0,0,0,0,16,0,0,128,0,0,0,0,0
4974  0000800000000200000100000000100000400000000000040000200000000000         fcb 0,0,128,0,0,0,2,0,0,1,0,0,0,0,16,0,0,64,0,0,0,0,0,4,0,0,32,0,0,0,0,0
4994  0000200000000080400000000000040000100000000000010000080000000000         fcb 0,0,32,0,0,0,0,128,64,0,0,0,0,0,4,0,0,16,0,0,0,0,0,1,0,0,8,0,0,0,0,0
                      
49B4  0000002000008000004000000000000410000000000001000000000800000000         fcb 0,0,0,32,0,0,128,0,0,64,0,0,0,0,0,4,16,0,0,0,0,0,1,0,0,0,0,8,0,0,0,0
49D4  0000000800002000001000000000000104000000000000400000000200000000         fcb 0,0,0,8,0,0,32,0,0,16,0,0,0,0,0,1,4,0,0,0,0,0,0,64,0,0,0,2,0,0,0,0
49F4  0000000200000800000400000000400001000000000000100000800000000000         fcb 0,0,0,2,0,0,8,0,0,4,0,0,0,0,64,0,1,0,0,0,0,0,0,16,0,0,128,0,0,0,0,0
4A14  0000800000000200000100000000100000400000000000040000200000000000         fcb 0,0,128,0,0,0,2,0,0,1,0,0,0,0,16,0,0,64,0,0,0,0,0,4,0,0,32,0,0,0,0,0
                      
4A34  0000008000000002010000000000001040000000000004000000002000000000         fcb 0,0,0,128,0,0,0,2,1,0,0,0,0,0,0,16,64,0,0,0,0,0,4,0,0,0,0,32,0,0,0,0
4A54  0000002000008000004000000000000410000000000001000000000800000000         fcb 0,0,0,32,0,0,128,0,0,64,0,0,0,0,0,4,16,0,0,0,0,0,1,0,0,0,0,8,0,0,0,0
4A74  0000000800002000001000000000000104000000000000400000000200000000         fcb 0,0,0,8,0,0,32,0,0,16,0,0,0,0,0,1,4,0,0,0,0,0,0,64,0,0,0,2,0,0,0,0
4A94  0000000200000800000400000000400001000000000000100000800000000000         fcb 0,0,0,2,0,0,8,0,0,4,0,0,0,0,64,0,1,0,0,0,0,0,0,16,0,0,128,0,0,0,0,0
                      
4AB4  0000020000000008040000000000004000010000000010000000008000000000         fcb 0,0,2,0,0,0,0,8,4,0,0,0,0,0,0,64,0,1,0,0,0,0,16,0,0,0,0,128,0,0,0,0
4AD4  0000008000000002010000000000001040000000000004000000002000000000         fcb 0,0,0,128,0,0,0,2,1,0,0,0,0,0,0,16,64,0,0,0,0,0,4,0,0,0,0,32,0,0,0,0
4AF4  0000002000008000004000000000000410000000000001000000000800000000         fcb 0,0,0,32,0,0,128,0,0,64,0,0,0,0,0,4,16,0,0,0,0,0,1,0,0,0,0,8,0,0,0,0
4B14  0000000800002000001000000000000104000000000000400000000200000000         fcb 0,0,0,8,0,0,32,0,0,16,0,0,0,0,0,1,4,0,0,0,0,0,0,64,0,0,0,2,0,0,0,0
                      
4B34  0000100000000040200000000000020000080000000080000000040000000000         fcb 0,0,16,0,0,0,0,64,32,0,0,0,0,0,2,0,0,8,0,0,0,0,128,0,0,0,4,0,0,0,0,0
4B54  0000040000000010080000000000008000020000000020000000010000000000         fcb 0,0,4,0,0,0,0,16,8,0,0,0,0,0,0,128,0,2,0,0,0,0,32,0,0,0,1,0,0,0,0,0
4B74  0000010000000004020000000000002080000000000008000000004000000000         fcb 0,0,1,0,0,0,0,4,2,0,0,0,0,0,0,32,128,0,0,0,0,0,8,0,0,0,0,64,0,0,0,0
4B94  0000004000000001008000000000000820000000000002000000001000000000         fcb 0,0,0,64,0,0,0,1,0,128,0,0,0,0,0,8,32,0,0,0,0,0,2,0,0,0,0,16,0,0,0,0
                      
                              ; Sprite nr.14
4BB4  0000000000000000000000000000000000000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
4BD4  0000000000000000000000000000000000000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
4BF4  0000000000000000000000000000000000000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
4C14  0000000000000000000000000000000000000000000000000000000000000000         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                      
4C34                  frmLst
4C34  0003                    fcb 0,3
4C36  0303                    fcb 3,3
4C38  0604                    fcb 6,4
4C3A  0A04                    fcb 10,4
4C3C  0E04                    fcb 14,4
4C3E  1204                    fcb 18,4
4C40  1604                    fcb 22,4
4C42  1A04                    fcb 26,4
4C44  1E06                    fcb 30,6
4C46  2406                    fcb 36,6
4C48  2A04                    fcb 42,4
4C4A  2E05                    fcb 46,5
4C4C  3303                    fcb 51,3
4C4E  3607                    fcb 54,7
4C50  3D013E00                fcb 61,1,62,0
4C54                  scDat
4C54  00BA00D7011A00CD00D100E200DD00B300DE012500DE00D5011200BD009C00D000D300FB00940098010A00D0         fdb 186,215,282,205,209,226,221,179,222,293,222,213,274,189,156,208,211,251,148,152,266,208
                      
                              ; Screen nr.1
4C80  FF0026191819181918191819181918FF001218FF000A19FF0010250019FF000A18         fcb 255,0,38,25,24,25,24,25,24,25,24,25,24,25,24,255,0,18,24,255,0,10,25,255,0,16,37,0,25,255,0,10,24
4CA1  FF00103B0018FF00063738383919FF00103C0019FF00070C0C0018FF000F191819         fcb 255,0,16,59,0,24,255,0,6,55,56,56,57,25,255,0,16,60,0,25,255,0,7,12,12,0,24,255,0,15,25,24,25
4CC2  18FF00073C3C0019181918FF000C18080808000000FF080A19FF000C19FF001018         fcb 24,255,0,7,60,60,0,25,24,25,24,255,0,12,24,8,8,8,0,0,0,255,8,10,25,255,0,12,25,255,0,16,24
4CE3  FF000C18FF001019FF000C19FF001018FF000C18FF001019FF000C19FF080A000000         fcb 255,0,12,24,255,0,16,25,255,0,12,25,255,0,16,24,255,0,12,24,255,0,16,25,255,0,12,25,255,8,10,0,0,0
4D05  08080818FF000C18FF001019FF000C19FF001018FF000C18FF001019FF000C19FF0010         fcb 8,8,8,24,255,0,12,24,255,0,16,25,255,0,12,25,255,0,16,24,255,0,12,24,255,0,16,25,255,0,12,25,255,0,16
4D28  18FF000C18080808000000FF080A19FF0007         fcb 24,255,0,12,24,8,8,8,0,0,0,255,8,10,25,255,0,7
                      
                              ; Screen nr.2
4D3A  FF00101DFF0A0DFF000A25FF00041D0AFF190DFF000A3B0000001D0AFF000D19FF000A         fcb 255,0,16,29,255,10,13,255,0,10,37,255,0,4,29,10,255,25,13,255,0,10,59,0,0,0,29,10,255,0,13,25,255,0,10
4D5D  3C00001D0AFF000E19FF00091DFF0A04FF000F19FF00061D0A0A0AFF00081B1CFF0809         fcb 60,0,0,29,10,255,0,14,25,255,0,9,29,255,10,4,255,0,15,25,255,0,6,29,10,10,10,255,0,8,27,28,255,8,9
4D80  19FF00041D0A0AFF000E24FF0007190000001D0AFF000D1B1C0024FF0007190000         fcb 25,255,0,4,29,10,10,255,0,14,36,255,0,7,25,0,0,0,29,10,255,0,13,27,28,0,36,255,0,7,25,0,0
4DA1  1D0AFF001124FF00071900000AFF00081B1CFF081019001D0AFF000B24FF000E19         fcb 29,10,255,0,17,36,255,0,7,25,0,0,10,255,0,8,27,28,255,8,16,25,0,29,10,255,0,11,36,255,0,14,25
4DC2  000AFF00091B1C0024FF000E19000AFF000C24FF000E191D0AFF00051B1CFF0814         fcb 0,10,255,0,9,27,28,0,36,255,0,14,25,0,10,255,0,12,36,255,0,14,25,29,10,255,0,5,27,28,255,8,20
4DE3  190A190059FF000624FF0012190A19FF00051B1C0024FF00130A190058FF000624         fcb 25,10,25,0,89,255,0,6,36,255,0,18,25,10,25,255,0,5,27,28,0,36,255,0,19,10,25,0,88,255,0,6,36
4E04  FF00130A19FF0816FF00040808         fcb 255,0,19,10,25,255,8,22,255,0,4,8,8
                      
                              ; Screen nr.3
4E11  FF0A1F000028FF000724FF000624FF00072800000A0A262627FF000724FF000624         fcb 255,10,31,0,0,40,255,0,7,36,255,0,6,36,255,0,7,40,0,0,10,10,38,38,39,255,0,7,36,255,0,6,36
4E32  FF00073D26260A0AFF000A24FF000624FF000A0A0A0000FF080A001B1C00FF080A         fcb 255,0,7,61,38,38,10,10,255,0,10,36,255,0,6,36,255,0,10,10,10,0,0,255,8,10,0,27,28,0,255,8,10
4E53  00000A0AFF000424FF00081B1CFF000824FF00040A0AFF000424FF00081B1CFF0008         fcb 0,0,10,10,255,0,4,36,255,0,8,27,28,255,0,8,36,255,0,4,10,10,255,0,4,36,255,0,8,27,28,255,0,8
4E75  24FF00040A0AFF000424FF00081B1CFF000824FF00040A0AFF0806000000080808         fcb 36,255,0,4,10,10,255,0,4,36,255,0,8,27,28,255,0,8,36,255,0,4,10,10,255,8,6,0,0,0,8,8,8
4E96  001B1C00080808000000FF08060A0AFF000A2400001B1CFF000824FF00040A0AFF000A         fcb 0,27,28,0,8,8,8,0,0,0,255,8,6,10,10,255,0,10,36,0,0,27,28,255,0,8,36,255,0,4,10,10,255,0,10
4EB9  2400001B1CFF000824FF00040A0AFF000A2400001B1CFF000824FF00040A0A0000         fcb 36,0,0,27,28,255,0,8,36,255,0,4,10,10,255,0,10,36,0,0,27,28,255,0,8,36,255,0,4,10,10,0,0
4EDA  FF080A001B1C00FF080A00000A0AFF000422FF0004220000001B1C00000022FF0004         fcb 255,8,10,0,27,28,0,255,8,10,0,0,10,10,255,0,4,34,255,0,4,34,0,0,0,27,28,0,0,0,34,255,0,4
4EFC  22FF00040A0AFF000420FF21041F0000001B1C00000020FF21041FFF00040AFF000E         fcb 34,255,0,4,10,10,255,0,4,32,255,33,4,31,0,0,0,27,28,0,0,0,32,255,33,4,31,255,0,4,10,255,0,14
4F1E  1B1CFF001C1B1CFF000EFF081E         fcb 27,28,255,0,28,27,28,255,0,14,255,8,30
                      
                              ; Screen nr.4
4F2B  FF0A09000000FF0A13FF001C0A0AFF001C0A0AFF001C0A0AFF0811FF0008080808         fcb 255,10,9,0,0,0,255,10,19,255,0,28,10,10,255,0,28,10,10,255,0,28,10,10,255,8,17,255,0,8,8,8,8
4F4C  0A0AFF000F24FF000C0A0AFF000F24FF000C0A0AFF000F2400001B1C08081B1CFF0004         fcb 10,10,255,0,15,36,255,0,12,10,10,255,0,15,36,255,0,12,10,10,255,0,15,36,0,0,27,28,8,8,27,28,255,0,4
4F6F  0A0AFF000F2400001B1C00001B1CFF00050AFF000F24FF000D0AFF0811FF0008080808         fcb 10,10,255,0,15,36,0,0,27,28,0,0,27,28,255,0,5,10,255,0,15,36,255,0,13,10,255,8,17,255,0,8,8,8,8
4F92  0A0A0000220028FF0007280022FF00051B1CFF00060A0A000023003DFF26072700         fcb 10,10,0,0,34,0,40,255,0,7,40,0,34,255,0,5,27,28,255,0,6,10,10,0,0,35,0,61,255,38,7,39,0
4FB3  23FF00051B1CFF00060A0A000022FF000B22FF00051B1CFF00060A0A000020FF210B         fcb 35,255,0,5,27,28,255,0,6,10,10,0,0,34,255,0,11,34,255,0,5,27,28,255,0,6,10,10,0,0,32,255,33,11
4FD5  1FFF00051B1CFF000459000AFF00151B1CFF00060AFF00151B1CFF000458000AFF081E         fcb 31,255,0,5,27,28,255,0,4,89,0,10,255,0,21,27,28,255,0,6,10,255,0,21,27,28,255,0,4,88,0,10,255,8,30
                      
                              ; Screen nr.5
4FF8  FF0A1FFF000B28000028280000280000220022002200000A0A00292A2A2B00292A2A         fcb 255,10,31,255,0,11,40,0,0,40,40,0,0,40,0,0,34,0,34,0,34,0,0,10,10,0,41,42,42,43,0,41,42,42
501A  2B0028000028280000280000230023002300000A0A003000002C003000002C003D         fcb 43,0,40,0,0,40,40,0,0,40,0,0,35,0,35,0,35,0,0,10,10,0,48,0,0,44,0,48,0,0,44,0,61
503B  2626273D2626270000220022002200000A0A003000002C003000002CFF000B2021         fcb 38,38,39,61,38,38,39,0,0,34,0,34,0,34,0,0,10,10,0,48,0,0,44,0,48,0,0,44,255,0,11,32,33
505C  25212521210A0A002F2E2E2D002F2E2E2DFF00120A0AFF001C0A0AFF001C0AFF001D         fcb 37,33,37,33,33,10,10,0,47,46,46,45,0,47,46,46,45,255,0,18,10,10,255,0,28,10,10,255,0,28,10,255,0,29
507E  0AFF001D0AFF0807FF00160A0AFF000424FF00170A0AFF000424000808FF00140A0A         fcb 10,255,0,29,10,255,8,7,255,0,22,10,10,255,0,4,36,255,0,23,10,10,255,0,4,36,0,8,8,255,0,20,10,10
50A0  FF000424FF00170A0AFF0004240000000808FF00120A0AFF000424FF00180AFF0004         fcb 255,0,4,36,255,0,23,10,10,255,0,4,36,0,0,0,8,8,255,0,18,10,10,255,0,4,36,255,0,24,10,255,0,4
50C2  24FF0018FF081E          fcb 36,255,0,24,255,8,30
                      
                              ; Screen nr.6
50C9  FF0A051EFF00180A0000000E0A1EFF000625FF00100AFF00040E0A1EFF00053BFF0010         fcb 255,10,5,30,255,0,24,10,0,0,0,14,10,30,255,0,6,37,255,0,16,10,255,0,4,14,10,30,255,0,5,59,255,0,16
50EC  0AFF00050E0A1EFF00043CFF00100AFF00060EFF0A0C1EFF00090AFF00120E0A0A0A         fcb 10,255,0,5,14,10,30,255,0,4,60,255,0,16,10,255,0,6,14,255,10,12,30,255,0,9,10,255,0,18,14,10,10,10
510E  1EFF00060AFF00150E0A0A1EFF00040AFF0016240E0A1E0000000AFF001624000E         fcb 30,255,0,6,10,255,0,21,14,10,10,30,255,0,4,10,255,0,22,36,14,10,30,0,0,0,10,255,0,22,36,0,14
512F  0A1E00000AFF04051B1CFF000F2400000E0A00000A00590000001B1CFF000F24000000         fcb 10,30,0,0,10,255,4,5,27,28,255,0,15,36,0,0,14,10,0,0,10,0,89,0,0,0,27,28,255,0,15,36,0,0,0
5152  0A1E000AFF00051B1CFF000F240000000E0A000A00580000001B1CFF000F24FF0004         fcb 10,30,0,10,255,0,5,27,28,255,0,15,36,0,0,0,14,10,0,10,0,88,0,0,0,27,28,255,0,15,36,255,0,4
5174  0A000AFF040C1B1CFF000815FF16040A1E0AFF000C1B1CFF000D0E0AFF000D1B1C         fcb 10,0,10,255,4,12,27,28,255,0,8,21,255,22,4,10,30,10,255,0,12,27,28,255,0,13,14,10,255,0,13,27,28
5195  FF000E0AFF000D1B1CFF000E0AFF0817FF000408080A         fcb 255,0,14,10,255,0,13,27,28,255,0,14,10,255,8,23,255,0,4,8,8,10
                      
                              ; Screen nr.7
51AB  FF0A1FFF001C010AFF000A292A2A2BFF000E010AFF000A3000002CFF000E010AFF000A         fcb 255,10,31,255,0,28,1,10,255,0,10,41,42,42,43,255,0,14,1,10,255,0,10,48,0,0,44,255,0,14,1,10,255,0,10
51CE  3000002CFF00091B1C060606010AFF000A2F2E2E2DFF00091B1C000000010AFF0017         fcb 48,0,0,44,255,0,9,27,28,6,6,6,1,10,255,0,10,47,46,46,45,255,0,9,27,28,0,0,0,1,10,255,0,23
51F0  1B1C000000010A0000FF09120000001B1C060606010AFF00171B1C000000010AFF0017         fcb 27,28,0,0,0,1,10,0,0,255,9,18,0,0,0,27,28,6,6,6,1,10,255,0,23,27,28,0,0,0,1,10,255,0,23
5213  1B1C000000010AFF00171B1C000000010A0000FF09120000001B1C060606010AFF0017         fcb 27,28,0,0,0,1,10,255,0,23,27,28,0,0,0,1,10,0,0,255,9,18,0,0,0,27,28,6,6,6,1,10,255,0,23
5236  1B1C000000010AFF00061DFF21081EFF00071B1C000000010A0505FF000422FF0008         fcb 27,28,0,0,0,1,10,255,0,6,29,255,33,8,30,255,0,7,27,28,0,0,0,1,10,5,5,255,0,4,34,255,0,8
5258  22FF00071B1C000000010AFF000623FF000823FF00071B1CFF00040AFF000622FF0008         fcb 34,255,0,7,27,28,0,0,0,1,10,255,0,6,35,255,0,8,35,255,0,7,27,28,255,0,4,10,255,0,6,34,255,0,8
527B  22FF000DFF0317FF0004030303         fcb 34,255,0,13,255,3,23,255,0,4,3,3,3
                      
                              ; Screen nr.8
5288  FF0A18FF00040A0A02FF000822FF000A22FF00080102FF000823FF000A23FF0008         fcb 255,10,24,255,0,4,10,10,2,255,0,8,34,255,0,10,34,255,0,8,1,2,255,0,8,35,255,0,10,35,255,0,8
52A9  0102FF000820FF210A1FFF000801020606FF00170606060102FF001C0102FF0004         fcb 1,2,255,0,8,32,255,33,10,31,255,0,8,1,2,6,6,255,0,23,6,6,6,1,2,255,0,28,1,2,255,0,4
52CA  FF0B05000000FF0B04000000FF0B04FF00050102FF001C01020606FF0018060601         fcb 255,11,5,0,0,0,255,11,4,0,0,0,255,11,4,255,0,5,1,2,255,0,28,1,2,6,6,255,0,24,6,6,1
52EB  02FF001A59000102FF0004FF0B05000000FF0B04000000FF0B05FF00040102FF001A         fcb 2,255,0,26,89,0,1,2,255,0,4,255,11,5,0,0,0,255,11,4,0,0,0,255,11,5,255,0,4,1,2,255,0,26
530D  580001020606FF001806060102FF001C0102FF0004FF0B05000000FF0B04000000         fcb 88,0,1,2,6,6,255,0,24,6,6,1,2,255,0,28,1,2,255,0,4,255,11,5,0,0,0,255,11,4,0,0,0
532E  FF0B05FF000401FF003CFF031E         fcb 255,11,5,255,0,4,1,255,0,60,255,3,30
                      
                              ; Screen nr.9
533B  FF0A1E02FF000528FF000E280022FF00050102FF000528FF000E280023FF000501         fcb 255,10,30,2,255,0,5,40,255,0,14,40,0,34,255,0,5,1,2,255,0,5,40,255,0,14,40,0,35,255,0,5,1
535C  02FF260527FF000E3D2622FF26050102FF001623FF00050102FF001620FF210501         fcb 2,255,38,5,39,255,0,14,61,38,34,255,38,5,1,2,255,0,22,35,255,0,5,1,2,255,0,22,32,255,33,5,1
537D  02FF001C0102FF001C0102FF0B09FF00040B0B0BFF0004FF0B080102FF001C0102         fcb 2,255,0,28,1,2,255,0,28,1,2,255,11,9,255,0,4,11,11,11,255,0,4,255,11,8,1,2,255,0,28,1,2
539E  FF00091B1CFF00071B1CFF00080102FF00091B1CFF00071B1CFF00080102FF001C         fcb 255,0,9,27,28,255,0,7,27,28,255,0,8,1,2,255,0,9,27,28,255,0,7,27,28,255,0,8,1,2,255,0,28
53BF  01020000003132FF090600000009000000FF09053132000000010209000031321B         fcb 1,2,0,0,0,49,50,255,9,6,0,0,0,9,0,0,0,255,9,5,49,50,0,0,0,1,2,9,0,0,49,50,27
53E0  1CFF000E1B1C313200000901FF000431321B1CFF000E1B1C3132FF000831321B1C         fcb 28,255,0,14,27,28,49,50,0,0,9,1,255,0,4,49,50,27,28,255,0,14,27,28,49,50,255,0,8,49,50,27,28
5401  00001A1A0000001A0000001A1A001B1C3132FF0004FF061E         fcb 0,0,26,26,0,0,0,26,0,0,0,26,26,0,27,28,49,50,255,0,4,255,6,30
                      
                              ; Screen nr.10
5419  FF0A1E02FF001C0102FF0017292A2A2B000102FF00173000002C000102FF001730         fcb 255,10,30,2,255,0,28,1,2,255,0,23,41,42,42,43,0,1,2,255,0,23,48,0,0,44,0,1,2,255,0,23,48
543A  00002C000102000000FF0304020303FF000D2F2E2E2D000102FF000702FF001401         fcb 0,0,44,0,1,2,0,0,0,255,3,4,2,3,3,255,0,13,47,46,46,45,0,1,2,255,0,7,2,255,0,20,1
545B  02FF000702000000030302030303FF000B01020303FF000502FF000502FF000E01         fcb 2,255,0,7,2,0,0,0,3,3,2,3,3,3,255,0,11,1,2,3,3,255,0,5,2,255,0,5,2,255,0,14,1
547C  02FF000702001D251E0002FF0005030302FF00060102FF000702002323230002FF2105         fcb 2,255,0,7,2,0,29,37,30,0,2,255,0,5,3,3,2,255,0,6,1,2,255,0,7,2,0,35,35,35,0,2,255,33,5
549F  1E0002FF0006010200000003030000020022222200022121211E00220002000000         fcb 30,0,2,255,0,6,1,2,0,0,0,3,3,0,0,2,0,34,34,34,0,2,33,33,33,30,0,34,0,2,0,0,0
54C0  0303030102FF0007021D2522251E02211E002200220002FF00060102FF00070222         fcb 3,3,3,1,2,255,0,7,2,29,37,34,37,30,2,33,30,0,34,0,34,0,2,255,0,6,1,2,255,0,7,2,34
54E1  00220022020022002200220002FF0006010203030000001B1C0222002200220200         fcb 0,34,0,34,2,0,34,0,34,0,34,0,2,255,0,6,1,2,3,3,0,0,0,27,28,2,34,0,34,0,34,2,0
5502  2200220022000203030300000001FF00061B1C0223002300230200230023002300         fcb 34,0,34,0,34,0,2,3,3,3,0,0,0,1,255,0,6,27,28,2,35,0,35,0,35,2,0,35,0,35,0,35,0
5523  02FF000D1B1C02221A221A22021A221A221A221A02FF0007FF091E         fcb 2,255,0,13,27,28,2,34,26,34,26,34,2,26,34,26,34,26,34,26,2,255,0,7,255,9,30
                      
                              ; Screen nr.11
553E  FF0A1E02FF00052200000028FF00082800000022FF00050102FF26052326262627         fcb 255,10,30,2,255,0,5,34,0,0,0,40,255,0,8,40,0,0,0,34,255,0,5,1,2,255,38,5,35,38,38,38,39
555F  FF00083D26262623FF26050102FF000522FF001022FF00050102FF21051FFF0010         fcb 255,0,8,61,38,38,38,35,255,38,5,1,2,255,0,5,34,255,0,16,34,255,0,5,1,2,255,33,5,31,255,0,16
5580  20211E0000000102FF0018220000000102FF0018202121210102FF001C0102FF001C         fcb 32,33,30,0,0,0,1,2,255,0,24,34,0,0,0,1,2,255,0,24,32,33,33,33,1,2,255,0,28,1,2,255,0,28
55A2  0102FF001C0102FF000C31320000003132FF00090102FF000C31320000003132FF0009         fcb 1,2,255,0,28,1,2,255,0,12,49,50,0,0,0,49,50,255,0,9,1,2,255,0,12,49,50,0,0,0,49,50,255,0,9
55C5  0102FF00083A3B3A3B3A3B3A3B3A3B3A3B3A3B3AFF00050102FF0008363C003C00         fcb 1,2,255,0,8,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,255,0,5,1,2,255,0,8,54,60,0,60,0
55E6  3C003C003C003C003C36FF0005010200000006061B1CFF06110100000001FF0006         fcb 60,0,60,0,60,0,60,0,60,54,255,0,5,1,2,0,0,0,6,6,27,28,255,6,17,1,0,0,0,1,255,0,6
5607  1B1CFF001101FF000A1B1CFF001101FF0004FF091E         fcb 27,28,255,0,17,1,255,0,10,27,28,255,0,17,1,255,0,4,255,9,30
                      
                              ; Screen nr.12
561C  FF0A17FF00040A0A0A020022FF001A0A020023FF0008292A2A2BFF000E0A02211F         fcb 255,10,23,255,0,4,10,10,10,2,0,34,255,0,26,10,2,0,35,255,0,8,41,42,42,43,255,0,14,10,2,33,31
563D  FF00083000002CFF000E0A02FF000A3000002CFF00091B1C0909090A02FF000A2F         fcb 255,0,8,48,0,0,44,255,0,14,10,2,255,0,10,48,0,0,44,255,0,9,27,28,9,9,9,10,2,255,0,10,47
565E  2E2E2DFF00091B1C0000000A02FF00171B1C0000000A02000000FF09110000001B         fcb 46,46,45,255,0,9,27,28,0,0,0,10,2,255,0,23,27,28,0,0,0,10,2,0,0,0,255,9,17,0,0,0,27
567F  1C0909090A02FF00171B1C0000000A020909FF001309091B1C0000000A02FF0017         fcb 28,9,9,9,10,2,255,0,23,27,28,0,0,0,10,2,9,9,255,0,19,9,9,27,28,0,0,0,10,2,255,0,23
56A0  1B1C0000000A02000000FF09110000001B1C0909090A02FF00171B1C0000000A02         fcb 27,28,0,0,0,10,2,0,0,0,255,9,17,0,0,0,27,28,9,9,9,10,2,255,0,23,27,28,0,0,0,10,2
56C1  FF00171B1C0000000A020909FF00151B1C0059000AFF00181B1C0000000AFF0018         fcb 255,0,23,27,28,0,0,0,10,2,9,9,255,0,21,27,28,0,89,0,10,255,0,24,27,28,0,0,0,10,255,0,24
56E2  1B1C0058000AFF0317FF0004030303         fcb 27,28,0,88,0,10,255,3,23,255,0,4,3,3,3
                      
                              ; Screen nr.13
56F1  FF0A05220A220A0A0A28FF0A0BFF00040A0A120AFF260423262326262627FF0011         fcb 255,10,5,34,10,34,10,10,10,40,255,10,11,255,0,4,10,10,18,10,255,38,4,35,38,35,38,38,38,39,255,0,17
5712  120AFF0004230023FF0015120AFF000422002200292A2A2BFF001012FF0A072300         fcb 18,10,255,0,4,35,0,35,255,0,21,18,10,255,0,4,34,0,34,0,41,42,42,43,255,0,16,18,255,10,7,35,0
5733  3000002CFF000737FF38061B1C121EFF21050A23003000002CFF000E1B1C121FFF2105         fcb 48,0,0,44,255,0,7,55,255,56,6,27,28,18,30,255,33,5,10,35,0,48,0,0,44,255,0,14,27,28,18,31,255,33,5
5756  0A22002F2E2E2DFF00043739FF00081B1C121EFF21050A23FF00131B1C121FFF2105         fcb 10,34,0,47,46,46,45,255,0,4,55,57,255,0,8,27,28,18,30,255,33,5,10,35,255,0,19,27,28,18,31,255,33,5
5778  0A23FF00131B1C121EFF21050A22FF000B3739FF00061B1C121FFF21050A23FF0015         fcb 10,35,255,0,19,27,28,18,30,255,33,5,10,34,255,0,11,55,57,255,0,6,27,28,18,31,255,33,5,10,35,255,0,21
579A  121EFF21050A23FF0015121FFF21050A1FFF000C37FF38043900000012FF0A07FF0005         fcb 18,30,255,33,5,10,35,255,0,21,18,31,255,33,5,10,31,255,0,12,55,255,56,4,57,0,0,0,18,255,10,7,255,0,5
57BD  3334FF000F120AFF000B3536005900001517FF000837120A003132003132003132         fcb 51,52,255,0,15,18,10,255,0,11,53,54,0,89,0,0,21,23,255,0,8,55,18,10,0,49,50,0,49,50,0,49,50
57DE  0033343334FF000F0A003132003132003132003536353658FF000E0AFF0710FF0004         fcb 0,51,52,51,52,255,0,15,10,0,49,50,0,49,50,0,49,50,0,53,54,53,54,88,255,0,14,10,255,7,16,255,0,4
5800  FF0709                  fcb 255,7,9
                      
                              ; Screen nr.14
5803  FF0A1E12FF001C1112FF001C1112FF001C1112FF001C1112FF00073132FF000A33         fcb 255,10,30,18,255,0,28,17,18,255,0,28,17,18,255,0,28,17,18,255,0,28,17,18,255,0,7,49,50,255,0,10,51
5824  34FF00071112FF00073132FF000A3536FF00071112FF000631323132FF00083334         fcb 52,255,0,7,17,18,255,0,7,49,50,255,0,10,53,54,255,0,7,17,18,255,0,6,49,50,49,50,255,0,8,51,52
5845  3334FF00061112FF000631323132FF000835363536FF000611121B1C0EFF0F0810         fcb 51,52,255,0,6,17,18,255,0,6,49,50,49,50,255,0,8,53,54,53,54,255,0,6,17,18,27,28,14,255,15,8,16
5866  FF00040EFF0F08101B1C11121B1CFF00181B1C11121B1CFF00181B1C11121B1CFF0018         fcb 255,0,4,14,255,15,8,16,27,28,17,18,27,28,255,0,24,27,28,17,18,27,28,255,0,24,27,28,17,18,27,28,255,0,24
5889  1B1C11121B1CFF00181B1C11120EFF0F04101B1C0000000EFF0F04100000001B1C         fcb 27,28,17,18,27,28,255,0,24,27,28,17,18,14,255,15,4,16,27,28,0,0,0,14,255,15,4,16,0,0,0,27,28
58AA  0EFF0F041011FF00071B1CFF000C1B1CFF0025FF071E         fcb 14,255,15,4,16,17,255,0,7,27,28,255,0,12,27,28,255,0,37,255,7,30
                      
                              ; Screen nr.15
58C0  FF0A1E12FF001D12FF001D12FF001D12FF00160EFF0F0612FF000E0EFF0F0510FF0007         fcb 255,10,30,18,255,0,29,18,255,0,29,18,255,0,29,18,255,0,22,14,255,15,6,18,255,0,14,14,255,15,5,16,255,0,7
58E3  1112FF001C1112FF00070EFF0F0510FF000E1112FF001C11120E1B1C0F10FF0017         fcb 17,18,255,0,28,17,18,255,0,7,14,255,15,5,16,255,0,14,17,18,255,0,28,17,18,14,27,28,15,16,255,0,23
5904  1112001B1CFF00180E1112001B1CFF00191112FF000815FF161017000011120E0F0F0F         fcb 17,18,0,27,28,255,0,24,14,17,18,0,27,28,255,0,25,17,18,255,0,8,21,255,22,16,23,0,0,17,18,14,15,15,15
5927  10FF00083D262627FF00091B1C1112FF000E1517FF00075900001B1C11FF001B1B         fcb 16,255,0,8,61,38,38,39,255,0,9,27,28,17,18,255,0,14,21,23,255,0,7,89,0,0,27,28,17,255,0,27,27
5948  1C11FF00185800001B1C11FF070EFF0004FF070C         fcb 28,17,255,0,24,88,0,0,27,28,17,255,7,14,255,0,4,255,7,12
                      
                              ; Screen nr.16
595C  FF0A1EFF001D11FF001D11FF001D11FF161717FF00051112FF001C1112FF001937         fcb 255,10,30,255,0,29,17,255,0,29,17,255,0,29,17,255,22,23,23,255,0,5,17,18,255,0,28,17,18,255,0,25,55
597D  38381112FF00053132FF0005292A2A2BFF000C1112FF00053132FF00053000002C         fcb 56,56,17,18,255,0,5,49,50,255,0,5,41,42,42,43,255,0,12,17,18,255,0,5,49,50,255,0,5,48,0,0,44
599E  FF000C1112FF000431323132FF00043000002CFF000737FF38041112FF00043132         fcb 255,0,12,17,18,255,0,4,49,50,49,50,255,0,4,48,0,0,44,255,0,7,55,255,56,4,17,18,255,0,4,49,50
59BF  3132FF00042F2E2E2DFF000C1112000000313231323132FF001311120000003132         fcb 49,50,255,0,4,47,46,46,45,255,0,12,17,18,0,0,0,49,50,49,50,49,50,255,0,19,17,18,0,0,0,49,50
59E0  31323132FF000D37FF3805111200003132313231323132FF001211120000313231         fcb 49,50,49,50,255,0,13,55,255,56,5,17,18,0,0,49,50,49,50,49,50,49,50,255,0,18,17,18,0,0,49,50,49
5A01  3231323132FF000637383839FF00081112003A3BFF3A063B3AFF001212001A3CFF0006         fcb 50,49,50,49,50,255,0,6,55,56,56,57,255,0,8,17,18,0,58,59,255,58,6,59,58,255,0,18,18,0,26,60,255,0,6
5A24  3C1AFF0012FF071E         fcb 60,26,255,0,18,255,7,30
                      
                              ; Screen nr.17
5A2C  FF0A1E12FF0004FF2504FF000CFF2504FF00041112FF0004FF2304FF000CFF2304         fcb 255,10,30,18,255,0,4,255,37,4,255,0,12,255,37,4,255,0,4,17,18,255,0,4,255,35,4,255,0,12,255,35,4
5A4D  FF00041112FF0004FF2204FF000CFF2204FF00041112FF21041F222222FF000C222222         fcb 255,0,4,17,18,255,0,4,255,34,4,255,0,12,255,34,4,255,0,4,17,18,255,33,4,31,34,34,34,255,0,12,34,34,34
5A70  20FF21041112FF0005222222FF000C222222FF00051112FF21051F2323FF000C2323         fcb 32,255,33,4,17,18,255,0,5,34,34,34,255,0,12,34,34,34,255,0,5,17,18,255,33,5,31,35,35,255,0,12,35,35
5A92  20FF21051112FF00062222FF000C2222FF00061112FF21061F22FF000C2220FF2106         fcb 32,255,33,5,17,18,255,0,6,34,34,255,0,12,34,34,255,0,6,17,18,255,33,6,31,34,255,0,12,34,32,255,33,6
5AB4  1112FF000722FF000C22FF00071112FF21071FFF000C20FF21071112FF001C1112         fcb 17,18,255,0,7,34,255,0,12,34,255,0,7,17,18,255,33,7,31,255,0,12,32,255,33,7,17,18,255,0,28,17,18
5AD5  FF001C1112FF001C1112FF001C11FF00083A3BFF3A0A3B3AFF000F1A1A3CFF000A         fcb 255,0,28,17,18,255,0,28,17,18,255,0,28,17,255,0,8,58,59,255,58,10,59,58,255,0,15,26,26,60,255,0,10
5AF6  3C1A1AFF0007FF071E         fcb 60,26,26,255,0,7,255,7,30
                      
                              ; Screen nr.18
5AFF  FF0A17FF00040A0A0A12FF001C1112FF001B591112FF001C1112FF001B581112FF0017         fcb 255,10,23,255,0,4,10,10,10,18,255,0,28,17,18,255,0,27,89,17,18,255,0,28,17,18,255,0,27,88,17,18,255,0,23
5B22  0EFF0F041112FF00051B1C15FF160A171B1CFF00071112FF00051B1C0024FF0008         fcb 14,255,15,4,17,18,255,0,5,27,28,21,255,22,10,23,27,28,255,0,7,17,18,255,0,5,27,28,0,36,255,0,8
5B43  24001B1CFF00071112FF00051B1C0024FF000824001B1CFF00071112FF00051B1C         fcb 36,0,27,28,255,0,7,17,18,255,0,5,27,28,0,36,255,0,8,36,0,27,28,255,0,7,17,18,255,0,5,27,28
5B64  0024FF000824001B1CFF00071112FF00051B1C0024FF000824001B1CFF00071112         fcb 0,36,255,0,8,36,0,27,28,255,0,7,17,18,255,0,5,27,28,0,36,255,0,8,36,0,27,28,255,0,7,17,18
5B85  000000313215FF161017313200000011120000003132FF001231320000001112000000         fcb 0,0,0,49,50,21,255,22,16,23,49,50,0,0,0,17,18,0,0,0,49,50,255,0,18,49,50,0,0,0,17,18,0,0,0
5BA8  3132FF0012313200000011121000003132FF0012313200000E11FF000433340000         fcb 49,50,255,0,18,49,50,0,0,0,17,18,16,0,0,49,50,255,0,18,49,50,0,0,14,17,255,0,4,51,52,0,0
5BC9  333400333400333400333400333400003334FF0008353600003536003536003536         fcb 51,52,0,51,52,0,51,52,0,51,52,0,51,52,0,0,51,52,255,0,8,53,54,0,0,53,54,0,53,54,0,53,54
5BEA  00353600353600003536FF0004FF071E         fcb 0,53,54,0,53,54,0,0,53,54,255,0,4,255,7,30
                      
                              ; Screen nr.19
5BFA  FF0A101EFF000D12FF000E20FF0A041EFF000912FF0012200A0A0A1EFF000612FF0015         fcb 255,10,16,30,255,0,13,18,255,0,14,32,255,10,4,30,255,0,9,18,255,0,18,32,10,10,10,30,255,0,6,18,255,0,21
5C1D  200A0A1EFF000412FF0015FF0A041E00000012FF00150A3E3F404100000012FF0015         fcb 32,10,10,30,255,0,4,18,255,0,21,255,10,4,30,0,0,0,18,255,0,21,10,62,63,64,65,0,0,0,18,255,0,21
5C3F  0A4243444500000012FF0015FF0A061E0012FF001A200A0012FF001B0A0012FF001B         fcb 10,66,67,68,69,0,0,0,18,255,0,21,255,10,6,30,0,18,255,0,26,32,10,0,18,255,0,27,10,0,18,255,0,27
5C61  0A1E12FF001B200A12FF001C0A12FF001C0A12FF00165556565700000AFF001D0A         fcb 10,30,18,255,0,27,32,10,18,255,0,28,10,18,255,0,28,10,18,255,0,22,85,86,86,87,0,0,10,255,0,29,10
5C82  FF001DFF0A18FF0C040A0A0A         fcb 255,0,29,255,10,24,255,12,4,10,10,10
                      
                              ; Screen nr.20
5C8E  FF0A11FF0004FF0A0AFF001C110AFF001C110AFF001C110AFF001C110AFF000F0E         fcb 255,10,17,255,0,4,255,10,10,255,0,28,17,10,255,0,28,17,10,255,0,28,17,10,255,0,28,17,10,255,0,15,14
5CAF  FF0F0410FF0007110AFF001C110AFF0F0C10FF000A0EFF0F04110AFF001C110AFF001C         fcb 255,15,4,16,255,0,7,17,10,255,0,28,17,10,255,15,12,16,255,0,10,14,255,15,4,17,10,255,0,28,17,10,255,0,28
5CD2  110AFF000E0EFF0F0610FF0006110AFF001C110AFF001C110AFF0F0C10FF000A0E         fcb 17,10,255,0,14,14,255,15,6,16,255,0,6,17,10,255,0,28,17,10,255,0,28,17,10,255,15,12,16,255,0,10,14
5CF3  FF0F04110A003132003132003132003132FF00110A003132003132003132003132         fcb 255,15,4,17,10,0,49,50,0,49,50,0,49,50,0,49,50,255,0,17,10,0,49,50,0,49,50,0,49,50,0,49,50
5D14  FF00110A3A3BFF3A093B3AFF00100AFF0F1D         fcb 255,0,17,10,58,59,255,58,9,59,58,255,0,16,10,255,15,29
                      
                              ; Screen nr.21
5D26  FF0A1E12FF0005280022002200220022FF000E121200292A2A2B28002300230023         fcb 255,10,30,18,255,0,5,40,0,34,0,34,0,34,0,34,255,0,14,18,18,0,41,42,42,43,40,0,35,0,35,0,35
5D47  0023FF0009292A2A2B001212003000002C280022002200220022FF00093000002C         fcb 0,35,255,0,9,41,42,42,43,0,18,18,0,48,0,0,44,40,0,34,0,34,0,34,0,34,255,0,9,48,0,0,44
5D68  001212003000002C280023002300230023FF00093000002C001212002F2E2E2D28         fcb 0,18,18,0,48,0,0,44,40,0,35,0,35,0,35,0,35,255,0,9,48,0,0,44,0,18,18,0,47,46,46,45,40
5D89  0020FF210D1E002F2E2E2D001212FF260527FF000F22FF00061212FF001523FF0006         fcb 0,32,255,33,13,30,0,47,46,46,45,0,18,18,255,38,5,39,255,0,15,34,255,0,6,18,18,255,0,21,35,255,0,6
5DAB  1212FF001522FF00061212FF00053132FF000E202121252121211212FF00053132         fcb 18,18,255,0,21,34,255,0,6,18,18,255,0,5,49,50,255,0,14,32,33,33,37,33,33,33,18,18,255,0,5,49,50
5DCC  FF0011220000001212FF000431323132FF0010230000001212FF000431323132FF0010         fcb 255,0,17,34,0,0,0,18,18,255,0,4,49,50,49,50,255,0,16,35,0,0,0,18,18,255,0,4,49,50,49,50,255,0,16
5DEF  220000001212000000313231323132FF000F202121211212000000313231323132         fcb 34,0,0,0,18,18,0,0,0,49,50,49,50,49,50,255,0,15,32,33,33,33,18,18,0,0,0,49,50,49,50,49,50
5E10  FF0013120000003132313231323132FF00163132313231323132FF0013FF0F1E         fcb 255,0,19,18,0,0,0,49,50,49,50,49,50,49,50,255,0,22,49,50,49,50,49,50,49,50,255,0,19,255,15,30
                      
                              ; Screen nr.22
5E30  FF160D17FF000415FF160B12000022FF0019121221211FFF00191212FF001C1211         fcb 255,22,13,23,255,0,4,21,255,22,11,18,0,0,34,255,0,25,18,18,33,33,31,255,0,25,18,18,255,0,28,18,17
5E51  00000015FF161417001B1C1212FF000622FF000F220000001B1C1212FF000622FF000F         fcb 0,0,0,21,255,22,20,23,0,27,28,18,18,255,0,6,34,255,0,15,34,0,0,0,27,28,18,18,255,0,6,34,255,0,15
5E74  220000001B1C121210FF000523FF000F230000001B1C1212FF000622FF000F22000000         fcb 34,0,0,0,27,28,18,18,16,255,0,5,35,255,0,15,35,0,0,0,27,28,18,18,255,0,6,34,255,0,15,34,0,0,0
5E97  1B1C12120000000EFF0F1410001B1C1212FF000622FF000F220000001B1C1212FF0006         fcb 27,28,18,18,0,0,0,14,255,15,20,16,0,27,28,18,18,255,0,6,34,255,0,15,34,0,0,0,27,28,18,18,255,0,6
5EBA  23FF000F230000001B1C121210FF000522FF000F220000001B1C1212FF000622FF000F         fcb 35,255,0,15,35,0,0,0,27,28,18,18,16,255,0,5,34,255,0,15,34,0,0,0,27,28,18,18,255,0,6,34,255,0,15
5EDD  220000001B1C12120000000EFF0F1410001B1C12FF001B1B1C12FF001B1B1C12FF0F1E         fcb 34,0,0,0,27,28,18,18,0,0,0,14,255,15,20,16,0,27,28,18,255,0,27,27,28,18,255,0,27,27,28,18,255,15,30
5F00  16              numSc   fcb 22
5F01                  nmeDat
5F01  00011888FF              fcb 0,1,24,136,255
5F06  000180E0010360A0060E18E0010740B8FF         fcb 0,1,128,224,1,3,96,160,6,14,24,224,1,7,64,184,255
5F17  00008010060E38E0010818A001085840FF         fcb 0,0,128,16,6,14,56,224,1,8,24,160,1,8,88,64,255
5F28  00001858060E30100103485001088050FF         fcb 0,0,24,88,6,14,48,16,1,3,72,80,1,8,128,80,255
5F39  00004810060E80100205287002044098020938C8070B8050050D2020050D2048FF         fcb 0,0,72,16,6,14,128,16,2,5,40,112,2,4,64,152,2,9,56,200,7,11,128,80,5,13,32,32,5,13,32,72,255
5F5A  00008010060E281002023858020240A802026090FF         fcb 0,0,128,16,6,14,40,16,2,2,56,88,2,2,64,168,2,2,96,144,255
5F6F  000180E0050D2068010330300107504001088050FF         fcb 0,1,128,224,5,13,32,104,1,3,48,48,1,7,80,64,1,8,128,80,255
5F84  00008010060E1810020518200205305802055098070B8048070B80A8FF         fcb 0,0,128,16,6,14,24,16,2,5,24,32,2,5,48,88,2,5,80,152,7,11,128,72,7,11,128,168,255
5FA1  00008010060E287801083810010838B80205486802054890FF         fcb 0,0,128,16,6,14,40,120,1,8,56,16,1,8,56,184,2,5,72,104,2,5,72,144,255
5FBA  00008010050D20D0060E101002051098FF         fcb 0,0,128,16,5,13,32,208,6,14,16,16,2,5,16,152,255
5FCB  00008010060E80C002052858020548B0070B8048FF         fcb 0,0,128,16,6,14,128,192,2,5,40,88,2,5,72,176,7,11,128,72,255
5FE0  000118C8050D2068060E2810010830280108503801088048FF         fcb 0,1,24,200,5,13,32,104,6,14,40,16,1,8,48,40,1,8,80,56,1,8,128,72,255
5FF9  000118C8050D285802091880FF         fcb 0,1,24,200,5,13,40,88,2,9,24,128,255
6006  00008010060E102802054878070B8078FF         fcb 0,0,128,16,6,14,16,40,2,5,72,120,7,11,128,120,255
6017  00008010060E30E00107585002051838FF         fcb 0,0,128,16,6,14,48,224,1,7,88,80,2,5,24,56,255
6028  000180E0050D4878060E70100209686002056098070B8098FF         fcb 0,1,128,224,5,13,72,120,6,14,112,16,2,9,104,96,2,5,96,152,7,11,128,152,255
6041  000180E0060E707802056858020568980204306802043088FF         fcb 0,1,128,224,6,14,112,120,2,5,104,88,2,5,104,152,2,4,48,104,2,4,48,136,255
605A  000118C8060E50700108288001075048FF         fcb 0,1,24,200,6,14,80,112,1,8,40,128,1,7,80,72,255
606B  00008010080C80C80302181003062050030A3098FF         fcb 0,0,128,16,8,12,128,200,3,2,24,16,3,6,32,80,3,10,48,152,255
6080  000018980103808001083028060E6010FF         fcb 0,0,24,152,1,3,128,128,1,8,48,40,6,14,96,16,255
6091  00008010050D2020050D20D002054088020568A0030A18A0060E4038FF         fcb 0,0,128,16,5,13,32,32,5,13,32,208,2,5,64,136,2,5,104,160,3,10,24,160,6,14,64,56,255
60AE  000080100107687001074078060E18E0FF         fcb 0,0,128,16,1,7,104,112,1,7,64,120,6,14,24,224,255
0018                  NUMOBJ  equ 24
60BF                  objDta
60BF  1FF820042A542A5420042FF42814281428142814281428142FF4200410080FF060FE8040FE8040         fcb 31,248,32,4,42,84,42,84,32,4,47,244,40,20,40,20,40,20,40,20,40,20,40,20,47,244,32,4,16,8,15,240,96,254,128,64,254,128,64
60E6  1FF820042A542A54200423C424242814281428142814242423C4200410080FF060FE0808FE0808         fcb 31,248,32,4,42,84,42,84,32,4,35,196,36,36,40,20,40,20,40,20,40,20,36,36,35,196,32,4,16,8,15,240,96,254,8,8,254,8,8
610D  1FF820042A542A54200421842244224424242424281428142FF4200410080FF060FE0808FE0808         fcb 31,248,32,4,42,84,42,84,32,4,33,132,34,68,34,68,36,36,36,36,40,20,40,20,47,244,32,4,16,8,15,240,96,254,8,8,254,8,8
6134  1FF820042A542A54200423C422442E74281428142E74224423C4200410080FF060FE0808FE0808         fcb 31,248,32,4,42,84,42,84,32,4,35,196,34,68,46,116,40,20,40,20,46,116,34,68,35,196,32,4,16,8,15,240,96,254,8,8,254,8,8
615B  00000000000000000000000000000000000007E00D500AB00D500FF0042007E0600180A00180A0         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,1,128,160,1,128,160
6182  00000000000000000000000000000000000007E00D500AB00D500FF0042007E060023860023860         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,2,56,96,2,56,96
61A9  00000000000000000000000000000000000007E00D500AB00D500FF0042007E060038038038038         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,3,128,56,3,128,56
61D0  00000000000000000000000000000000000007E00D500AB00D500FF0042007E0600480C80480C8         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,4,128,200,4,128,200
61F7  00000000000000000000000000000000000007E00D500AB00D500FF0042007E060058040058040         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,5,128,64,5,128,64
621E  00000000000000000000000000000000000007E00D500AB00D500FF0042007E060068080068080         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,6,128,128,6,128,128
6245  00000000000000000000000000000000000007E00D500AB00D500FF0042007E060075810075810         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,7,88,16,7,88,16
626C  00000000000000000000000000000000000007E00D500AB00D500FF0042007E060086078086078         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,8,96,120,8,96,120
6293  00000000000000000000000000000000000007E00D500AB00D500FF0042007E060093088093088         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,9,48,136,9,48,136
62BA  00000000000000000000000000000000000007E00D500AB00D500FF0042007E0600A68380A6838         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,10,104,56,10,104,56
62E1  00000000000000000000000000000000000007E00D500AB00D500FF0042007E0600B50E00B50E0         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,11,80,224,11,80,224
6308  00000000000000000000000000000000000007E00D500AB00D500FF0042007E0600C68980C6898         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,12,104,152,12,104,152
632F  00000000000000000000000000000000000007E00D500AB00D500FF0042007E0600D68C80D68C8         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,13,104,200,13,104,200
6356  00000000000000000000000000000000000007E00D500AB00D500FF0042007E0600E80A80E80A8         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,14,128,168,14,128,168
637D  00000000000000000000000000000000000007E00D500AB00D500FF0042007E0600F58C80F58C8         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,15,88,200,15,88,200
63A4  00000000000000000000000000000000000007E00D500AB00D500FF0042007E060108018108018         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,16,128,24,16,128,24
63CB  00000000000000000000000000000000000007E00D500AB00D500FF0042007E0601150C01150C0         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,17,80,192,17,80,192
63F2  00000000000000000000000000000000000007E00D500AB00D500FF0042007E060138098138098         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,19,128,152,19,128,152
6419  00000000000000000000000000000000000007E00D500AB00D500FF0042007E060148060148060         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,20,128,96,20,128,96
6440  00000000000000000000000000000000000007E00D500AB00D500FF0042007E0601580D01580D0         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,96,21,128,208,21,128,208
6467                  font
6467  793E3247CDEC7ECD         fcb 121,62,50,71,205,236,126,205
646F  1881CDD5DCC93000         fcb 24,129,205,213,220,201,48,0
6477  006C6C0000000000         fcb 0,108,108,0,0,0,0,0
647F  006CFE6C6CFE6C00         fcb 0,108,254,108,108,254,108,0
6487  00187E787E1E7E18         fcb 0,24,126,120,126,30,126,24
648F  00E6EC18306ECE00         fcb 0,230,236,24,48,110,206,0
6497  003078307ECC7E00         fcb 0,48,120,48,126,204,126,0
649F  0018300000000000         fcb 0,24,48,0,0,0,0,0
64A7  000C181818180C00         fcb 0,12,24,24,24,24,12,0
64AF  0060303030306000         fcb 0,96,48,48,48,48,96,0
64B7  00003C187E183C00         fcb 0,0,60,24,126,24,60,0
64BF  000018187E181800         fcb 0,0,24,24,126,24,24,0
64C7  0000000000181830         fcb 0,0,0,0,0,24,24,48
64CF  000000007E000000         fcb 0,0,0,0,126,0,0,0
64D7  0000000000383800         fcb 0,0,0,0,0,56,56,0
64DF  0000060C18306000         fcb 0,0,6,12,24,48,96,0
64E7  007CCEDEF6E67C00         fcb 0,124,206,222,246,230,124,0
64EF  0038781818187E00         fcb 0,56,120,24,24,24,126,0
64F7  007CC6067CC0FE00         fcb 0,124,198,6,124,192,254,0
64FF  007CC61C06C67C00         fcb 0,124,198,28,6,198,124,0
6507  00183878D8FE1800         fcb 0,24,56,120,216,254,24,0
650F  00FEC0FC06C67C00         fcb 0,254,192,252,6,198,124,0
6517  007CC0FCC6C67C00         fcb 0,124,192,252,198,198,124,0
651F  00FE060C18303000         fcb 0,254,6,12,24,48,48,0
6527  007CC67CC6C67C00         fcb 0,124,198,124,198,198,124,0
652F  007CC6C67E067C00         fcb 0,124,198,198,126,6,124,0
6537  0000003000003000         fcb 0,0,0,48,0,0,48,0
653F  0030303030003000         fcb 0,48,48,48,48,0,48,0
6547  00000C1830180C00         fcb 0,0,12,24,48,24,12,0
654F  0000007E007E0000         fcb 0,0,0,126,0,126,0,0
6557  000030180C183000         fcb 0,0,48,24,12,24,48,0
655F  007CC60C18001800         fcb 0,124,198,12,24,0,24,0
6567  007CDEFEFEC07C00         fcb 0,124,222,254,254,192,124,0
656F  00FCC6C6FEC6C600         fcb 0,252,198,198,254,198,198,0
6577  00FCC6FCC6C6FE00         fcb 0,252,198,252,198,198,254,0
657F  007EC6C0C0C67E00         fcb 0,126,198,192,192,198,126,0
6587  00F8CCC6C6C6FE00         fcb 0,248,204,198,198,198,254,0
658F  00FEC0FCC0C0FE00         fcb 0,254,192,252,192,192,254,0
6597  00FEC0FCC0C0C000         fcb 0,254,192,252,192,192,192,0
659F  007EC6C0DEC67E00         fcb 0,126,198,192,222,198,126,0
65A7  00C6C6FEC6C6C600         fcb 0,198,198,254,198,198,198,0
65AF  007E181818187E00         fcb 0,126,24,24,24,24,126,0
65B7  00060606C6C6FC00         fcb 0,6,6,6,198,198,252,0
65BF  00C6CCF8DEC6C600         fcb 0,198,204,248,222,198,198,0
65C7  00C0C0C0C0C0FE00         fcb 0,192,192,192,192,192,254,0
65CF  00C6EEFEC6C6C600         fcb 0,198,238,254,198,198,198,0
65D7  00C6E6F6DECEC600         fcb 0,198,230,246,222,206,198,0
65DF  007EC6C6C6C67C00         fcb 0,126,198,198,198,198,124,0
65E7  00FCC6C6FEC0C000         fcb 0,252,198,198,254,192,192,0
65EF  007EC6C6F6DE7C00         fcb 0,126,198,198,246,222,124,0
65F7  00FEC6C6FCCCC600         fcb 0,254,198,198,252,204,198,0
65FF  00FCC0FE06C6FE00         fcb 0,252,192,254,6,198,254,0
6607  00FE303030303000         fcb 0,254,48,48,48,48,48,0
660F  00C6C6C6C6C67E00         fcb 0,198,198,198,198,198,126,0
6617  00C6C6C6C66C3800         fcb 0,198,198,198,198,108,56,0
661F  00C6C6C6C6FE6E00         fcb 0,198,198,198,198,254,110,0
6627  00C66C38386CC600         fcb 0,198,108,56,56,108,198,0
662F  0086CC7830303000         fcb 0,134,204,120,48,48,48,0
6637  00FE0C183060FE00         fcb 0,254,12,24,48,96,254,0
663F  001E181818181E00         fcb 0,30,24,24,24,24,30,0
6647  0000C06030180C00         fcb 0,0,192,96,48,24,12,0
664F  00F030303030F000         fcb 0,240,48,48,48,48,240,0
6657  003078FC30303000         fcb 0,48,120,252,48,48,48,0
665F  0000000000000000         fcb 0,0,0,0,0,0,0,0
6667  003C66F86060FE00         fcb 0,60,102,248,96,96,254,0
666F  0000780C7CCC7C00         fcb 0,0,120,12,124,204,124,0
6677  0060607C66667C00         fcb 0,96,96,124,102,102,124,0
667F  00003C6060603C00         fcb 0,0,60,96,96,96,60,0
6687  000C0C7CCCCC7C00         fcb 0,12,12,124,204,204,124,0
668F  000078CCF8C07C00         fcb 0,0,120,204,248,192,124,0
6697  001C303830303000         fcb 0,28,48,56,48,48,48,0
669F  00007CCCCC7C0C78         fcb 0,0,124,204,204,124,12,120
66A7  00C0C0F8CCCCCC00         fcb 0,192,192,248,204,204,204,0
66AF  0030007030307800         fcb 0,48,0,112,48,48,120,0
66B7  000C000C0C0C6C38         fcb 0,12,0,12,12,12,108,56
66BF  0060787070786C00         fcb 0,96,120,112,112,120,108,0
66C7  0030303030301C00         fcb 0,48,48,48,48,48,28,0
66CF  0000F8FCFCFCFC00         fcb 0,0,248,252,252,252,252,0
66D7  0000F8CCCCCCCC00         fcb 0,0,248,204,204,204,204,0
66DF  000078CCCCCC7800         fcb 0,0,120,204,204,204,120,0
66E7  0000F8CCCCF8C0C0         fcb 0,0,248,204,204,248,192,192
66EF  00007CCCCC7C0C0E         fcb 0,0,124,204,204,124,12,14
66F7  00003C6060606000         fcb 0,0,60,96,96,96,96,0
66FF  000078C0780CF800         fcb 0,0,120,192,120,12,248,0
6707  0030783030301C00         fcb 0,48,120,48,48,48,28,0
670F  0000CCCCCCCC7800         fcb 0,0,204,204,204,204,120,0
6717  0000CCCC78783000         fcb 0,0,204,204,120,120,48,0
671F  0000CCFCFCFC7800         fcb 0,0,204,252,252,252,120,0
6727  0000CC783078CC00         fcb 0,0,204,120,48,120,204,0
672F  0000CCCCCC7C0C78         fcb 0,0,204,204,204,124,12,120
6737  0000FC183060FC00         fcb 0,0,252,24,48,96,252,0
673F  001E187018181E00         fcb 0,30,24,112,24,24,30,0
6747  0018181818181800         fcb 0,24,24,24,24,24,24,0
674F  00F0301C3030F000         fcb 0,240,48,28,48,48,240,0
6757  003C780000000000         fcb 0,60,120,0,0,0,0,0
675F  7CC6BBE3E3BBC67C         fcb 124,198,187,227,227,187,198,124
6767                  jTab
6767  F8FAFCFEFEFFFFFF0000000101010202040608080863         fcb 248,250,252,254,254,255,255,255,0,0,0,1,1,1,2,2,4,6,8,8,8,99
677D  FEFBF77FFEFDFBFDFBF7EF keys    fcb $fe,$fb,$f7,$7f,$fe,$fd,$fb,$fd,$fb,$f7,$ef
6788  2020080810010101010101 keysD   fcb $20,$20,$08,$08,$10,$01,$01,$01,$01,$01,$01
6793  0808020204101010101010 keysC   fcb $08,$08,$02,$02,$04,$10,$10,$10,$10,$10,$10
679E                  EndPgmX         equ     *

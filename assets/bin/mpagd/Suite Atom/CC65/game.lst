ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0300
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 1 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2  xx xx        TmpAddr:    .res 2
000059r 2  xx           bwid:	    .res 1     		; box/menu width.
00005Ar 2  xx           blen:	    .res 1     		; box/menu height.
00005Br 2  xx           btop:	    .res 1    	 	; box coordinates.
00005Cr 2  xx           blft:	    .res 1
00005Dr 2               .endif
00005Dr 2               
00005Dr 2               .if sflag .or pflag
00005Dr 2               shrctr:	    .res 1
00005Dr 2               .endif
00005Dr 2               .if pflag
00005Dr 2               explcnt:    .res 1
00005Dr 2               seed3:	    .res 1
00005Dr 2               .endif
00005Dr 2               
00005Dr 2               .if aflag
00005Dr 2               pbptr:       .res 2
00005Dr 2               pbbuf:	     .res 2
00005Dr 2               .endif
00005Dr 2               
00005Dr 1               
00005Dr 1               .segment "CODE"
000000r 1               
000000r 1               .if header
000000r 1               ;********************************************************************
000000r 1               ; ATM Header for Atom emulator Wouter Ras
000000r 1               
000000r 1               .org asm_code-22*header
0002EA  1               name_start:
0002EA  1  41 47 44     	.byte filenaam			; Filename
0002ED  1               name_end:
0002ED  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
0002F1  1  00 00 00 00  
0002F5  1  00 00 00 00  
0002FA  1               	  .byte $0
0002FA  1               	.endrep
0002FA  1               
0002FA  1  00 03        	.word asm_code			; 2 bytes startaddress
0002FC  1  00 03        	.word exec			; 2 bytes linkaddress
0002FE  1  BA 63        	.word eind_asm-start_asm	; 2 bytes filelength
000300  1               
000300  1               ;********************************************************************
000300  1               .else
000300  1               .org asm_code
000300  1               .endif
000300  1               
000300  1               exec:
000300  1               start_asm:
000300  1               	.include "game.inc"
000300  2               .include "deleteme.inc"
000300  3               ;--------------------------------------------------------------
000300  3               ; Arcade Game Designer.
000300  3               ; (C) 2008 Jonathan Cauldwell.
000300  3               ; ZX Spectrum Next Engine v0.7.
000300  3               ; Acorn Atom port by K.v.Oss 2018
000300  3               ;--------------------------------------------------------------
000300  3               
000300  3               ; Conditional compilation flags
000300  3               ; Code is installed if flag is set
000300  3               ; Flags are set in commandline assembly or by the compiler
000300  3               
000300  3               ; Flags set by AGD compiler
000300  3               ;	mflag  			; MENU + INV
000300  3               ;	pflag 			; particle engine
000300  3               ;	sflag 			; scrollytext
000300  3               ;	dflag 			; digging mode
000300  3               ;	cflag			; collectable blocks
000300  3               ;	oflag			; objects
000300  3               ;	lflag			; ladders
000300  3               ;
000300  3               ; Flags set manually
000300  3               ;	aflag			; adventure mode
000300  3               ;	bflag			; big sprites (16x24)
000300  3               ;	fflag			; floppy version (skip #0axx)
000300  3               ;	gflag			; graphic colour mode
000300  3               ;	hflag			; hidden sprite mode
000300  3               ;	iflag			; invert mode
000300  3               
000300  3               .if mflag
000300  3               	.out "- MEN/INV enabled"
000300  3               .endif
000300  3               .if pflag
000300  3               	.out "- Particles enabled"
000300  3               .endif
000300  3               .if sflag
000300  3               	.out "- Scrolling enabled"
000300  3               .endif
000300  3               .if dflag
000300  3               	.out "- Digging enabled"
000300  3               .endif
000300  3               .if cflag
000300  3               	.out "- Collectable blocks enabled"
000300  3               .endif
000300  3               .if oflag
000300  3               	.out "- Objects enabled"
000300  3               .endif
000300  3               .if lflag
000300  3               	.out "- Ladders enabled"
000300  3               .endif
000300  3               .if aflag
000300  3               	.out "- Adventure mode enabled"
000300  3               .endif
000300  3               .if bflag
000300  3               	.out "- Big Sprites (16x24) enabled"
000300  3               .endif
000300  3               .if gflag
000300  3               	.out "- Colourmode enabled"
000300  3               .endif
000300  3               .if hflag
000300  3               	.out "- Hidden sprites/foregroundblocks enabled"
000300  3               .endif
000300  3               .if iflag
000300  3               	.out "- Invert mode enabled"
000300  3               .endif
000300  3               
000300  3               ; Global definitions ------------------------------------------------------------
000300  3               
000300  3               	FONT = font		; Font address
000300  3               
000300  3               	green	= $00		; Colour definition filters
000300  3               	yellow	= $55
000300  3               	blue	= $aa
000300  3               	red	= $ff
000300  3               
000300  3               ; Block characteristics.
000300  3               
000300  3               	PLATFM	= 1		; platform.
000300  3               	WALL	= PLATFM + 1	; solid wall.
000300  3               	LADDER	= WALL + 1	; ladder.
000300  3               	FODDER	= LADDER + 1	; fodder block.
000300  3               	DEADLY	= FODDER + 1	; deadly block.
000300  3               	CUSTOM	= DEADLY + 1	; custom block.
000300  3               	WATER	= CUSTOM + 1	; water block.
000300  3                       COLECT	= WATER + 1	; collectable block.
000300  3                       NUMTYP	= COLECT + 1	; number of types.
000300  3               
000300  3               ; Sprites.
000300  3               
000300  3               .if bflag
000300  3               	SPR_HGT	= 24		; Sprite height
000300  3               	SPR_WID = 16		; Sprite width
000300  3               	NUMSPR	= 8		; number of sprites.
000300  3               .else				; 16x16 sprites
000300  3               	SPR_HGT = 16		; Sprite height
000300  3               	SPR_WID = 16		; Sprite width
000300  3               	NUMSPR	= 12		; number of sprites.
000300  3               .endif
000300  3               
000300  3               	TABSIZ = 17		; size of each entry.
000300  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000300  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000300  3               	var_X  = 8		; new x coordinate of sprite.
000300  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
000300  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
000300  3               
000300  3               ; Particle engine.
000300  3               
000300  3               	NUMSHR = 55		; pieces of shrapnel.
000300  3               	SHRSIZ = 6		; bytes per particle.
000300  3               
000300  3               ; System constants
000300  3               
000300  3               	ScreenAddr  = $8000	; Startaddress video RAM
000300  3               	ScrSelAddr  = $b000	; Screen selection address
000300  3               	KeyRowAddr  = $b000	; PIA key matrix row
000300  3               	KeyColAddr  = $b001	; PIA key matrix column
000300  3               	SpeakerBit  = $b002	; Speaker bit
000300  3               	CmdReg      = $b400	; Command register AtoMMC
000300  3               	DatReg      = $b401	; Data register AtoMMC
000300  3               	Timer2_Low  = $b808	; Timer 2 low byte
000300  3               	Timer2_High = $b809	; Timer 2 high byte
000300  3               
000300  3               ; System calls
000300  3               
000300  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000300  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000300  3               	OSRDCH   = $fe94	; get key subroutine
000300  3                       READKEY  = $fe71	; scan key matrix subroutine
000300  3               	OSWRCH	 = $fff4	; write character
000300  3               
000300  3               
000300  3               .if iflag
000300  3               	TxtInvert   = $ff	; Invert byte for character printing
000300  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000300  3               .else
000300  3               	TxtInvert   = $00	; Invert byte for character printing
000300  3               	ScrFillByte = $00	; Screen fill byte for CLS
000300  3               .endif
000300  3               
000300  3               .if gflag
000300  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
000300  3               .else
000300  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
000300  3               .endif
000300  3               
000300  3               ;===============================================================
000300  3               ; Game starts here
000300  3               ;===============================================================
000300  3               
000300  3               .segment "CODE"
000300  3               
000300  3               ; Clear variables
000300  3               
000300  3  A9 00        	lda #0
000302  3  A2 00        	ldx #0
000304  3               clrloop:
000304  3  95 00        	sta 0,x
000306  3  E8           	inx
000307  3  D0 FB        	bne clrloop
000309  3               
000309  3  20 9C 06     	jsr game	 	; start the game.
00030C  3  A9 0C        	lda #12			; Clear screen + exit to Basic
00030E  3  20 F4 FF     	jsr OSWRCH
000311  3  4C B2 C2     	jmp $C2B2		; Back to Basic
000314  3               
000314  3               ; Definition of variables
000314  3               ; Make sure pointers are arranged in the same order as the data itself.
000314  3               
000314  3  57 26        msgptr:		.word msgdat	; messages
000316  3  23 29        blkptr:		.word chgfx	; block graphics.
000318  3  F3 2B        proptr:		.word bprop	; address of char properties.
00031A  3  4D 2C        sptptr:		.word sprgfx	; sprite graphics
00031C  3  4D 4B        frmptr:		.word frmlst	; sprite frames.
00031E  3  6D 4B        scrptr:		.word scdat	; address of screens.
000320  3  1A 5E        nmeptr:		.word nmedat	; enemy start positions.
000322  3  D8 5F        objptr:		.word objdta	; object graphics
000324  3               
000324  3               ;TxtFilter:	.byte $ff
000324  3  00 55 AA FF  txtcol:		.byte green,yellow,blue,red
000328  3               
000328  3               ; Don't change the order of these four.
000328  3               ; Menu routine relies on winlft following wintop.
000328  3               
000328  3  01           wintop:		.byte WINDOWTOP	; top of window.
000329  3  01           winlft:		.byte WINDOWLFT	; left edge.
00032A  3  12           winhgt:		.byte WINDOWHGT	; window height.
00032B  3  1E           winwid:		.byte WINDOWWID	; window width.
00032C  3  18           numob:		.byte NUMOBJ	; number of objects in game.
00032D  3               
00032D  3               ; Variables start here.
00032D  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00032D  3               
00032D  3  08           wntopx:		.byte (8 * WINDOWTOP)
00032E  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00032F  3  88           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000330  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
000331  3               
000331  3               ; Assorted game routines which can go in contended memory.
000331  3               
000331  3               ;--------------------------------------------------------------
000331  3               ; Entry for inventory called by the INV command
000331  3               ;
000331  3               ; Input:
000331  3               ;  X   = message nr with objects seperated with ,
000331  3               ;
000331  3               ; Output:
000331  3               ;  OPT = selected objectnr of INV menu
000331  3               ;--------------------------------------------------------------
000331  3               
000331  3               .if mflag
000331  3               minve:
000331  3               .if gflag
000331  3  A9 FF        	lda #$ff		; blue frontcolour
000333  3  8D 69 1A     	sta andeor
000336  3  A9 AA        	lda #$aa		; yellow backcoloour
000338  3  8D 6A 1A     	sta andeor+1
00033B  3               .endif
00033B  3  A9 4A        	lda #<(invdis)		; routine address.
00033D  3  8D 23 04     	sta mod0+1		; set up menu routine.
000340  3  8D 94 03     	sta mod2+1		; set up count routine.
000343  3  A9 05        	lda #>(invdis)
000345  3  8D 24 04     	sta mod0+2
000348  3  8D 95 03     	sta mod2+2
00034B  3  A9 60        	lda #<(fopt)		; find option from available objects.
00034D  3  8D C7 04     	sta mod1+1		; set up routine.
000350  3  A9 05        	lda #>(fopt)
000352  3  8D C8 04     	sta mod1+1+1
000355  3  4C 72 03     	jmp dbox		; do menu routine.
000358  3               
000358  3               ;--------------------------------------------------------------
000358  3               ; Entry for menu called by the MENU command
000358  3               ;
000358  3               ; Input:
000358  3               ;  X   = message nr with menu items seperated with ,
000358  3               ;
000358  3               ; Output:
000358  3               ;  OPT = selected line nr of MENU menu
000358  3               ;--------------------------------------------------------------
000358  3               
000358  3               mmenu:
000358  3  A9 94        	lda #<(always)		; routine address.
00035A  3  8D 23 04     	sta mod0+1		; set up routine.
00035D  3  8D 94 03     	sta mod2+1		; set up count routine.
000360  3  A9 0E        	lda #>(always)
000362  3  8D 24 04     	sta mod0+2
000365  3  8D 95 03     	sta mod2+2
000368  3               
000368  3  A9 F3        	lda #<(fstd)		; standard option selection.
00036A  3  8D C7 04     	sta mod1+1		; set up routine.
00036D  3  A9 04        	lda #>(fstd)
00036F  3  8D C8 04     	sta mod1+2
000372  3               
000372  3               ; Drop through into box routine.
000372  3               
000372  3               ;--------------------------------------------------------------
000372  3               ; Work out size of box for message or menu.
000372  3               ;--------------------------------------------------------------
000372  3               
000372  3               dbox:
000372  3  A9 57        	lda #<(msgdat)		; pointer to messages.
000374  3  85 66        	sta z80_l
000376  3  A9 26        	lda #>(msgdat)
000378  3  85 67        	sta z80_h
00037A  3               
00037A  3  20 E5 11     	jsr getwrd		; get message number.
00037D  3               
00037D  3  A5 67        	lda z80_h		; store pointer to message.
00037F  3  85 rr        	sta TmpAddr
000381  3  A5 66        	lda z80_l
000383  3  85 rr        	sta TmpAddr+1
000385  3               
000385  3  A9 01        	lda #1			; height.
000387  3  85 65        	sta z80_d
000389  3  A9 00        	lda #0			; start at object zero.
00038B  3  85 rr        	sta combyt		; store number of object in combyt.
00038D  3  85 64        	sta z80_e		; maximum width.
00038F  3               dbox5:
00038F  3  A9 00        	lda #0			; this line"s width.
000391  3  85 63        	sta z80_b
000393  3               mod2:
000393  3  20 94 0E     	jsr always		; item in player"s possession?
000396  3  C9 FF        	cmp #255
000398  3  D0 02        	bne dbox6		; not in inventory, skip this line.
00039A  3  E6 65        	inc z80_d		; add to tally.
00039C  3               dbox6:
00039C  3  A0 00        	ldy #0			; get character.
00039E  3  B1 66        	lda (z80_hl),y
0003A0  3  85 61        	sta z80_a
0003A2  3  E6 66        	inc z80_l		; next character.
0003A4  3  D0 02        	bne :+
0003A6  3  E6 67        	inc z80_h
0003A8  3               :
0003A8  3  A5 61        	lda z80_a		; reached end of line?
0003AA  3  C9 2C        	cmp #','
0003AC  3  F0 0D        	beq dbox3		; yes.
0003AE  3  C9 0D        	cmp #13
0003B0  3  F0 09        	beq dbox3		; yes.
0003B2  3  E6 63        	inc z80_b		; add to this line"s width.
0003B4  3  A5 61        	lda z80_a
0003B6  3  30 10        	bmi dbox4		; end of message? yes, end count.
0003B8  3  4C 9C 03     	jmp dbox6		; repeat until we find the end.
0003BB  3               dbox3:
0003BB  3  A5 64        	lda z80_e		; maximum line width.
0003BD  3  C5 63        	cmp z80_b		; have we exceeded longest so far?
0003BF  3  10 CE        	bpl dbox5		; no, carry on looking.
0003C1  3  A5 63        	lda z80_b		; make this the widest so far.
0003C3  3  85 64        	sta z80_e
0003C5  3  4C 8F 03     	jmp dbox5		; keep looking.
0003C8  3               dbox4:
0003C8  3  A5 64        	lda z80_e		; maximum line width.
0003CA  3  C5 63        	cmp z80_b		; have we exceeded longest so far?
0003CC  3  10 04        	bpl dbox8		; no, carry on looking.
0003CE  3  A5 63        	lda z80_b		; final line is the longest so far.
0003D0  3  85 64        	sta z80_e
0003D2  3               dbox8:
0003D2  3  C6 65        	dec z80_d		; decrement items found.
0003D4  3  D0 07        	bne :+			; total was zero.
0003D6  3  A9 FF        	lda #255
0003D8  3  85 rr        	sta varopt
0003DA  3  4C 1D 05     	jmp dbox15
0003DD  3               :
0003DD  3  A5 64        	lda z80_e		; longest line.
0003DF  3  D0 03        	bne :+			; was it zero?
0003E1  3  4C 1D 05     	jmp dbox15		; total was zero.
0003E4  3               :
0003E4  3  85 rr        	sta bwid		; set up size.
0003E6  3  A5 65        	lda z80_d
0003E8  3  85 rr        	sta blen
0003EA  3               
0003EA  3               ;--------------------------------------------------------------
0003EA  3               ; That's set up our box size.
0003EA  3               ;--------------------------------------------------------------
0003EA  3               
0003EA  3  AD 2A 03     	lda winhgt		; window height in characters.
0003ED  3  38           	sec
0003EE  3  E5 65        	sbc z80_d		; subtract height of box.
0003F0  3  4A           	lsr a			; divide by 2.
0003F1  3  18           	clc
0003F2  3  6D 28 03     	adc wintop		; add top edge of window.
0003F5  3  85 rr        	sta btop		; set up box top.
0003F7  3               
0003F7  3  AD 2B 03     	lda winwid		; window width in characters.
0003FA  3  38           	sec
0003FB  3  E5 64        	sbc z80_e		; subtract box width.
0003FD  3  4A           	lsr a			; divide by 2.
0003FE  3  18           	clc
0003FF  3  6D 29 03     	adc winlft		; add left edge of window.
000402  3  85 rr        	sta blft		; box left.
000404  3               
000404  3  A9 68        	lda #<(FONT-256)		; font.
000406  3  8D 6B 0A     	sta grbase		; set up for text display.
000409  3  A9 62        	lda #>(FONT-256)
00040B  3  8D 6C 0A     	sta grbase+1
00040E  3               
00040E  3  A5 rr        	lda TmpAddr+1		; restore message pointer.
000410  3  85 66        	sta z80_l
000412  3  A5 rr        	lda TmpAddr
000414  3  85 67        	sta z80_h
000416  3               
000416  3  A5 rr        	lda btop		; box top.
000418  3  85 rr        	sta dispy		; set display coordinate.
00041A  3  A9 00        	lda #0			; start at object zero.
00041C  3  85 rr        	sta combyt		; store number of object in combyt.
00041E  3               dbox2:
00041E  3  A5 rr        	lda combyt		; get object number.
000420  3  85 61        	sta z80_a
000422  3               mod0:
000422  3  20 94 0E     	jsr always		; check inventory for display.
000425  3  C9 FF        	cmp #255
000427  3  F0 03        	beq :+
000429  3  4C FD 04     	jmp dbox13		; not in inventory, skip this line.
00042C  3               :
00042C  3  A5 rr        	lda blft		; box left.
00042E  3  85 rr        	sta dispx		; set left display position.
000430  3  A5 rr        	lda bwid		; box width.
000432  3  85 63        	sta z80_b		; store width.
000434  3               dbox0:
000434  3  A0 00        	ldy #0
000436  3  B1 66        	lda (z80_hl),y		; get character.
000438  3  C9 2C        	cmp #','		; end of line?
00043A  3  F0 59        	beq dbox1		; yes, next one.
00043C  3  C9 0D        	cmp #13			; end of line?
00043E  3  F0 55        	beq dbox1		; yes, next one.
000440  3               
000440  3  C9 8D        	cmp #141			; end of line?
000442  3  D0 05        	bne :+
000444  3  C6 rr        	dec bwid
000446  3  4C A3 04     	jmp dbox7		; yes, next one.
000449  3               :
000449  3  C6 63        	dec z80_b		; one less to display.
00044B  3  29 7F        	and #127		; remove terminator.
00044D  3               
00044D  3  20 A9 0C     	jsr pchr		; display on screen.
000450  3               
000450  3  A0 00        	ldy #0
000452  3  B1 66        	lda (z80_hl),y		; get character.
000454  3  85 61        	sta z80_a
000456  3  E6 66        	inc z80_l		; next character.
000458  3  D0 02        	bne :+
00045A  3  E6 67        	inc z80_h
00045C  3               :
00045C  3  A5 61        	lda z80_a
00045E  3  C9 80        	cmp #128		; end of message?
000460  3  30 03        	bmi :+
000462  3  4C A3 04     	jmp dbox7		; yes, job done.
000465  3               :
000465  3  A5 63        	lda z80_b		; chars remaining.
000467  3  F0 03        	beq :+			; are any left?
000469  3  4C 34 04     	jmp dbox0		; yes, continue.
00046C  3               :
00046C  3               ;---------------------------------------------------
00046C  3               ; Reached limit of characters per line.
00046C  3               ;---------------------------------------------------
00046C  3               
00046C  3               dbox9:
00046C  3  A0 00        	ldy #0
00046E  3  B1 66        	lda (z80_hl),y		; get character.
000470  3  E6 66        	inc z80_l		; next one.
000472  3  D0 02        	bne :+
000474  3  E6 67        	inc z80_h
000476  3               :
000476  3  C9 2C        	cmp #','		; another line?
000478  3  F0 24        	beq dbox10		; yes, do next line.
00047A  3  C9 0D        	cmp #13			; another line?
00047C  3  F0 20        	beq dbox10		; yes, do next line.
00047E  3  C9 80        	cmp #128		; end of message?
000480  3  B0 03        	bcs :+
000482  3  4C AD 04     	jmp dbox11		; yes, finish message.
000485  3               :
000485  3  4C 6C 04     	jmp dbox9
000488  3               
000488  3               ;---------------------------------------------------
000488  3               ; Fill box to end of line.
000488  3               ;---------------------------------------------------
000488  3               
000488  3               dboxf:
000488  3  A9 20        	lda #32			; space character.
00048A  3  20 A9 0C     	jsr pchr		; display character.
00048D  3  C6 63        	dec z80_b
00048F  3  F0 03        	beq :+
000491  3  4C 88 04     	jmp dboxf		; repeat for remaining chars on line.
000494  3               :
000494  3  60           	rts
000495  3               dbox1:
000495  3  E6 66        	inc z80_l		; skip character.
000497  3  D0 02        	bne :+
000499  3  E6 67        	inc z80_h
00049B  3               :
00049B  3  20 88 04     	jsr dboxf		; fill box out to right side.
00049E  3               dbox10:
00049E  3  E6 rr        	inc dispy		; y coordinate down a line next position.
0004A0  3  4C 1E 04     	jmp dbox2		; next line.
0004A3  3               dbox7:
0004A3  3  A5 63        	lda z80_b		; chars remaining.
0004A5  3  D0 03        	bne :+			; are any left?
0004A7  3  4C AD 04     	jmp dbox11		; no, nothing to draw.
0004AA  3               :
0004AA  3  20 88 04     	jsr dboxf		; fill message to line.
0004AD  3               
0004AD  3               ;------------------------------------------------------
0004AD  3               ; Drawn the box menu, now select option.
0004AD  3               ;------------------------------------------------------
0004AD  3               
0004AD  3               dbox11:
0004AD  3  A5 rr        	lda btop		; box top.
0004AF  3  85 rr        	sta dispy		; set bar position.
0004B1  3               dbox14:
0004B1  3  20 09 10     	jsr joykey		; get controls.
0004B4  3  C9 7F        	cmp #$7f		; anything pressed?
0004B6  3  D0 F9        	bne dbox14		; yes, debounce it.
0004B8  3  20 26 05     	jsr dbar		; draw bar.
0004BB  3               dbox12:
0004BB  3  20 09 10     	jsr joykey		; get controls.
0004BE  3  C9 7F        	cmp #$7f		; anything pressed?
0004C0  3  F0 F9        	beq dbox12		; no, nothing.
0004C2  3  29 10        	and #16			; fire button pressed?
0004C4  3  D0 03        	bne :+
0004C6  3               mod1:
0004C6  3  4C F3 04     	jmp fstd		; yes, job done.
0004C9  3               :
0004C9  3  20 26 05     	jsr dbar		; delete bar.
0004CC  3               
0004CC  3  A5 rr        	lda joyval		; joystick reading.
0004CE  3  29 08        	and #8			; going up?
0004D0  3  F0 13        	beq dboxu		; yes, go up.
0004D2  3               
0004D2  3  A6 rr        	ldx dispy		; vertical position of bar.
0004D4  3  E8           	inx			; look down.
0004D5  3  8A           	txa
0004D6  3  38           	sec
0004D7  3  E5 rr        	sbc btop		; find distance from top.
0004D9  3  C5 rr        	cmp blen		; top of box.
0004DB  3  D0 03        	bne :+
0004DD  3  4C B1 04     	jmp dbox14		; yes, go no further.
0004E0  3               :
0004E0  3  E6 rr        	inc dispy		; move bar.
0004E2  3  4C B1 04     	jmp dbox14		; continue.
0004E5  3               dboxu:
0004E5  3  A5 rr        	lda dispy		; vertical position of bar.
0004E7  3  C5 rr        	cmp btop		; are we at the top?
0004E9  3  D0 03        	bne :+
0004EB  3  4C B1 04     	jmp dbox14		; yes, go no further.
0004EE  3               :
0004EE  3  C6 rr        	dec dispy		; move bar.
0004F0  3  4C B1 04     	jmp dbox14		; continue.
0004F3  3               fstd:
0004F3  3  A5 rr        	lda dispy		; bar position.
0004F5  3  38           	sec
0004F6  3  E5 rr        	sbc btop		; find selected option.
0004F8  3  85 rr        	sta varopt		; store the option.
0004FA  3  4C 34 06     	jmp redraw		; redraw the screen.
0004FD  3               
0004FD  3               ;------------------------------------------------------
0004FD  3               ; Option not available.  Skip this line.
0004FD  3               ;------------------------------------------------------
0004FD  3               
0004FD  3               dbox13:
0004FD  3  A0 00        	ldy #0
0004FF  3  B1 66        	lda (z80_hl),y		; get character.
000501  3  E6 66        	inc z80_l		; next one.
000503  3  D0 02        	bne :+
000505  3  E6 67        	inc z80_h
000507  3               :
000507  3  C9 2C        	cmp #','		; another line?
000509  3  D0 03        	bne :+
00050B  3  4C 1E 04     	jmp dbox2		; yes, do next line.
00050E  3               :
00050E  3  C9 0D        	cmp #13			; another line?
000510  3  D0 03        	bne :+
000512  3  4C 1E 04     	jmp dbox2		; yes, do next line.
000515  3               :
000515  3               
000515  3  10 03        	bpl :+			; end of message?
000517  3  4C AD 04     	jmp dbox11		; yes, finish message.
00051A  3               :
00051A  3  4C FD 04     	jmp dbox13
00051D  3               dbox15:
00051D  3  A5 rr        	lda TmpAddr		; pop message pointer from the stack.
00051F  3  85 67        	sta z80_h
000521  3  A5 rr        	lda TmpAddr+1
000523  3  85 66        	sta z80_l
000525  3  60           	rts
000526  3               
000526  3               ;------------------------------------------------------
000526  3               ; Invert bar
000526  3               ;------------------------------------------------------
000526  3               
000526  3               dbar:
000526  3  A5 rr        	lda blft		; box left.
000528  3  85 rr        	sta dispx		; set display coordinate.
00052A  3  20 B2 0B     	jsr gprad		; get printing address.
00052D  3               
00052D  3  A5 rr        	lda bwid		; box width.
00052F  3  85 62        	sta z80_c		; loop counter in c.
000531  3  A5 67        	lda z80_h
000533  3  85 65        	sta z80_d		; store screen address high byte.
000535  3               dbar1:
000535  3  A2 07        	ldx #7			; pixel height in b.
000537  3               dbar0:
000537  3  BC 3E 0C     	ldy scrtab,x
00053A  3  B1 rr        	lda (scraddr),y		; get screen byte.
00053C  3  49 FF        	eor #255		; reverse all bits.
00053E  3  91 rr        	sta (scraddr),y		; write back to screen.
000540  3  CA           	dex			; next line down.
000541  3  10 F4        	bpl dbar0		; draw rest of character.
000543  3               
000543  3  E6 rr        	inc scraddr		; one char right.
000545  3  C6 62        	dec z80_c		; decrement character counter.
000547  3  D0 EC        	bne dbar1		; repeat for whole line.
000549  3  60           	rts
00054A  3               
00054A  3               ;------------------------------------------------------
00054A  3               ; Point to object
00054A  3               ;
00054A  3               ; Input:
00054A  3               ;  combyt
00054A  3               ;
00054A  3               ; Output:
00054A  3               ;  A = object number, A=255 if already in possession
00054A  3               ;------------------------------------------------------
00054A  3               
00054A  3               invdis:
00054A  3  A5 66        	lda z80_l		; store message text pointer.
00054C  3  48           	pha
00054D  3  A5 67        	lda z80_h
00054F  3  48           	pha
000550  3  A5 rr        	lda combyt		; object number.
000552  3  E6 rr        	inc combyt		; ready for next one.
000554  3  20 1B 09     	jsr gotob		; check if we have object.
000557  3  A8           	tay
000558  3  68           	pla
000559  3  85 67        	sta z80_h
00055B  3  68           	pla
00055C  3  85 66        	sta z80_l
00055E  3  98           	tya
00055F  3  60           	rts
000560  3               
000560  3               ;------------------------------------------------------
000560  3               ; Find option selected.
000560  3               ;
000560  3               ; Input:
000560  3               ;  -
000560  3               ;
000560  3               ; Output:
000560  3               ;  OPT = selected object
000560  3               ;------------------------------------------------------
000560  3               
000560  3               fopt:
000560  3  A5 rr        	lda dispy
000562  3  38           	sec
000563  3  E5 rr        	sbc btop		; find selected option.
000565  3  85 rr        	sta tmp+2		; option selected in b register.
000567  3  E6 rr        	inc tmp+2
000569  3               
000569  3  A9 00        	lda #0			; set to first item.
00056B  3  85 rr        	sta combyt		; object number.
00056D  3               fopt0:
00056D  3  20 7D 05     	jsr fobj		; find next object in inventory.
000570  3  C6 rr        	dec tmp+2
000572  3  D0 F9        	bne fopt0		; repeat for relevant steps down the list.
000574  3               
000574  3  A5 rr        	lda combyt		; get option.
000576  3  85 rr        	sta varopt		; store the option.
000578  3  C6 rr        	dec varopt		; one less, due to where we increment combyt.
00057A  3  4C 34 06     	jmp redraw		; redraw the screen.
00057D  3               fobj:
00057D  3  A4 rr        	ldy combyt		; object number.
00057F  3  E6 rr        	inc combyt		; ready for next item.
000581  3  98           	tya
000582  3  20 1B 09     	jsr gotob		; do we have this item?
000585  3  C9 FF        	cmp #255
000587  3  D0 01        	bne :+
000589  3  60           	rts
00058A  3               :
00058A  3  4C 7D 05     	jmp fobj		; yes, it's on the list.
00058D  3               
00058D  3               ;bwid:	.byte 0              ; box/menu width.
00058D  3               ;blen:	.byte 0              ; box/menu height.
00058D  3               ;btop:	.byte 0              ; box coordinates.
00058D  3               ;blft:	.byte 0
00058D  3               .endif
00058D  3               
00058D  3               ;----------------------------------------------------
00058D  3               ; Wait for keypress.
00058D  3               ;----------------------------------------------------
00058D  3               
00058D  3               prskey:
00058D  3  98           	tya
00058E  3  48           	pha
00058F  3               prsloop:
00058F  3  20 F3 05     	jsr vsync
000592  3  20 71 FE     	jsr READKEY
000595  3  C0 FF        	cpy #255
000597  3  F0 F6        	beq prsloop		; wait until key pressed
000599  3  20 09 10     	jsr joykey
00059C  3  68           	pla
00059D  3  A8           	tay
00059E  3  60           	rts
00059F  3               
00059F  3               ;----------------------------------------------------
00059F  3               ; Delay routine 1/50 sec
00059F  3               ;
00059F  3               ; Wait 1/60 sec = 16666 usec
00059F  3               ; Wait 208 x 16 =  3328 usec
00059F  3               ;                 19994 usec
00059F  3               ; rts           =     6 usec
00059F  3               ; Total         = 20000 usec
00059F  3               ;----------------------------------------------------
00059F  3               
00059F  3               delay:
00059F  3  85 rr        	sta xtmp
0005A1  3               del_loop:
0005A1  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
0005A4  3               
0005A4  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
0005A6  3               delay1:
0005A6  3  61 80        	adc ($80,x)		;	 6 usec
0005A8  3  61 80        	adc ($80,x)		;	 6 usec
0005AA  3  88           	dey			;	 2 usec
0005AB  3  D0 F9        	bne delay1		;	 2 usec
0005AD  3  EA           	nop			; 2 usec
0005AE  3  EA           	nop			; 2 usec
0005AF  3               				; tot: 20000 usec
0005AF  3  C6 rr        	dec xtmp
0005B1  3  D0 EE        	bne del_loop
0005B3  3  60           	rts
0005B4  3               
0005B4  3               ;----------------------------------------------------
0005B4  3               ; Clear sprite table.
0005B4  3               ;
0005B4  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
0005B4  3               ;----------------------------------------------------
0005B4  3               
0005B4  3               xspr:
0005B4  3  A9 FF        	lda #255		; clear byte.
0005B6  3  A2 00        	ldx #0			; length of table.
0005B8  3               xspr0:
0005B8  3  9D 67 19     	sta sprtab,x		; sprite table.
0005BB  3  E8           	inx			; move to next byte.
0005BC  3  E0 CC        	cpx #SPRBUF
0005BE  3  D0 F8        	bne xspr0		; repeat for rest of table.
0005C0  3  60           	rts
0005C1  3               
0005C1  3               ;-------------------------------------------------------------
0005C1  3               ; Initialise all objects.
0005C1  3               ;
0005C1  3               ; Reset current room,y,x to start room,y,x for all objects
0005C1  3               ;-------------------------------------------------------------
0005C1  3               
0005C1  3               .if oflag
0005C1  3               iniob:
0005C1  3  A9 D8        	lda #<objdta 		; objects table.
0005C3  3  85 68        	sta z80_x
0005C5  3  A9 5F        	lda #>objdta
0005C7  3  85 69        	sta z80_i
0005C9  3               
0005C9  3  AE 2C 03     	ldx numob 		; number of objects in the game.
0005CC  3               iniob0:
0005CC  3  A0 23        	ldy #35
0005CE  3  B1 68        	lda (z80_ix),y 		; start screen.
0005D0  3  A0 20        	ldy #32
0005D2  3  91 68        	sta (z80_ix),y 		; set start screen.
0005D4  3               
0005D4  3  A0 24        	ldy #36
0005D6  3  B1 68        	lda (z80_ix),y 		; find start y.
0005D8  3  A0 21        	ldy #33
0005DA  3  91 68        	sta (z80_ix),y 		; set start y.
0005DC  3               
0005DC  3  A0 25        	ldy #37
0005DE  3  B1 68        	lda (z80_ix),y 		; get initial x.
0005E0  3  A0 22        	ldy #34
0005E2  3  91 68        	sta (z80_ix),y 		; set x coord.
0005E4  3               
0005E4  3  18           	clc 			; point to next object.
0005E5  3  A5 68        	lda z80_x
0005E7  3  69 26        	adc #38			; distance between objects.
0005E9  3  85 68        	sta z80_x
0005EB  3  90 02        	bcc :+
0005ED  3  E6 69        	inc z80_i
0005EF  3               :
0005EF  3  CA           	dex 			; repeat.
0005F0  3  D0 DA        	bne iniob0
0005F2  3               
0005F2  3  60           	rts
0005F3  3               .endif
0005F3  3               
0005F3  3               ;-------------------------------------------------------------
0005F3  3               ; Screen synchronisation.
0005F3  3               ;
0005F3  3               ;  - read joystick/keyboard
0005F3  3               ;  - handle sound
0005F3  3               ;  - sync framerate with clock
0005F3  3               ;  - handle shrapnel every even frame
0005F3  3               ;-------------------------------------------------------------
0005F3  3               
0005F3  3               vsync:
0005F3  3  48           	pha
0005F4  3  98           	tya
0005F5  3  48           	pha
0005F6  3  8A           	txa
0005F7  3  48           	pha
0005F8  3  20 09 10     	jsr joykey		; read joystick/keyboard.
0005FB  3               vsync1:
0005FB  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
0005FE  3  C9 FF        	cmp #$ff
000600  3  D0 F9        	bne vsync1
000602  3  A9 C3        	lda #>50000
000604  3  8D 09 B8     	sta Timer2_High
000607  3  A9 50        	lda #<50000
000609  3  8D 08 B8     	sta Timer2_Low
00060C  3               
00060C  3  A5 rr        	lda clock
00060E  3  29 01        	and #1
000610  3  D0 03        	bne:+
000612  3  20 9B 06     	jsr proshr		; handle shrapnel every even frame
000615  3               :
000615  3  AD 33 06     	lda sndtyp
000618  3  F0 13        	beq sndskip
00061A  3               sndloop:
00061A  3  AD 02 B0     	lda SpeakerBit		; handle sound
00061D  3  AC 33 06     	ldy sndtyp
000620  3               sndwait:
000620  3  88           	dey
000621  3  D0 FD        	bne sndwait
000623  3  49 04        	eor #4
000625  3  8D 02 B0     	sta SpeakerBit
000628  3  CE 33 06     	dec sndtyp
00062B  3  D0 ED        	bne sndloop
00062D  3               sndskip:
00062D  3  68           	pla
00062E  3  AA           	tax
00062F  3  68           	pla
000630  3  A8           	tay
000631  3  68           	pla
000632  3  60           	rts
000633  3               
000633  3  00           sndtyp:	.byte 0
000634  3               
000634  3               ;-----------------------------------------------
000634  3               ; Redraw the screen.
000634  3               ;
000634  3               ; Remove old copy of all sprites for redraw.
000634  3               ;-----------------------------------------------
000634  3               
000634  3               redraw:
000634  3               .if gflag
000634  3  A9 FF        	lda #$ff
000636  3  8D 69 1A     	sta andeor
000639  3  A9 00        	lda #$00
00063B  3  8D 6A 1A     	sta andeor+1
00063E  3               .endif
00063E  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
000640  3  48           	pha
000641  3  A5 68        	lda z80_x
000643  3  48           	pha
000644  3               
000644  3  20 7B 0D     	jsr droom		; show screen layout.
000647  3               .if oflag
000647  3  20 9F 08     	jsr shwob		; draw objects.
00064A  3               .endif
00064A  3               numsp0:
00064A  3  A9 0C        	lda #NUMSPR		; sprites to draw.
00064C  3  85 rr        	sta tmp
00064E  3               
00064E  3  A9 67        	lda #<sprtab		; sprite table.
000650  3  85 68        	sta z80_x
000652  3  A9 19        	lda #>sprtab
000654  3  85 69        	sta z80_i
000656  3               redrw0:
000656  3  A0 00        	ldy #0
000658  3  B1 68        	lda (z80_ix),y		; old sprite type.
00065A  3  C9 FF        	cmp #255		; is it enabled?
00065C  3  F0 0B        	beq redrw1 		; no, find next one.
00065E  3               
00065E  3  A0 03        	ldy #3
000660  3  B1 68        	lda (z80_ix),y 		; sprite y.
000662  3  C9 B1        	cmp #177		; beyond maximum?
000664  3  B0 03        	bcs redrw1		; yes, nothing to draw.
000666  3               
000666  3  20 30 14     	jsr sspria		; show single sprite.
000669  3               redrw1:
000669  3  18           	clc			; next sprite.
00066A  3  A5 68        	lda z80_x
00066C  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00066E  3  85 68        	sta z80_x
000670  3  90 02        	bcc :+
000672  3  E6 69        	inc z80_i
000674  3               :
000674  3  C6 rr        	dec tmp			; repeat for remaining sprites.
000676  3  D0 DE        	bne redrw0
000678  3               rpblc1:
000678  3               ;	jsr dshrp		; redraw shrapnel.
000678  3               
000678  3               .if aflag
000678  3               	jsr rbloc		; draw blocks for this screen
000678  3               .endif
000678  3  68           	pla			; retrieve sprite pointer.
000679  3  85 68        	sta z80_x
00067B  3  68           	pla
00067C  3  85 69        	sta z80_i
00067E  3               
00067E  3  60           	rts
00067F  3               
00067F  3               ;----------------------------------------------------------------------
00067F  3               ; Clear screen routine.
00067F  3               ;
00067F  3               ; Fill screenmem $8000-$97ff with ScrFillByte
00067F  3               ;----------------------------------------------------------------------
00067F  3               
00067F  3               cls:
00067F  3  A9 80        	lda #>ScreenAddr		; screen address.
000681  3  8D 8B 06     	sta clsloop+2
000684  3  AD 6A 1A     	lda andeor+1
000687  3               .if iflag
000687  3               	eor #$ff
000687  3               .endif
000687  3  A0 00        	ldy #0
000689  3               clsloop:
000689  3  99 00 80     	sta ScreenAddr,y
00068C  3  C8           	iny
00068D  3  D0 FA        	bne clsloop
00068F  3  EE 8B 06     	inc clsloop+2
000692  3  AE 8B 06     	ldx clsloop+2
000695  3  E0 98        	cpx #>(ScreenAddr+$1800)
000697  3  D0 F0        	bne clsloop
000699  3  60           	rts
00069A  3               
00069A  3               ;----------------------------------------------------------------------
00069A  3               ; Atomic palette is static
00069A  3               ;----------------------------------------------------------------------
00069A  3               
00069A  3               setpal:
00069A  3  60           	rts
00069B  3               
00069B  3               ;----------------------------------------------------------------------
00069B  3               ; FODDER check
00069B  3               ;----------------------------------------------------------------------
00069B  3               
00069B  3               .if pflag .or dflag
00069B  3               fdchk:
00069B  3               	cmp #FODDER 		; is it fodder?
00069B  3               	beq :+
00069B  3               	rts 			; no.
00069B  3               :
00069B  3               	lda #0			; wipe fodder in MAP
00069B  3               	ldy #0
00069B  3               	sta (bufaddr),y 	; rewrite block type.
00069B  3               
00069B  3               	lda dispx		; x=x/8
00069B  3               	pha
00069B  3               	lsr a
00069B  3               	lsr a
00069B  3               	lsr a
00069B  3               	sta dispx
00069B  3               
00069B  3               	lda dispy		; y=y/8
00069B  3               	pha
00069B  3               	lsr a
00069B  3               	lsr a
00069B  3               	lsr a
00069B  3               	sta dispy
00069B  3               
00069B  3               	lda #0 			; block to write.
00069B  3               	jsr pattr 		; write block.
00069B  3               
00069B  3               	pla
00069B  3               	sta dispy
00069B  3               	pla
00069B  3               	sta dispx
00069B  3               	rts
00069B  3               .endif
00069B  3               
00069B  3               ;----------------------------------------------------
00069B  3               ; Scrolly text and puzzle variables.
00069B  3               ;----------------------------------------------------
00069B  3               
00069B  3               .if sflag
00069B  3               txtbit:	.byte 128		; bit to write.
00069B  3               txtwid:	.byte 16		; width of ticker message.
00069B  3               txtpos:	.word msgdat
00069B  3               txtini:	.word msgdat
00069B  3               txtscr:	.word ScreenAddr
00069B  3               .endif
00069B  3               
00069B  3               ;----------------------------------------------------
00069B  3               ; Specialist routines.
00069B  3               ; Process shrapnel.
00069B  3               ;----------------------------------------------------
00069B  3               proshr:
00069B  3               .if pflag
00069B  3               	lda #<SHRAPN		; table.
00069B  3               	sta z80_x
00069B  3               	lda #>SHRAPN
00069B  3               	sta z80_i
00069B  3               
00069B  3               	lda #NUMSHR		; shrapnel pieces to process.
00069B  3               	sta shrctr
00069B  3               prosh0:
00069B  3               	ldy #0
00069B  3               	lda (z80_ix),y		; on/off marker.
00069B  3               	asl a
00069B  3               proshx:
00069B  3               	bcs :+
00069B  3               	jsr prosh1 		; on, so process it.
00069B  3               :
00069B  3               	clc
00069B  3               	lda z80_x
00069B  3               	adc #SHRSIZ
00069B  3               	sta z80_x
00069B  3               	bcc :+
00069B  3               	inc z80_i
00069B  3               :
00069B  3               	dec shrctr		; round again.
00069B  3               	bne prosh0
00069B  3               .endif
00069B  3               .if sflag
00069B  3               	jsr scrly
00069B  3               .endif
00069B  3  60           	rts
00069C  3               
00069C  3               .if pflag
00069C  3               ;shrctr:	.byte 0
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Proces shrapnel piece
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               prosh1:
00069C  3               	jsr plot 		; delete the pixel.
00069C  3               
00069C  3               	lda #<shrptr		; shrapnel routine pointers.
00069C  3               	sta z80_l
00069C  3               	lda #>shrptr
00069C  3               	sta z80_h
00069C  3               
00069C  3               	ldy #0
00069C  3               	lda (z80_ix),y		; restore shrapnel type.
00069C  3               	jsr prosh2 		; run the routine.
00069C  3               	jsr chkxy		; check x and y are good before we redisplay.
00069C  3               
00069C  3               	lda #<SHRSIZ 		; distance to next.
00069C  3               	sta z80_e
00069C  3               	lda #>SHRSIZ
00069C  3               	sta z80_d
00069C  3               	rts
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Run the routine
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               prosh2:
00069C  3               	asl a 			; 2 bytes per address.
00069C  3               	tay
00069C  3               	lda shrptr,y
00069C  3               	sta z80_l
00069C  3               	lda shrptr+1,y 		; fetch high byte from table.
00069C  3               	sta z80_h
00069C  3               	jmp (z80_hl) 		; jump to routine.
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Paricle routine table
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               shrptr:	.word laser		; laser.
00069C  3               	.word trail		; vapour trail.
00069C  3               	.word shrap		; shrapnel from explosion.
00069C  3               	.word dotl		; horizontal starfield left.
00069C  3               	.word dotr		; horizontal starfield right.
00069C  3               	.word dotu		; vertical starfield up.
00069C  3               	.word dotd		; vertical starfield down.
00069C  3               	.word ptcusr		; user particle.
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Explosion shrapnel.
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               shrap:
00069C  3               	ldy #1
00069C  3               	lda (z80_ix),y 		; get the angle.
00069C  3               	clc
00069C  3               	adc #<shrsin		; shrapnel sine table.
00069C  3               	sta z80_l
00069C  3               	lda #>shrsin
00069C  3               	adc #0
00069C  3               	sta z80_h
00069C  3               
00069C  3               	ldy #0
00069C  3               	lda (z80_hl),y 		; fetch value from table.
00069C  3               	sta z80_e
00069C  3               	inc z80_l 		; next byte of table.
00069C  3               	bne :+
00069C  3               	inc z80_h
00069C  3               :
00069C  3               	ldy #0
00069C  3               	lda (z80_hl),y		; fetch value from table.
00069C  3               	sta z80_d
00069C  3               	inc z80_l		; next byte of table.
00069C  3               	bne :+
00069C  3               	inc z80_h
00069C  3               :
00069C  3               	ldy #0
00069C  3               	lda (z80_hl),y 		; fetch value from table.
00069C  3               	sta z80_c
00069C  3               	inc z80_l 		; next byte of table.
00069C  3               	bne :+
00069C  3               	inc z80_h
00069C  3               :
00069C  3               	ldy #0
00069C  3               	lda (z80_hl),y 		; fetch value from table.
00069C  3               	sta z80_b
00069C  3               
00069C  3               	ldy #2
00069C  3               	lda (z80_ix),y 		; x coordinate in hl.
00069C  3               	clc
00069C  3               	adc z80_e		; add sine lb
00069C  3               	sta (z80_ix),y		; store new coordinate lb.
00069C  3               	ldy #3
00069C  3               	lda (z80_ix),y
00069C  3               	adc z80_d		; add sine hb
00069C  3               	sta (z80_ix),y		; store new coordinate hb.
00069C  3               
00069C  3               	ldy #4
00069C  3               	lda (z80_ix),y	 	; y coordinate in hl.
00069C  3               	clc
00069C  3               	adc z80_c		; add cosine lb
00069C  3               	sta (z80_ix),y		; store new coordinate lb.
00069C  3               	ldy #5
00069C  3               	lda (z80_ix),y
00069C  3               	adc z80_b		; add cosine lb
00069C  3               	sta (z80_ix),y		; store new coordinate hb.
00069C  3               
00069C  3               	rts
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Move dots
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               dotl:
00069C  3               	ldy #5
00069C  3               	lda (z80_ix),y
00069C  3               	sec
00069C  3               	sbc #1		 	; move left.
00069C  3               	sta (z80_ix),y
00069C  3               	rts
00069C  3               dotr:
00069C  3               	ldy #5
00069C  3               	lda (z80_ix),y
00069C  3               	clc
00069C  3               	adc #1		 	; move left.
00069C  3               	sta (z80_ix),y
00069C  3               	rts
00069C  3               dotu:
00069C  3               	ldy #3
00069C  3               	lda (z80_ix),y
00069C  3               	sec
00069C  3               	sbc #1		 	; move up.
00069C  3               	sta (z80_ix),y
00069C  3               	rts
00069C  3               dotd:
00069C  3               	ldy #3
00069C  3               	lda (z80_ix),y
00069C  3               	clc
00069C  3               	adc #1			; move down.
00069C  3               	sta (z80_ix),y
00069C  3               	rts
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Check if coordinates are ok before redrawing at new position.
00069C  3               ;
00069C  3               ; left:   X>L		X=L	Ok
00069C  3               ; right:  R+15>X	X=R	Ok
00069C  3               ; top:    Y>T		Y=T	Ok
00069C  3               ; bottom: B+15>Y	Y=B	Ok
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               chkxy:
00069C  3               
00069C  3               ; top:    Y>T		Y=T	Ok
00069C  3               
00069C  3               	ldy #3
00069C  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00069C  3               	cmp wntopx		; window top.
00069C  3               	bcs :+			; compare with top window limit.
00069C  3               	jmp kilshr		; out of window, kill shrapnel.
00069C  3               :
00069C  3               ; left:   X>L		X=L	Ok
00069C  3               
00069C  3               	ldy #5
00069C  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00069C  3               	cmp wnlftx		; left edge.
00069C  3               	bcs :+			; compare with left window limit.
00069C  3               	jmp kilshr		; out of window, kill shrapnel.
00069C  3               :
00069C  3               ; bottom: B+15>Y	Y=B	Ok
00069C  3               
00069C  3               	lda wnbotx		; point to bottom.
00069C  3               	clc
00069C  3               	adc #15
00069C  3               	ldy #3
00069C  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00069C  3               	bcs :+			; compare with shrapnel x coordinate.
00069C  3               	jmp kilshr		; off screen, kill shrapnel..
00069C  3               :
00069C  3               ; right:  R+15>X	X=R	Ok
00069C  3               
00069C  3               	lda wnrgtx		; point to right edge.
00069C  3               	clc
00069C  3               	adc #15
00069C  3               	ldy #5
00069C  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00069C  3               	bcs :+			; compare with window limit.
00069C  3               	jmp kilshr		; off screen, kill shrapnel.
00069C  3               :
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Drop through.
00069C  3               ; Display shrapnel.
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               plot:
00069C  3               	ldy #3
00069C  3               	lda (z80_ix),y		; y integer.
00069C  3               	sta dispy	 	; workspace coordinates.
00069C  3               	ldy #5
00069C  3               	lda (z80_ix),y	 	; x integer.
00069C  3               	sta dispx 		; workspace coordinates.
00069C  3               
00069C  3               	ldy #0
00069C  3               	lda (z80_ix),y 		; type.
00069C  3               	bne :+			; is it a laser?
00069C  3               	jmp plot1 		; yes, draw laser instead.
00069C  3               :
00069C  3               plot0:
00069C  3               	lda dispx		; which pixel within byte do we
00069C  3               	and #7			; want to set first?
00069C  3               	tay
00069C  3               	lda dots,y 		; table of small pixel positions.
00069C  3               	sta z80_e 		; get value.
00069C  3               
00069C  3               	jsr scadd 		; screen address.
00069C  3               	ldy #0
00069C  3               	lda (scraddr),y		; see what's already there.
00069C  3               	eor z80_e
00069C  3               	sta (scraddr),y 	; put back on screen.
00069C  3               	rts
00069C  3               
00069C  3               plot1:
00069C  3               	jsr scadd 		; screen address.
00069C  3               	ldy #0
00069C  3               	lda (scraddr),y 	; fetch byte there.
00069C  3               	eor #255 		; toggle all bits.
00069C  3               	sta (scraddr),y 	; new byte.
00069C  3               	rts
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Switch off shrapnel
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               kilshr:
00069C  3               	lda #128
00069C  3               	ldy #0
00069C  3               	sta (z80_ix),y	; switch off shrapnel.
00069C  3               	rts
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Sine/cosine table
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               shrsin:	.word 0,1024,391,946,724,724,946,391
00069C  3               	.word 1024,0,946,65144,724,64811,391,64589
00069C  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
00069C  3               	.word 64512,0,64589,391,64811,724,65144,946
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Create trail
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               trail:
00069C  3               	ldy #1
00069C  3               	lda (z80_ix),y 	; time remaining.
00069C  3               	sec
00069C  3               	sbc #1
00069C  3               	sta (z80_ix),y
00069C  3               	bne :+
00069C  3               	jmp trailk		; time to switch it off.
00069C  3               :
00069C  3               	jsr qrand		; get a random number.
00069C  3               	lsr a 			; x or y axis?
00069C  3               	bcc :+
00069C  3               	jmp trailv		; use y.
00069C  3               :
00069C  3               ; Trail horizontal
00069C  3               
00069C  3               	lsr a 			; which direction?
00069C  3               	bcc :+
00069C  3               	jmp traill		; go left.
00069C  3               :
00069C  3               ; Trail right
00069C  3               
00069C  3               	ldy #5
00069C  3               	lda (z80_ix),y
00069C  3               	clc
00069C  3               	adc #1	 		; go right.
00069C  3               	sta (z80_ix),y
00069C  3               	rts
00069C  3               
00069C  3               ; Trail left
00069C  3               
00069C  3               traill:
00069C  3               	ldy #5
00069C  3               	lda (z80_ix),y
00069C  3               	sec
00069C  3               	sbc #1 			; go left.
00069C  3               	sta (z80_ix),y
00069C  3               	rts
00069C  3               
00069C  3               ; Trail vertical
00069C  3               
00069C  3               trailv:
00069C  3               	lsr a		 	; which direction?
00069C  3               	bcc :+
00069C  3               	jmp trailu		; go up.
00069C  3               :
00069C  3               ; Trail down
00069C  3               
00069C  3               	ldy #3
00069C  3               	lda (z80_ix),y
00069C  3               	clc
00069C  3               	adc #1 			; go down.
00069C  3               	sta (z80_ix),y
00069C  3               	rts
00069C  3               
00069C  3               ; Trail up
00069C  3               
00069C  3               trailu:
00069C  3               	ldy #3
00069C  3               	lda (z80_ix),y
00069C  3               	sec
00069C  3               	sbc #1 			; go up.
00069C  3               	sta (z80_ix),y
00069C  3               	rts
00069C  3               
00069C  3               ; Kill trail
00069C  3               
00069C  3               trailk:
00069C  3               	lda #200		; set off-screen to kill vapour trail.
00069C  3               	ldy #3
00069C  3               	sta (z80_ix),y
00069C  3               	rts
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Create laser beam
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               laser:
00069C  3               	ldy #1
00069C  3               	lda (z80_ix),y 		; direction.
00069C  3               	ror a 			; left or right?
00069C  3               	bcs :+
00069C  3               	jmp laserl		; move left.
00069C  3               :
00069C  3               ; Laser right
00069C  3               
00069C  3               	lda #8			; distance to travel.
00069C  3               	sta z80_b
00069C  3               	jmp laserm		; move laser.
00069C  3               
00069C  3               ; Laser left
00069C  3               
00069C  3               laserl:
00069C  3               	lda #248		; distance to travel.
00069C  3               	sta z80_b
00069C  3               laserm:
00069C  3               	ldy #5
00069C  3               	lda (z80_ix),y		; x position.
00069C  3               	clc
00069C  3               	adc z80_b		; add distance.
00069C  3               	sta (z80_ix),y		; set new x coordinate.
00069C  3               
00069C  3               ; Test new block.
00069C  3               
00069C  3               	sta dispx 		; set x for block collision detection purposes.
00069C  3               	ldy #3
00069C  3               	lda (z80_ix),y 		; get y.
00069C  3               	sta dispy		; set coordinate for collision test.
00069C  3               	jsr tstbl 		; get block type there.
00069C  3               	cmp #WALL		; is it solid?
00069C  3               	bne :+
00069C  3               	jmp trailk		; yes, it cannot pass.
00069C  3               :
00069C  3               .if pflag .or dflag
00069C  3                       cmp #FODDER             ; is it fodder?
00069C  3                       bne :+
00069C  3                       jsr fdchk               ; remove fodder block.
00069C  3                       jmp trailk              ; destroy laser.
00069C  3               :
00069C  3               .endif
00069C  3                       rts                     ; no, ignore it.
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Dots mask
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               dots:	.byte 128,64,32,16,8,4,2,1
00069C  3               
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Plot, preserving de.
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               plotde:
00069C  3               	lda z80_d 		; put de on stack.
00069C  3               	pha
00069C  3               	lda z80_e
00069C  3               	pha
00069C  3               
00069C  3               	jsr plot 		; plot pixel.
00069C  3               
00069C  3               	pla			; restore de from stack.
00069C  3               	sta z80_e
00069C  3               	pla
00069C  3               	sta z80_d
00069C  3               
00069C  3               	rts
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Shoot a laser.
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               shoot:
00069C  3               	sta z80_c		; store direction in c register.
00069C  3               	ldy #8
00069C  3               	lda (z80_ix),y 		; y coordinate.
00069C  3               	clc
00069C  3               shoot1:
00069C  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
00069C  3               	sta z80_l 		; puty y coordinate in l.
00069C  3               
00069C  3               	ldy #9
00069C  3               	lda (z80_ix),y 		; x coordinate in h.
00069C  3               	sta z80_h
00069C  3               
00069C  3               	lda z80_i		; store pointer to sprite.
00069C  3               	pha
00069C  3               	lda z80_x
00069C  3               	pha
00069C  3               
00069C  3               	jsr fpslot 		; find particle slot.
00069C  3               	bcs :+
00069C  3               	jmp vapou2		; failed, restore ix.
00069C  3               :
00069C  3               	lda #0
00069C  3               	ldy #0
00069C  3               	sta (z80_ix),y 		; set up a laser.
00069C  3               
00069C  3               	lda z80_c
00069C  3               	ldy #1
00069C  3               	sta (z80_ix),y 		; set the direction.
00069C  3               
00069C  3               	lda z80_l
00069C  3               	ldy #3
00069C  3               	sta (z80_ix),y		; set y coordinate.
00069C  3               
00069C  3               	ror z80_c		; check direction we want.
00069C  3               	bcc :+
00069C  3               	jmp shootr		; shoot right.
00069C  3               :
00069C  3               	lda z80_h		; X position.
00069C  3               shoot0:
00069C  3               	and #248		; align on character boundary.
00069C  3               	ldy #5
00069C  3               	sta (z80_ix),y		; set x coordinate.
00069C  3               	jmp vapou0 		; draw first image.
00069C  3               shootr:
00069C  3               	lda z80_h		; x position.
00069C  3               	clc
00069C  3               	adc #15			; look right.
00069C  3               	jmp shoot0		; align and continue.
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Create a bit of vapour trail.
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               vapour:
00069C  3               	lda z80_i		; store pointer to sprite.
00069C  3               	pha
00069C  3               	lda z80_x
00069C  3               	pha
00069C  3               
00069C  3               	ldy #8
00069C  3               	lda (z80_ix),y 		; y coordinate.
00069C  3               	clc
00069C  3               vapou3:
00069C  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
00069C  3               	sta z80_l
00069C  3               
00069C  3               	ldy #9
00069C  3               	lda (z80_ix),y 		; x coordinate.
00069C  3               	adc #7
00069C  3               	sta z80_h
00069C  3               
00069C  3               	jsr fpslot 		; find particle slot.
00069C  3               	bcc :+
00069C  3               	jmp vapou1		; no, we can use it.
00069C  3               :
00069C  3               vapou2:
00069C  3               	pla
00069C  3               	sta z80_x
00069C  3               	pla
00069C  3               	sta z80_i
00069C  3               	rts
00069C  3               vapou1:
00069C  3               	lda z80_l
00069C  3               	ldy #3
00069C  3               	sta (z80_ix),y		; set up y.
00069C  3               
00069C  3               	lda z80_h
00069C  3               	ldy #5
00069C  3               	sta (z80_ix),y 		; set up x coordinate.
00069C  3               
00069C  3               	jsr qrand		; get quick random number.
00069C  3               	and #15			; random time.
00069C  3               	clc
00069C  3               	adc #15			; minimum time on screen.
00069C  3               	ldy #1
00069C  3               	sta (z80_ix),y		; set time on screen.
00069C  3               
00069C  3               	lda #1
00069C  3               	ldy #0
00069C  3               	sta (z80_ix),y		; define particle as vapour trail.
00069C  3               vapou0:
00069C  3               	jsr chkxy		; plot first position.
00069C  3               	jmp vapou2
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Create a user particle.
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               ptusr:
00069C  3               	sta z80_f		; store timer.
00069C  3               
00069C  3               	ldy #8
00069C  3               	lda (z80_ix),y 		; y coordinate.
00069C  3               	clc
00069C  3               	adc #7			; mid-point of sprite.
00069C  3               	sta z80_l
00069C  3               
00069C  3               	ldy #9
00069C  3               	lda (z80_ix),y 		; x coordinate.
00069C  3               	clc
00069C  3               	adc #7			; mid-point of sprite.
00069C  3               	sta z80_h
00069C  3               
00069C  3               	jsr fpslot 		; find particle slot.
00069C  3               	bcs ptusr1
00069C  3               	rts 			; out of slots, can't generate anything.
00069C  3               ptusr1:
00069C  3               	lda z80_l
00069C  3               	ldy #3
00069C  3               	sta (z80_ix),y 		; set up y.
00069C  3               
00069C  3               	lda z80_h
00069C  3               	ldy #5
00069C  3               	sta (z80_ix),y		; set up x coordinate.
00069C  3               
00069C  3               	lda z80_f 		; restore timer.
00069C  3               	ldy #1
00069C  3               	sta (z80_ix),y		; set time on screen.
00069C  3               
00069C  3               	lda #7
00069C  3               	ldy #0
00069C  3               	sta (z80_ix),y		; define particle as user particle.
00069C  3               
00069C  3               	jmp chkxy		; plot first position.
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Create a vertical or horizontal star.
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               star:
00069C  3               	lda z80_i		; store pointer to sprite.
00069C  3               	pha
00069C  3               	lda z80_x
00069C  3               	pha
00069C  3               
00069C  3               	jsr fpslot 		; find particle slot.
00069C  3               	bcs star7		; found one we can use.
00069C  3               star0:
00069C  3               	pla 			; restore sprite pointer.
00069C  3               	sta z80_x
00069C  3               	pla
00069C  3               	sta z80_i
00069C  3               	rts 			; out of slots, can't generate anything.
00069C  3               star7:
00069C  3               	lda z80_c		; direction.
00069C  3               	and #3 			; is it left?
00069C  3               	bne :+
00069C  3               	jmp star1 		; yes, it's left.
00069C  3               :
00069C  3               	cmp #1 			; is it right?
00069C  3               	bne :+
00069C  3               	jmp star2 		; yes, it's right.
00069C  3               :
00069C  3               	cmp #2 			; is it up?
00069C  3               	bne :+
00069C  3               	jmp star3 		; yes, it's up.
00069C  3               :
00069C  3               	ldy wntopx 		; get edge of screen.
00069C  3               	iny			; down one pixel.
00069C  3               	tya
00069C  3               star8:
00069C  3               	ldy #3
00069C  3               	sta (z80_ix),y 		; set y coord.
00069C  3               	jsr qrand 		; get quick random number.
00069C  3               star9:
00069C  3               	ldy #5
00069C  3               	sta (z80_ix),y		; set x position.
00069C  3               
00069C  3               	lda z80_c		; direction.
00069C  3               	and #3			; zero to three.
00069C  3               	clc
00069C  3               	adc #3			; 3 to 6 for starfield.
00069C  3               	ldy #0
00069C  3               	sta (z80_ix),y		; define particle as star.
00069C  3               	jsr chkxy		; plot first position.
00069C  3               	jmp star0
00069C  3               star1:
00069C  3               	jsr qrand		; get quick random number.
00069C  3               	ldy #3
00069C  3               	sta (z80_ix),y 		; set y coord.
00069C  3               
00069C  3               	lda wnrgtx 		; get edge of screen.
00069C  3               	clc
00069C  3               	adc #15			; add width of sprite minus 1.
00069C  3               	jmp star9
00069C  3               star2:
00069C  3               	jsr qrand 		; get quick random number.
00069C  3               	ldy #3
00069C  3               	sta (z80_ix),y		; set y coord.
00069C  3               
00069C  3               	lda wnlftx		; get edge of screen.
00069C  3               	jmp star9
00069C  3               star3:
00069C  3               	lda wnbotx 		; get edge of screen.
00069C  3               	clc
00069C  3               	adc #15 		; height of sprite minus one pixel.
00069C  3               	jmp star8
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Find particle slot for lasers or vapour trail.
00069C  3               ; can't use alternate accumulator.
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               fpslot:
00069C  3               	lda #<SHRAPN 		; shrapnel table.
00069C  3               	sta z80_x
00069C  3               	lda #>SHRAPN
00069C  3               	sta z80_i
00069C  3               
00069C  3               	lda #NUMSHR		; number of pieces in table.
00069C  3               	sta z80_b
00069C  3               fpslt0:
00069C  3               	ldy #0
00069C  3               	lda (z80_ix),y		; get type.
00069C  3               	asl a  			; is this slot in use?
00069C  3               	bcc :+
00069C  3               	rts			; no, we can use it.
00069C  3               :
00069C  3               	clc			; point to more shrapnel.
00069C  3               	lda z80_x
00069C  3               	adc #SHRSIZ
00069C  3               	sta z80_x
00069C  3               	bcc :+
00069C  3               	inc z80_i
00069C  3               :
00069C  3               	dec z80_b		; repeat for all shrapnel.
00069C  3               	bne fpslt0
00069C  3               
00069C  3               	clc
00069C  3               	rts 			; out of slots, can't generate anything.
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Create an explosion at sprite position.
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               explod:
00069C  3               	sta z80_c 		; particles to create.
00069C  3               
00069C  3               	lda z80_i 		; store pointer to sprite.
00069C  3               	pha
00069C  3               	lda z80_x
00069C  3               	pha
00069C  3               
00069C  3               	ldy #8
00069C  3               	lda (z80_ix),y 		; y coordinate.
00069C  3               	sta z80_l
00069C  3               	ldy #9
00069C  3               	lda (z80_ix),y		; x coordinate.
00069C  3               	sta z80_h
00069C  3               
00069C  3               	lda #<SHRAPN		; shrapnel table.
00069C  3               	sta z80_x
00069C  3               	lda #>SHRAPN
00069C  3               	sta z80_i
00069C  3               
00069C  3               	lda #NUMSHR		; number of pieces in table.
00069C  3               	sta explcnt
00069C  3               expld0:
00069C  3               	ldy #0
00069C  3               	lda (z80_ix),y		; get type.
00069C  3               	asl a 			; is this slot in use?
00069C  3               	bcs expld1		; no, we can use it.
00069C  3               expld2:
00069C  3               	clc
00069C  3               	lda z80_x
00069C  3               	adc #SHRSIZ
00069C  3               	sta z80_x
00069C  3               	bcc :+
00069C  3               	inc z80_i
00069C  3               :
00069C  3               	dec explcnt		; repeat for all shrapnel.
00069C  3               	bne expld0
00069C  3               expld3:
00069C  3               	pla			; restore sprite pointer.
00069C  3               	sta z80_x
00069C  3               	pla
00069C  3               	sta z80_i
00069C  3               	rts 			; out of slots, can't generate any more.
00069C  3               
00069C  3               expld1:
00069C  3               	lda z80_c		; shrapnel counter.
00069C  3               	and #15			; 0 to 15.
00069C  3               	clc			; add to x.
00069C  3               	adc z80_l
00069C  3               	ldy #3
00069C  3               	sta (z80_ix),y		; y coord.
00069C  3               
00069C  3               	lda seed3 		; crap random number.
00069C  3               	and #15			; 0 to 15.
00069C  3               	clc 			; add to y.
00069C  3               	adc z80_h
00069C  3               	ldy #5
00069C  3               	sta (z80_ix),y		; x coord.
00069C  3               
00069C  3               	lda #2
00069C  3               	ldy #0
00069C  3               	sta (z80_ix),y		; switch it on.
00069C  3               
00069C  3               	jsr chkxy		; plot first position.
00069C  3               	jsr qrand		; quick random angle.
00069C  3               	and #60 		; keep within range.
00069C  3               	ldy #1
00069C  3               	sta (z80_ix),y		; angle.
00069C  3               
00069C  3               	dec z80_c		; one less piece of shrapnel to generate.
00069C  3               	bne expld2 		; back to main explosion loop.
00069C  3               	jmp expld3 		; restore sprite pointer and exit.
00069C  3               
00069C  3               ;explcnt:	.byte 0
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Quick random
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               qrand:
00069C  3               	jsr random		; r register.
00069C  3               	eor seed3		; combine with seed.
00069C  3               	sta seed3 		; new seed.
00069C  3               	rts
00069C  3               
00069C  3               ;seed3:	.byte 0
00069C  3               
00069C  3               ;----------------------------------------------------
00069C  3               ; Display all shrapnel.
00069C  3               ;----------------------------------------------------
00069C  3               
00069C  3               dshrp:
00069C  3               	lda #<plotde		; display routine.
00069C  3               	sta proshx+1
00069C  3               	lda #>plotde
00069C  3               	sta proshx+2
00069C  3               	jsr proshr		; process shrapnel.
00069C  3               
00069C  3               	lda #<prosh1		; processing routine.
00069C  3               	sta proshx+1
00069C  3               	lda #>prosh1
00069C  3               	sta proshx+2
00069C  3               	rts
00069C  3               
00069C  3               ;------------------------------------------------------
00069C  3               ; Particle engine.
00069C  3               ;
00069C  3               ; Init particle data for 55 particles in SHRAPN table.
00069C  3               ; Every particle has 6 bytes.
00069C  3               ;
00069C  3               ; global:	-
00069C  3               ; local:	x,y,hl
00069C  3               ; calls:	-
00069C  3               ;------------------------------------------------------
00069C  3               
00069C  3               inishr:
00069C  3               	lda #<SHRAPN 		; table.
00069C  3               	sta z80_l
00069C  3               	lda #>SHRAPN
00069C  3               	sta z80_h
00069C  3               
00069C  3               	ldy #0
00069C  3               	ldx #NUMSHR		; shrapnel pieces to process.
00069C  3               inish0:
00069C  3               	lda #255 		; kill the shrapnel.
00069C  3               	sta (z80_hl),y
00069C  3               
00069C  3               	clc 			; point there.
00069C  3               	lda z80_l
00069C  3               	adc #SHRSIZ		; distance to next.
00069C  3               	sta z80_l
00069C  3               	bcc :+
00069C  3               	inc z80_h
00069C  3               :
00069C  3               	dex
00069C  3               	bne inish0 		; round again.
00069C  3               	rts
00069C  3               
00069C  3               ;------------------------------------------------------
00069C  3               ; Check for collision between laser and sprite.
00069C  3               ;------------------------------------------------------
00069C  3               
00069C  3               lcol:
00069C  3               	lda #<SHRAPN		; shrapnel table.
00069C  3               	sta z80_l
00069C  3               	lda #>SHRAPN
00069C  3               	sta z80_h
00069C  3               
00069C  3               	lda #NUMSHR		; number of pieces in table.
00069C  3               	sta z80_b
00069C  3               lcol0:
00069C  3               	ldy #0
00069C  3               	lda (z80_hl),y 		; get type.
00069C  3               	beq lcol1		; yes, check collision.
00069C  3               lcol3:
00069C  3               	clc			; point to more shrapnel.
00069C  3               	lda z80_l
00069C  3               	adc #SHRSIZ
00069C  3               	sta z80_l
00069C  3               	bcc :+
00069C  3               	inc z80_h
00069C  3               :
00069C  3               	dec z80_b		; repeat for all shrapnel.
00069C  3               	bne lcol0
00069C  3               	rts 			; no collision, carry not set.
00069C  3               lcol1:
00069C  3               	ldy #3
00069C  3               	lda (z80_hl),y		; get y.
00069C  3               	sec
00069C  3               	ldy #8
00069C  3               	sbc (z80_ix),y		; subtract sprite y.
00069C  3               lcolh:
00069C  3               	cmp #SPR_HGT 		; within range?
00069C  3               	bcc :+
00069C  3               	jmp lcol2		; no, missed.
00069C  3               :
00069C  3               	ldy #5
00069C  3               	lda (z80_hl),y 		; get x.
00069C  3               	sec
00069C  3               	ldy #9
00069C  3               	sbc (z80_ix),y 		; subtract sprite y.
00069C  3               	cmp #16			; within range?
00069C  3               	bcs :+
00069C  3               	jmp lcol4 		; yes, collision occurred.
00069C  3               :
00069C  3               lcol2:
00069C  3               	jmp lcol3
00069C  3               lcol4:
00069C  3               	sec
00069C  3               	rts 			; return with carry set for collision.
00069C  3               .endif
00069C  3               
00069C  3               ;------------------------------------------------------
00069C  3               ; Main game engine code starts here.
00069C  3               ; After initialisation, mloop is the main loop
00069C  3               ;------------------------------------------------------
00069C  3               
00069C  3               game:
00069C  3               
00069C  3               ; Set up screen address table.
00069C  3               
00069C  3               setsat:
00069C  3  A9 00        	lda #<ScreenAddr		; start of screen.
00069E  3  85 rr        	sta scraddr
0006A0  3  A9 80        	lda #>ScreenAddr
0006A2  3  85 rr        	sta scraddr+1
0006A4  3               
0006A4  3  A0 00        	ldy #0			; vertical lines on screen.
0006A6  3               setsa0:
0006A6  3  A5 rr        	lda scraddr
0006A8  3  99 00 9B     	sta SCADTB_lb,y		; write low byte.
0006AB  3  A5 rr        	lda scraddr+1
0006AD  3  C0 C0        	cpy #192		; vertical lines on screen.
0006AF  3  90 02        	bcc :+
0006B1  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0006B3  3               :
0006B3  3  99 00 9C     	sta SCADTB_hb,y		; write high byte.
0006B6  3  20 19 15     	jsr nline		; next line down.
0006B9  3  C8           	iny			; next position in table.
0006BA  3  D0 EA        	bne setsa0
0006BC  3               
0006BC  3               ; Init graphics mode
0006BC  3               
0006BC  3  A9 D0        	lda #ScrMode		; graphics mode
0006BE  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
0006C1  3  20 9A 06     	jsr setpal 		; set up palette.
0006C4  3               
0006C4  3               ; Init AtoMMC joystick
0006C4  3  20 43 10     	jsr joyinit		; AtoMMC joystick on PORT B
0006C7  3               
0006C7  3               rpblc2:
0006C7  3               .if pflag
0006C7  3               	jsr inishr 		; initialise particle engine.
0006C7  3               .endif
0006C7  3               evintr:
0006C7  3  20 CC 22     	jsr evnt12 		; call intro/menu event.
0006CA  3               
0006CA  3  A9 02        	lda #WALL 		; write default property.
0006CC  3  A2 00        	ldx #0
0006CE  3               clrmap:
0006CE  3  9D 00 98     	sta MAP,x 		; block properties.
0006D1  3  9D 00 99     	sta MAP+256,x
0006D4  3  9D 00 9A     	sta MAP+512,x
0006D7  3  E8           	inx			; next byte.
0006D8  3  D0 F4        	bne clrmap
0006DA  3               .if oflag
0006DA  3  20 C1 05     	jsr iniob 		; initialise objects.
0006DD  3               .endif
0006DD  3  A9 00        	lda #0			; put zero in accumulator.
0006DF  3  85 rr        	sta gamwon		; reset game won flag.
0006E1  3               
0006E1  3  20 4F 08     	jsr inisc 		; init the score.
0006E4  3               mapst:
0006E4  3  AD AE 1A     	lda stmap 		; start position on map.
0006E7  3  8D 44 1A     	sta roomtb		; set up position in table, if there is one.
0006EA  3               
0006EA  3               inipbl:
0006EA  3               .if aflag
0006EA  3               	lda #<eop		; reset blockpointer
0006EA  3               	sta pbptr
0006EA  3               	lda #>eop
0006EA  3               	sta pbptr+1
0006EA  3               .endif
0006EA  3  20 2C 16     	jsr initsc 		; set up first screen.
0006ED  3               
0006ED  3  A9 33        	lda #<ssprit 		; default to spare sprite in table.
0006EF  3  85 68        	sta z80_x
0006F1  3  A9 1A        	lda #>ssprit
0006F3  3  85 69        	sta z80_i
0006F5  3               evini:
0006F5  3  20 8E 23     	jsr evnt13 		; initialisation.
0006F8  3               
0006F8  3               ; Two restarts.
0006F8  3               ; First restart - clear all sprites and initialise everything.
0006F8  3               
0006F8  3               rstrt:
0006F8  3  20 EF 07     	jsr rsevt 		; restart events.
0006FB  3  20 B4 05     	jsr xspr 		; clear sprite table.
0006FE  3  20 98 17     	jsr sprlst 		; fetch pointer to screen sprites.
000701  3  20 21 18     	jsr ispr 		; initialise sprite table.
000704  3               
000704  3  4C 13 07     	jmp rstrt0
000707  3               
000707  3               ; Second restart - clear all but player, and don't initialise him.
000707  3               
000707  3               rstrtn:
000707  3  20 EF 07     	jsr rsevt		; restart events.
00070A  3  20 C5 17     	jsr nspr 		; clear all non-player sprites.
00070D  3  20 98 17     	jsr sprlst 		; fetch pointer to screen sprites.
000710  3  20 5E 18     	jsr kspr 		; initialise sprite table, no more players.
000713  3               
000713  3               ; Set up the player and/or enemy sprites.
000713  3               
000713  3               rstrt0:
000713  3  A9 00        	lda #0 			; zero in accumulator.
000715  3  85 rr        	sta nexlev 		; reset next level flag.
000717  3  85 rr        	sta restfl 		; reset restart flag.
000719  3  85 rr        	sta deadf 		; reset dead flag.
00071B  3  20 7B 0D     	jsr droom 		; show screen layout.
00071E  3               rpblc0:
00071E  3               .if pflag
00071E  3               	jsr inishr 		; initialise particle engine.
00071E  3               .endif
00071E  3               .if aflag
00071E  3               	jsr rbloc		; draw blocks for this screen
00071E  3               .endif
00071E  3               .if oflag
00071E  3  20 9F 08     	jsr shwob		; draw objects.
000721  3               .endif
000721  3               
000721  3  A9 67        	lda #<sprtab 		; address of sprite table, even sprites.
000723  3  85 68        	sta z80_x
000725  3  A9 19        	lda #>sprtab
000727  3  85 69        	sta z80_i
000729  3  20 0A 13     	jsr dspr 		; display sprites.
00072C  3               
00072C  3  A9 78        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00072E  3  85 68        	sta z80_x
000730  3  A9 19        	lda #>(sprtab+TABSIZ)
000732  3  85 69        	sta z80_i
000734  3  20 0A 13     	jsr dspr 		; display sprites.
000737  3               mloop:
000737  3  20 F3 05     	jsr vsync 		; synchronise with display.
00073A  3  A9 67        	lda #<sprtab 		; address of sprite table, even sprites.
00073C  3  85 68        	sta z80_x
00073E  3  A9 19        	lda #>sprtab
000740  3  85 69        	sta z80_i
000742  3  20 0A 13     	jsr dspr 		; display even sprites.
000745  3               
000745  3               ;	jsr plsnd 		; play sounds.
000745  3               
000745  3  20 9B 06     	jsr proshr
000748  3  A9 78        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00074A  3  85 68        	sta z80_x
00074C  3  A9 19        	lda #>(sprtab+TABSIZ)
00074E  3  85 69        	sta z80_i
000750  3  20 0A 13     	jsr dspr 		; display odd sprites.
000753  3               
000753  3  A9 33        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000755  3  85 68        	sta z80_x
000757  3  A9 1A        	lda #>(ssprit)
000759  3  85 69        	sta z80_i
00075B  3               evlp1:
00075B  3  20 9C 20     	jsr evnt10 		; called once per main loop.
00075E  3  20 88 12     	jsr pspr 		; process sprites.
000761  3               
000761  3               ; Main loop events.
000761  3               
000761  3  A9 33        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000763  3  85 68        	sta z80_x
000765  3  A9 1A        	lda #>ssprit
000767  3  85 69        	sta z80_i
000769  3               evlp2:
000769  3  20 CB 22     	jsr evnt11 		; called once per main loop.
00076C  3               bsortx:
00076C  3  20 FE 11     	jsr bsort 		; sort sprites.
00076F  3               
00076F  3  A5 rr        	lda nexlev		; finished level flag.
000771  3  F0 03        	beq :+
000773  3  4C 9B 07     	jmp newlev		; is set, go to next level.
000776  3               :
000776  3  A5 rr        	lda gamwon		; finished game flag.
000778  3  F0 03        	beq :+
00077A  3  4C AA 07     	jmp evwon		; is set, finish the game.
00077D  3               :
00077D  3  A5 rr        	lda restfl 		; finished level flag.
00077F  3  C9 01        	cmp #1			; has it been set?
000781  3  D0 03        	bne :+
000783  3  4C F8 06     	jmp rstrt		; yes, go to next level.
000786  3               :
000786  3  C9 02        	cmp #2			; has it been set?
000788  3  D0 03        	bne :+
00078A  3  4C 07 07     	jmp rstrtn		; yes, go to next level.
00078D  3               :
00078D  3  A5 rr        	lda deadf 		; dead flag.
00078F  3  F0 03        	beq :+
000791  3  4C B0 07     	jmp pdead		; yes, player dead.
000794  3               :
000794  3               ; back to start of main loop.
000794  3               
000794  3  E6 rr        	inc frmno
000796  3  E6 rr        	inc clock
000798  3  4C 37 07     	jmp mloop		; switched to a jmp mloop during test mode.
00079B  3               
00079B  3               ;----------------------------------------------------------
00079B  3               ; Read blocks from list and update screen accordingly.
00079B  3               ;----------------------------------------------------------
00079B  3               
00079B  3               .if aflag
00079B  3               rbloc:
00079B  3               	lda #<eop		; reset temp blockpointer
00079B  3               	sta pbbuf
00079B  3               	lda #>eop
00079B  3               	sta pbbuf+1
00079B  3               
00079B  3               rbloc2:
00079B  3               	lda pbbuf			; check for last block
00079B  3               	cmp pbptr
00079B  3               	bne rbloc1
00079B  3               	lda pbbuf+1
00079B  3               	cmp pbptr+1
00079B  3               	bne rbloc1
00079B  3               	rts
00079B  3               rbloc1:
00079B  3               	ldy #0
00079B  3               	lda (pbbuf),y		; check if block for this scno
00079B  3               	cmp scno
00079B  3               	bne rbloc0		; if not, skip
00079B  3               	iny
00079B  3               	lda (pbbuf),y		; get y
00079B  3               	sta dispy
00079B  3               	iny
00079B  3               	lda (pbbuf),y		; get x
00079B  3               	sta dispx
00079B  3               	iny
00079B  3               	lda (pbbuf),y		; get blocknr
00079B  3               	jsr pattr2		; draw block
00079B  3               rbloc0:
00079B  3               	clc			; point to next block
00079B  3               	lda pbbuf
00079B  3               	adc #4
00079B  3               	sta pbbuf
00079B  3               	bcc rbloc2
00079B  3               	inc pbbuf+1
00079B  3               	jmp rbloc2
00079B  3               .endif
00079B  3               
00079B  3               ;----------------------------------------------------------
00079B  3               ; New level
00079B  3               ;----------------------------------------------------------
00079B  3               
00079B  3               ;.repeat 270
00079B  3               ;  .byte 0
00079B  3               ;.endrep
00079B  3               
00079B  3               newlev:
00079B  3  A5 rr        	lda scno 			; current screen.
00079D  3  18           	clc
00079E  3  69 01        	adc #1				; next screen.
0007A0  3  CD 19 5E     	cmp numsc			; total number of screens.
0007A3  3  B0 05        	bcs evwon			; yes, game finished.
0007A5  3  85 rr        	sta scno			; set new level number.
0007A7  3  4C F8 06     	jmp rstrt			; restart, clearing all aliens.
0007AA  3               
0007AA  3               evwon:
0007AA  3  20 64 25     	jsr evnt18		 	; game completed.
0007AD  3  4C C4 07     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0007B0  3               
0007B0  3               ;----------------------------------------------------------
0007B0  3               ; Player dead.
0007B0  3               ;----------------------------------------------------------
0007B0  3               
0007B0  3               ;.repeat 258
0007B0  3               ;  .byte 0
0007B0  3               ;.endrep
0007B0  3               
0007B0  3               pdead:
0007B0  3  A9 00        	lda #0				; zeroise accumulator.
0007B2  3  85 rr        	sta deadf			; reset dead flag.
0007B4  3               evdie:
0007B4  3  20 0B 25     	jsr evnt16 			; death subroutine.
0007B7  3  A5 rr        	lda numlif			; number of lives.
0007B9  3  F0 03        	beq :+
0007BB  3  4C F8 06     	jmp rstrt 			; restart game.
0007BE  3               :
0007BE  3               evfail:
0007BE  3  20 1D 25     	jsr evnt17 			; failure event.
0007C1  3  4C 9C 06     	jmp game			; restart game
0007C4  3               
0007C4  3               ;----------------------------------------------------------
0007C4  3               ; Tidy things up
0007C4  3               ;----------------------------------------------------------
0007C4  3               
0007C4  3               ;.repeat 291
0007C4  3               ;  .byte 0
0007C4  3               ;.endrep
0007C4  3               
0007C4  3               tidyup:
0007C4  3  A0 00        	ldy #0				; digits to check.
0007C6  3               tidyu2:
0007C6  3  B9 59 0A     	lda score,y 			; get score digit.
0007C9  3  CD 5F 0A     	cmp hiscor 			; are we larger than high score digit?
0007CC  3  90 07        	bcc tidyu0			; high score is bigger.
0007CE  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0007D0  3  C8           	iny				; next digit of high score.
0007D1  3  C0 06        	cpy #6
0007D3  3  D0 F1        	bne tidyu2			; repeat for all digits
0007D5  3               tidyu0:
0007D5  3  A9 59        	lda #<score			; return pointing to score.
0007D7  3  85 62        	sta z80_c
0007D9  3  A9 0A        	lda #>score
0007DB  3  85 63        	sta z80_b
0007DD  3  60           	rts
0007DE  3               tidyu1:
0007DE  3  A0 05        	ldy #5
0007E0  3               tidyu3:
0007E0  3  B9 59 0A     	lda score,y			; score.
0007E3  3  99 5F 0A     	sta hiscor,y			; high score.
0007E6  3  88           	dey
0007E7  3  10 F7        	bpl tidyu3 			; copy score to high score.
0007E9  3               evnewh:
0007E9  3  20 54 26     	jsr evnt19			; new high score event.
0007EC  3  4C D5 07     	jmp tidyu0			; tidy up.
0007EF  3               
0007EF  3               ;--------------------------------------------------
0007EF  3               ; Restart event.
0007EF  3               ;--------------------------------------------------
0007EF  3               
0007EF  3               rsevt:
0007EF  3  A9 33        	lda #<ssprit 			; default to spare element in table.
0007F1  3  85 68        	sta z80_x
0007F3  3  A9 1A        	lda #>ssprit
0007F5  3  85 69        	sta z80_i
0007F7  3               evrs:
0007F7  3  4C E5 24     	jmp evnt14	 		; call restart event.
0007FA  3               
0007FA  3               ;------------------------------------------------------------------
0007FA  3               ; Copy number passed in a to string position bc, right-justified.
0007FA  3               ;
0007FA  3               ; Input:
0007FA  3               ;  A  = number
0007FA  3               ;  BC = string address
0007FA  3               ;
0007FA  3               ; Output:
0007FA  3               ;  BC = string with number
0007FA  3               ;-----------------------------------------------------------------
0007FA  3               
0007FA  3               num2ch:
0007FA  3  85 65        	sta z80_d		; Save number
0007FC  3               
0007FC  3  A9 00        	lda #0
0007FE  3  85 rr        	sta flag
000800  3               numdg3:
000800  3  A2 64        	ldx #100		; hundreds column.
000802  3  86 64        	stx z80_e
000804  3  20 14 08     	jsr numdg		; show digit.
000807  3               numdg2:
000807  3  A2 0A        	ldx #10			; tens column.
000809  3  86 64        	stx z80_e
00080B  3  20 14 08     	jsr numdg		; show digit.
00080E  3               
00080E  3  E6 rr        	inc flag
000810  3  A2 01        	ldx #1			; units column.
000812  3  86 64        	stx z80_e
000814  3               numdg:
000814  3  A9 30        	lda #48			; clear digit.
000816  3  85 61        	sta z80_a
000818  3               numdg1:
000818  3  A5 65        	lda z80_d
00081A  3  C5 64        	cmp z80_e
00081C  3  90 0E        	bcc numdg0		; nothing to show.
00081E  3  38           	sec
00081F  3  A5 65        	lda z80_d
000821  3  E5 64        	sbc z80_e		; subtract from column.
000823  3  85 65        	sta z80_d
000825  3  E6 61        	inc z80_a		; increment digit.
000827  3  E6 rr        	inc flag
000829  3  4C 18 08     	jmp numdg1		; repeat until column is zero.
00082C  3               numdg0:
00082C  3  A0 00        	ldy #0
00082E  3  A5 61        	lda z80_a
000830  3  91 62        	sta (z80_bc),y		; write digit to buffer.
000832  3  A5 rr        	lda flag
000834  3  F0 06        	beq :+
000836  3  E6 62        	inc z80_c		; next buffer position.
000838  3  D0 02        	bne :+
00083A  3  E6 63        	inc z80_b
00083C  3               :
00083C  3  60           	rts
00083D  3               num2dd:
00083D  3  85 65        	sta z80_d		; Save number
00083F  3               
00083F  3  A9 01        	lda #1
000841  3  85 rr        	sta flag
000843  3               
000843  3  4C 07 08     	jmp numdg2
000846  3               num2td:
000846  3  85 65        	sta z80_d		; Save number
000848  3               
000848  3  A9 01        	lda #1
00084A  3  85 rr        	sta flag
00084C  3  4C 00 08     	jmp numdg3
00084F  3               
00084F  3               ;flag:	.byte 0
00084F  3               
00084F  3               ;---------------------------------------------------------
00084F  3               ; Reset score to "000000"
00084F  3               ;---------------------------------------------------------
00084F  3               
00084F  3               inisc:
00084F  3  A9 30        	lda #'0'
000851  3  A2 05        	ldx #5			; digits to initialise.
000853  3               inisc0:
000853  3  9D 59 0A     	sta score,x 		; write zero digit.
000856  3  CA           	dex			; next column.
000857  3  10 FA        	bpl inisc0		; repeat for all digits.
000859  3               
000859  3  60           	rts
00085A  3               
00085A  3               ;-----------------------------------------------------
00085A  3               ; Multiply h by d and return in hl.
00085A  3               ;
00085A  3               ; Input:
00085A  3               ;  H = first number
00085A  3               ;  D = second number
00085A  3               ;
00085A  3               ; Output:
00085A  3               ;  HL = result H x D
00085A  3               ;-----------------------------------------------------
00085A  3               
00085A  3               imul:
00085A  3  A5 65        	lda z80_d		; HL = H * D
00085C  3  85 64        	sta z80_e
00085E  3  A5 67        	lda z80_h
000860  3  85 62        	sta z80_c		; make c first multiplier.
000862  3               imul0:
000862  3  A9 00        	lda #0			; zeroise total.
000864  3  85 66        	sta z80_l
000866  3  85 67        	sta z80_h
000868  3               
000868  3  A5 67        	lda z80_h
00086A  3  85 65        	sta z80_d		; zeroise high byte.
00086C  3               
00086C  3  A9 08        	lda #8			; repeat 8 times.
00086E  3  85 63        	sta z80_b
000870  3               imul1:
000870  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
000872  3  90 0E        	bcc imul2		; wasn't set.
000874  3  18           	clc			; bit was set, so add de.
000875  3  A5 66        	lda z80_l
000877  3  65 64        	adc z80_e
000879  3  85 66        	sta z80_l
00087B  3  A5 67        	lda z80_h
00087D  3  65 65        	adc z80_d
00087F  3  85 67        	sta z80_h
000881  3  18           	clc 			; reset carry.
000882  3               imul2:
000882  3  06 64        	asl z80_e 		; shift de 1 bit left.
000884  3  26 65        	rol z80_d
000886  3  C6 63        	dec z80_b
000888  3  D0 E6        	bne imul1		; repeat 8 times.
00088A  3               
00088A  3  60           	rts
00088B  3               
00088B  3               ;-----------------------------------------------
00088B  3               ; Divide d by e and return in d, remainder in a.
00088B  3               ;
00088B  3               ; Input:
00088B  3               ;  D = first number
00088B  3               ;  E = second number
00088B  3               ;
00088B  3               ; Output:
00088B  3               ;  D = result D/E
00088B  3               ;  A = remainder
00088B  3               ;-----------------------------------------------
00088B  3               
00088B  3               idiv:
00088B  3  A9 00        	lda #0
00088D  3  A0 08        	ldy #8		 	; bits to shift.
00088F  3  06 65        	asl z80_d
000891  3               idiv0:
000891  3  2A           	rol a 			; multiply d by 2.
000892  3  C5 64        	cmp z80_e 		; test if e is smaller.
000894  3  90 02        	bcc idiv1		; e is greater, no division this time.
000896  3  E5 64        	sbc z80_e		; subtract it.
000898  3               idiv1:
000898  3  26 65        	rol z80_d		; rotate into d.
00089A  3  88           	dey
00089B  3  D0 F4        	bne idiv0		; repeat
00089D  3  60           	rts
00089E  3               
00089E  3               ;---------------------------------------------------
00089E  3               ; Play AY sound effect
00089E  3               ;---------------------------------------------------
00089E  3               
00089E  3               plsnd:
00089E  3  60           	rts
00089F  3               
00089F  3               ;---------------------------------------------------
00089F  3               ; Objects handling.
00089F  3               ; 32 bytes for image
00089F  3               ; 3 for room, y and x
00089F  3               ; 3 for starting room, y and x.
00089F  3               ; 254 = disabled.
00089F  3               ; 255 = object in player"s pockets.
00089F  3               ;---------------------------------------------------
00089F  3               
00089F  3               ;---------------------------------------------------
00089F  3               ; Show items present.
00089F  3               ;---------------------------------------------------
00089F  3               
00089F  3               .if oflag
00089F  3               shwob:
00089F  3  A9 D8        	lda #<objdta 			; objects table.
0008A1  3  85 66        	sta z80_l
0008A3  3  A9 5F        	lda #>objdta
0008A5  3  85 67        	sta z80_h
0008A7  3               
0008A7  3  AD 2C 03     	lda numob 			; number of objects in the game.
0008AA  3  85 rr        	sta sprcnt
0008AC  3               shwob0:
0008AC  3  A0 20        	ldy #32 			; distance to room number.
0008AE  3  B1 66        	lda (z80_hl),y 			; same as an item?
0008B0  3  C5 rr        	cmp scno 			; current location.
0008B2  3  D0 03        	bne :+
0008B4  3  20 C9 08     	jsr dobj 			; yes, display object.
0008B7  3               :
0008B7  3  18           	clc
0008B8  3  A5 66        	lda z80_l
0008BA  3  69 26        	adc #38 			; distance to next item.
0008BC  3  85 66        	sta z80_l
0008BE  3  A5 67        	lda z80_h
0008C0  3  69 00        	adc #0
0008C2  3  85 67        	sta z80_h	 		; point to it.
0008C4  3  C6 rr        	dec sprcnt
0008C6  3  D0 E4        	bne shwob0 			; repeat for others.
0008C8  3  60           	rts
0008C9  3               
0008C9  3               ;---------------------------------------------------
0008C9  3               ; Display object.
0008C9  3               ; hl must point to object's start address.
0008C9  3               ;
0008C9  3               ; Input:
0008C9  3               ;  HL = object address
0008C9  3               ;---------------------------------------------------
0008C9  3               
0008C9  3               dobj:
0008C9  3  A0 21        	ldy #33
0008CB  3  B1 66        	lda (z80_hl),y 			; point to y.
0008CD  3  85 rr        	sta dispy
0008CF  3  C8           	iny
0008D0  3  B1 66        	lda (z80_hl),y 			; point to x.
0008D2  3  85 rr        	sta dispx
0008D4  3               dobj1:
0008D4  3  4C C3 0C     	jmp sprite 			; draw this sprite.
0008D7  3               
0008D7  3               ;--------------------------------------
0008D7  3               ; Remove an object.
0008D7  3               ;
0008D7  3               ; Input:
0008D7  3               ;  A = object number
0008D7  3               ;--------------------------------------
0008D7  3               
0008D7  3               remob:
0008D7  3  CD 2C 03     	cmp numob			; number of objects in game.
0008DA  3  90 01        	bcc :+				; are we checking past the end?
0008DC  3  60           	rts				; yes, can't get non-existent item.
0008DD  3               :
0008DD  3  48           	pha				; remember object.
0008DE  3  20 EC 08     	jsr getob			; pick it up if we haven't already got it.
0008E1  3  68           	pla				; retrieve object number.
0008E2  3  20 1B 09     	jsr gotob			; get its address.
0008E5  3  A9 FE        	lda #254
0008E7  3  A0 20        	ldy #32
0008E9  3  91 66        	sta (z80_hl),y			; remove it.
0008EB  3  60           	rts
0008EC  3               
0008EC  3               ;---------------------------------------------------
0008EC  3               ; Pick up object number held in the accumulator.
0008EC  3               ;
0008EC  3               ; Input:
0008EC  3               ;  A = object number
0008EC  3               ;---------------------------------------------------
0008EC  3               
0008EC  3               getob:
0008EC  3  CD 2C 03     	cmp numob 		; number of objects in game.
0008EF  3  90 01        	bcc :+			; are we checking past the end?
0008F1  3  60           	rts			; yes, can't get non-existent item.
0008F2  3               :
0008F2  3  20 1B 09     	jsr gotob 		; check if we already have it.
0008F5  3  C9 FF        	cmp #255
0008F7  3  D0 01        	bne :+
0008F9  3  60           	rts			; we already do.
0008FA  3               :
0008FA  3  A0 20        	ldy #32
0008FC  3  B1 66        	lda (z80_hl),y		; is it on this screen?
0008FE  3  C5 rr        	cmp scno 		; current screen.
000900  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
000902  3               
000902  3  A9 FF        	lda #255
000904  3  91 66        	sta (z80_hl),y		; pick it up.
000906  3  C8           	iny 			; point to y coord.
000907  3               getob1:
000907  3  A0 21        	ldy #33
000909  3  B1 66        	lda (z80_hl),y		; y coord.
00090B  3  85 rr        	sta dispy
00090D  3  A0 22        	ldy #34
00090F  3  B1 66        	lda (z80_hl),y 		; x coord.
000911  3  85 rr        	sta dispx
000913  3  4C D4 08     	jmp dobj1 		; delete object sprite.
000916  3               getob0:
000916  3  A9 FF        	lda #255
000918  3  91 66        	sta (z80_hl),y 		; pick it up.
00091A  3  60           	rts
00091B  3               .endif
00091B  3               
00091B  3               ;-----------------------------------------------------------------
00091B  3               ; Got object check.
00091B  3               ; Call with object in accumulator, returns zero set if in pockets.
00091B  3               ;
00091B  3               ; Input:
00091B  3               ;  A = object number
00091B  3               ;-----------------------------------------------------------------
00091B  3               .if oflag .or mflag
00091B  3               gotob:
00091B  3  CD 2C 03     	cmp numob 		; number of objects in game.
00091E  3  90 03        	bcc :+ 			; are we checking past the end?
000920  3  4C 27 09     	jmp gotob0 		; yes, we can't have a non-existent object.
000923  3               :
000923  3  20 2C 09     	jsr findob		; find the object.
000926  3               gotob1:
000926  3  60           	rts
000927  3               
000927  3               gotob0:
000927  3  A9 FE        	lda #254 		; missing.
000929  3  4C 26 09     	jmp gotob1
00092C  3               
00092C  3               findob:
00092C  3  48           	pha			; save object number
00092D  3  A9 D8        	lda #<objdta 		; objects.
00092F  3  85 66        	sta z80_l
000931  3  A9 5F        	lda #>objdta
000933  3  85 67        	sta z80_h
000935  3  68           	pla			; retreive object number
000936  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
000938  3  AA           	tax 			; loop counter
000939  3               fndob2:
000939  3  18           	clc
00093A  3  A5 66        	lda z80_l
00093C  3  69 26        	adc #38 		; size of each object.
00093E  3  85 66        	sta z80_l
000940  3  90 02        	bcc :+
000942  3  E6 67        	inc z80_h
000944  3               :
000944  3  CA           	dex 			; repeat until we find address.
000945  3  D0 F2        	bne fndob2
000947  3               fndob1:
000947  3  A0 20        	ldy #32			; distance to room it's in.
000949  3  B1 66        	lda (z80_hl),y		; fetch status.
00094B  3  60           	rts
00094C  3               .endif
00094C  3               
00094C  3               ;---------------------------------------------
00094C  3               ; Drop object number at (dispx, dispy).
00094C  3               ;
00094C  3               ; Input:
00094C  3               ;  A = object number
00094C  3               ;---------------------------------------------
00094C  3               
00094C  3               .if oflag
00094C  3               drpob:
00094C  3  CD 2C 03     	cmp numob 		; are we checking past the end?
00094F  3  90 01        	bcc :+
000951  3  60           	rts			; yes, can't drop non-existent item.
000952  3               :
000952  3  20 1B 09     	jsr gotob		; make sure object is in inventory.
000955  3  C5 rr        	cmp scno		; already on this screen?
000957  3  D0 01        	bne :+
000959  3  60           	rts			; yes, nothing to do.
00095A  3               :
00095A  3  A0 20        	ldy #32
00095C  3  A5 rr        	lda scno
00095E  3  91 66        	sta (z80_hl),y		; bring onto screen.
000960  3  A5 rr        	lda dispy		; sprite y coordinate.
000962  3  C8           	iny
000963  3  91 66        	sta (z80_hl),y		; point to object y.
000965  3  A5 rr        	lda dispx 		; sprite x coordinate.
000967  3  C8           	iny
000968  3  91 66        	sta (z80_hl),y 		; point to object x
00096A  3  4C C9 08     	jmp dobj		; draw the object sprite.
00096D  3               
00096D  3               ;-----------------------------------------------
00096D  3               ; Seek objects at sprite position.
00096D  3               ;
00096D  3               ; Output:
00096D  3               ;  A = object number, if not found A=255
00096D  3               ;-----------------------------------------------
00096D  3               
00096D  3               skobj:
00096D  3  A9 D8        	lda #<objdta 		; pointer to objects.
00096F  3  85 66        	sta z80_l
000971  3  A9 5F        	lda #>objdta
000973  3  85 67        	sta z80_h
000975  3               
000975  3  AD 2C 03     	lda numob 		; number of objects in game.
000978  3  85 63        	sta z80_b 		; set up the loop counter.
00097A  3               skobj0:
00097A  3  A5 rr        	lda scno		; current room number.
00097C  3  A0 20        	ldy #32
00097E  3  D1 66        	cmp (z80_hl),y		; is object in here?
000980  3  D0 03        	bne :+
000982  3  20 97 09     	jsr skobj1		; yes, check coordinates.
000985  3               :
000985  3  18           	clc			; point to next object in table.
000986  3  A5 66        	lda z80_l
000988  3  69 26        	adc #38			; size of each object.
00098A  3  85 66        	sta z80_l
00098C  3  90 02        	bcc :+
00098E  3  E6 67        	inc z80_h
000990  3               :
000990  3  C6 63        	dec z80_b
000992  3  D0 E6        	bne skobj0		; repeat for all objects.
000994  3               
000994  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
000996  3  60           	rts
000997  3               
000997  3               skobj1:
000997  3  A0 21        	ldy #33			; point to y coordinate.
000999  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
00099B  3  38           	sec
00099C  3  A0 08        	ldy #8
00099E  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
0009A0  3  18           	clc
0009A1  3  69 0F        	adc #15			; add sprite height minus one.
0009A3  3  C9 1F        	cmp #31			; within range?
0009A5  3  B0 18        	bcs skobj2		; no, ignore object.
0009A7  3               
0009A7  3  A0 22        	ldy #34			; point to x coordinate now.
0009A9  3  B1 66        	lda (z80_hl),y 		; get coordinate.
0009AB  3  38           	sec
0009AC  3  A0 09        	ldy #9
0009AE  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
0009B0  3  18           	clc			; add sprite width minus one.
0009B1  3  69 0F        	adc #15
0009B3  3  C9 1F        	cmp #31			; within range?
0009B5  3  B0 08        	bcs skobj2		; no, ignore object.
0009B7  3               
0009B7  3  68           	pla			; remove return address from stack.
0009B8  3  68           	pla
0009B9  3               
0009B9  3  AD 2C 03     	lda numob 		; objects in game.
0009BC  3  38           	sec
0009BD  3  E5 63        	sbc z80_b		; subtract loop counter.
0009BF  3               skobj2:
0009BF  3  60           	rts			; accumulator now points to object.
0009C0  3               .endif
0009C0  3               
0009C0  3               ;---------------------------------------------------------------------
0009C0  3               ; Spawn a new sprite.
0009C0  3               ;---------------------------------------------------------------------
0009C0  3               
0009C0  3               .if gflag
0009C0  3                 offset = 0
0009C0  3               .else
0009C0  3                 offset = 20
0009C0  3               .endif
0009C0  3               
0009C0  3               ;.repeat 343
0009C0  3               ;  .byte 0
0009C0  3               ;.endrep
0009C0  3               
0009C0  3               spawn:
0009C0  3  A9 67        	lda #<sprtab		; sprite table.
0009C2  3  85 66        	sta z80_l
0009C4  3  A9 19        	lda #>sprtab
0009C6  3  85 67        	sta z80_h
0009C8  3               numsp1:
0009C8  3  A9 0C        	lda #NUMSPR		; number of sprites.
0009CA  3  85 rr        	sta spcnt
0009CC  3               spaw0:
0009CC  3  A0 00        	ldy #0
0009CE  3  B1 66        	lda (z80_hl),y		; get sprite type.
0009D0  3  C9 FF        	cmp #255		; is it an unused slot?
0009D2  3  F0 0F        	beq spaw1 		; yes, we can use this one.
0009D4  3               
0009D4  3  18           	clc 			; point to next sprite in table.
0009D5  3  A5 66        	lda z80_l
0009D7  3  69 11        	adc #TABSIZ		; size of each entry.
0009D9  3  85 66        	sta z80_l
0009DB  3  90 02        	bcc :+
0009DD  3  E6 67        	inc z80_h
0009DF  3               :
0009DF  3  C6 rr        	dec spcnt		; one less iteration.
0009E1  3  D0 E9        	bne spaw0		; keep going until we find a slot.
0009E3  3               
0009E3  3               ; Didn't find one but drop through and set up a dummy sprite instead.
0009E3  3               
0009E3  3               spaw1:
0009E3  3  A5 69        	lda z80_i		; address of original sprite.
0009E5  3  48           	pha
0009E6  3  A5 68        	lda z80_x
0009E8  3  48           	pha
0009E9  3               
0009E9  3  A5 66        	lda z80_l		; store spawned sprite address.
0009EB  3  85 rr        	sta spptr
0009ED  3  A5 67        	lda z80_h
0009EF  3  85 rr        	sta spptr+1
0009F1  3               
0009F1  3  A5 62        	lda z80_c
0009F3  3  A0 00        	ldy #0
0009F5  3  91 66        	sta (z80_hl),y 		; set the type.
0009F7  3  A0 05        	ldy #5
0009F9  3  91 66        	sta (z80_hl),y		; copy
0009FB  3               
0009FB  3  A5 63        	lda z80_b
0009FD  3  A0 01        	ldy #1
0009FF  3  91 66        	sta (z80_hl),y		; set the image.
000A01  3  A0 06        	ldy #6
000A03  3  91 66        	sta (z80_hl),y		; copy
000A05  3               
000A05  3  A9 00        	lda #0 			; frame zero.
000A07  3  A0 02        	ldy #2
000A09  3  91 66        	sta (z80_hl),y		; set frame.
000A0B  3  A0 07        	ldy #7
000A0D  3  91 66        	sta (z80_hl),y		; copy
000A0F  3               
000A0F  3  A0 08        	ldy #8
000A11  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000A13  3  A0 03        	ldy #3
000A15  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
000A17  3  A0 08        	ldy #8
000A19  3  91 66        	sta (z80_hl),y		; copy
000A1B  3               
000A1B  3  A0 09        	ldy #9
000A1D  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000A1F  3  A0 04        	ldy #4
000A21  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
000A23  3  A0 09        	ldy #9
000A25  3  91 66        	sta (z80_hl),y		; copy
000A27  3               
000A27  3  A0 0A        	ldy #10			; direction of original.
000A29  3  B1 68        	lda (z80_ix),y
000A2B  3  91 66        	sta (z80_hl),y		; direction
000A2D  3               
000A2D  3  A9 00        	lda #0
000A2F  3  A0 0B        	ldy #11
000A31  3  91 66        	sta (z80_hl),y		; reset parameter.
000A33  3  C8           	iny
000A34  3  91 66        	sta (z80_hl),y		; reset parameter.
000A36  3  C8           	iny
000A37  3  91 66        	sta (z80_hl),y		; reset parameter.
000A39  3  C8           	iny
000A3A  3  91 66        	sta (z80_hl),y		; reset parameter.
000A3C  3               rtssp:
000A3C  3  A5 rr        	lda spptr		; address of new sprite.
000A3E  3  85 68        	sta z80_x
000A40  3  A5 rr        	lda spptr+1
000A42  3  85 69        	sta z80_i
000A44  3               evis1:
000A44  3  20 54 20     	jsr evnt09 		; call sprite initialisation event.
000A47  3               
000A47  3  A5 rr        	lda spptr 		; address of new sprite.
000A49  3  85 68        	sta z80_x
000A4B  3  A5 rr        	lda spptr+1
000A4D  3  85 69        	sta z80_i
000A4F  3  20 30 14     	jsr sspria 		; display the new sprite.
000A52  3               
000A52  3  68           	pla			; address of original sprite.
000A53  3  85 68        	sta z80_x
000A55  3  68           	pla
000A56  3  85 69        	sta z80_i
000A58  3               
000A58  3  60           	rts
000A59  3               
000A59  3               ;spcnt:	.byte 0
000A59  3               ;spptr:	.word 0			; spawned sprite pointer.
000A59  3               ;seed:	.byte 0			; seed for random numbers.
000A59  3  30 30 30 30  score:	.byte "000000"		; player"s score.
000A5D  3  30 30        
000A5F  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000A63  3  30 30        
000A65  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000A69  3  30 30        
000A6B  3  00 80        grbase:	.word ScreenAddr	; graphics base address.
000A6D  3               
000A6D  3               ;----------------------------------------------------
000A6D  3               ; Check y-pos
000A6D  3               ;----------------------------------------------------
000A6D  3               
000A6D  3               checkx:
000A6D  3  A5 rr        	lda dispy		; y position.
000A6F  3  C9 18        	cmp #24			; off screen?
000A71  3  B0 01        	bcs :+
000A73  3  60           	rts			; no, it's okay.
000A74  3               :
000A74  3  68           	pla			; remove return address from stack.
000A75  3  85 66        	sta z80_l
000A77  3  68           	pla
000A78  3  85 67        	sta z80_h
000A7A  3  60           	rts
000A7B  3               
000A7B  3               ;-----------------------------------------------
000A7B  3               ; Displays the current high score.
000A7B  3               ;-----------------------------------------------
000A7B  3               
000A7B  3               dhisc:
000A7B  3  A9 5F        	lda #<hiscor 		; high score text.
000A7D  3  8D B2 0A     	sta dscor3+1
000A80  3  8D CD 0A     	sta bscor3+1
000A83  3  A9 0A        	lda #>hiscor
000A85  3  8D B3 0A     	sta dscor3+2
000A88  3  8D CE 0A     	sta bscor3+2
000A8B  3  4C 9E 0A     	jmp dscor1		; check in printable range then show 6 digits.
000A8E  3               
000A8E  3               ;------------------------------------------------------
000A8E  3               ; Displays the current score.
000A8E  3               ;------------------------------------------------------
000A8E  3               
000A8E  3               ;.repeat 322
000A8E  3               ;  .byte 0
000A8E  3               ;.endrep
000A8E  3               
000A8E  3               dscor:
000A8E  3  A9 59        	lda #<score		; score text.
000A90  3  8D B2 0A     	sta dscor3+1
000A93  3  8D CD 0A     	sta bscor3+1
000A96  3  A9 0A        	lda #>score
000A98  3  8D B3 0A     	sta dscor3+2
000A9B  3  8D CE 0A     	sta bscor3+2
000A9E  3               dscor1:
000A9E  3  8C C9 0A     	sty tmpscr
000AA1  3  20 D2 11     	jsr preprt		; set up font and print position.
000AA4  3  20 6D 0A     	jsr checkx		; make sure we're in a printable range.
000AA7  3               
000AA7  3               ;	lda #6			; digits to display.
000AA7  3               ;	sta z80_b
000AA7  3  A5 rr        	lda prtmod		; get print mode.
000AA9  3  F0 03        	beq :+			; standard size text?
000AAB  3  4C CA 0A     	jmp bscor0		; no, show double-height.
000AAE  3               :
000AAE  3               dscor0:
000AAE  3               ;	ldy #0
000AAE  3               ;	lda (z80_hl),y 		; fetch character.
000AAE  3  AC C9 0A     	ldy tmpscr
000AB1  3               dscor3:
000AB1  3  B9 59 0A     	lda score,y
000AB4  3  20 01 0C     	jsr pchar 		; display character.
000AB7  3  E6 rr        	inc dispx		; move along x coordinate
000AB9  3               
000AB9  3               ;	inc z80_l		; next score column.
000AB9  3               ;	bne :+
000AB9  3               ;	inc z80_h
000AB9  3               ;:
000AB9  3  EE C9 0A     	inc tmpscr
000ABC  3  C6 63        	dec z80_b
000ABE  3  D0 EE        	bne dscor0 		; repeat for all digits.
000AC0  3               dscor2:
000AC0  3  A5 rr        	lda dispx 		; set up display coordinates.
000AC2  3  85 rr        	sta charx
000AC4  3  A5 rr        	lda dispy
000AC6  3  85 rr        	sta chary
000AC8  3  60           	rts
000AC9  3               
000AC9  3  00           tmpscr:	.byte 0
000ACA  3               ;------------------------------------------------------
000ACA  3               ; Displays the current score in double-height characters.
000ACA  3               ;
000ACA  3               ; Input:
000ACA  3               ;  B  = digit number
000ACA  3               ;  HL = score string
000ACA  3               ;------------------------------------------------------
000ACA  3               
000ACA  3               bscor0:
000ACA  3               ;	ldy #0
000ACA  3               
000ACA  3               ;	lda (z80_hl),y 		; fetch character.
000ACA  3  A4 rr        	ldy tmp
000ACC  3               bscor3:
000ACC  3  B9 59 0A     	lda score,y
000ACF  3  20 53 11     	jsr bchar 		; display big char.
000AD2  3               
000AD2  3               ;	inc z80_l 		; next score column.
000AD2  3               ;	bne :+
000AD2  3               ;	inc z80_h
000AD2  3               ;:
000AD2  3  E6 rr        	inc tmp
000AD4  3  C6 63        	dec z80_b
000AD6  3  F0 03        	beq :+
000AD8  3  4C CA 0A     	jmp bscor0 		; repeat for all digits.
000ADB  3               :
000ADB  3  4C C0 0A     	jmp dscor2 		; tidy up line and column variables.
000ADE  3               
000ADE  3               ;-----------------------------------------------------
000ADE  3               ; Adds number in the hl pair to the score.
000ADE  3               ;-----------------------------------------------------
000ADE  3               
000ADE  3               addsc:
000ADE  3  A9 5A        	lda #<(score+1) 	; ten thousands column.
000AE0  3  85 64        	sta z80_e
000AE2  3  A9 0A        	lda #>(score+1)
000AE4  3  85 65        	sta z80_d
000AE6  3  A9 10        	lda #<10000		; amount to add each time.
000AE8  3  85 62        	sta z80_c
000AEA  3  A9 27        	lda #>10000
000AEC  3  85 63        	sta z80_b
000AEE  3  20 32 0B     	jsr incsc		; add to score.
000AF1  3               
000AF1  3  E6 64        	inc z80_e		; thousands column.
000AF3  3  D0 02        	bne :+
000AF5  3  E6 65        	inc z80_d
000AF7  3               :
000AF7  3  A9 E8        	lda #<1000		; amount to add each time.
000AF9  3  85 62        	sta z80_c
000AFB  3  A9 03        	lda #>1000
000AFD  3  85 63        	sta z80_b
000AFF  3  20 32 0B     	jsr incsc 		; add to score.
000B02  3               
000B02  3  E6 64        	inc z80_e		; hundreds column.
000B04  3  D0 02        	bne :+
000B06  3  E6 65        	inc z80_d
000B08  3               :
000B08  3  A9 64        	lda #<100		; amount to add each time.
000B0A  3  85 62        	sta z80_c
000B0C  3  A9 00        	lda #>100
000B0E  3  85 63        	sta z80_b
000B10  3  20 32 0B     	jsr incsc		; add to score.
000B13  3               
000B13  3  E6 64        	inc z80_e 		; tens column.
000B15  3  D0 02        	bne :+
000B17  3  E6 65        	inc z80_d
000B19  3               :
000B19  3  A9 0A        	lda #<10		; amount to add each time.
000B1B  3  85 62        	sta z80_c
000B1D  3  A9 00        	lda #>10
000B1F  3  85 63        	sta z80_b
000B21  3  20 32 0B     	jsr incsc 		; add to score.
000B24  3               
000B24  3  E6 64        	inc z80_e		; units column.
000B26  3  D0 02        	bne :+
000B28  3  E6 65        	inc z80_d
000B2A  3               :
000B2A  3  A9 01        	lda #<1			; units.
000B2C  3  85 62        	sta z80_c
000B2E  3  A9 00        	lda #>1
000B30  3  85 63        	sta z80_b
000B32  3               incsc:
000B32  3  A5 67        	lda z80_h		; store amount to add.
000B34  3  48           	pha
000B35  3  A5 66        	lda z80_l
000B37  3  48           	pha
000B38  3               
000B38  3  38           	sec			; subtract from amount to add.
000B39  3  A5 66        	lda z80_l
000B3B  3  E5 62        	sbc z80_c
000B3D  3  85 66        	sta z80_l
000B3F  3  A5 67        	lda z80_h
000B41  3  E5 63        	sbc z80_b
000B43  3  85 67        	sta z80_h
000B45  3  90 14        	bcc incsc0		; too much, restore value.
000B47  3               
000B47  3  68           	pla			; delete the previous amount from the stack.
000B48  3  68           	pla
000B49  3               
000B49  3  A5 65        	lda z80_d 		; store column position.
000B4B  3  48           	pha
000B4C  3  A5 64        	lda z80_e
000B4E  3  48           	pha
000B4F  3  20 62 0B     	jsr incsc2		; do the increment.
000B52  3               
000B52  3  68           	pla			; restore column.
000B53  3  85 64        	sta z80_e
000B55  3  68           	pla
000B56  3  85 65        	sta z80_d
000B58  3  4C 32 0B     	jmp incsc		; repeat until all added.
000B5B  3               
000B5B  3               incsc0:
000B5B  3  68           	pla			; restore previous value.
000B5C  3  85 66        	sta z80_l
000B5E  3  68           	pla
000B5F  3  85 67        	sta z80_h
000B61  3  60           	rts
000B62  3               incsc2:
000B62  3  A0 00        	ldy #0
000B64  3  B1 64        	lda (z80_de),y 		; get amount.
000B66  3  18           	clc
000B67  3  69 01        	adc #1			; add one to column.
000B69  3  91 64        	sta (z80_de),y		; write new column total.
000B6B  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000B6D  3  B0 01        	bcs :+
000B6F  3  60           	rts			; no, carry on.
000B70  3               :
000B70  3  A9 30        	lda #'0'		; make it zero.
000B72  3  91 64        	sta (z80_de),y		; write new column total.
000B74  3  C6 64        	dec z80_e		; back one column.
000B76  3  D0 02        	bne :+
000B78  3  C6 65        	dec z80_d
000B7A  3               :
000B7A  3  4C 62 0B     	jmp incsc2
000B7D  3               
000B7D  3               ;------------------------------------
000B7D  3               ; Add bonus to score and reset bonus
000B7D  3               ;------------------------------------
000B7D  3               
000B7D  3               addbo:
000B7D  3  A2 05        	ldx #5			; last digit.
000B7F  3  18           	clc
000B80  3               addbo0:
000B80  3  BD 59 0A     	lda score,x		; get score.
000B83  3  7D 65 0A     	adc bonus,x		; add bonus.
000B86  3  38           	sec			; 0 to 18.
000B87  3  E9 30        	sbc #48
000B89  3  48           	pha
000B8A  3  A9 30        	lda #'0'
000B8C  3  9D 65 0A     	sta bonus,x
000B8F  3  68           	pla
000B90  3  C9 3A        	cmp #58
000B92  3  90 03        	bcc addbo1
000B94  3  38           	sec
000B95  3  E9 0A        	sbc #10
000B97  3               addbo1:
000B97  3  9D 59 0A     	sta score,x		; zeroise bonus.
000B9A  3  CA           	dex			; next digit.
000B9B  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
000B9D  3  60           	rts
000B9E  3               
000B9E  3               ;------------------------------------
000B9E  3               ; Swap score and bonus.
000B9E  3               ;------------------------------------
000B9E  3               
000B9E  3               swpsb:
000B9E  3  A2 05        	ldx #5			; digits to add.
000BA0  3               swpsb0:
000BA0  3  BD 59 0A     	lda score,x 		; get score digits.
000BA3  3  48           	pha			; save digit
000BA4  3  BD 65 0A     	lda bonus,x 		; get bonus digits.
000BA7  3  9D 59 0A     	sta score,x		; switch score-bonus
000BAA  3  68           	pla
000BAB  3  9D 65 0A     	sta bonus,x
000BAE  3  CA           	dex 			; repeat for all 6 digits.
000BAF  3  10 EF        	bpl swpsb0
000BB1  3  60           	rts
000BB2  3               
000BB2  3               ;----------------------------------------------------
000BB2  3               ; Get print address.
000BB2  3               ;----------------------------------------------------
000BB2  3               
000BB2  3               gprad:
000BB2  3  A5 rr        	lda dispx		; get x
000BB4  3  85 rr        	sta scraddr		; store lb address
000BB6  3               
000BB6  3  2A           	rol a
000BB7  3  26 rr        	rol tmp
000BB9  3  2A           	rol a
000BBA  3  26 rr        	rol tmp
000BBC  3  2A           	rol a
000BBD  3  26 rr        	rol tmp
000BBF  3  A5 rr        	lda tmp
000BC1  3  29 07        	and #7
000BC3  3  85 rr        	sta tmp
000BC5  3  A5 rr        	lda prtmod
000BC7  3  F0 02        	beq :+
000BC9  3  06 rr        	asl tmp
000BCB  3               :
000BCB  3  A5 rr        	lda tmp
000BCD  3  18           	clc
000BCE  3  65 rr        	adc dispy		; get y
000BD0  3  09 80        	ora #$80		; add $80
000BD2  3  85 rr        	sta scraddr+1		; store hb address
000BD4  3  60           	rts
000BD5  3               
000BD5  3               ;--------------------------------------------------------------
000BD5  3               ; Get property buffer address of char at (dispx, dispy) in hl.
000BD5  3               ;
000BD5  3               ; Output:
000BD5  3               ;  bufaddr = MAP + dispy*32 + dispx
000BD5  3               ;--------------------------------------------------------------
000BD5  3               
000BD5  3               pradd:
000BD5  3  A5 rr        	lda dispy 		; y coordinate.
000BD7  3  85 rr        	sta bufaddr
000BD9  3  A9 00        	lda #0
000BDB  3  85 rr        	sta bufaddr+1
000BDD  3  06 rr        	asl bufaddr  		; multiply char by 32
000BDF  3  26 rr        	rol bufaddr+1
000BE1  3  06 rr        	asl bufaddr
000BE3  3  26 rr        	rol bufaddr+1
000BE5  3  06 rr        	asl bufaddr
000BE7  3  26 rr        	rol bufaddr+1
000BE9  3  06 rr        	asl bufaddr
000BEB  3  26 rr        	rol bufaddr+1
000BED  3  06 rr        	asl bufaddr
000BEF  3  26 rr        	rol bufaddr+1
000BF1  3  18           	clc			; add address of MAP graphics.
000BF2  3  A5 rr        	lda bufaddr
000BF4  3  65 rr        	adc dispx
000BF6  3  69 00        	adc #<MAP
000BF8  3  85 rr        	sta bufaddr
000BFA  3  A5 rr        	lda bufaddr+1
000BFC  3  69 98        	adc #>MAP
000BFE  3  85 rr        	sta bufaddr+1
000C00  3  60           	rts
000C01  3               
000C01  3               ;----------------------------------------------------
000C01  3               ; Display character in A at dispx,dispy.
000C01  3               ;
000C01  3               ; Input:
000C01  3               ;  A 	   = character to print
000C01  3               ;----------------------------------------------------
000C01  3               
000C01  3               pchar:
000C01  3  85 rr        	sta fntaddr
000C03  3  A9 00        	lda #0
000C05  3  85 rr        	sta fntaddr+1
000C07  3  06 rr        	asl fntaddr  		; multiply char by 8.
000C09  3  26 rr        	rol fntaddr+1
000C0B  3  06 rr        	asl fntaddr
000C0D  3  26 rr        	rol fntaddr+1
000C0F  3  06 rr        	asl fntaddr
000C11  3  26 rr        	rol fntaddr+1
000C13  3               
000C13  3  A5 rr        	lda fntaddr
000C15  3  18           	clc
000C16  3  69 68        	adc #<(FONT-256)
000C18  3  85 rr        	sta fntaddr		; that's the low byte.
000C1A  3  A5 rr        	lda fntaddr+1
000C1C  3  69 62        	adc #>(FONT-256)
000C1E  3  85 rr        	sta fntaddr+1		; add displacement.
000C20  3               pchark:
000C20  3  20 B2 0B     	jsr gprad		; get screen address.
000C23  3  A2 07        	ldx #7			; lines to write.
000C25  3               pchar0:
000C25  3  A0 00        	ldy #0
000C27  3  B1 rr        	lda (fntaddr),y 	; get image byte.
000C29  3  BC 3E 0C     	ldy scrtab,x		; Get rowoffset
000C2C  3               .if gflag
000C2C  3  2D 69 1A     	and andeor
000C2F  3  4D 6A 1A     	eor andeor+1
000C32  3               .endif
000C32  3               .if iflag
000C32  3               	eor #$ff
000C32  3               .endif
000C32  3  91 rr        	sta (scraddr),y 	; copy to screen.
000C34  3  E6 rr        	inc fntaddr		; next image byte.
000C36  3  D0 02        	bne :+
000C38  3  E6 rr        	inc fntaddr+1
000C3A  3               :
000C3A  3  CA           	dex			; next screen row down.
000C3B  3  10 E8        	bpl pchar0		; repeat.
000C3D  3  60           	rts
000C3E  3               
000C3E  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
000C42  3  60 40 20 00  
000C46  3               
000C46  3               ;----------------------------------------------
000C46  3               
000C46  3               ; Print attributes, properties and pixels.
000C46  3               ;
000C46  3               ; Input:
000C46  3               ;  A	= tile number
000C46  3               ;----------------------------------------------
000C46  3               
000C46  3               ;.repeat 294
000C46  3               ;  .byte 0
000C46  3               ;.endrep
000C46  3               
000C46  3               pbpattr:			; entry PUTBLOCK command
000C46  3  A4 rr        	ldy charx
000C48  3  84 rr        	sty dispx
000C4A  3  A4 rr        	ldy chary
000C4C  3  84 rr        	sty dispy
000C4E  3               pattr:
000C4E  3               .if aflag
000C4E  3               	pha
000C4E  3               	jsr wbloc		; save blockinfo
000C4E  3               	pla
000C4E  3               .endif
000C4E  3               
000C4E  3               pattr2:
000C4E  3  85 63        	sta z80_b		; store cell in b register for now.
000C50  3  AA           	tax
000C51  3  BD F3 2B     	lda bprop,x 		; block properties.
000C54  3  85 62        	sta z80_c
000C56  3  C9 08        	cmp #COLECT
000C58  3  D0 05        	bne :+
000C5A  3  A5 63        	lda z80_b
000C5C  3  8D 6D 0C     	sta colpatt
000C5F  3               :
000C5F  3  20 D5 0B     	jsr pradd 		; get property buffer address.
000C62  3  A5 62        	lda z80_c
000C64  3  A0 00        	ldy #0
000C66  3  91 rr        	sta (bufaddr),y 	; write property.
000C68  3  A5 63        	lda z80_b 		; restore cell.
000C6A  3  4C 6E 0C     	jmp panp
000C6D  3               ; Print attributes, no properties.
000C6D  3               
000C6D  3               ;.repeat 263
000C6D  3               ; .byte 0
000C6D  3               ;.endrep
000C6D  3               
000C6D  3  00           colpatt:	.byte 0
000C6E  3               
000C6E  3               panp:
000C6E  3  85 64        	sta z80_e		; displacement in e.
000C70  3  A9 00        	lda #0
000C72  3  85 65        	sta z80_d		; no high byte.
000C74  3  06 64        	asl z80_e  		; multiply char by 8.
000C76  3  26 65        	rol z80_d
000C78  3  06 64        	asl z80_e
000C7A  3  26 65        	rol z80_d
000C7C  3  06 64        	asl z80_e
000C7E  3  26 65        	rol z80_d
000C80  3  18           	clc
000C81  3  A5 64        	lda z80_e
000C83  3  69 23        	adc #<chgfx 		; address of graphics.
000C85  3  85 rr        	sta tileaddr
000C87  3  A5 65        	lda z80_d
000C89  3  69 29        	adc #>chgfx
000C8B  3  85 rr        	sta tileaddr+1
000C8D  3  20 B2 0B     	jsr gprad 		; get screen address.
000C90  3  A2 07        	ldx #7			; number of pixel rows to write.
000C92  3               panp0:
000C92  3  A0 00        	ldy #0
000C94  3  B1 rr        	lda (tileaddr),y 	; get image byte.
000C96  3               .if iflag
000C96  3               	eor #$ff		; Invert
000C96  3               .endif
000C96  3  BC 3E 0C     	ldy scrtab,x
000C99  3  91 rr        	sta (scraddr),y 	; copy to screen.
000C9B  3  E6 rr        	inc tileaddr 		; next image byte.
000C9D  3  D0 02        	bne :+
000C9F  3  E6 rr        	inc tileaddr+1
000CA1  3               :
000CA1  3  CA           	dex	 		; repeat for 8 pixel rows.
000CA2  3  10 EE        	bpl panp0
000CA4  3  E6 rr        	inc dispx 		; move along one.
000CA6  3  E6 rr        	inc charx
000CA8  3  60           	rts
000CA9  3               
000CA9  3               ;----------------------------------------------
000CA9  3               ; Write block
000CA9  3               ;----------------------------------------------
000CA9  3               
000CA9  3               .if aflag
000CA9  3               wbloc:
000CA9  3               	ldy #3
000CA9  3               	sta (pbptr),y		; store block number
000CA9  3               	dey
000CA9  3               	lda dispx
000CA9  3               	sta (pbptr),y		; write x position of block.
000CA9  3               	dey
000CA9  3               	lda dispy
000CA9  3               	sta (pbptr),y		; write y position of block.
000CA9  3               	dey
000CA9  3               	lda scno
000CA9  3               	sta (pbptr),y		; write screen.
000CA9  3               	clc			; point to next free location
000CA9  3               	lda pbptr
000CA9  3               	adc #4
000CA9  3               	sta pbptr
000CA9  3               	bcc :+
000CA9  3               	inc pbptr+1
000CA9  3               :
000CA9  3               	rts
000CA9  3               .endif
000CA9  3               
000CA9  3               ;----------------------------------------------
000CA9  3               ; Print character pixels, no more.
000CA9  3               ;
000CA9  3               ; Input:
000CA9  3               ;  A	= character to print
000CA9  3               ;----------------------------------------------
000CA9  3               
000CA9  3               pchr:
000CA9  3  20 01 0C     	jsr pchar 		; show character in accumulator.
000CAC  3  E6 rr        	inc dispx		; move along one.
000CAE  3  60           	rts
000CAF  3               
000CAF  3               ;----------------------------------------------------
000CAF  3               ; Shifter sprite routine for objects.
000CAF  3               ;----------------------------------------------------
000CAF  3               
000CAF  3               .if oflag
000CAF  3               sprit7:
000CAF  3  A5 63        	lda z80_b
000CB1  3  F0 0F        	beq sprit0
000CB3  3  85 61        	sta z80_a
000CB5  3               sprit3:
000CB5  3  4E 43 0D     	lsr spr			; shift into position.
000CB8  3  6E 44 0D     	ror spr+1
000CBB  3  6E 45 0D     	ror spr+2
000CBE  3  C6 61        	dec z80_a		; one less iteration.
000CC0  3  D0 F3        	bne sprit3
000CC2  3               sprit0:
000CC2  3  60           	rts 			; now apply to screen.
000CC3  3               
000CC3  3               ;----------------------------------------------------
000CC3  3               ; Draw sprite
000CC3  3               ;----------------------------------------------------
000CC3  3               
000CC3  3               sprite:
000CC3  3  86 rr        	stx xtmp		; Save X-reg
000CC5  3  20 0D 14     	jsr scadd 		; get screen address in scraddr.
000CC8  3               
000CC8  3  A5 rr        	lda dispx 		; x position.
000CCA  3  29 07        	and #7 			; position straddling cells.
000CCC  3  85 63        	sta z80_b		; store in b register.
000CCE  3               
000CCE  3  A5 66        	lda z80_l		; store sprite graphic address.
000CD0  3  8D E3 0C     	sta sprit1+1
000CD3  3  8D EA 0C     	sta sprit2+1
000CD6  3  A5 67        	lda z80_h
000CD8  3  8D E4 0C     	sta sprit1+2
000CDB  3  8D EB 0C     	sta sprit2+2
000CDE  3               
000CDE  3  A2 00        	ldx #0			; pixel height.
000CE0  3  A0 00        	ldy #0
000CE2  3               sprit1:
000CE2  3  BD D8 5F     	lda objdta,x		; fetch first byte.
000CE5  3  8D 43 0D     	sta spr
000CE8  3  E8           	inx
000CE9  3               sprit2:
000CE9  3  BD D8 5F     	lda objdta,x
000CEC  3  8D 44 0D     	sta spr+1
000CEF  3               
000CEF  3  A9 00        	lda #0
000CF1  3  8D 45 0D     	sta spr+2
000CF4  3  20 AF 0C     	jsr sprit7		; shift sprite
000CF7  3               
000CF7  3  CA           	dex
000CF8  3  AD 43 0D     	lda spr			; fetch graphic.
000CFB  3  BC 23 0D     	ldy spritetab,x
000CFE  3  51 rr        	eor (scraddr),y		; merge with screen image.
000D00  3  91 rr        	sta (scraddr),y		; write to screen.
000D02  3  E8           	inx			; next screen byte.
000D03  3               
000D03  3  AD 44 0D     	lda spr+1		; fetch graphic.
000D06  3  BC 23 0D     	ldy spritetab,x
000D09  3  51 rr        	eor (scraddr),y		; merge with screen image.
000D0B  3  91 rr        	sta (scraddr),y		; write to screen.
000D0D  3  C8           	iny
000D0E  3               
000D0E  3  AD 45 0D     	lda spr+2		; fetch graphic.
000D11  3  51 rr        	eor (scraddr),y		; merge with screen image.
000D13  3  91 rr        	sta (scraddr),y		; write to screen.
000D15  3               
000D15  3  E8           	inx			; next source byte.
000D16  3  E0 10        	cpx #16
000D18  3  D0 02        	bne :+
000D1A  3  E6 rr        	inc scraddr+1
000D1C  3               :
000D1C  3  E0 20        	cpx #32
000D1E  3  D0 C2        	bne sprit1		; repeat
000D20  3               
000D20  3  A6 rr        	ldx xtmp		; retreive X-reg
000D22  3  60           	rts
000D23  3               
000D23  3               spritetab:
000D23  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000D27  3  40 41 60 61  
000D2B  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000D2F  3  C0 C1 E0 E1  
000D33  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000D37  3  40 41 60 61  
000D3B  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000D3F  3  C0 C1 E0 E1  
000D43  3               
000D43  3  00 00 00     spr:	.byte 0,0,0
000D46  3               
000D46  3               ;xtmp:	.byte 0
000D46  3               .endif
000D46  3               
000D46  3               ;-----------------------------------------------------------
000D46  3               ; Get room address.
000D46  3               ;-----------------------------------------------------------
000D46  3               
000D46  3               ;.repeat 273
000D46  3               ;  .byte 0
000D46  3               ;.endrep
000D46  3               
000D46  3               groom:
000D46  3  A6 rr        	ldx scno 		; screen number.
000D48  3  A0 00        	ldy #0
000D4A  3               groomx:
000D4A  3  A9 6D        	lda #<scdat 		; pointer to screens.
000D4C  3  85 66        	sta z80_l
000D4E  3  A9 4B        	lda #>scdat
000D50  3  85 67        	sta z80_h
000D52  3               groom1:
000D52  3  E0 00        	cpx #0			; is it the first one?
000D54  3  F0 15        	beq groom0 		; no more screens to skip.
000D56  3               
000D56  3  18           	clc
000D57  3  A5 66        	lda z80_l
000D59  3  79 6D 4B     	adc scdat,y 		; low byte of screen size.
000D5C  3  85 66        	sta z80_l
000D5E  3  C8           	iny			; point to high byte.
000D5F  3  A5 67        	lda z80_h
000D61  3  79 6D 4B     	adc scdat,y 		; high byte of screen size.
000D64  3  85 67        	sta z80_h
000D66  3  C8           	iny			; next address.
000D67  3               
000D67  3  CA           	dex 			; one less iteration.
000D68  3  4C 52 0D     	jmp groom1 		; loop until we reach the end.
000D6B  3               groom0:
000D6B  3  AD 19 5E     	lda numsc 		; add displacement.
000D6E  3  0A           	asl a
000D6F  3  18           	clc			; add double displacement to address.
000D70  3  65 66        	adc z80_l
000D72  3  85 66        	sta z80_l
000D74  3  A5 67        	lda z80_h
000D76  3  69 00        	adc #0
000D78  3  85 67        	sta z80_h
000D7A  3  60           	rts
000D7B  3               
000D7B  3               ;-----------------------------------------------------------
000D7B  3               ; Draw present room.
000D7B  3               ;-----------------------------------------------------------
000D7B  3               
000D7B  3               droom:
000D7B  3  AD 28 03     	lda wintop 		; window top.
000D7E  3  85 rr        	sta dispy		; set cursor y position.
000D80  3               droom2:
000D80  3  20 46 0D     	jsr groom 		; get address of current room.
000D83  3  A9 00        	lda #0	 		; zero in accumulator.
000D85  3  85 rr        	sta comcnt 		; reset compression counter.
000D87  3  AD 2A 03     	lda winhgt 		; height of window.
000D8A  3  85 rr        	sta rrow		; set row counter
000D8C  3               droom0:
000D8C  3  AD 29 03     	lda winlft 		; window left edge.
000D8F  3  85 rr        	sta dispx 		; set cursor x position.
000D91  3  AD 2B 03     	lda winwid 		; width of window.
000D94  3  85 rr        	sta rcol		; set column counter
000D96  3               droom1:
000D96  3  20 A7 0D     	jsr flbyt 		; decompress next byte on the fly.
000D99  3  20 4E 0C     	jsr pattr2 		; show attributes and block.
000D9C  3  C6 rr        	dec rcol		; one less column.
000D9E  3  D0 F6        	bne droom1 		; repeat for entire line.
000DA0  3  E6 rr        	inc dispy		; move down one line.
000DA2  3  C6 rr        	dec rrow 		; one less row.
000DA4  3  D0 E6        	bne droom0 		; repeat for all rows.
000DA6  3  60           	rts
000DA7  3               
000DA7  3               ;rcol:	.byte 0
000DA7  3               ;rrow:	.byte 0
000DA7  3               
000DA7  3               ;----------------------------------------------
000DA7  3               ; Decompress bytes on-the-fly.
000DA7  3               ;----------------------------------------------
000DA7  3               
000DA7  3               flbyt:
000DA7  3  A5 rr        	lda comcnt 		; compression counter.
000DA9  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000DAB  3               
000DAB  3  A0 00        	ldy #0
000DAD  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
000DAF  3  E6 66        	inc z80_l 		; point to next cell.
000DB1  3  D0 02        	bne :+
000DB3  3  E6 67        	inc z80_h
000DB5  3               :
000DB5  3  C9 FF        	cmp #255 		; is this byte a control code?
000DB7  3  F0 01        	beq :+
000DB9  3  60           	rts 			; no, this byte is uncompressed.
000DBA  3               :
000DBA  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
000DBC  3  85 rr        	sta combyt 		; set up the type.
000DBE  3  E6 66        	inc z80_l 		; point to quantity.
000DC0  3  D0 02        	bne :+
000DC2  3  E6 67        	inc z80_h
000DC4  3               :
000DC4  3  B1 66        	lda (z80_hl),y 		; get quantity.
000DC6  3  E6 66        	inc z80_l 		; point to next byte.
000DC8  3  D0 02        	bne :+
000DCA  3  E6 67        	inc z80_h
000DCC  3               :
000DCC  3               flbyt1:
000DCC  3  85 rr        	sta comcnt 		; store new quantity.
000DCE  3  C6 rr        	dec comcnt		; one less.
000DD0  3  A5 rr        	lda combyt 		; byte to expand.
000DD2  3  60           	rts
000DD3  3               
000DD3  3               ;combyt:	.byte 0			; byte type compressed.
000DD3  3               ;comcnt:	.byte 0			; compression counter.
000DD3  3               
000DD3  3               ;------------------------------------------
000DD3  3               ; Ladder down check.
000DD3  3               ;
000DD3  3               ; Input:
000DD3  3               ;  IX = sprite pointer
000DD3  3               ;------------------------------------------
000DD3  3               
000DD3  3               .if lflag
000DD3  3               laddd:
000DD3  3               	ldy #9
000DD3  3               	lda (z80_ix),y		; x coordinate.
000DD3  3               	sta dispx
000DD3  3               
000DD3  3               	ldy #8
000DD3  3               	lda (z80_ix),y		; y coordinate.
000DD3  3               	and #254		; make it even.
000DD3  3               	sta (z80_ix),y 		; reset it.
000DD3  3               	clc 			; look down 16 pixels.
000DD3  3               numsp5:
000DD3  3               	adc #SPR_HGT
000DD3  3               	sta dispy		; coords in dispx,dispy.
000DD3  3               	jmp laddv
000DD3  3               
000DD3  3               ;------------------------------------------
000DD3  3               ; Ladder up check.
000DD3  3               ;
000DD3  3               ; Input:
000DD3  3               ;  IX = sprite pointer
000DD3  3               ;
000DD3  3               ; Output:
000DD3  3               ;  A  = 0 is ok, A <>0 is not ok
000DD3  3               ;------------------------------------------
000DD3  3               
000DD3  3               laddu:
000DD3  3               	ldy #9
000DD3  3               	lda (z80_ix),y		; x coordinate.
000DD3  3               	sta dispx
000DD3  3               
000DD3  3               	ldy #8
000DD3  3               	lda (z80_ix),y		; y coordinate.
000DD3  3               	and #254 		; make it even.
000DD3  3               	sta (z80_ix),y		; reset it.
000DD3  3               	clc 			; look 2 pixels above feet.
000DD3  3               numsp6:
000DD3  3               	adc #SPR_HGT-2
000DD3  3               	sta dispy		; coords in dispx,dispy.
000DD3  3               laddv:
000DD3  3               	jsr tstbl 		; get map address.
000DD3  3               	jsr ldchk 		; standard ladder check.
000DD3  3               	beq :+
000DD3  3               	rts 			; no way through.
000DD3  3               :
000DD3  3               	inc bufaddr 		; look right one cell.
000DD3  3               	bne :+
000DD3  3               	inc bufaddr+1
000DD3  3               :
000DD3  3               	jsr ldchk 		; do the check.
000DD3  3               	beq :+
000DD3  3               	rts 			; impassable.
000DD3  3               :
000DD3  3               	lda dispx 		; y coordinate.
000DD3  3               	and #7 			; position straddling block cells.
000DD3  3               	bne :+
000DD3  3               	rts 			; no more checks needed.
000DD3  3               :
000DD3  3               	inc bufaddr 		; look to third cell.
000DD3  3               	bne :+
000DD3  3               	inc bufaddr+1
000DD3  3               :
000DD3  3               	jsr ldchk 		; do the check.
000DD3  3               	rts  			; return with zero flag set accordingly.
000DD3  3               .endif
000DD3  3               
000DD3  3               ;---------------------------------------------------------
000DD3  3               ; Can go up check.
000DD3  3               ;
000DD3  3               ; Input:
000DD3  3               ;  IX = sprite pointer
000DD3  3               ;
000DD3  3               ; Output:
000DD3  3               ;  A  = 0 is ok, A <>0 is not ok
000DD3  3               ;---------------------------------------------------------
000DD3  3               
000DD3  3               cangu:
000DD3  3  A0 09        	ldy #9
000DD5  3  B1 68        	lda (z80_ix),y		; x coordinate.
000DD7  3  85 rr        	sta dispx
000DD9  3  A0 08        	ldy #8
000DDB  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000DDD  3  38           	sec
000DDE  3  E9 02        	sbc #2
000DE0  3  85 rr        	sta dispy		; coords in dispx,dispy.
000DE2  3  20 6D 0F     	jsr tstbl 		; get map address.
000DE5  3  20 85 0E     	jsr lrchk 		; standard left/right check.
000DE8  3  F0 01        	beq :+
000DEA  3  60           	rts			; no way through.
000DEB  3               :
000DEB  3  E6 rr        	inc bufaddr		; look right one cell.
000DED  3  D0 02        	bne :+
000DEF  3  E6 rr        	inc bufaddr+1
000DF1  3               :
000DF1  3  20 85 0E     	jsr lrchk 		; do the check.
000DF4  3  F0 01        	beq :+
000DF6  3  60           	rts			; impassable.
000DF7  3               :
000DF7  3  A5 rr        	lda dispx		; x coordinate.
000DF9  3  29 07        	and #7			; position straddling block cells.
000DFB  3  D0 01        	bne :+
000DFD  3  60           	rts			; no more checks needed.
000DFE  3               :
000DFE  3  E6 rr        	inc bufaddr		; look to third cell.
000E00  3  D0 02        	bne :+
000E02  3  E6 rr        	inc bufaddr+1
000E04  3               :
000E04  3  20 85 0E     	jsr lrchk		; do the check.
000E07  3  60           	rts 			; return with zero flag set accordingly.
000E08  3               
000E08  3               ;---------------------------------------------------------
000E08  3               ; Can go down check.
000E08  3               ;
000E08  3               ; Input:
000E08  3               ;  IX = sprite pointer
000E08  3               ;
000E08  3               ; Output:
000E08  3               ;  A  = 0 is ok, A <>0 is not ok
000E08  3               ;---------------------------------------------------------
000E08  3               
000E08  3               ;.repeat 264
000E08  3               ;  .byte 0
000E08  3               ;.endrep
000E08  3               
000E08  3               cangd:
000E08  3  A0 09        	ldy #9
000E0A  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000E0C  3  85 rr        	sta dispx
000E0E  3  A0 08        	ldy #8
000E10  3  B1 68        	lda (z80_ix),y		; y coordinate.
000E12  3  18           	clc
000E13  3               numsp3:
000E13  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000E15  3  85 rr        	sta dispy		; coords in dispx,dispy.
000E17  3  20 6D 0F     	jsr tstbl 		; get map address.
000E1A  3  20 9A 0E     	jsr plchk 		; block, platform check.
000E1D  3  F0 01        	beq :+
000E1F  3  60           	rts			; no way through.
000E20  3               :
000E20  3  E6 rr        	inc bufaddr		; look right one cell.
000E22  3  D0 02        	bne :+
000E24  3  E6 rr        	inc bufaddr+1
000E26  3               :
000E26  3  20 9A 0E     	jsr plchk		; block, platform check.
000E29  3  F0 01        	beq :+
000E2B  3  60           	rts			; impassable.
000E2C  3               :
000E2C  3  A5 rr        	lda dispx		; x coordinate.
000E2E  3  29 07        	and #7			; position straddling block cells.
000E30  3  D0 01        	bne :+
000E32  3  60           	rts			; no more checks needed.
000E33  3               :
000E33  3  E6 rr        	inc bufaddr		; look to third cell.
000E35  3  D0 02        	bne :+
000E37  3  E6 rr        	inc bufaddr+1
000E39  3               :
000E39  3  20 9A 0E     	jsr plchk		; block, platform check.
000E3C  3  60           	rts			; return with zero flag set accordingly.
000E3D  3               
000E3D  3               ;---------------------------------------------------------
000E3D  3               ; Can go left check.
000E3D  3               ;
000E3D  3               ; Input:
000E3D  3               ;  IX = sprite pointer
000E3D  3               ;
000E3D  3               ; Output:
000E3D  3               ;  A  = 0 is ok, A <>0 is not ok
000E3D  3               ;---------------------------------------------------------
000E3D  3               
000E3D  3               cangl:
000E3D  3  A0 08        	ldy #8
000E3F  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000E41  3  85 rr        	sta dispy
000E43  3  A0 09        	ldy #9
000E45  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000E47  3  38           	sec
000E48  3  E9 02        	sbc #2			; look left 2 pixels.
000E4A  3  85 rr        	sta dispx		; coords in dispx,dispy.
000E4C  3  4C 5E 0E     	jmp cangh		; test if we can go there.
000E4F  3               
000E4F  3               ;---------------------------------------------------------
000E4F  3               ; Can go right check.
000E4F  3               ;
000E4F  3               ; Input:
000E4F  3               ;  IX = sprite pointer
000E4F  3               ;
000E4F  3               ; Output:
000E4F  3               ;  A  = 0 is ok, A <>0 is not ok
000E4F  3               ;---------------------------------------------------------
000E4F  3               
000E4F  3               ;.repeat 272
000E4F  3               ;  .byte 0
000E4F  3               ;.endrep
000E4F  3               
000E4F  3               cangr:
000E4F  3  A0 08        	ldy #8
000E51  3  B1 68        	lda (z80_ix),y		; y coordinate.
000E53  3  85 rr        	sta dispy
000E55  3  A0 09        	ldy #9
000E57  3  B1 68        	lda (z80_ix),y		; x coordinate.
000E59  3  18           	clc
000E5A  3  69 10        	adc #16			; look right 16 pixels.
000E5C  3  85 rr        	sta dispx		; coords in dispx,dispy.
000E5E  3               cangh:
000E5E  3               cangh2:
000E5E  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000E60  3  85 63        	sta z80_b
000E62  3  A5 rr        	lda dispy		; y position.
000E64  3  29 07        	and #7			; does x straddle cells?
000E66  3  D0 02        	bne cangh0		; yes, loop counter is good.
000E68  3  C6 63        	dec z80_b		; one less row to write.
000E6A  3               cangh0:
000E6A  3  20 6D 0F     	jsr tstbl		; get map address.
000E6D  3               cangh1:
000E6D  3  20 85 0E     	jsr lrchk		; standard left/right check.
000E70  3  F0 01        	beq :+
000E72  3  60           	rts			; no way through.
000E73  3               :
000E73  3  48           	pha
000E74  3  18           	clc
000E75  3  A5 rr        	lda bufaddr
000E77  3  69 20        	adc #32			; look down.
000E79  3  85 rr        	sta bufaddr
000E7B  3  90 02        	bcc :+
000E7D  3  E6 rr        	inc bufaddr+1
000E7F  3               :
000E7F  3  68           	pla
000E80  3               
000E80  3  C6 63        	dec z80_b
000E82  3  D0 E9        	bne cangh1
000E84  3  60           	rts
000E85  3               
000E85  3               ;-------------------------------------
000E85  3               ; Check left/right movement is okay.
000E85  3               ;
000E85  3               ; Input:
000E85  3               ;  bufaddr = MAP + x/8 + y/8*32
000E85  3               ;
000E85  3               ; Output:
000E85  3               ;  A  = 0 is ok, A <>0 is not ok
000E85  3               ;-------------------------------------
000E85  3               
000E85  3               lrchk:
000E85  3  A0 00        	ldy #0
000E87  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000E89  3  C9 02        	cmp #WALL 		; is it passable?
000E8B  3  F0 0A        	beq lrchkx		; no.
000E8D  3               
000E8D  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000E8F  3  F0 06        	beq lrchkx		; not passable.
000E91  3  A9 00        	lda #0
000E93  3  60           	rts
000E94  3               
000E94  3               ;--------------------------------------------------------------
000E94  3               ; Called by mmenu
000E94  3               ;--------------------------------------------------------------
000E94  3               
000E94  3               always:
000E94  3  A9 FF        	lda #255		; report it as okay.
000E96  3  60           	rts
000E97  3               
000E97  3               lrchkx:
000E97  3  A9 01        	lda #1 			; reset all bits.
000E99  3  60           	rts
000E9A  3               
000E9A  3               
000E9A  3               ;--------------------------------------------------------------
000E9A  3               ; Check platform or solid item is not in way.
000E9A  3               ;
000E9A  3               ; Input:
000E9A  3               ;  bufaddr = MAP + x/8 + y/8*32
000E9A  3               ;
000E9A  3               ; Output:
000E9A  3               ;  A  = 0 is ok, A <>0 is not ok
000E9A  3               ;--------------------------------------------------------------
000E9A  3               
000E9A  3               plchk:
000E9A  3  A0 00        	ldy #0
000E9C  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000E9E  3  C9 02        	cmp #WALL 		; is it passable?
000EA0  3  F0 F5        	beq lrchkx		; no.
000EA2  3               .if pflag .or dflag
000EA2  3               	cmp #FODDER		; fodder has to be dug.
000EA2  3               	beq lrchkx		; not passable.
000EA2  3               .endif
000EA2  3  C9 01        	cmp #PLATFM		; platform is solid.
000EA4  3  F0 03        	beq plchkx		; not passable.
000EA6  3               .if lflag
000EA6  3               	cmp #LADDER		; is it a ladder?
000EA6  3               	beq lrchkx		; on ladder, deny movement.
000EA6  3               .endif
000EA6  3               plchk0:
000EA6  3  A9 00        	lda #0			; report as ok
000EA8  3  60           	rts
000EA9  3               plchkx:
000EA9  3  A5 rr        	lda dispy		; x coordinate.
000EAB  3  29 07        	and #7			; position straddling blocks.
000EAD  3  F0 E8        	beq lrchkx		; on platform, deny movement.
000EAF  3  4C A6 0E     	jmp plchk0
000EB2  3               
000EB2  3               ;--------------------------------------------------------------
000EB2  3               ; Check ladder is available.
000EB2  3               ;
000EB2  3               ; Input:
000EB2  3               ;  bufaddr = MAP + x/8 + y/8*32
000EB2  3               ;
000EB2  3               ; Output:
000EB2  3               ;  A  = 0 is ok, A <>0 is not ok
000EB2  3               ;--------------------------------------------------------------
000EB2  3               
000EB2  3               .if lflag
000EB2  3               ldchk:
000EB2  3               	ldy #0
000EB2  3               	lda (bufaddr),y 	; fetch cell.
000EB2  3               	cmp #LADDER 		; is it a ladder?
000EB2  3               	beq :+
000EB2  3               	lda #1
000EB2  3               	rts  			; return with zero flag set accordingly.
000EB2  3               :
000EB2  3               	lda #0
000EB2  3               	rts
000EB2  3               .endif
000EB2  3               
000EB2  3               ;--------------------------------------------------------------
000EB2  3               ; Get collectables.
000EB2  3               ;--------------------------------------------------------------
000EB2  3               
000EB2  3               .if cflag
000EB2  3               getcol:
000EB2  3                       lda #COLECT             ; collectable blocks.
000EB2  3                       sta z80_b
000EB2  3                       jsr tded                ; test for collectable blocks.
000EB2  3                       cmp z80_b               ; did we find one?
000EB2  3                       beq :+
000EB2  3                       rts                     ; none were found, job done.
000EB2  3               :
000EB2  3                       jsr gtblk               ; get block.
000EB2  3                       jsr evnt20              ; collected block event.
000EB2  3                       jmp getcol              ; repeat until none left.
000EB2  3               
000EB2  3               ; Get collectable block.
000EB2  3               
000EB2  3               gtblk:
000EB2  3               	ldy #0
000EB2  3               	lda (bufaddr),y
000EB2  3               	sta z80_a
000EB2  3                       lda #0
000EB2  3                       sta (bufaddr),y		; make it empty now.
000EB2  3               
000EB2  3               	lda bufaddr		; set dispx
000EB2  3               	and #31
000EB2  3               	sta dispx
000EB2  3               
000EB2  3               	lda bufaddr+1		; Set dispy
000EB2  3               	sec
000EB2  3               	sbc #>MAP
000EB2  3               	sta bufaddr+1
000EB2  3               	asl bufaddr
000EB2  3               	rol bufaddr+1
000EB2  3               	asl bufaddr
000EB2  3               	rol bufaddr+1
000EB2  3               	asl bufaddr
000EB2  3               	rol bufaddr+1
000EB2  3               	lda bufaddr+1
000EB2  3               	sta dispy
000EB2  3               
000EB2  3               	lda colpatt		; get blocknr
000EB2  3               	sta z80_e		; displacement in e.
000EB2  3               	lda #0
000EB2  3               	sta z80_d		; no high byte.
000EB2  3               	asl z80_e  		; multiply char by 8.
000EB2  3               	rol z80_d
000EB2  3               	asl z80_e
000EB2  3               	rol z80_d
000EB2  3               	asl z80_e
000EB2  3               	rol z80_d
000EB2  3               	clc
000EB2  3               	lda z80_e
000EB2  3               	adc #<chgfx 		; address of graphics.
000EB2  3               	sta tileaddr
000EB2  3               	lda z80_d
000EB2  3               	adc #>chgfx
000EB2  3               	sta tileaddr+1
000EB2  3               	jsr gprad 		; get screen address.
000EB2  3               	ldx #7			; number of pixel rows to write.
000EB2  3               gtblk0:
000EB2  3               	ldy #0
000EB2  3               	lda (tileaddr),y 	; get image byte.
000EB2  3               	ldy scrtab,x
000EB2  3               	eor (scraddr),y 	; XOR tile on screen
000EB2  3               	sta (scraddr),y 	; copy to screen.
000EB2  3               	inc tileaddr 		; next image byte.
000EB2  3               	bne :+
000EB2  3               	inc tileaddr+1
000EB2  3               :
000EB2  3               	dex	 		; repeat for 8 pixel rows.
000EB2  3               	bpl gtblk0
000EB2  3               	rts
000EB2  3               .endif
000EB2  3               
000EB2  3               ;--------------------------------------------------------------
000EB2  3               ; Touched deadly block check.
000EB2  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000EB2  3               ;
000EB2  3               ; Input:
000EB2  3               ;  IX = sprite address
000EB2  3               ;
000EB2  3               ; Output:
000EB2  3               ;  A  = 0 is ok, A=5 is not ok
000EB2  3               ;--------------------------------------------------------------
000EB2  3               
000EB2  3               tded:
000EB2  3  A0 08        	ldy #8
000EB4  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000EB6  3  85 rr        	sta dispy
000EB8  3  C8           	iny
000EB9  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000EBB  3  85 rr        	sta dispx		; coords in dispx,dispy.
000EBD  3  20 6D 0F     	jsr tstbl		; get map address.
000EC0  3  48           	pha
000EC1  3  A9 1F        	lda #31			; default distance to next line down.
000EC3  3  85 64        	sta z80_e
000EC5  3  68           	pla
000EC6  3  C5 63        	cmp z80_b		; is this the required block?
000EC8  3  D0 01        	bne :+
000ECA  3  60           	rts			; yes.
000ECB  3               :
000ECB  3  E6 rr        	inc bufaddr 		; next cell.
000ECD  3  D0 02        	bne :+
000ECF  3  E6 rr        	inc bufaddr+1
000ED1  3               :
000ED1  3  A0 00        	ldy #0
000ED3  3  B1 rr        	lda (bufaddr),y		; fetch type.
000ED5  3  C5 63        	cmp z80_b 		; is this deadly/custom?
000ED7  3  D0 01        	bne :+
000ED9  3  60           	rts			; yes.
000EDA  3               :
000EDA  3  A5 rr        	lda dispx		; horizontal position.
000EDC  3  85 62        	sta z80_c 		; store column in c register.
000EDE  3  29 07        	and #7			; is it straddling cells?
000EE0  3  D0 03        	bne :+
000EE2  3  4C F6 0E     	jmp tded0		; no.
000EE5  3               :
000EE5  3  E6 rr        	inc bufaddr 		; last cell.
000EE7  3  D0 02        	bne :+
000EE9  3  E6 rr        	inc bufaddr+1
000EEB  3               :
000EEB  3  A0 00        	ldy #0
000EED  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000EEF  3  C5 63        	cmp z80_b		; is this the block?
000EF1  3  D0 01        	bne :+
000EF3  3  60           	rts			; yes.
000EF4  3               :
000EF4  3  C6 64        	dec z80_e		; one less cell to next row down.
000EF6  3               tded0:
000EF6  3  18           	clc 			; point to next row.
000EF7  3  A5 rr        	lda bufaddr
000EF9  3  65 64        	adc z80_e
000EFB  3  85 rr        	sta bufaddr
000EFD  3  90 02        	bcc :+
000EFF  3  E6 rr        	inc bufaddr+1
000F01  3               :
000F01  3  A0 00        	ldy #0
000F03  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000F05  3  C5 63        	cmp z80_b		; is this fatal?
000F07  3  D0 01        	bne :+
000F09  3  60           	rts			; yes.
000F0A  3               :
000F0A  3  E6 rr        	inc bufaddr 		; next cell.
000F0C  3  D0 02        	bne :+
000F0E  3  E6 rr        	inc bufaddr+1
000F10  3               :
000F10  3  A0 00        	ldy #0
000F12  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000F14  3  C5 63        	cmp z80_b		; is this fatal?
000F16  3  D0 01        	bne :+
000F18  3  60           	rts			; yes.
000F19  3               :
000F19  3  A5 62        	lda z80_c		; horizontal position.
000F1B  3  29 07        	and #7			; is it straddling cells?
000F1D  3  D0 03        	bne :+
000F1F  3  4C 31 0F     	jmp tded1 		; no.
000F22  3               :
000F22  3  E6 rr        	inc bufaddr		; last cell.
000F24  3  D0 02        	bne :+
000F26  3  E6 rr        	inc bufaddr+1
000F28  3               :
000F28  3  A0 00        	ldy #0
000F2A  3  B1 rr        	lda (bufaddr),y		; fetch type.
000F2C  3  C5 63        	cmp z80_b		; is this fatal?
000F2E  3  D0 01        	bne :+
000F30  3  60           	rts			; yes.
000F31  3               :
000F31  3               tded1:
000F31  3  A5 rr        	lda dispy		; vertical position.
000F33  3  29 07        	and #7 			; is it straddling cells?
000F35  3  D0 01        	bne :+
000F37  3  60           	rts			; no, job done.
000F38  3               :
000F38  3  18           	clc			; point to next row.
000F39  3  A5 rr        	lda bufaddr
000F3B  3  65 64        	adc z80_e
000F3D  3  85 rr        	sta bufaddr
000F3F  3  90 02        	bcc :+
000F41  3  E6 rr        	inc bufaddr+1
000F43  3               :
000F43  3  A0 00        	ldy #0
000F45  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000F47  3  C5 63        	cmp z80_b		; is this fatal?
000F49  3  D0 01        	bne :+
000F4B  3  60           	rts			; yes.
000F4C  3               :
000F4C  3  E6 rr        	inc bufaddr		; next cell.
000F4E  3  D0 02        	bne :+
000F50  3  E6 rr        	inc bufaddr+1
000F52  3               :
000F52  3  A0 00        	ldy #0
000F54  3  B1 rr        	lda (bufaddr),y 	; fetch type.
000F56  3  C5 63        	cmp z80_b		; is this fatal?
000F58  3  D0 01        	bne :+
000F5A  3  60           	rts			; yes.
000F5B  3               :
000F5B  3  A5 62        	lda z80_c		; horizontal position.
000F5D  3  29 07        	and #7			; is it straddling cells?
000F5F  3  D0 01        	bne :+
000F61  3  60           	rts			; no.
000F62  3               :
000F62  3  E6 rr        	inc bufaddr		; last cell.
000F64  3  D0 02        	bne :+
000F66  3  E6 rr        	inc bufaddr+1
000F68  3               :
000F68  3  A0 00        	ldy #0
000F6A  3  B1 rr        	lda (bufaddr),y		; fetch final type.
000F6C  3  60           	rts 			; return with final type in accumulator.
000F6D  3               
000F6D  3               ;---------------------------------------------------
000F6D  3               ; Fetch block type at (dispx, dispy).
000F6D  3               ;
000F6D  3               ; Output:
000F6D  3               ;  A = block type
000F6D  3               ;---------------------------------------------------
000F6D  3               
000F6D  3               tstbl:
000F6D  3  A5 rr        	lda dispy 		; fetch y coord.
000F6F  3  4A           	lsr a			; bufaddr = y/8
000F70  3  4A           	lsr a
000F71  3  4A           	lsr a
000F72  3  85 rr        	sta chary
000F74  3               
000F74  3  85 rr        	sta bufaddr
000F76  3  A9 00        	lda #0
000F78  3  85 rr        	sta bufaddr+1
000F7A  3               
000F7A  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000F7C  3  26 rr        	rol bufaddr+1
000F7E  3  06 rr        	asl bufaddr
000F80  3  26 rr        	rol bufaddr+1
000F82  3  06 rr        	asl bufaddr
000F84  3  26 rr        	rol bufaddr+1
000F86  3  06 rr        	asl bufaddr
000F88  3  26 rr        	rol bufaddr+1
000F8A  3  06 rr        	asl bufaddr
000F8C  3  26 rr        	rol bufaddr+1
000F8E  3               
000F8E  3  A5 rr        	lda dispx		; x/8
000F90  3  4A           	lsr a
000F91  3  4A           	lsr a
000F92  3  4A           	lsr a
000F93  3  85 rr        	sta charx
000F95  3               
000F95  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000F96  3  65 rr        	adc bufaddr
000F98  3  69 00        	adc #<MAP
000F9A  3  85 rr        	sta bufaddr
000F9C  3  A5 rr        	lda bufaddr+1
000F9E  3  69 98        	adc #>MAP
000FA0  3  85 rr        	sta bufaddr+1
000FA2  3               
000FA2  3  A0 00        	ldy #0
000FA4  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000FA6  3  60           	rts
000FA7  3               
000FA7  3               
000FA7  3               ;-------------------------------------------------------------------
000FA7  3               ; Jump - if we can.
000FA7  3               ; Requires initial speed to be set up in accumulator prior to call.
000FA7  3               ;
000FA7  3               ; Input:
000FA7  3               ;  IX = sprite address
000FA7  3               ;-------------------------------------------------------------------
000FA7  3               
000FA7  3               jump:
000FA7  3  A0 0D        	ldy #13
000FA9  3  B1 68        	lda (z80_ix),y		; jump table low.
000FAB  3  A0 0E        	ldy #14
000FAD  3  11 68        	ora (z80_ix),y		; jump table high.
000FAF  3  F0 01        	beq :+
000FB1  3  60           	rts			; already in the air.
000FB2  3               :
000FB2  3  A9 66        	lda #>jtab
000FB4  3  A0 0E        	ldy #14
000FB6  3  91 68        	sta (z80_ix),y		; set jump high.
000FB8  3  A9 68        	lda #<jtab		; jump table start.
000FBA  3  A0 0D        	ldy #13
000FBC  3  91 68        	sta (z80_ix),y		; set jump low.
000FBE  3  60           	rts
000FBF  3               
000FBF  3               ; Jump table.
000FBF  3               
000FBF  3               ;jtab:
000FBF  3               ;	.byte 248,250,252
000FBF  3               ;	.byte 254,254,255
000FBF  3               ;	.byte 255,255,0,0
000FBF  3               ;	.byte 0,1,1,1,2,2
000FBF  3               ;	.byte 4,6,8,8,8,99
000FBF  3               
000FBF  3               ;------------------------------------------------
000FBF  3               ; Random numbers code.
000FBF  3               ; Pseudo-random number generator, 8-bit.
000FBF  3               ;
000FBF  3               ; Output:
000FBF  3               ;  RND = random number
000FBF  3               ;------------------------------------------------
000FBF  3               
000FBF  3               random:
000FBF  3  A5 rr        	lda seed
000FC1  3  F0 05        	beq doEor
000FC3  3  0A           	asl a
000FC4  3  F0 04        	beq noEor
000FC6  3  90 02        	bcc noEor
000FC8  3  49 1D        doEor:	eor #$1d
000FCA  3  85 rr        noEor:	sta seed
000FCC  3  60           	rts
000FCD  3               
000FCD  3  A5 rr        	lda seed		; get last random number.
000FCF  3  0A           	asl a
000FD0  3  0A           	asl a
000FD1  3  18           	clc
000FD2  3  65 rr        	adc seed
000FD4  3  18           	clc
000FD5  3  69 45        	adc #$45
000FD7  3  85 rr        	sta seed		; store new seed.
000FD9  3  85 rr        	sta varrnd		; return number in variable.
000FDB  3  60           	rts
000FDC  3               
000FDC  3               ;--------------------------------------------------------
000FDC  3               ; Keys
000FDC  3               ;
000FDC  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
000FDC  3               ;             ||||||||
000FDC  3               ;             |||||||+> Right    KEY 0  - X
000FDC  3               ;             ||||||+-> Left     KEY 1  - Z
000FDC  3               ;             |||||+--> Down     KEY 2  - .
000FDC  3               ;             ||||+---> Up       KEY 3  - ;
000FDC  3               ;             |||+----> Fire1    KEY 4  - SPC
000FDC  3               ;             ||+-----> Fire2    KEY 5  - Q
000FDC  3               ;             |+------> Fire3    KEY 6  - P
000FDC  3               ;             +-------> Not used
000FDC  3               ;
000FDC  3               ;                       Option1  KEY 7  - 1
000FDC  3               ;                       Option2  KEY 8  - 2
000FDC  3               ;                       Option3  KEY 9  - 3
000FDC  3               ;                       Option4  KEY 10 - 4
000FDC  3               ;--------------------------------------------------------
000FDC  3               
000FDC  3               ;              X   Z   .   ;  SPC  Q   P
000FDC  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
000FDC  3               ;        .byte $21,$11,$01,$92                   ; menu options.
000FDC  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
000FE0  3  00 04 14     
000FE3  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000FE7  3               
000FE7  3               ;--------------------------------------------------------
000FE7  3               ; Keyboard test routine.
000FE7  3               ;
000FE7  3               ; Input:
000FE7  3               ;  A = key to read, high nibble=row and low nibble=col
000FE7  3               ;
000FE7  3               ; Output:
000FE7  3               ;  carry clr = key pressed
000FE7  3               ;  carry set = key not pressed
000FE7  3               ;--------------------------------------------------------
000FE7  3               
000FE7  3               ktest:
000FE7  3  85 61        	sta z80_a		; save key
000FE9  3               
000FE9  3  4A           	lsr a			; set row
000FEA  3  4A           	lsr a
000FEB  3  4A           	lsr a
000FEC  3  4A           	lsr a
000FED  3  09 D0        	ora #ScrMode		; don't flip screenmode
000FEF  3  8D 00 B0     	sta KeyRowAddr
000FF2  3               
000FF2  3  A5 61        	lda z80_a
000FF4  3  29 0F        	and #$0f
000FF6  3  AA           	tax
000FF7  3  AD 01 B0     	lda KeyColAddr		; read column
000FFA  3               
000FFA  3  3D 03 10     	and keymask,x		; check key pressed
000FFD  3  F0 02        	beq pressed
000FFF  3  38           	sec			; key not pressed
001000  3  60           	rts
001001  3               pressed:
001001  3  18           	clc			; key pressed
001002  3  60           	rts
001003  3               
001003  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
001007  3  10 20        
001009  3               
001009  3               ;-------------------------------------------------------
001009  3               ; Joystick and keyboard reading routines.
001009  3               ;
001009  3               ; contrl = 0, Keyboard
001009  3               ;          1, JoyKeyb
001009  3               ;          2, JoyMMC
001009  3               ;-------------------------------------------------------
001009  3               
001009  3               joykey:
001009  3  A5 rr        	lda contrl 		; control flag.
00100B  3  C9 01        	cmp #1
00100D  3  D0 03        	bne :+
00100F  3  4C 2D 10     	jmp joyjoy 		; read keyboard joystick
001012  3               :
001012  3  C9 02        	cmp #2
001014  3  D0 03        	bne :+
001016  3  4C 56 10     	jmp joysin 		; read MMC joystick.
001019  3               :
001019  3               ; Keyboard controls.
001019  3               
001019  3  A9 00        	lda #0		 	; zero reading.
00101B  3  85 64        	sta z80_e
00101D  3               
00101D  3  A0 06        	ldy #6	 		; address of last key.
00101F  3               joyke0:
00101F  3  B9 7E 66     	lda keys,y 		; get key from table.
001022  3  20 E7 0F     	jsr ktest		; being pressed?
001025  3  26 64        	rol z80_e 		; rotate into reading.
001027  3               
001027  3  88           	dey		 	; next key.
001028  3  10 F5        	bpl joyke0 		; repeat for all keys.
00102A  3  4C 3E 10     	jmp joyjo1 		; store the value.
00102D  3               
00102D  3               ; Keyboard joystick controls.
00102D  3               
00102D  3               joyjoy:
00102D  3  A9 00        	lda #0		 	; zero reading.
00102F  3  85 64        	sta z80_e
001031  3               
001031  3  A0 06        	ldy #6	 		; address of last key.
001033  3               joyjo3:
001033  3  B9 DC 0F     	lda jkeys,y 		; get key from table.
001036  3  20 E7 0F     	jsr ktest		; being pressed?
001039  3  26 64        	rol z80_e 		; rotate into reading.
00103B  3               
00103B  3  88           	dey		 	; next key.
00103C  3  10 F5        	bpl joyjo3 		; repeat for all keys.
00103E  3               joyjo1:
00103E  3  A5 64        	lda z80_e 		; copy e register to accumulator.
001040  3               joyjo2:
001040  3  85 rr        	sta joyval		; remember value.
001042  3  60           	rts
001043  3               
001043  3               
001043  3               ; AtoMMC joystick controls.
001043  3               
001043  3               ; Set PORTB direction
001043  3               
001043  3               joyinit:
001043  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
001045  3  8D 01 B4     	sta DatReg
001048  3  20 84 10     	jsr interwritedelay
00104B  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
00104D  3  8D 00 B4     	sta CmdReg
001050  3               
001050  3               wait_until_not_busy:
001050  3  AD 00 B4     	lda CmdReg
001053  3  30 FB        	bmi wait_until_not_busy
001055  3  60           	rts
001056  3               
001056  3               ; Get PORTB value
001056  3               
001056  3               joysin:
001056  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
001058  3  8D 00 B4     	sta CmdReg
00105B  3  20 84 10     	jsr interwritedelay
00105E  3               
00105E  3  AD 01 B4     	lda DatReg		; Read joystick status
001061  3  29 7F        	and #$7f
001063  3  85 rr        	sta joyval
001065  3  85 F0        	sta $f0
001067  3               
001067  3  AD 83 66     	lda keys+5		; check fire2
00106A  3  20 E7 0F     	jsr ktest
00106D  3  B0 06        	bcs :+
00106F  3  A5 rr        	lda joyval
001071  3  29 DF        	and #$df
001073  3  85 rr        	sta joyval
001075  3               :
001075  3  AD 84 66     	lda keys+6		; check fire3
001078  3  20 E7 0F     	jsr ktest
00107B  3  B0 06        	bcs :+
00107D  3  A5 rr        	lda joyval
00107F  3  29 BF        	and #$bf
001081  3  85 rr        	sta joyval
001083  3               :
001083  3  60           	rts
001084  3               
001084  3               ; Short delay
001084  3               ; Enough to intersperse 2 writes to the FATPIC.
001084  3               
001084  3               interwritedelay:
001084  3  A9 08        	lda  #8
001086  3  38           	sec
001087  3               loop:
001087  3  E9 01        	sbc  #1
001089  3  D0 FC        	bne  loop
00108B  3  60           	rts
00108C  3               
00108C  3               ;tmp_byte:   .byte 0
00108C  3               
00108C  3               ;---------------------------------------------------------------
00108C  3               ; Getkey in column,row format
00108C  3               ;
00108C  3               ; Output:
00108C  3               ;  A = high nibble=row and low nibble=column key in matrix
00108C  3               ;---------------------------------------------------------------
00108C  3               
00108C  3               kget:
00108C  3  A9 D0        	lda #ScrMode		; high-mono mode.
00108E  3  8D 00 B0     	sta ScrSelAddr		; screen select port
001091  3  86 rr        	stx xtmp
001093  3               kget4:
001093  3  20 71 FE     	jsr READKEY		; read key until pressed
001096  3  C0 FF        	cpy #255
001098  3  F0 F9        	beq kget4
00109A  3  85 rr        	sta rcol		; save column
00109C  3  86 rr        	stx rrow		; determine row
00109E  3               kget3:
00109E  3  20 71 FE     	jsr READKEY		; wait until key released
0010A1  3  C0 FF        	cpy #255
0010A3  3  D0 F9        	bne kget3
0010A5  3               
0010A5  3  38           	sec			; calculate matrix row
0010A6  3  A9 0A        	lda #10
0010A8  3  E5 rr        	sbc rrow
0010AA  3  0A           	asl a
0010AB  3  0A           	asl a
0010AC  3  0A           	asl a
0010AD  3  0A           	asl a
0010AE  3  85 rr        	sta rrow
0010B0  3               
0010B0  3  A0 FF        	ldy #255		; find column mask
0010B2  3               kget1:
0010B2  3  C8           	iny
0010B3  3  B9 03 10     	lda keymask,y
0010B6  3  C5 rr        	cmp rcol
0010B8  3  F0 03        	beq kget2
0010BA  3  4C B2 10     	jmp kget1
0010BD  3               kget2:
0010BD  3  98           	tya			; determine column
0010BE  3  18           	clc
0010BF  3  65 rr        	adc rrow
0010C1  3  A6 rr        	ldx xtmp
0010C3  3  60           	rts
0010C4  3               
0010C4  3               ;---------------------------------------------------------------
0010C4  3               ; Display message.
0010C4  3               ;
0010C4  3               ; Input:
0010C4  3               ;  A = message number
0010C4  3               ;---------------------------------------------------------------
0010C4  3               
0010C4  3               dmsg:
0010C4  3  AA           	tax
0010C5  3  A9 57        	lda #<msgdat		; pointer to messages.
0010C7  3  85 66        	sta z80_l
0010C9  3  A9 26        	lda #>msgdat
0010CB  3  85 67        	sta z80_h
0010CD  3  20 E5 11     	jsr getwrd		; get message number.
0010D0  3               dmsg3:
0010D0  3  20 D2 11     	jsr preprt		; pre-printing stuff.
0010D3  3  20 6D 0A     	jsr checkx		; make sure we"re in a printable range.
0010D6  3  A5 rr        	lda prtmod		; print mode.
0010D8  3  D0 47        	bne bmsg1		; no, double-height text.
0010DA  3               dmsg0:
0010DA  3  A5 67        	lda z80_h		; store string pointer.
0010DC  3  48           	pha
0010DD  3  A5 66        	lda z80_l
0010DF  3  48           	pha
0010E0  3               
0010E0  3  A0 00        	ldy #0
0010E2  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
0010E4  3  29 7F        	and #127		; remove any end marker.
0010E6  3  C9 0D        	cmp #13
0010E8  3  F0 24        	beq dmsg1
0010EA  3  20 01 0C     	jsr pchar		; display character.
0010ED  3  20 BF 11     	jsr nexpos 		; display position.
0010F0  3  D0 03        	bne dmsg2		; not on a new line.
0010F2  3  20 C4 11     	jsr nexlin		; next line down.
0010F5  3               dmsg2:
0010F5  3  68           	pla			; retrieve string pointer
0010F6  3  85 66        	sta z80_l
0010F8  3  68           	pla
0010F9  3  85 67        	sta z80_h
0010FB  3               
0010FB  3  A0 00        	ldy #0
0010FD  3  B1 66        	lda (z80_hl),y		; fetch last character.
0010FF  3  0A           	asl a  			; was it the end?
001100  3  90 03        	bcc :+
001102  3  4C C0 0A     	jmp dscor2		; yes, job done.
001105  3               :
001105  3  E6 66        	inc z80_l		; next character to display.
001107  3  D0 02        	bne :+
001109  3  E6 67        	inc z80_h
00110B  3               :
00110B  3  4C DA 10     	jmp dmsg0
00110E  3               dmsg1:
00110E  3  E6 rr        	inc dispy
001110  3  A5 rr        	lda dispy
001112  3  C9 18        	cmp #24
001114  3  90 04        	bcc dmsg4
001116  3  A9 00        	lda #0
001118  3  85 rr        	sta dispy
00111A  3               dmsg4:
00111A  3  A9 00        	lda #0
00111C  3  85 rr        	sta dispx
00111E  3  4C F5 10     	jmp dmsg2
001121  3               
001121  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
001121  3               
001121  3               ;----------------------------------------------------------
001121  3               ; Display message in big text.
001121  3               ;
001121  3               ; Input:
001121  3               ;  HL = string pointer
001121  3               ;----------------------------------------------------------
001121  3               
001121  3               bmsg1:
001121  3  A0 00        	ldy #0
001123  3  B1 66        	lda (z80_hl),y 		; get character to display.
001125  3  29 7F        	and #127		; only want 7 bits.
001127  3  C9 0D        	cmp #13
001129  3  F0 13        	beq bmsg2
00112B  3  20 53 11     	jsr bchar 		; display big char.
00112E  3               bmsg3:
00112E  3  A0 00        	ldy #0
001130  3  B1 66        	lda (z80_hl),y 		; look at last character.
001132  3  48           	pha
001133  3  E6 66        	inc z80_l 		; next character in list.
001135  3  D0 02        	bne :+
001137  3  E6 67        	inc z80_h
001139  3               :
001139  3  68           	pla
00113A  3  0A           	asl a  			; was terminator flag set?
00113B  3  90 E4        	bcc bmsg1		; no, keep going.
00113D  3  60           	rts
00113E  3               bmsg2:
00113E  3  A9 00        	lda #0
001140  3  85 rr        	sta dispx
001142  3  E6 rr        	inc dispy
001144  3  E6 rr        	inc dispy
001146  3  A5 rr        	lda dispy
001148  3  C9 17        	cmp #23
00114A  3  90 E2        	bcc bmsg3
00114C  3  A9 00        	lda #0
00114E  3  85 rr        	sta dispy
001150  3  4C 2E 11     	jmp bmsg3
001153  3               
001153  3               ;----------------------------------------------------------
001153  3               ; Big character display.
001153  3               ;
001153  3               ; Input:
001153  3               ;  A = character
001153  3               ;----------------------------------------------------------
001153  3               
001153  3               bchar:
001153  3  85 64        	sta z80_e		; save char in lb
001155  3  A9 00        	lda #0
001157  3  85 65        	sta z80_d		; reset hb
001159  3               
001159  3  06 64        	asl z80_e 		; multiply char by 8.
00115B  3  26 65        	rol z80_d
00115D  3  06 64        	asl z80_e
00115F  3  26 65        	rol z80_d
001161  3  06 64        	asl z80_e
001163  3  26 65        	rol z80_d		; de = a*8
001165  3               
001165  3  18           	clc			; de = Fontpointer + a*8
001166  3  A5 64        	lda z80_e
001168  3  69 68        	adc #<(FONT-256) 		; address of font.
00116A  3  85 64        	sta z80_e
00116C  3  A5 65        	lda z80_d
00116E  3  69 62        	adc #>(FONT-256)
001170  3  85 65        	sta z80_d
001172  3               
001172  3  20 B2 0B     	jsr gprad 		; get screen address.
001175  3               
001175  3  A2 00        	ldx #0			; height of character in font.
001177  3               bchar0:
001177  3  A0 00        	ldy #0
001179  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
00117B  3               
00117B  3               .if gflag
00117B  3  2D 69 1A     	and andeor
00117E  3  4D 6A 1A     	eor andeor+1
001181  3               .endif
001181  3               .if iflag
001181  3               	eor #$ff
001181  3               .endif
001181  3               
001181  3  91 rr        	sta (scraddr),y
001183  3  48           	pha
001184  3  20 19 15     	jsr nline 		; next line down.
001187  3  68           	pla
001188  3  91 rr        	sta (scraddr),y
00118A  3  20 19 15     	jsr nline 		; next line down.
00118D  3               
00118D  3  18           	clc
00118E  3  E6 64        	inc z80_e 		; next line of font.
001190  3  D0 02        	bne :+
001192  3  E6 65        	inc z80_d
001194  3               :
001194  3  E8           	inx
001195  3  E0 08        	cpx #8
001197  3  D0 DE        	bne bchar0
001199  3               
001199  3  20 BF 11     	jsr nexpos		; display position.
00119C  3  D0 05        	bne bchar2 		; not on a new line.
00119E  3               bchar3:
00119E  3  E6 rr        	inc dispy
0011A0  3  20 C4 11     	jsr nexlin 		; next line check.
0011A3  3               bchar2:
0011A3  3  4C C0 0A     	jmp dscor2		; tidy up line and column variables.
0011A6  3               
0011A6  3               
0011A6  3               ;-------------------------------------------------
0011A6  3               ; Display a character.
0011A6  3               ;
0011A6  3               ; Input:
0011A6  3               ;  A = character
0011A6  3               ;-------------------------------------------------
0011A6  3               
0011A6  3               achar:
0011A6  3  85 63        	sta z80_b 		; copy to b.
0011A8  3  20 D2 11     	jsr preprt 		; get ready to print.
0011AB  3  A5 63        	lda z80_b		; character in accumulator.
0011AD  3  A6 rr        	ldx prtmod 		; print mode.
0011AF  3  F0 03        	beq :+
0011B1  3  4C 53 11     	jmp bchar 		; no, double-height text.
0011B4  3               :
0011B4  3  20 01 0C     	jsr pchar 		; display character.
0011B7  3  20 BF 11     	jsr nexpos 		; display position.
0011BA  3  F0 E2        	beq bchar3		; next line down.
0011BC  3  4C A3 11     	jmp bchar2 		; tidy up.
0011BF  3               
0011BF  3               
0011BF  3               ;-------------------------------------------------
0011BF  3               ; Get next print column position.
0011BF  3               ;-------------------------------------------------
0011BF  3               
0011BF  3               nexpos:
0011BF  3  E6 rr        	inc dispx		; move along one position.
0011C1  3  A5 rr        	lda dispx 		; get coordinate.
0011C3  3               ;	and #31
0011C3  3  60           	rts 			; return with status in zero flag.
0011C4  3               
0011C4  3               ;-------------------------------------------------
0011C4  3               ; Get next print line position.
0011C4  3               ;-------------------------------------------------
0011C4  3               
0011C4  3               nexlin:
0011C4  3  E6 rr        	inc dispy 		; newline.
0011C6  3  A5 rr        	lda dispy		; vertical position.
0011C8  3  C9 18        	cmp #24			; past screen edge?
0011CA  3  B0 01        	bcs :+
0011CC  3  60           	rts			; no, still okay.
0011CD  3               :
0011CD  3  A9 00        	lda #0			; restart at top.
0011CF  3  85 rr        	sta dispy
0011D1  3  60           	rts
0011D2  3               
0011D2  3               ;--------------------------------------------------------
0011D2  3               ; Pre-print preliminaries.
0011D2  3               ;--------------------------------------------------------
0011D2  3               
0011D2  3               preprt:
0011D2  3  A9 68        	lda #<(FONT-256)		; font pointer.
0011D4  3  8D 6B 0A     	sta grbase		; set up graphics base.
0011D7  3  A9 62        	lda #>(FONT-256)
0011D9  3  8D 6C 0A     	sta grbase+1
0011DC  3               prescr:
0011DC  3  A5 rr        	lda charx 		; display coordinates.
0011DE  3  85 rr        	sta dispx		; set up general coordinates.
0011E0  3  A5 rr        	lda chary
0011E2  3  85 rr        	sta dispy
0011E4  3  60           	rts
0011E5  3               
0011E5  3               ;--------------------------------------------------------------
0011E5  3               ; Get messagenr x in hl
0011E5  3               ;
0011E5  3               ; Input:
0011E5  3               ;  HL = pointer to message list
0011E5  3               ;  X  = message number.
0011E5  3               ;--------------------------------------------------------------
0011E5  3               
0011E5  3               getwrd:
0011E5  3  E0 00        	cpx #0
0011E7  3  D0 01        	bne:+ 			; first word in list?
0011E9  3  60           	rts 			; yep, don't search.
0011EA  3               :
0011EA  3  A0 00        	ldy #0
0011EC  3               getwd0:
0011EC  3  B1 66        	lda (z80_hl),y
0011EE  3  48           	pha
0011EF  3  E6 66        	inc z80_l
0011F1  3  D0 02        	bne :+
0011F3  3  E6 67        	inc z80_h
0011F5  3               :
0011F5  3  68           	pla
0011F6  3  C9 80        	cmp #128		; found end?
0011F8  3  30 F2        	bmi getwd0		; no, carry on.
0011FA  3  CA           	dex			; until we have right number.
0011FB  3  D0 EF        	bne getwd0
0011FD  3  60           	rts
0011FE  3               
0011FE  3               ;-----------------------------------------------------------
0011FE  3               ; Bubble sort.
0011FE  3               ;-----------------------------------------------------------
0011FE  3               
0011FE  3               bsort:
0011FE  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
001200  3  85 rr        	sta qscnt
001202  3               
001202  3  A9 67        	lda #<sprtab 		; sprite table.
001204  3  85 68        	sta z80_x
001206  3  A9 19        	lda #>sprtab
001208  3  85 69        	sta z80_i
00120A  3               bsort0:
00120A  3  A0 00        	ldy #0
00120C  3  B1 68        	lda (z80_ix),y 		; first sprite type.
00120E  3  C9 FF        	cmp #255 		; is it switched off?
001210  3  F0 30        	beq swemp		; yes, may need to switch another in here.
001212  3               
001212  3  A0 11        	ldy #TABSIZ
001214  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
001216  3  C9 FF        	cmp #255 		; is it enabled?
001218  3  F0 0A        	beq bsort2 		; no, nothing to swap.
00121A  3               
00121A  3  A0 14        	ldy #TABSIZ+3
00121C  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
00121E  3  A0 03        	ldy #3
001220  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
001222  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
001224  3               bsort2:
001224  3  18           	clc
001225  3  A5 68        	lda z80_x
001227  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001229  3  85 68        	sta z80_x
00122B  3  90 02        	bcc :+
00122D  3  E6 69        	inc z80_i
00122F  3               :
00122F  3  C6 rr        	dec qscnt
001231  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
001233  3  60           	rts
001234  3               
001234  3               ;qscnt:	.byte 0
001234  3               
001234  3               bsort1:
001234  3  A0 11        	ldy #TABSIZ
001236  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
001238  3  C9 FF        	cmp #255		; is it enabled?
00123A  3  F0 E8        	beq bsort2		; no, nothing to swap.
00123C  3  20 50 12     	jsr swspr		; swap positions.
00123F  3  4C 24 12     	jmp bsort2
001242  3               swemp:
001242  3  A0 11        	ldy #TABSIZ
001244  3  B1 68        	lda (z80_ix),y		; next table entry.
001246  3  C9 FF        	cmp #255		; is that one on?
001248  3  F0 DA        	beq bsort2		; no, nothing to swap.
00124A  3  20 50 12     	jsr swspr		; swap positions.
00124D  3  4C 24 12     	jmp bsort2
001250  3               
001250  3               ; Swap sprites.
001250  3               
001250  3               swspr:
001250  3  A5 68        	lda z80_x		; table address
001252  3  85 64        	sta z80_e		; copy to de pair.
001254  3  85 66        	sta z80_l		; copy to hl pair.
001256  3  A5 69        	lda z80_i
001258  3  85 67        	sta z80_h
00125A  3  85 65        	sta z80_d
00125C  3               
00125C  3  18           	clc
00125D  3  A5 66        	lda z80_l
00125F  3  69 11        	adc #TABSIZ		; distance to second entry.
001261  3  85 66        	sta z80_l
001263  3  90 02        	bcc :+
001265  3  E6 67        	inc z80_h
001267  3               :
001267  3  A9 11        	lda #TABSIZ		; bytes to swap.
001269  3  85 63        	sta z80_b
00126B  3  A0 00        	ldy #0
00126D  3               swspr0:
00126D  3  B1 66        	lda (z80_hl),y		; fetch second byte.
00126F  3  48           	pha
001270  3  B1 64        	lda (z80_de),y 		; fetch first byte.
001272  3  91 66        	sta (z80_hl),y 		; copy to second.
001274  3  68           	pla
001275  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
001277  3               
001277  3  E6 64        	inc z80_e 		; next byte.
001279  3  D0 02        	bne :+
00127B  3  E6 65        	inc z80_d
00127D  3               :
00127D  3  E6 66        	inc z80_l 		; next byte.
00127F  3  D0 02        	bne :+
001281  3  E6 67        	inc z80_h
001283  3               :
001283  3  C6 63        	dec z80_b
001285  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
001287  3  60           	rts
001288  3               
001288  3               ;----------------------------------------------------
001288  3               ; Process sprites.
001288  3               ;----------------------------------------------------
001288  3               
001288  3               pspr:
001288  3  A9 0C        	lda #NUMSPR		; sprites to process.
00128A  3  85 rr        	sta sprptr
00128C  3               
00128C  3  A9 67        	lda #<sprtab 		; sprite table.
00128E  3  85 68        	sta z80_x
001290  3  A9 19        	lda #>sprtab
001292  3  85 69        	sta z80_i
001294  3               pspr1:
001294  3  A0 00        	ldy #0
001296  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
001298  3  C9 09        	cmp #9 			; within range of sprite types?
00129A  3  B0 03        	bcs :+
00129C  3  20 AF 12     	jsr pspr2 		; yes, process this one.
00129F  3               :
00129F  3  18           	clc
0012A0  3  A5 68        	lda z80_x
0012A2  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0012A4  3  85 68        	sta z80_x
0012A6  3  90 02        	bcc :+
0012A8  3  E6 69        	inc z80_i		; next sprite.
0012AA  3               :
0012AA  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
0012AC  3  D0 E6        	bne pspr1
0012AE  3  60           	rts
0012AF  3               
0012AF  3               ;sprptr:	.byte 0
0012AF  3               
0012AF  3               pspr2:
0012AF  3  A5 68        	lda z80_x 		; store original sprite pointer.
0012B1  3  85 rr        	sta ogptr
0012B3  3  A5 69        	lda z80_i
0012B5  3  85 rr        	sta ogptr+1
0012B7  3  20 C3 12     	jsr pspr3		; do the routine.
0012BA  3               rtorg:
0012BA  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
0012BC  3  85 68        	sta z80_x
0012BE  3  A5 rr        	lda ogptr+1
0012C0  3  85 69        	sta z80_i
0012C2  3               rtorg0:
0012C2  3  60           	rts
0012C3  3               
0012C3  3               pspr3:
0012C3  3  A9 F8        	lda #<evtyp0		; sprite type events list.
0012C5  3  85 66        	sta z80_l
0012C7  3  A9 12        	lda #>evtyp0
0012C9  3  85 67        	sta z80_h
0012CB  3               pspr4:
0012CB  3  B1 68        	lda (z80_ix),y
0012CD  3  0A           	asl a			; double accumulator.
0012CE  3  18           	clc
0012CF  3  65 66        	adc z80_l
0012D1  3  85 66        	sta z80_l
0012D3  3  90 02        	bcc :+
0012D5  3  E6 67        	inc z80_h
0012D7  3               :
0012D7  3  B1 66        	lda (z80_hl),y
0012D9  3  85 64        	sta z80_e 		; copy to de.
0012DB  3  48           	pha
0012DC  3               
0012DC  3  E6 66        	inc z80_l 		; next byte of address.
0012DE  3  D0 02        	bne :+
0012E0  3  E6 67        	inc z80_h
0012E2  3               :
0012E2  3  B1 66        	lda (z80_hl),y 		; address high.
0012E4  3  85 65        	sta z80_d
0012E6  3               
0012E6  3  48           	pha	 		; swap address into hl.
0012E7  3  A5 67        	lda z80_h
0012E9  3  85 65        	sta z80_d
0012EB  3  68           	pla
0012EC  3  85 67        	sta z80_h
0012EE  3  68           	pla
0012EF  3  85 66        	sta z80_l
0012F1  3  A5 66        	lda z80_l
0012F3  3  85 64        	sta z80_e
0012F5  3               
0012F5  3  6C 66 00     	jmp (z80_hl) 		; go there.
0012F8  3               
0012F8  3               ;ogptr:	.word 0			; original sprite pointer.
0012F8  3               
0012F8  3               ; Address of each sprite type's routine.
0012F8  3               
0012F8  3  AF 1A        evtyp0:	.word evnt00
0012FA  3  65 1C        evtyp1:	.word evnt01
0012FC  3  4E 1D        evtyp2:	.word evnt02
0012FE  3  DA 1D        evtyp3:	.word evnt03
001300  3  74 1E        evtyp4:	.word evnt04
001302  3  75 1E        evtyp5:	.word evnt05
001304  3  7B 1E        evtyp6:	.word evnt06
001306  3  57 1F        evtyp7:	.word evnt07
001308  3  0E 20        evtyp8:	.word evnt08
00130A  3               
00130A  3               ;--------------------------------------------------------------
00130A  3               ; Display sprites.
00130A  3               ;
00130A  3               ; Input:
00130A  3               ;  IX = sprite table
00130A  3               ;--------------------------------------------------------------
00130A  3               
00130A  3               dspr:
00130A  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
00130C  3  85 rr        	sta sprcnt
00130E  3               dspr0:
00130E  3  A0 00        	ldy #0
001310  3  B1 68        	lda (z80_ix),y 		; get sprite type.
001312  3  C9 FF        	cmp #255 		; is it enabled?
001314  3  D0 42        	bne dspr1 		; yes, it needs deleting.
001316  3               dspr5:
001316  3  A0 05        	ldy #5
001318  3  B1 68        	lda (z80_ix),y 		; new type.
00131A  3  C9 FF        	cmp #255		; is it enabled?
00131C  3  D0 77        	bne dspr3 		; yes, it needs drawing.
00131E  3               dspr2:
00131E  3  A0 05        	ldy #5
001320  3  B1 68        	lda (z80_ix),y 		; copy new type.
001322  3  A0 00        	ldy #0
001324  3  91 68        	sta (z80_ix),y
001326  3  A0 06        	ldy #6
001328  3  B1 68        	lda (z80_ix),y 		; copy new image number.
00132A  3  A0 01        	ldy #1
00132C  3  91 68        	sta (z80_ix),y
00132E  3  A0 07        	ldy #7
001330  3  B1 68        	lda (z80_ix),y 		; copy new frame.
001332  3  A0 02        	ldy #2
001334  3  91 68        	sta (z80_ix),y
001336  3  A0 08        	ldy #8
001338  3  B1 68        	lda (z80_ix),y 		; copy new y.
00133A  3  A0 03        	ldy #3
00133C  3  91 68        	sta (z80_ix),y
00133E  3  A0 09        	ldy #9
001340  3  B1 68        	lda (z80_ix),y 		; copy new x.
001342  3  A0 04        	ldy #4
001344  3  91 68        	sta (z80_ix),y
001346  3               
001346  3  18           	clc
001347  3  A5 68        	lda z80_x
001349  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
00134B  3  85 68        	sta z80_x
00134D  3  A5 69        	lda z80_i
00134F  3  69 00        	adc #0
001351  3  85 69        	sta z80_i 		; next sprite.
001353  3  C6 rr        	dec sprcnt
001355  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
001357  3  60           	rts
001358  3               dspr1:
001358  3  A0 05        	ldy #5
00135A  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
00135C  3  C9 FF        	cmp #255		; is this enabled?
00135E  3  D0 06        	bne dspr4 		; yes, display both.
001360  3               dspr6:
001360  3  20 30 14     	jsr sspria 		; show single sprite.
001363  3  4C 1E 13     	jmp dspr2
001366  3               
001366  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
001366  3               
001366  3               dspr4:
001366  3  A0 04        	ldy #4
001368  3  B1 68        	lda (z80_ix),y		; old x.
00136A  3  A0 09        	ldy #9
00136C  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
00136E  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
001370  3               
001370  3  A0 03        	ldy #3
001372  3  B1 68        	lda (z80_ix),y		; old y.
001374  3  A0 08        	ldy #8
001376  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001378  3  D0 15        	bne dspr7		; they differ, need to redraw.
00137A  3               
00137A  3  A0 02        	ldy #2
00137C  3  B1 68        	lda (z80_ix),y 		; old frame.
00137E  3  A0 07        	ldy #7
001380  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001382  3  4C 8F 13     	jmp dspr7 		; they differ, need to redraw.
001385  3               
001385  3  A0 01        	ldy #1
001387  3  B1 68        	lda (z80_ix),y 		; old image.
001389  3  A0 06        	ldy #6
00138B  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00138D  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
00138F  3               dspr7:
00138F  3  20 5D 14     	jsr sspric 		; delete old sprite, draw new one simultaneously.
001392  3  4C 1E 13     	jmp dspr2
001395  3               dspr3:
001395  3  20 57 14     	jsr ssprib 		; show single sprite.
001398  3  4C 1E 13     	jmp dspr2
00139B  3               
00139B  3               ;sprcnt:	.byte 0
00139B  3               
00139B  3               ;-----------------------------------------
00139B  3               ; Get sprite address calculations.
00139B  3               ; gspran = new sprite, gsprad = old sprite.
00139B  3               ;
00139B  3               ; Input:
00139B  3               ;  IX = sprite address
00139B  3               ;-----------------------------------------
00139B  3               
00139B  3               gspran:
00139B  3  A0 08        	ldy #8
00139D  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
00139F  3  85 rr        	sta dispy
0013A1  3  A0 09        	ldy #9
0013A3  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
0013A5  3  85 rr        	sta dispx
0013A7  3  A0 06        	ldy #6
0013A9  3  B1 68        	lda (z80_ix),y 		; new sprite image.
0013AB  3  20 89 17     	jsr gfrm		; fetch start frame for this sprite.
0013AE  3               
0013AE  3  A0 00        	ldy #0
0013B0  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0013B2  3  A0 07        	ldy #7
0013B4  3  18           	clc
0013B5  3  71 68        	adc (z80_ix),y 		; new add frame number.
0013B7  3  4C D6 13     	jmp gspra0
0013BA  3               
0013BA  3               ;-----------------------------------------
0013BA  3               ; Calculate old sprite address
0013BA  3               ;
0013BA  3               ; Input:
0013BA  3               ;  IX = sprite address
0013BA  3               ;
0013BA  3               ; Output:
0013BA  3               ;  B  = right byte mask
0013BA  3               ;  C  = left byte mask
0013BA  3               ;  DE = spriteframe address
0013BA  3               ;  scraddr = screenaddress(dispx,dispy)
0013BA  3               ;-----------------------------------------
0013BA  3               
0013BA  3               gsprad:
0013BA  3  A0 03        	ldy #3
0013BC  3  B1 68        	lda (z80_ix),y		; y coordinate.
0013BE  3  85 rr        	sta dispy
0013C0  3  A0 04        	ldy #4
0013C2  3  B1 68        	lda (z80_ix),y		; x coordinate.
0013C4  3  85 rr        	sta dispx
0013C6  3  A0 01        	ldy #1
0013C8  3  B1 68        	lda (z80_ix),y 		; sprite image.
0013CA  3  20 89 17     	jsr gfrm 		; fetch start frame for this sprite.
0013CD  3               
0013CD  3  A0 00        	ldy #0
0013CF  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0013D1  3  A0 02        	ldy #2
0013D3  3  18           	clc
0013D4  3  71 68        	adc (z80_ix),y 		; add frame number.
0013D6  3               gspra0:
0013D6  3  4A           	lsr a	  		; multiply by 128.
0013D7  3  85 65        	sta z80_d 		; store in d.
0013D9  3  8D 2E 14     	sta tmp1
0013DC  3  A9 00        	lda #0
0013DE  3  6A           	ror a
0013DF  3  85 64        	sta z80_e 		; got low byte.
0013E1  3  8D 2F 14     	sta tmp2
0013E4  3               .if bflag
0013E4  3               	lsr tmp1
0013E4  3               	ror tmp2
0013E4  3               	clc
0013E4  3               	lda tmp2
0013E4  3               	adc z80_e
0013E4  3               	sta z80_e
0013E4  3               	lda tmp1
0013E4  3               	adc z80_d
0013E4  3               	sta z80_d
0013E4  3               .endif
0013E4  3  18           	clc 			; address of play sprites.
0013E5  3  A5 64        	lda z80_e
0013E7  3  69 4D        	adc #<sprgfx
0013E9  3  85 64        	sta z80_e
0013EB  3  A5 65        	lda z80_d
0013ED  3  69 2C        	adc #>sprgfx
0013EF  3  85 65        	sta z80_d
0013F1  3               
0013F1  3  A5 rr        	lda dispx 		; y coordinate.
0013F3  3  29 06        	and #6 			; position within byte boundary.
0013F5  3  AA           	tax	 		; low byte of table displacement.
0013F6  3               
0013F6  3  0A           	asl a	  		; multiply by 32.
0013F7  3  0A           	asl a  			; already a multiple
0013F8  3  0A           	asl a  			; of 2, so just 4
0013F9  3               .if bflag
0013F9  3               	sta tmp1
0013F9  3               	asl a  			; shifts needed.
0013F9  3               	clc
0013F9  3               	adc tmp1
0013F9  3               .else
0013F9  3  0A           	asl a  			; shifts needed.
0013FA  3               .endif
0013FA  3  18           	clc 			; add to sprite address.
0013FB  3  65 64        	adc z80_e
0013FD  3  85 64        	sta z80_e
0013FF  3  90 02        	bcc :+
001401  3  E6 65        	inc z80_d
001403  3               :
001403  3  BD 26 14     	lda spmask,x		 ; pointer to mask table.
001406  3  85 62        	sta z80_c 		; left mask.
001408  3  BD 27 14     	lda spmask+1,x
00140B  3  85 63        	sta z80_b 		; right mask.
00140D  3               
00140D  3               ;------------------------------------------------------------------
00140D  3               ; Drop into screen address routine.
00140D  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
00140D  3               ;------------------------------------------------------------------
00140D  3               
00140D  3               scadd:
00140D  3  A6 rr        	ldx dispy
00140F  3  E0 C0        	cpx #192
001411  3  90 02        	bcc :+
001413  3  A2 C0        	ldx #192
001415  3               :
001415  3  A5 rr        	lda dispx
001417  3  4A           	lsr a
001418  3  4A           	lsr a
001419  3  4A           	lsr a
00141A  3  18           	clc
00141B  3  7D 00 9B     	adc SCADTB_lb,x
00141E  3  85 rr        	sta scraddr
001420  3  BD 00 9C     	lda SCADTB_hb,x
001423  3  85 rr        	sta scraddr+1
001425  3  60           	rts
001426  3               
001426  3  FF 00        spmask:	.byte $ff,$00
001428  3  3F C0        	.byte $3f,$c0
00142A  3  0F F0        	.byte $0f,$f0
00142C  3  03 FC        	.byte $03,$fc
00142E  3               
00142E  3  00           tmp1:	.byte 0
00142F  3  00           tmp2:	.byte 0
001430  3               
001430  3               ;-----------------------------------------------------------------
001430  3               ; These are the sprite routines.
001430  3               ; sspria = single sprite, old (ix).
001430  3               ; ssprib = single sprite, new (ix+5).
001430  3               ; sspric = both sprites, old (ix) and new (ix+5).
001430  3               ;-----------------------------------------------------------------
001430  3               
001430  3               sspria:
001430  3  20 BA 13     	jsr gsprad		; get old sprite address.
001433  3               sspri2:
001433  3  A5 64        	lda z80_e
001435  3  8D A5 14     	sta dline1+1		; Set spritedata address
001438  3  8D B4 14     	sta dline2+1
00143B  3  A5 65        	lda z80_d
00143D  3  8D A6 14     	sta dline1+2
001440  3  8D B5 14     	sta dline2+2
001443  3  86 rr        	stx xtmp
001445  3  A2 00        	ldx #0			; vertical lines.
001447  3               sspri0:
001447  3  20 A1 14     	jsr dline		; draw a line.
00144A  3  E0 10        	cpx #16			; detect block boundery
00144C  3  D0 02        	bne :+			; skip if not
00144E  3  E6 rr        	inc scraddr+1		; jump to next blockline
001450  3               :
001450  3  E0 20        	cpx #32			; check finished
001452  3               .if bflag
001452  3               	bne :+			; skip if not
001452  3               	inc scraddr+1		; jump to next blockline
001452  3               	inc z80_hlp+1		; jump to next blockline
001452  3               :
001452  3               	cpx #48			; check finished
001452  3               .endif
001452  3  D0 F3        	bne sspri0		; no, repeat
001454  3  A6 rr        	ldx xtmp
001456  3  60           	rts
001457  3               
001457  3               ;-----------------------------------------------------------------
001457  3               
001457  3               ssprib:
001457  3  20 9B 13     	jsr gspran 		; get new sprite address.
00145A  3  4C 33 14     	jmp sspri2
00145D  3               
00145D  3               ;-----------------------------------------------------------------
00145D  3               
00145D  3               sspric:
00145D  3  20 BA 13     	jsr gsprad 		; get old sprite address.
001460  3  A5 64        	lda z80_e
001462  3  8D C9 14     	sta ddline1+1		; Set spritedata address
001465  3  8D D8 14     	sta ddline2+1
001468  3  A5 65        	lda z80_d
00146A  3  8D CA 14     	sta ddline1+2
00146D  3  8D D9 14     	sta ddline2+2
001470  3  20 89 66     	jsr exx  		; store addresses.
001473  3               
001473  3  20 9B 13     	jsr gspran 		; get new sprite addresses.
001476  3  A5 64        	lda z80_e
001478  3  8D A5 14     	sta dline1+1		; Set spritedata address
00147B  3  8D B4 14     	sta dline2+1
00147E  3  A5 65        	lda z80_d
001480  3  8D A6 14     	sta dline1+2
001483  3  8D B5 14     	sta dline2+2
001486  3               
001486  3  86 rr        	stx xtmp
001488  3  A2 00        	ldx #0			; vertical lines.
00148A  3               lloop:
00148A  3  20 A1 14     	jsr dline 		; draw a line.
00148D  3  CA           	dex
00148E  3  CA           	dex
00148F  3  20 C5 14     	jsr ddline 		; delete a line.
001492  3  E0 10        	cpx #16			; detect block boundery
001494  3  D0 04        	bne :+			; skip if not
001496  3  E6 rr        	inc scraddr+1		; jump to next blockline
001498  3  E6 73        	inc z80_hlp+1		; jump to next blockline
00149A  3               :
00149A  3  E0 20        	cpx #32			; check finished
00149C  3               .if bflag
00149C  3               	bne :+			; skip if not
00149C  3               	inc scraddr+1		; jump to next blockline
00149C  3               	inc z80_hlp+1		; jump to next blockline
00149C  3               :
00149C  3               	cpx #48			; check finished
00149C  3               .endif
00149C  3  D0 EC        	bne lloop		; no, repeat
00149E  3  A6 rr        	ldx xtmp
0014A0  3  60           	rts
0014A1  3               
0014A1  3               
0014A1  3               ;-----------------------------------------------------------------
0014A1  3               
0014A1  3               dline:
0014A1  3  BC E9 14     	ldy sprline,x		; point to screenleft
0014A4  3               dline1:
0014A4  3  BD D8 5F     	lda objdta,x		; fetch spriteleft byte
0014A7  3  85 61        	sta z80_a		; save spriteright byte
0014A9  3               .if hflag
0014A9  3               	sty ytmp
0014A9  3               	lda scraddr
0014A9  3               	and #31
0014A9  3               	sta dispx
0014A9  3               	lda scraddr+1
0014A9  3               	and #31
0014A9  3               	sta dispy
0014A9  3               	jsr pradd
0014A9  3               	ldy #0
0014A9  3               	lda (bufaddr),y
0014A9  3               	cmp #CUSTOM
0014A9  3               	beq sline
0014A9  3               	ldy ytmp
0014A9  3               .endif
0014A9  3  A5 61        	lda z80_a
0014AB  3  25 62        	and z80_c		; mask left
0014AD  3  51 rr        	eor (scraddr),y		; merge with screenleft
0014AF  3  91 rr        	sta (scraddr),y		; write screenleft
0014B1  3               sline:
0014B1  3               .if hflag
0014B1  3               	ldy ytmp
0014B1  3               .endif
0014B1  3  E8           	inx			; next spritebyte
0014B2  3  C8           	iny			; point to screenmiddle
0014B3  3               .if hflag
0014B3  3               	sty ytmp
0014B3  3               	ldy #1
0014B3  3               	lda (bufaddr),y
0014B3  3               	cmp #CUSTOM
0014B3  3               	beq sline2
0014B3  3               	ldy ytmp
0014B3  3               .endif
0014B3  3               dline2:
0014B3  3  BD D8 5F     	lda objdta,x		; fetch spritemiddle byte
0014B6  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
0014B8  3  91 rr        	sta (scraddr),y		; write screenmiddle
0014BA  3               sline2:
0014BA  3               .if hflag
0014BA  3               	ldy ytmp
0014BA  3               .endif
0014BA  3  C8           	iny			; point to screenright
0014BB  3               .if hflag
0014BB  3               	sty ytmp
0014BB  3               	ldy #2
0014BB  3               	lda (bufaddr),y
0014BB  3               	cmp #CUSTOM
0014BB  3               	beq sline3
0014BB  3               	ldy ytmp
0014BB  3               .endif
0014BB  3  A5 61        	lda z80_a		; fetch spriteright byte
0014BD  3  25 63        	and z80_b		; mask right
0014BF  3  51 rr        	eor (scraddr),y		; merge with screenright
0014C1  3  91 rr        	sta (scraddr),y		; write screenright
0014C3  3               sline3:
0014C3  3               .if hflag
0014C3  3               	ldy ytmp
0014C3  3               .endif
0014C3  3  E8           	inx			; next spritebyte
0014C4  3               
0014C4  3  60           	rts
0014C5  3               
0014C5  3               ;-----------------------------------------------------------------
0014C5  3               
0014C5  3               ddline:
0014C5  3  BC E9 14     	ldy sprline,x		; point to screenleft
0014C8  3               ddline1:
0014C8  3  BD D8 5F     	lda objdta,x		; fetch spriteleft byte
0014CB  3  85 61        	sta z80_a		; save spriteright byte
0014CD  3               .if hflag
0014CD  3               	sty ytmp
0014CD  3               	lda z80_hlp
0014CD  3               	and #31
0014CD  3               	sta dispx
0014CD  3               	lda z80_hlp+1
0014CD  3               	and #31
0014CD  3               	sta dispy
0014CD  3               	jsr pradd
0014CD  3               	ldy #0
0014CD  3               	lda (bufaddr),y
0014CD  3               	cmp #CUSTOM
0014CD  3               	beq dsline
0014CD  3               	ldy ytmp
0014CD  3               .endif
0014CD  3  A5 61        	lda z80_a
0014CF  3  25 6E        	and z80_cp		; mask left
0014D1  3  51 72        	eor (z80_hlp),y		; merge with screenleft
0014D3  3  91 72        	sta (z80_hlp),y		; write screenleft
0014D5  3               dsline:
0014D5  3               .if hflag
0014D5  3               	ldy ytmp
0014D5  3               .endif
0014D5  3  E8           	inx			; next spritebyte
0014D6  3  C8           	iny			; point to screenmiddle
0014D7  3               .if hflag
0014D7  3               	sty ytmp
0014D7  3               	ldy #1
0014D7  3               	lda (bufaddr),y
0014D7  3               	cmp #CUSTOM
0014D7  3               	beq dsline2
0014D7  3               	ldy ytmp
0014D7  3               .endif
0014D7  3               ddline2:
0014D7  3  BD D8 5F     	lda objdta,x		; fetch spritemiddle byte
0014DA  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
0014DC  3  91 72        	sta (z80_hlp),y		; write screenmiddle
0014DE  3               dsline2:
0014DE  3               .if hflag
0014DE  3               	ldy ytmp
0014DE  3               .endif
0014DE  3  C8           	iny			; point to screenright
0014DF  3               .if hflag
0014DF  3               	sty ytmp
0014DF  3               	ldy #2
0014DF  3               	lda (bufaddr),y
0014DF  3               	cmp #CUSTOM
0014DF  3               	beq dsline3
0014DF  3               	ldy ytmp
0014DF  3               .endif
0014DF  3  A5 61        	lda z80_a		; fetch spriteright byte
0014E1  3  25 6F        	and z80_bp		; mask right
0014E3  3  51 72        	eor (z80_hlp),y		; merge with screenright
0014E5  3  91 72        	sta (z80_hlp),y		; write screenright
0014E7  3               dsline3:
0014E7  3               .if hflag
0014E7  3               	ldy ytmp
0014E7  3               .endif
0014E7  3  E8           	inx			; next spritebyte
0014E8  3               
0014E8  3  60           	rts
0014E9  3               
0014E9  3               sprline:
0014E9  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0014ED  3  40 41 60 61  
0014F1  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0014F5  3  C0 C1 E0 E1  
0014F9  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0014FD  3  40 41 60 61  
001501  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001505  3  C0 C1 E0 E1  
001509  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
00150D  3  40 41 60 61  
001511  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001515  3  C0 C1 E0 E1  
001519  3               
001519  3               ;----------------------------------------------------------------------
001519  3               ; Line drawn, now work out next target address.
001519  3               ;----------------------------------------------------------------------
001519  3               
001519  3               nline:
001519  3  18           	clc
00151A  3  A5 rr        	lda scraddr 		; get low byte of address.
00151C  3  69 20        	adc #$20
00151E  3  85 rr        	sta scraddr 		; new low byte of address.
001520  3  90 02        	bcc :+
001522  3  E6 rr        	inc scraddr+1 		; new high byte of address.
001524  3               :
001524  3  60           	rts
001525  3               
001525  3               ;-------------------------------------------------------------
001525  3               ; Line drawn, now work out next target address.
001525  3               ;
001525  3               ; Input:
001525  3               ;  BP  = right mask
001525  3               ;  CP  = left mask
001525  3               ;  DEP = spriteaddress
001525  3               ;  z80_hlp = screen address
001525  3               ;-------------------------------------------------------------
001525  3               
001525  3               
001525  3               ;-----------------------------------------------------------
001525  3               ; Animates a sprite.
001525  3               ;
001525  3               ; Input:
001525  3               ;  IX = sprite address
001525  3               ;  HL = last sprite address
001525  3               ;-----------------------------------------------------------
001525  3               
001525  3               animsp:
001525  3  25 rr        	and frmno
001527  3  F0 01        	beq :+
001529  3  60           	rts
00152A  3               :
00152A  3  A0 06        	ldy #6
00152C  3  B1 68        	lda (z80_ix),y		; sprite image
00152E  3  20 89 17     	jsr gfrm		; get frame data.
001531  3               
001531  3  E6 66        	inc z80_l		; point to frames.
001533  3  D0 02        	bne :+
001535  3  E6 67        	inc z80_h
001537  3               :
001537  3  A0 07        	ldy #7
001539  3  B1 68        	lda (z80_ix),y		; sprite frame.
00153B  3  18           	clc
00153C  3  69 01        	adc #1			; next one along.
00153E  3  A0 00        	ldy #0
001540  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
001542  3  90 02        	bcc anims0		; no, not yet.
001544  3  A9 00        	lda #0			; start at first frame.
001546  3               anims0:
001546  3  A0 07        	ldy #7
001548  3  91 68        	sta (z80_ix),y		; new frame.
00154A  3  60           	rts
00154B  3               
00154B  3               ;--------------------------------------------------------------
00154B  3               ; Animate back
00154B  3               ;
00154B  3               ; Input:
00154B  3               ;  IX = sprite address
00154B  3               ;  HL = last sprite address
00154B  3               ;--------------------------------------------------------------
00154B  3               
00154B  3               animbk:
00154B  3  25 rr        	and frmno
00154D  3  F0 01        	beq :+
00154F  3  60           	rts
001550  3               :
001550  3  A0 06        	ldy #6
001552  3  B1 68        	lda (z80_ix),y		; sprite image.
001554  3  20 89 17     	jsr gfrm		; get frame data.
001557  3               
001557  3  E6 66        	inc z80_l 		; point to frames.
001559  3  D0 02        	bne :+
00155B  3  E6 67        	inc z80_h
00155D  3               :
00155D  3  A0 07        	ldy #7
00155F  3  B1 68        	lda (z80_ix),y 		; sprite frame.
001561  3  F0 03        	beq :+
001563  3  4C 6A 15     	jmp rtanb0 		; yes, start at end.
001566  3               :
001566  3  A0 00        	ldy #0
001568  3  B1 66        	lda (z80_hl),y 		; last sprite.
00156A  3               rtanb0:
00156A  3  38           	sec
00156B  3  E9 01        	sbc #1			; next one along.
00156D  3  4C 46 15     	jmp anims0		; set new frame.
001570  3               
001570  3               ;--------------------------------------------------------------
001570  3               ; Check for collision with other sprite, strict enforcement.
001570  3               ;
001570  3               ; Input:
001570  3               ;  b		= sprite to test for
001570  3               ;  ix		= current sprite pointer
001570  3               ;
001570  3               ; global:	b
001570  3               ; local:	x,y,hl,de,skptr
001570  3               ; calls:	-
001570  3               ;--------------------------------------------------------------
001570  3               
001570  3               sktyp:
001570  3  A9 67        	lda #<sprtab				; sprite table.
001572  3  85 66        	sta z80_l
001574  3  A9 19        	lda #>sprtab
001576  3  85 67        	sta z80_h
001578  3               numsp2:
001578  3  A9 0C        	lda #NUMSPR				; number of sprites.
00157A  3  85 rr        	sta sktptr
00157C  3               sktyp0:
00157C  3  A5 66        	lda z80_l 				; store pointer to sprite.
00157E  3  85 rr        	sta skptr
001580  3  A5 67        	lda z80_h
001582  3  85 rr        	sta skptr+1
001584  3               
001584  3  A0 00        	ldy #0
001586  3  B1 66        	lda (z80_hl),y 				; get sprite type.
001588  3  C5 63        	cmp z80_b				; is it the type we seek?
00158A  3  F0 1D        	beq coltyp				; yes, we can use this one.
00158C  3               sktyp1:
00158C  3  18           	clc
00158D  3  A5 rr        	lda skptr				; retrieve sprite pointer.
00158F  3  69 11        	adc #TABSIZ				; size of each entry.
001591  3  85 66        	sta z80_l
001593  3  A5 rr        	lda skptr+1
001595  3  69 00        	adc #0
001597  3  85 67        	sta z80_h
001599  3  C6 rr        	dec sktptr					; one less iteration.
00159B  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
00159D  3  A9 00        	lda #0					; default to ROM address - no sprite.
00159F  3  85 66        	sta z80_l
0015A1  3  85 67        	sta z80_h
0015A3  3  85 rr        	sta skptr				; store pointer to sprite.
0015A5  3  85 rr        	sta skptr+1
0015A7  3               
0015A7  3  18           	clc					; don't return with zero flag set.
0015A8  3  60           	rts 					; didn't find one.
0015A9  3               
0015A9  3               ;skptr:	.word 0					; search pointer.
0015A9  3               ;sktptr:	.byte 0
0015A9  3               
0015A9  3               coltyp:
0015A9  3  A0 00        	ldy #0
0015AB  3  B1 68        	lda (z80_ix),y				; current sprite type.
0015AD  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0015AF  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0015B1  3               colty0:
0015B1  3  A0 09        	ldy #9					; distance to x position in table.
0015B3  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0015B5  3  85 64        	sta z80_e
0015B7  3  88           	dey
0015B8  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0015BA  3  85 65        	sta z80_d
0015BC  3               
0015BC  3               ; Drop into collision detection.
0015BC  3               
0015BC  3               colc16:
0015BC  3  A0 09        	ldy #9
0015BE  3  B1 68        	lda (z80_ix),y			 	; x coord.
0015C0  3  38           	sec					; subtract x.
0015C1  3  E5 64        	sbc z80_e
0015C3  3  B0 05        	bcs  colc1a 				; result is positive.
0015C5  3  49 FF        	eor #$ff				; make negative positive.
0015C7  3  18           	clc
0015C8  3  69 01        	adc #1
0015CA  3               colc1a:
0015CA  3  C9 10        	cmp #16 				; within x range?
0015CC  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0015CE  3  85 62        	sta z80_c				; store difference.
0015D0  3               
0015D0  3  A0 08        	ldy #8
0015D2  3  B1 68        	lda (z80_ix),y				; y coord.
0015D4  3  38           	sec
0015D5  3  E5 65        	sbc z80_d				; subtract y.
0015D7  3  B0 05        	bcs colc1b				; result is positive.
0015D9  3  49 FF        	eor #$ff				; make negative positive.
0015DB  3  18           	clc
0015DC  3  69 01        	adc #1
0015DE  3               colc1b:
0015DE  3  C9 10        	cmp #16					; within y range?
0015E0  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0015E2  3  18           	clc					; add x difference.
0015E3  3  65 62        	adc z80_c
0015E5  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0015E7  3  B0 02        	bcs :+
0015E9  3  38           	sec
0015EA  3  60           	rts 					; carry set if there's a collision.
0015EB  3               :
0015EB  3  4C 8C 15     	jmp sktyp1				; try next sprite in table.
0015EE  3               colty1:
0015EE  3  A5 68        	lda z80_x  				; compare the two.
0015F0  3  C5 66        	cmp z80_l
0015F2  3  D0 09        	bne end_col
0015F4  3  A5 69        	lda z80_i
0015F6  3  C5 67        	cmp z80_h
0015F8  3  D0 03        	bne end_col
0015FA  3  4C 8C 15     	jmp sktyp1 				; addresses are identical.
0015FD  3               end_col:
0015FD  3  4C B1 15     	jmp colty0
001600  3               
001600  3               ;-----------------------------------------------------------
001600  3               ; Display number, left aligned
001600  3               ;
001600  3               ; Input:
001600  3               ;  a		= number
001600  3               ;
001600  3               ; global:	-
001600  3               ; local:	a,y,bc,hl,displ0
001600  3               ; calls:	num2ch,dmsg3
001600  3               ;-----------------------------------------------------------
001600  3               
001600  3               disply:
001600  3  85 61        	sta z80_a
001602  3  A9 28        	lda #<displ0				; display workspace.
001604  3  85 62        	sta z80_c
001606  3  A9 16        	lda #>displ0
001608  3  85 63        	sta z80_b
00160A  3  A5 61        	lda z80_a
00160C  3  20 FA 07     	jsr num2ch				; convert accumulator to string.
00160F  3               displ1:
00160F  3  C6 62        	dec z80_c				; back one character.
001611  3  D0 02        	bne :+
001613  3  C6 63        	dec z80_b
001615  3               :
001615  3  A0 00        	ldy #0
001617  3  B1 62        	lda (z80_bc),y				; fetch digit.
001619  3  09 80        	ora #128				; insert end marker.
00161B  3  91 62        	sta (z80_bc),y				; new value.
00161D  3               
00161D  3  A9 28        	lda #<displ0				; display space.
00161F  3  85 66        	sta z80_l
001621  3  A9 16        	lda #>displ0
001623  3  85 67        	sta z80_h
001625  3  4C D0 10     	jmp dmsg3				; display the string.
001628  3               
001628  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
00162C  3               
00162C  3               ;----------------------------------------------------------------
00162C  3               ; Initialise screen.
00162C  3               ;
00162C  3               ; global:	roomtb,scno
00162C  3               ; local:	-
00162C  3               ; calls:	tstcs
00162C  3               ;----------------------------------------------------------------
00162C  3               
00162C  3               initsc:
00162C  3  AD 44 1A     	lda roomtb 			; whereabouts in the map are we?
00162F  3  20 39 16     	jsr tstsc 			; find displacement.
001632  3  C9 FF        	cmp #255 			; is it valid?
001634  3  F0 02        	beq init_end 			; no, it's rubbish.
001636  3  85 rr        	sta scno			; store new room number.
001638  3               init_end:
001638  3  60           	rts
001639  3               
001639  3               ;----------------------------------------------------------------
001639  3               ; Test screen.
001639  3               ;
001639  3               ; global:	-
001639  3               ; local:	x
001639  3               ; calls:	-
001639  3               ;----------------------------------------------------------------
001639  3               
001639  3               tstsc:
001639  3  85 rr        	sta tmproom
00163B  3  18           	clc
00163C  3  69 09        	adc #MAPWID 			; add width in case we"re negative.
00163E  3  AA           	tax 				; add displacement to map data.
00163F  3  BD 6F 1A     	lda mapdat-MAPWID,x 		; find room number there.
001642  3  60           	rts
001643  3               
001643  3               ;tmproom:	.byte 0
001643  3               
001643  3               ;--------------------------
001643  3               ; Screen left.
001643  3               ;--------------------------
001643  3               
001643  3               scrl:
001643  3  AD 44 1A     	lda roomtb 			; present room table pointer.
001646  3  38           	sec
001647  3  E9 01        	sbc #1				; room left.
001649  3               scrl0:
001649  3  20 39 16     	jsr tstsc			; test screen.
00164C  3  C9 FF        	cmp #255			; is there a screen this way?
00164E  3  D0 01        	bne :+
001650  3  60           	rts				; no, return to loop.
001651  3               :
001651  3  A5 rr        	lda tmproom			; restore room displacement.
001653  3  8D 44 1A     	sta roomtb			; new room table position.
001656  3               scrl1:
001656  3  20 2C 16     	jsr initsc 			; set new screen.
001659  3  A9 02        	lda #2
00165B  3  85 rr        	sta restfl 			; set it.
00165D  3  60           	rts
00165E  3               scrr:
00165E  3  AD 44 1A     	lda roomtb 			; room table pointer.
001661  3  18           	clc
001662  3  69 01        	adc #1				; room right.
001664  3  4C 49 16     	jmp scrl0
001667  3               scru:
001667  3  AD 44 1A     	lda roomtb 			; room table pointer.
00166A  3  38           	sec
00166B  3  E9 09        	sbc #MAPWID 			; room up.
00166D  3  4C 49 16     	jmp scrl0
001670  3               scrd:
001670  3  AD 44 1A     	lda roomtb 			; room table pointer.
001673  3  18           	clc
001674  3  69 09        	adc #MAPWID 			; room down.
001676  3  4C 49 16     	jmp scrl0
001679  3               
001679  3               ;-----------------------------------------
001679  3               ; Jump to new screen.
001679  3               ;-----------------------------------------
001679  3               
001679  3               nwscr:
001679  3  A2 00        	ldx #0				; start of map data.
00167B  3               nwscr0:
00167B  3  DD 78 1A     	cmp mapdat,x
00167E  3  F0 06        	beq nwscr1			; have we found a match for screen?
001680  3  E8           	inx 				; next room.
001681  3  E0 50        	cpx #80				; zero room count, 80 to search.
001683  3  D0 F6        	bne nwscr0			; keep looking.
001685  3  60           	rts
001686  3               nwscr1:
001686  3  8E 44 1A     	stx roomtb			; set the map position.
001689  3  4C 56 16     	jmp scrl1			; draw new room.
00168C  3               
00168C  3               
00168C  3               ;----------------------------------------------------------
00168C  3               ; Gravity processing.
00168C  3               ;----------------------------------------------------------
00168C  3               
00168C  3               grav:
00168C  3  A0 0D        	ldy #13
00168E  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001690  3  85 66        	sta z80_l
001692  3  A0 0E        	ldy #14
001694  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001696  3  85 67        	sta z80_h
001698  3  05 66        	ora z80_l			; merge in low byte.
00169A  3  D0 01        	bne :+
00169C  3  60           	rts				; if neither is set, we're not in the air.
00169D  3               :
00169D  3  A0 00        	ldy #0
00169F  3  B1 66        	lda (z80_hl),y			; pixels to move.
0016A1  3  85 61        	sta z80_a
0016A3  3  C9 63        	cmp #99				; reached the end?
0016A5  3  D0 0C        	bne grav0			; no, continue.
0016A7  3               grav2:
0016A7  3  C6 66        	dec z80_l			; go back to previous value.
0016A9  3  C9 FF        	cmp #$ff
0016AB  3  D0 02        	bne :+
0016AD  3  C6 67        	dec z80_h
0016AF  3               :
0016AF  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0016B1  3  85 61        	sta z80_a
0016B3  3               grav0:
0016B3  3  E6 66        	inc z80_l			; point to next table entry.
0016B5  3  D0 02        	bne :+
0016B7  3  E6 67        	inc z80_h
0016B9  3               :
0016B9  3  A5 66        	lda z80_l
0016BB  3  A0 0D        	ldy #13
0016BD  3  91 68        	sta (z80_ix),y			; store new pointer low.
0016BF  3  A5 67        	lda z80_h
0016C1  3  A0 0E        	ldy #14
0016C3  3  91 68        	sta (z80_ix),y			; store new pointer high.
0016C5  3               grav1:
0016C5  3  A5 61        	lda z80_a
0016C7  3  D0 01        	bne :+				; any movement required?
0016C9  3  60           	rts				; no, not this time.
0016CA  3               :
0016CA  3  A5 61        	lda z80_a
0016CC  3  C9 80        	cmp #128			; is it up or down?
0016CE  3  B0 15        	bcs gravu			; it's up.
0016D0  3               gravd:
0016D0  3  85 63        	sta z80_b			; set pixels to move.
0016D2  3               gravd0:
0016D2  3  20 08 0E     	jsr cangd			; can we go down?
0016D5  3  D0 28        	bne gravst			; can't move down, so stop.
0016D7  3  A0 08        	ldy #8
0016D9  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0016DB  3  18           	clc
0016DC  3  69 01        	adc #1
0016DE  3  91 68        	sta (z80_ix),y
0016E0  3  C6 63        	dec z80_b
0016E2  3  D0 EE        	bne gravd0
0016E4  3  60           	rts
0016E5  3               gravu:
0016E5  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0016E7  3  18           	clc
0016E8  3  69 01        	adc #1
0016EA  3  85 63        	sta z80_b			; set pixels to move.
0016EC  3               gravu0:
0016EC  3  20 D3 0D     	jsr cangu			; can we go up?
0016EF  3  D0 6E        	bne ifalls			; can't move up, go down next.
0016F1  3  A0 08        	ldy #8
0016F3  3  B1 68        	lda (z80_ix),y
0016F5  3  38           	sec
0016F6  3  E9 01        	sbc #1
0016F8  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0016FA  3  C6 63        	dec z80_b
0016FC  3  D0 EE        	bne gravu0
0016FE  3  60           	rts
0016FF  3               gravst:
0016FF  3  A0 0D        	ldy #13
001701  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001703  3  85 66        	sta z80_l
001705  3  A0 0E        	ldy #14
001707  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001709  3  85 67        	sta z80_h
00170B  3               
00170B  3  A9 00        	lda #0				; null value in pointer.
00170D  3  A0 0D        	ldy #13
00170F  3  91 68        	sta (z80_ix),y			; store new pointer low.
001711  3  C8           	iny
001712  3  91 68        	sta (z80_ix),y			; store new pointer high.
001714  3               
001714  3  A0 00        	ldy #0
001716  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
001718  3  C9 63        	cmp #99				; is it the end marker?
00171A  3               evftf:
00171A  3  F0 01        	beq :+				; yes, fallen too far.
00171C  3  60           	rts
00171D  3               :
00171D  3  4C FB 24     	jmp evnt15			; EVENT FELLTOOFAR
001720  3               
001720  3               ;------------------------------------------------
001720  3               ; Initiate fall check.
001720  3               ;------------------------------------------------
001720  3               
001720  3               ifall:
001720  3  A0 0D        	ldy #13
001722  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
001724  3  85 66        	sta z80_l
001726  3  A0 0E        	ldy #14
001728  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
00172A  3  85 67        	sta z80_h			; high byte in accumulator.
00172C  3  05 66        	ora z80_l			; merge in low byte.
00172E  3  F0 01        	beq :+
001730  3  60           	rts				; if either is set, we're already in the air.
001731  3               :
001731  3  A0 09        	ldy #9
001733  3  B1 68        	lda (z80_ix),y			; y coordinate.
001735  3  85 rr        	sta dispx
001737  3  A0 08        	ldy #8
001739  3  B1 68        	lda (z80_ix),y			; look x coordinate.
00173B  3  18           	clc
00173C  3               numsp7:
00173C  3  69 10        	adc #SPR_HGT			; add 16 pixels.
00173E  3  85 rr        	sta dispy			; set up test coordinates.
001740  3  20 6D 0F     	jsr tstbl			; get map address.
001743  3  20 9A 0E     	jsr plchk			; block, platform check.
001746  3  F0 01        	beq :+
001748  3  60           	rts				; it's solid, don't fall.
001749  3               :
001749  3  E6 rr        	inc bufaddr			; look right one cell.
00174B  3  20 9A 0E     	jsr plchk			; block, platform check.
00174E  3  F0 01        	beq :+
001750  3  60           	rts				; it's solid, don't fall.
001751  3               :
001751  3  A5 rr        	lda dispx			; y coordinate.
001753  3  29 07        	and #7				; position straddling block cells.
001755  3  F0 08        	beq ifalls			; no more checks needed.
001757  3  E6 rr        	inc bufaddr			; look to third cell.
001759  3  20 9A 0E     	jsr plchk			; block, platform check.
00175C  3  F0 01        	beq :+
00175E  3  60           	rts				; it's solid, don't fall.
00175F  3               :
00175F  3               ifalls:
00175F  3  A9 68        	lda #<jtab			; jump table start.
001761  3  85 66        	sta z80_l
001763  3  A9 66        	lda #>jtab
001765  3  85 67        	sta z80_h
001767  3               ifal0:
001767  3  E6 66        	inc z80_l			; point to next value.
001769  3  D0 02        	bne :+
00176B  3  E6 67        	inc z80_h
00176D  3               :
00176D  3  A0 00        	ldy #0
00176F  3  B1 66        	lda (z80_hl),y			; fetch value.
001771  3  F0 F4        	beq ifal0			; no, get next value.
001773  3  C9 63        	cmp #99				; reached end of table?
001775  3  D0 01        	bne :+
001777  3  60           	rts				; yes, don't fall.
001778  3               :
001778  3  C9 80        	cmp #128			; is it going up?
00177A  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
00177C  3               
00177C  3  A0 0D        	ldy #13
00177E  3  A5 66        	lda z80_l
001780  3  91 68        	sta (z80_ix),y 			; set jump low.
001782  3  A0 0E        	ldy #14
001784  3  A5 67        	lda z80_h
001786  3  91 68        	sta (z80_ix),y 			; set jump high.
001788  3  60           	rts
001789  3               
001789  3               
001789  3               ;----------------------------------------------------
001789  3               ; Get frame data for a particular sprite.
001789  3               ; Input:
001789  3               ;  a		= framenumer
001789  3               ; Output:
001789  3               ;  hl		= frame address
001789  3               ;
001789  3               ; global:	hl,frmptr
001789  3               ; local:	-
001789  3               ; calls:	-
001789  3               ;----------------------------------------------------
001789  3               
001789  3               gfrm:
001789  3  0A           	asl a	 		 	; multiple of 2.
00178A  3  18           	clc
00178B  3  6D 1C 03     	adc frmptr 			; frames used by game.
00178E  3  85 66        	sta z80_l
001790  3  AD 1D 03     	lda frmptr+1
001793  3  69 00        	adc #0
001795  3  85 67        	sta z80_h 			; point to frame start.
001797  3  60           	rts
001798  3               
001798  3               ;----------------------------------------------------
001798  3               ; Find sprite list for current room.
001798  3               ;
001798  3               ; global:	hl
001798  3               ; local:	x,y
001798  3               ; calls:	-
001798  3               ;----------------------------------------------------
001798  3               
001798  3               sprlst:
001798  3  A9 1A        	lda #<nmedat 			; list of enemy sprites.
00179A  3  85 66        	sta z80_l
00179C  3  A9 5E        	lda #>nmedat
00179E  3  85 67        	sta z80_h
0017A0  3  A6 rr        	ldx scno 			; screen number.
0017A2  3  D0 01        	bne sprls2 			; is it the first screen?
0017A4  3  60           	rts 				; yes, don't need to search data.
0017A5  3               sprls2:
0017A5  3  A0 00        	ldy #0
0017A7  3               sprls1:
0017A7  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0017A9  3  C9 FF        	cmp #255			; is it an end marker?
0017AB  3  F0 0E        	beq sprls0 			; yes, end of this room.
0017AD  3               
0017AD  3  18           	clc 				; point to next sprite in list.
0017AE  3  A5 66        	lda z80_l
0017B0  3  69 04        	adc #NMESIZ
0017B2  3  85 66        	sta z80_l
0017B4  3  90 02        	bcc :+
0017B6  3  E6 67        	inc z80_h
0017B8  3               :
0017B8  3  4C A7 17     	jmp sprls1 			; continue until end of room.
0017BB  3               sprls0:
0017BB  3  E6 66        	inc z80_l 			; point to start of next screen.s
0017BD  3  D0 02        	bne :+
0017BF  3  E6 67        	inc z80_h
0017C1  3               :
0017C1  3  CA           	dex
0017C2  3  D0 E3        	bne sprls1 			; continue until room found.
0017C4  3  60           	rts
0017C5  3               
0017C5  3               
0017C5  3               ;----------------------------------------------------
0017C5  3               ; Clear all but a single player sprite.
0017C5  3               ;
0017C5  3               ; global:	-
0017C5  3               ; local:	x,y,ix
0017C5  3               ; calls:	-
0017C5  3               ;----------------------------------------------------
0017C5  3               
0017C5  3               nspr:
0017C5  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0017C7  3  85 rr        	sta sprcnt
0017C9  3  A9 67        	lda #<sprtab 			; sprite table.
0017CB  3  85 68        	sta z80_x
0017CD  3  A9 19        	lda #>sprtab
0017CF  3  85 69        	sta z80_i
0017D1  3               nspr0:
0017D1  3  A0 00        	ldy #0 				; fetch sprite type.
0017D3  3  B1 68        	lda (z80_ix),y 			; is it a player?
0017D5  3  F0 1A        	beq nspr1 			; yes, keep this one.
0017D7  3               
0017D7  3  A9 FF        	lda #255
0017D9  3  A0 00        	ldy #0 				; fetch sprite type.
0017DB  3  91 68        	sta (z80_ix),y 			; delete sprite.
0017DD  3  A0 05        	ldy #5
0017DF  3  91 68        	sta (z80_ix),y 			; remove next type.
0017E1  3               
0017E1  3  18           	clc	 			; next sprite.
0017E2  3  A5 68        	lda z80_x
0017E4  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0017E6  3  85 68        	sta z80_x
0017E8  3  90 02        	bcc :+
0017EA  3  E6 69        	inc z80_i
0017EC  3               :
0017EC  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0017EE  3  D0 E1        	bne nspr0
0017F0  3  60           	rts
0017F1  3               nspr1:
0017F1  3  A9 FF        	lda #255
0017F3  3  A0 00        	ldy #0
0017F5  3  91 68        	sta (z80_ix),y 			; delete sprite.
0017F7  3               
0017F7  3  18           	clc	 			; point to next sprite.
0017F8  3  A5 68        	lda z80_x
0017FA  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0017FC  3  85 68        	sta z80_x
0017FE  3  90 02        	bcc :+
001800  3  E6 69        	inc z80_i
001802  3               :
001802  3  C6 rr        	dec sprcnt	 			; one less to do.
001804  3  D0 01        	bne nspr2
001806  3  60           	rts
001807  3               nspr2:
001807  3  A9 FF        	lda #255
001809  3  A0 00        	ldy #0
00180B  3  91 68        	sta (z80_ix),y 			; delete sprite.
00180D  3  A0 05        	ldy #5
00180F  3  91 68        	sta (z80_ix),y 			; remove next type.
001811  3               
001811  3  18           	clc	 			; next sprite.
001812  3  A5 68        	lda z80_x
001814  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001816  3  85 68        	sta z80_x
001818  3  90 02        	bcc :+
00181A  3  E6 69        	inc z80_i
00181C  3               :
00181C  3  C6 rr        	dec sprcnt	 			; one less space in table.
00181E  3  D0 E7        	bne nspr2
001820  3  60           	rts
001821  3               
001821  3               ;----------------------------------------------------------
001821  3               ; Two initialisation routines.
001821  3               ; Initialise sprites - copy everything from list to table.
001821  3               ;
001821  3               ; global:	-
001821  3               ; local:	x,y,ix
001821  3               ; calls:	cpsp
001821  3               ;----------------------------------------------------------
001821  3               
001821  3               ispr:
001821  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001823  3  85 rr        	sta sprcnt
001825  3  A9 67        	lda #<sprtab			; sprite table.
001827  3  85 68        	sta z80_x
001829  3  A9 19        	lda #>sprtab
00182B  3  85 69        	sta z80_i
00182D  3               ispr2:
00182D  3  A0 00        	ldy #0
00182F  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001831  3  C9 FF        	cmp #255 			; is it an end marker?
001833  3  D0 01        	bne :+
001835  3  60           	rts 				; yes, no more to do.
001836  3               :
001836  3               ispr1:
001836  3  A0 00        	ldy #0
001838  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
00183A  3  C9 FF        	cmp #255 			; is it enabled yet?
00183C  3  D0 08        	bne ispr4			; yes, try another slot.
00183E  3               
00183E  3  A0 05        	ldy #5
001840  3  B1 68        	lda (z80_ix),y		 	; next type.
001842  3  C9 FF        	cmp #255 			; is it enabled yet?
001844  3  F0 10        	beq ispr3 			; no, process this one.
001846  3               ispr4:
001846  3  18           	clc 				; next sprite.
001847  3  A5 68        	lda z80_x
001849  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00184B  3  85 68        	sta z80_x
00184D  3  90 02        	bcc :+
00184F  3  E6 69        	inc z80_i
001851  3               :
001851  3  C6 rr        	dec sprcnt
001853  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
001855  3  60           	rts  				; no more room in table.
001856  3               ispr3:
001856  3  20 A9 18     	jsr cpsp			; initialise a sprite.
001859  3  C6 rr        	dec sprcnt			; one less space in the table.
00185B  3  D0 D0        	bne ispr2
00185D  3  60           	rts
00185E  3               
00185E  3               
00185E  3               ;-----------------------------------------------------------------------
00185E  3               ; Initialise sprites - but not player, we're keeping the old one.
00185E  3               ;
00185E  3               ; global:	-
00185E  3               ; local:	x,y,ix
00185E  3               ; calls:	cpsp
00185E  3               ;-----------------------------------------------------------------------
00185E  3               
00185E  3               kspr:
00185E  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
001860  3  A9 67        	lda #<sprtab 			; sprite table.
001862  3  85 68        	sta z80_x
001864  3  A9 19        	lda #>sprtab
001866  3  85 69        	sta z80_i
001868  3               kspr2:
001868  3  A0 00        	ldy #0
00186A  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00186C  3  C9 FF        	cmp #255 			; is it an end marker?
00186E  3  D0 01        	bne :+
001870  3  60           	rts 				; yes, no more to do.
001871  3               :
001871  3  C9 00        	cmp #0
001873  3  D0 0E        	bne kspr1 			; no, add to table as normal.
001875  3               
001875  3  18           	clc 				; next sprite.
001876  3  A5 66        	lda z80_l
001878  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00187A  3  85 66        	sta z80_l
00187C  3  90 02        	bcc :+
00187E  3  E6 67        	inc z80_h
001880  3               :
001880  3  4C 68 18     	jmp kspr2
001883  3               kspr1:
001883  3  A0 00        	ldy #0 				; fetch sprite type.
001885  3  B1 68        	lda (z80_ix),y
001887  3  C9 FF        	cmp #255 			; is it enabled yet?
001889  3  D0 08        	bne kspr4 			; yes, try another slot.
00188B  3               
00188B  3  A0 05        	ldy #5 				; next type.
00188D  3  B1 68        	lda (z80_ix),y
00188F  3  C9 FF        	cmp #255 			; is it enabled yet?
001891  3  F0 0F        	beq kspr3 			; no, process this one.
001893  3               kspr4:
001893  3  18           	clc 				; next sprite.
001894  3  A5 68        	lda z80_x
001896  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001898  3  85 68        	sta z80_x
00189A  3  90 02        	bcc :+
00189C  3  E6 69        	inc z80_i
00189E  3               :
00189E  3  CA           	dex	 			; repeat for remaining sprites.
00189F  3  D0 E2        	bne kspr1
0018A1  3  60           	rts  				; no more room in table.
0018A2  3               kspr3:
0018A2  3  20 A9 18     	jsr cpsp 			; copy sprite to table.
0018A5  3  CA           	dex	 			; one less space in the table.
0018A6  3  D0 C0        	bne kspr2
0018A8  3  60           	rts
0018A9  3               
0018A9  3               ;----------------------------------------------
0018A9  3               ; Copy sprite from list to table.
0018A9  3               ;
0018A9  3               ; global:	hl,ix
0018A9  3               ; local:	y
0018A9  3               ; calls:	evnt09
0018A9  3               ;----------------------------------------------
0018A9  3               
0018A9  3               cpsp:
0018A9  3  A0 00        	ldy #0				; fetch byte from table.
0018AB  3  B1 66        	lda (z80_hl),y
0018AD  3  91 68        	sta (z80_ix),y			; set up type.
0018AF  3  A0 05        	ldy #PAM1ST
0018B1  3  91 68        	sta (z80_ix),y 			; set up type.
0018B3  3               
0018B3  3  E6 66        	inc z80_l 			; move to next byte.
0018B5  3  D0 02        	bne :+
0018B7  3  E6 67        	inc z80_h
0018B9  3               :
0018B9  3  A0 00        	ldy #0 				; fetch byte from table.
0018BB  3  B1 66        	lda (z80_hl),y
0018BD  3  A0 06        	ldy #6
0018BF  3  91 68        	sta (z80_ix),y			; set up image.
0018C1  3               
0018C1  3  E6 66        	inc z80_l 			; move to next byte.
0018C3  3  D0 02        	bne :+
0018C5  3  E6 67        	inc z80_h
0018C7  3               :
0018C7  3  A0 00        	ldy #0
0018C9  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0018CB  3  A0 08        	ldy #8
0018CD  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0018CF  3               
0018CF  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0018D1  3  A0 03        	ldy #3
0018D3  3  91 68        	sta (z80_ix),y
0018D5  3               
0018D5  3  E6 66        	inc z80_l 			; move to next byte.
0018D7  3  D0 02        	bne :+
0018D9  3  E6 67        	inc z80_h
0018DB  3               :
0018DB  3  A0 00        	ldy #0 				; fetch byte from table.
0018DD  3  B1 66        	lda (z80_hl),y
0018DF  3  A0 09        	ldy #9
0018E1  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0018E3  3               
0018E3  3  E6 66        	inc z80_l 			; move to next byte.
0018E5  3  D0 02        	bne :+
0018E7  3  E6 67        	inc z80_h
0018E9  3               :
0018E9  3  A9 00        	lda #0				; zeroes in accumulator.
0018EB  3  A0 07        	ldy #7 				; reset frame number.
0018ED  3  91 68        	sta (z80_ix),y
0018EF  3  A0 0A        	ldy #10 			; reset direction.
0018F1  3  91 68        	sta (z80_ix),y
0018F3  3  A0 0D        	ldy #13				; reset jump pointer low.
0018F5  3  91 68        	sta (z80_ix),y
0018F7  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0018F9  3  91 68        	sta (z80_ix),y
0018FB  3               
0018FB  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0018FD  3  A0 10        	ldy #16
0018FF  3  91 68        	sta (z80_ix),y
001901  3               evis0:
001901  3  A5 69        	lda z80_i
001903  3  48           	pha
001904  3  A5 68        	lda z80_x
001906  3  48           	pha
001907  3  A5 67        	lda z80_h
001909  3  48           	pha
00190A  3  A5 66        	lda z80_l
00190C  3  48           	pha
00190D  3               
00190D  3  20 54 20     	jsr evnt09 			; perform event.
001910  3               
001910  3  68           	pla
001911  3  85 66        	sta z80_l
001913  3  68           	pla
001914  3  85 67        	sta z80_h
001916  3  68           	pla
001917  3  85 68        	sta z80_x
001919  3  68           	pla
00191A  3  85 69        	sta z80_i
00191C  3               
00191C  3  18           	clc
00191D  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
00191F  3  69 11        	adc #TABSIZ		 	; next sprite.
001921  3  85 68        	sta z80_x
001923  3  90 02        	bcc :+
001925  3  E6 69        	inc z80_i
001927  3               :
001927  3  60           	rts
001928  3               
001928  3               
001928  3               ;-------------------------------------
001928  3               ; Clear the play area window.
001928  3               ;-------------------------------------
001928  3               
001928  3               clw:
001928  3  AD 28 03     	lda wintop			; get coordinates of window.
00192B  3  85 rr        	sta dispy			; put into dispx for calculation.
00192D  3  AD 29 03     	lda winlft
001930  3  85 rr        	sta dispx
001932  3               
001932  3  AD 2A 03     	lda winhgt			; height of window.
001935  3  85 rr        	sta rrow			; copy to b register.
001937  3               clw3:
001937  3  AD 2B 03     	lda winwid 			; width of window.
00193A  3  85 rr        	sta rcol
00193C  3               clw2:
00193C  3  20 B2 0B     	jsr gprad 			; get print address.
00193F  3  A9 00        	lda #0				; zero byte to write.
001941  3  A2 07        	ldx #7				; pixel height of each cell.
001943  3               clw1:
001943  3  BC 3E 0C     	ldy scrtab,x
001946  3  91 rr        	sta (scraddr),y 			; copy to screen.
001948  3  CA           	dex				; next screen row down.
001949  3  10 F8        	bpl clw1
00194B  3               
00194B  3  E6 rr        	inc dispx			; next column.
00194D  3  C6 rr        	dec rcol			; one less to do.
00194F  3  D0 EB        	bne clw2			; repeat for remaining columns.
001951  3               
001951  3  AD 29 03     	lda winlft			; get left edge.
001954  3  85 rr        	sta dispx 			; reset x.
001956  3  E6 rr        	inc dispy 			; next line down.
001958  3               
001958  3  C6 rr        	dec rrow
00195A  3  D0 DB        	bne clw3			; repeat down the screen.
00195C  3               
00195C  3  AD 28 03     	lda wintop			; get coordinates of window.
00195F  3  85 rr        	sta chary			; put into display position.
001961  3  AD 29 03     	lda winlft
001964  3  85 rr        	sta charx
001966  3  60           	rts
001967  3               
001967  3               
001967  3               ;----------------------------------------------------------
001967  3               ; Effects code.
001967  3               ; Ticker routine is called 25 times per second.
001967  3               ;
001967  3               ; HL = txtscr = left text screen address
001967  3               ; DE = txtscr+txtwid-1 = right text screen address
001967  3               ; BC = txtpos = text scroller position
001967  3               ;
001967  3               ;----------------------------------------------------------
001967  3               
001967  3               .if sflag
001967  3               scrly:
001967  3               	rts
001967  3               	.word txtscr         	; get left screen address.
001967  3               	sta scr_l
001967  3               	lda txtscr+1
001967  3               	sta scr_l+1
001967  3               	sta scr_r+1
001967  3               
001967  3               	stx xtmp
001967  3               
001967  3               	clc         		; get right screen address.
001967  3               	lda scr_l
001967  3               	adc txtwid
001967  3               	sta scr_r
001967  3               	dec scr_r
001967  3               scrly1:
001967  3               	ldy txtwid		; set txtwide
001967  3               	dey
001967  3               	clc
001967  3               scrly0:
001967  3               	lda (scr_l),y		; scroll 1 line
001967  3               	rol a
001967  3               	sta (scr_l),y
001967  3               	dey
001967  3               	bpl scrly0
001967  3               
001967  3               	clc			; point to next line
001967  3               	lda scr_l
001967  3               	adc #32
001967  3               	sta scr_l
001967  3               	bcc scrly1		; repeat 8 times
001967  3               
001967  3               	lda txtpos 		; get text pointer.
001967  3               	sta scr_txt
001967  3               	lda txtpos+1
001967  3               	sta scr_txt+1
001967  3               
001967  3               	ldy #0
001967  3               	lda (scr_txt),y 		; find character we're displaying.
001967  3               	and #127 		; remove end marker bit if applicable.
001967  3               	cmp #13			; is it newline?
001967  3               	bne scrly5 		; no, it's okay.
001967  3               	lda #32			; convert to a space instead.
001967  3               scrly5:
001967  3               	sta fntaddr		; calculate char address
001967  3               	lda #0
001967  3               	sta fntaddr+1
001967  3               	asl fntaddr  		; multiply char by 8.
001967  3               	rol fntaddr+1
001967  3               	asl fntaddr
001967  3               	rol fntaddr+1
001967  3               	asl fntaddr
001967  3               	rol fntaddr+1
001967  3               	lda fntaddr
001967  3               	clc
001967  3               	adc #<(FONT-256)
001967  3               	sta scrly3+1		; that's the low byte.
001967  3               	lda fntaddr+1
001967  3               	adc #>(FONT-256)
001967  3               	sta scrly3+2		; add displacement.
001967  3               
001967  3               	ldx #0
001967  3               scrly3:
001967  3               	lda $3333,x		; get image of char line.
001967  3               	and txtbit
001967  3               	beq scrly2		; don't plot pixel
001967  3               	ldy scrline,x
001967  3               	lda (scr_r),y
001967  3               	clc
001967  3               	ora #1
001967  3               	sta (scr_r),y		; plot pixel
001967  3               scrly2:
001967  3               	inx			; next line of char.
001967  3               	cpx #8
001967  3               	bne scrly3
001967  3               
001967  3               	lsr txtbit		; bit of text to display.
001967  3               	bcs :+
001967  3               	rts
001967  3               :
001967  3               	ldy #0
001967  3               	lda (scr_txt),y 	; what was the character?
001967  3               	asl a	  		; end of message?
001967  3               	bcs scrly4
001967  3               	inc txtpos
001967  3               	bne :+
001967  3               	inc txtpos+1
001967  3               :
001967  3               	jmp scrly6 		; not yet - continue.
001967  3               scrly4:
001967  3               	lda txtini 		; start of scrolling message.
001967  3               	sta txtpos
001967  3               	lda txtini+1
001967  3               	sta txtpos+1
001967  3               scrly6:
001967  3               	lda #128
001967  3               	sta txtbit
001967  3               	ldx xtmp
001967  3               	rts
001967  3               
001967  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
001967  3               
001967  3               ;-------------------------------------------------------
001967  3               ; Entry TICKER command
001967  3               ;
001967  3               ; Entry:
001967  3               ;  z80_b = message nr
001967  3               ;  z80_c = width
001967  3               ;-------------------------------------------------------
001967  3               
001967  3               iscrly:
001967  3               	jsr prescr 		; set up display position.
001967  3               
001967  3               	lda #<msgdat 		; text messages.
001967  3               	sta z80_l
001967  3               	lda #>msgdat
001967  3               	sta z80_h
001967  3               
001967  3               	lda z80_c 		; width.
001967  3               	sec
001967  3               	sbc #1			; subtract one.
001967  3               	cmp #32 		; is it between 1 and 32?
001967  3               	bcc :+
001967  3               	lda #$60
001967  3               	jmp iscrl0		; no, disable messages.
001967  3               :
001967  3               	ldx z80_b		; message number.
001967  3               	jsr getwrd 		; find message start.
001967  3               
001967  3               	lda z80_l		; set initial text position.
001967  3               	sta txtini
001967  3               	lda z80_h
001967  3               	sta txtini+1
001967  3               
001967  3               	lda #$ad		; code for lda adrr
001967  3               iscrl0:
001967  3               	sta scrly		; enable/disable scrolling routine.
001967  3               
001967  3               	jsr prescr 		; set up display position.
001967  3               	jsr gprad 		; get print address.
001967  3               
001967  3               	lda scraddr 		; set text screen address.
001967  3               	sta txtscr
001967  3               	lda scraddr+1
001967  3               	sta txtscr+1
001967  3               
001967  3               	lda z80_c		; width.
001967  3               	sta txtwid		; set width in working storage.
001967  3               
001967  3               	lda #128 		; start with leftmost bit.
001967  3               	sta txtbit
001967  3               
001967  3               	jmp scrly4
001967  3               .endif
001967  3               
001967  3               ;------------------------------------------------------------------
001967  3               ; Dig routine, conditional assembly depending on dflag
001967  3               ;------------------------------------------------------------------
001967  3               .if dflag
001967  3               dig:
001967  3               	and #3
001967  3               	beq digr		; dig right
001967  3               	cmp #1
001967  3               	beq digl		; dig left
001967  3               	cmp #2
001967  3               	beq digd		; dig down
001967  3               
001967  3               ; Dig up.
001967  3               
001967  3               digu:				; dig up
001967  3               	ldy #8
001967  3               	lda (z80_ix),y
001967  3               	sec
001967  3               	sbc #2
001967  3               	sta dispy		; set y
001967  3               
001967  3               	iny
001967  3               	lda (z80_ix),y
001967  3               	sta dispx		; set x
001967  3               	jmp digv
001967  3               
001967  3               ; Dig down.
001967  3               
001967  3               digd:
001967  3               	ldy #9
001967  3               	lda (z80_ix),y
001967  3               	sta dispx		; set y
001967  3               
001967  3               	dey
001967  3               	clc
001967  3               	lda (z80_ix),y
001967  3               	adc #16
001967  3               	sta dispy		; set y
001967  3               	jmp digv
001967  3               
001967  3               ; Dig left.
001967  3               
001967  3               digl:
001967  3               	ldy #8
001967  3               	lda (z80_ix),y
001967  3               	sta dispy		; set y
001967  3               
001967  3               	iny
001967  3               	lda (z80_ix),y
001967  3               	sec
001967  3               	sbc #2			; x=x-2
001967  3               	sta dispx		; set x
001967  3               	jmp digh
001967  3               
001967  3               ; Dig right.
001967  3               
001967  3               digr:
001967  3               	ldy #8
001967  3               	lda (z80_ix),y
001967  3               	sta dispy		; set y
001967  3               
001967  3               	iny
001967  3               	lda (z80_ix),y
001967  3               	clc
001967  3               	adc #16
001967  3               	sta dispx		; set x+16
001967  3               	jmp digh
001967  3               
001967  3               ; Vertical digging
001967  3               
001967  3               digv:
001967  3               	jsr tstbl		; check blocktype in MAP
001967  3               	jsr fdchk		; test if FODDER
001967  3               
001967  3               	clc
001967  3               	lda dispx		; look 1 cell down
001967  3               	adc #8
001967  3               	sta dispx
001967  3               	jsr tstbl		; check blocktype in MAP
001967  3               	jsr fdchk
001967  3               	lda dispx
001967  3               	and #7
001967  3               	bne :+
001967  3               	rts
001967  3               :
001967  3               	clc
001967  3               	lda dispx		; look 1 cell down
001967  3               	adc #8
001967  3               	sta dispx
001967  3               	jsr tstbl		; check blocktype in MAP
001967  3               	jmp fdchk
001967  3               
001967  3               ; Horizontal digging
001967  3               
001967  3               digh:
001967  3               	jsr tstbl		; check blocktype in MAP
001967  3               	jsr fdchk		; test if FODDER
001967  3               
001967  3               	clc
001967  3               	lda dispy		; look 1 cell down
001967  3               	adc #8
001967  3               	sta dispy
001967  3               	jsr tstbl		; check blocktype in MAP
001967  3               	jsr fdchk
001967  3               	lda dispy
001967  3               	and #7
001967  3               	bne :+
001967  3               	rts
001967  3               :
001967  3               	clc
001967  3               	lda dispy		; look 1 cell down
001967  3               	adc #8
001967  3               	sta dispy
001967  3               	jsr tstbl		; check blocktype in MAP
001967  3               	jmp fdchk
001967  3               
001967  3               digcnt:	.byte 0
001967  3               
001967  3               .endif
001967  3               
001967  3               ;------------------------------------------------------------------
001967  3               ; Sprite table
001967  3               ;------------------------------------------------------------------
001967  3               
001967  3               
001967  3               ; ix+0  = type.
001967  3               ; ix+1  = sprite image number.
001967  3               ; ix+2  = frame.
001967  3               ; ix+3  = y coord.
001967  3               ; ix+4  = x coord.
001967  3               
001967  3               ; ix+5  = new type.
001967  3               ; ix+6  = new image number.
001967  3               ; ix+7  = new frame.
001967  3               ; ix+8  = new y coord.
001967  3               ; ix+9  = new x coord.
001967  3               
001967  3               ; ix+10 = direction.
001967  3               ; ix+11 = parameter 1.
001967  3               ; ix+12 = parameter 2.
001967  3               ; ix+13 = jump pointer low.
001967  3               ; ix+14 = jump pointer high.
001967  3               ; ix+15 = data pointer low.
001967  3               ; ix+16 = data pointer high.
001967  3               
001967  3               ; block NUMSPR * TABSIZ,255
001967  3               
001967  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
00196B  3  FF FF FF FF  
00196F  3  FF FF FF FF  
001A33  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
001A37  3  FF FF FF 00  
001A3B  3  C0 78 00 00  
001A44  3  07           roomtb:	.byte 7                      ; start room map offset.
001A45  3               
001A45  3               ; User routine.  Put your own code in here to be called with USER instruction.
001A45  3               ; if USER has an argument it will be passed in the accumulator.
001A45  3               
001A45  3               user:
001A45  3  60           	rts
001A46  3               
001A46  3               ;----------------------------------------------------
001A46  3               ; Missing vars
001A46  3               ;----------------------------------------------------
001A46  3               
001A46  3               MAP 		= $9800			; properties map buffer (3x256 bytes)
001A46  3               SCADTB_lb 	= MAP+3*256		; screen address table lo-byte (256 bytes)
001A46  3               SCADTB_hb 	= SCADTB_lb+256		; screen address table hi-byte (256 bytes)
001A46  3               SHRAPN 		= SCADTB_hb+256		; shrapnel table (55x6 bytes)
001A46  3               
001A46  3               ;Fontpointer:	.byte 0,0
001A46  3               ;TmpAddr:	.byte 0,0
001A46  3               
001A46  3               ;loopa:		.byte 0
001A46  3               ;loopb:		.byte 0
001A46  3               ;loopc:		.byte 0
001A46  3               
001A46  3               setfgcol:
001A46  3  29 03        	and #3
001A48  3  A8           	tay
001A49  3  B9 6B 1A     	lda codcol,y
001A4C  3  4C 62 1A     	jmp calfgc
001A4F  3               
001A4F  3               setbgcol:
001A4F  3  29 03        	and #3
001A51  3               calbgc:
001A51  3  A8           	tay
001A52  3  B9 6B 1A     	lda codcol,y
001A55  3  48           	pha
001A56  3  AD 69 1A     	lda andeor
001A59  3  4D 6A 1A     	eor andeor+1
001A5C  3  AA           	tax
001A5D  3  68           	pla
001A5E  3  8D 6A 1A     	sta andeor+1
001A61  3  8A           	txa
001A62  3               calfgc:
001A62  3  4D 6A 1A     	eor andeor+1
001A65  3  8D 69 1A     	sta andeor
001A68  3               calex1:
001A68  3  60           	rts
001A69  3               
001A69  3  00 00        andeor:	.byte 0,0
001A6B  3  00 55 AA FF  codcol:	.byte $00,$55,$aa,$ff
001A6F  3               
001A6F  3               ; Everything below here will be generated by the editors.
001A6F  3               
001A6F  3               WINDOWTOP = 1
001A6F  3               WINDOWLFT = 1
001A6F  3               WINDOWHGT = 18
001A6F  3               WINDOWWID = 30 ;a
001A6F  3               MAPWID = 9
001A6F  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255
001A73  3  FF FF FF FF  
001A77  3  FF           
001A78  3               mapdat:
001A78  3  FF FF FF FF          .byte 255,255,255,255,0,255,255,255,255,255,255,1,2,3,4,5,255,255,255,6,7,8,9,10,11,255,255,255,12,13,14,15,16,17,18,255,255,19,20,21,255,255,255,255,255
001A7C  3  00 FF FF FF  
001A80  3  FF FF FF 01  
001AA5  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255
001AA9  3  FF FF FF FF  
001AAD  3  FF           
001AAE  3  04           stmap:  .byte 4
001AAF  3               
001AAF  3               evnt00:
001AAF  3  A9 06                lda #CUSTOM	; CUSTOM
001AB1  3  85 63                sta z80_b
001AB3  3  20 B2 0E             jsr tded
001AB6  3  C5 63                cmp z80_b
001AB8  3  F0 03                beq :+
001ABA  3  4C C4 1A             jmp a00046
001ABD  3               :
001ABD  3  A5 rr                lda varp
001ABF  3  18                   clc
001AC0  3  69 01                adc #1
001AC2  3  85 rr                sta varp
001AC4  3  A9 28        a00046: lda #40
001AC6  3  C5 rr                cmp varp
001AC8  3  90 03                bcc *+5
001ACA  3  4C D1 1A             jmp a00072
001ACD  3  A9 28                lda #40
001ACF  3  85 rr                sta varp
001AD1  3  A5 rr        a00072: lda joyval	; KEY
001AD3  3  29 20                and #32
001AD5  3  F0 03                beq :+
001AD7  3  4C E3 1A             jmp a00111
001ADA  3               :
001ADA  3  A9 03                lda #3		; MENU
001ADC  3  AA                   tax
001ADD  3  20 58 03             jsr mmenu
001AE0  3  20 34 06             jsr redraw	; REDRAW
001AE3  3  A9 FF        a00111: lda #255
001AE5  3  C5 rr                cmp varb
001AE7  3  F0 03                beq *+5
001AE9  3  4C 01 1B             jmp a00173
001AEC  3  A9 FF                lda #255
001AEE  3  C5 rr                cmp varc
001AF0  3  F0 03                beq *+5
001AF2  3  4C 01 1B             jmp a00173
001AF5  3  A0 08                ldy #8
001AF7  3  B1 68                lda (z80_ix),y
001AF9  3  85 rr                sta varb
001AFB  3  A0 09                ldy #9
001AFD  3  B1 68                lda (z80_ix),y
001AFF  3  85 rr                sta varc
001B01  3  A0 0B        a00173: ldy #11
001B03  3  B1 68                lda (z80_ix),y
001B05  3  18                   clc
001B06  3  69 01                adc #1
001B08  3  A0 0B                ldy #11
001B0A  3  91 68                sta (z80_ix),y
001B0C  3  A9 02                lda #2
001B0E  3  A0 0B                ldy #11
001B10  3  D1 68                cmp (z80_ix),y
001B12  3  90 03                bcc *+5
001B14  3  4C 1D 1B             jmp a00235
001B17  3  A9 00                lda #0
001B19  3  A0 0B                ldy #11
001B1B  3  91 68                sta (z80_ix),y
001B1D  3  20 6D 09     a00235: jsr skobj	; DETECTOBJECT
001B20  3  85 rr                sta varobj
001B22  3  A9 03                lda #3
001B24  3  C5 rr                cmp varobj
001B26  3  90 03                bcc *+5
001B28  3  4C 3A 1B             jmp a00297
001B2B  3  A9 0A                lda #10
001B2D  3  C5 rr                cmp varobj
001B2F  3  B0 03                bcs *+5
001B31  3  4C 3A 1B             jmp a00297
001B34  3  A9 5A                lda #90		; BEEP
001B36  3  0A                   asl a
001B37  3  8D 33 06             sta sndtyp
001B3A  3  A9 FF        a00297: lda #255
001B3C  3  C5 rr                cmp varobj
001B3E  3  F0 03                beq *+5
001B40  3  4C 46 1B             jmp a00320
001B43  3  4C 5C 1B             jmp a00369
001B46  3  A5 rr        a00320: lda varobj	; GET
001B48  3  20 EC 08             jsr getob
001B4B  3  A9 0A                lda #<10		; SCORE
001B4D  3  85 66                sta z80_l
001B4F  3  A9 00                lda #>10
001B51  3  85 67                sta z80_h
001B53  3  20 DE 0A             jsr addsc
001B56  3  A9 5A                lda #90		; BEEP
001B58  3  0A                   asl a
001B59  3  8D 33 06             sta sndtyp
001B5C  3  20 20 17     a00369: jsr ifall	; TABLEFALL
001B5F  3  A9 0C                lda #12
001B61  3  A0 08                ldy #8
001B63  3  D1 68                cmp (z80_ix),y
001B65  3  B0 03                bcs *+5
001B67  3  4C 77 1B             jmp a00427
001B6A  3  A9 7E                lda #126
001B6C  3  A0 08                ldy #8
001B6E  3  91 68                sta (z80_ix),y
001B70  3  20 67 16             jsr scru	; SCREENUP
001B73  3  A9 00                lda #0
001B75  3  85 rr                sta vard
001B77  3  A9 84        a00427: lda #132
001B79  3  A0 08                ldy #8
001B7B  3  D1 68                cmp (z80_ix),y
001B7D  3  90 03                bcc *+5
001B7F  3  4C 8F 1B             jmp a00479
001B82  3  A9 0D                lda #13
001B84  3  A0 08                ldy #8
001B86  3  91 68                sta (z80_ix),y
001B88  3  20 70 16             jsr scrd	; SCREENDOWN
001B8B  3  A9 00                lda #0
001B8D  3  85 rr                sta vard
001B8F  3  A5 rr        a00479: lda joyval	; KEY
001B91  3  29 01                and #1
001B93  3  F0 03                beq :+
001B95  3  4C E1 1B             jmp a00663
001B98  3               :
001B98  3  A9 E6                lda #230
001B9A  3  A0 09                ldy #9
001B9C  3  D1 68                cmp (z80_ix),y
001B9E  3  90 03                bcc *+5
001BA0  3  4C B4 1B             jmp a00559
001BA3  3  20 5E 16             jsr scrr	; SCREENRIGHT
001BA6  3  A9 00                lda #0
001BA8  3  85 rr                sta vard
001BAA  3  A9 10                lda #16
001BAC  3  A0 09                ldy #9
001BAE  3  91 68                sta (z80_ix),y
001BB0  3  60                   rts		; EXIT
001BB1  3  4C E1 1B             jmp a00663
001BB4  3  20 4F 0E     a00559: jsr cangr	; CANGORIGHT
001BB7  3  F0 03                beq :+
001BB9  3  4C E1 1B             jmp a00663
001BBC  3               :
001BBC  3  A9 00                lda #0
001BBE  3  A0 06                ldy #6
001BC0  3  91 68                sta (z80_ix),y
001BC2  3  A9 00                lda #0		; ANIMATE
001BC4  3  20 25 15             jsr animsp
001BC7  3  A9 00                lda #0
001BC9  3  A0 0B                ldy #11
001BCB  3  D1 68                cmp (z80_ix),y
001BCD  3  F0 03                beq *+5
001BCF  3  4C D8 1B             jmp a00637
001BD2  3  A9 05                lda #5		; BEEP
001BD4  3  0A                   asl a
001BD5  3  8D 33 06             sta sndtyp
001BD8  3  A0 09        a00637: ldy #9 		; SPRITERIGHT
001BDA  3  B1 68                lda (z80_ix),y
001BDC  3  18                   clc
001BDD  3  69 02                adc #2
001BDF  3  91 68                sta (z80_ix),y
001BE1  3  A5 rr        a00663: lda joyval	; KEY
001BE3  3  29 02                and #2
001BE5  3  F0 03                beq :+
001BE7  3  4C 33 1C             jmp a00846
001BEA  3               :
001BEA  3  A9 08                lda #8
001BEC  3  A0 09                ldy #9
001BEE  3  D1 68                cmp (z80_ix),y
001BF0  3  B0 03                bcs *+5
001BF2  3  4C 06 1C             jmp a00743
001BF5  3  20 43 16             jsr scrl	; SCREENLEFT
001BF8  3  A9 00                lda #0
001BFA  3  85 rr                sta vard
001BFC  3  A9 E4                lda #228
001BFE  3  A0 09                ldy #9
001C00  3  91 68                sta (z80_ix),y
001C02  3  60                   rts		; EXIT
001C03  3  4C 33 1C             jmp a00846
001C06  3  20 3D 0E     a00743: jsr cangl	; CANGOLEFT
001C09  3  F0 03                beq :+
001C0B  3  4C 33 1C             jmp a00846
001C0E  3               :
001C0E  3  A9 01                lda #1
001C10  3  A0 06                ldy #6
001C12  3  91 68                sta (z80_ix),y
001C14  3  A9 00                lda #0		; ANIMATE
001C16  3  20 25 15             jsr animsp
001C19  3  A9 00                lda #0
001C1B  3  A0 0B                ldy #11
001C1D  3  D1 68                cmp (z80_ix),y
001C1F  3  F0 03                beq *+5
001C21  3  4C 2A 1C             jmp a00820
001C24  3  A9 05                lda #5		; BEEP
001C26  3  0A                   asl a
001C27  3  8D 33 06             sta sndtyp
001C2A  3  A0 09        a00820: ldy #9 		; SPRITELEFT
001C2C  3  B1 68                lda (z80_ix),y
001C2E  3  38                   sec
001C2F  3  E9 02                sbc #2
001C31  3  91 68                sta (z80_ix),y
001C33  3  A5 rr        a00846: lda joyval	; KEY
001C35  3  29 10                and #16
001C37  3  F0 03                beq :+
001C39  3  4C 50 1C             jmp a00908
001C3C  3               :
001C3C  3  20 A7 0F             jsr jump	; TABLEJUMP
001C3F  3  20 08 0E             jsr cangd	; CANGODOWN
001C42  3  F0 03                beq :+
001C44  3  4C 4A 1C             jmp a00894
001C47  3               :
001C47  3  4C 50 1C             jmp a00908
001C4A  3  A9 3C        a00894: lda #60		; BEEP
001C4C  3  0A                   asl a
001C4D  3  8D 33 06             sta sndtyp
001C50  3  A9 05        a00908: lda #DEADLY	; DEADLY
001C52  3  85 63                sta z80_b
001C54  3  20 B2 0E             jsr tded
001C57  3  C5 63                cmp z80_b
001C59  3  F0 03                beq :+
001C5B  3  4C 62 1C             jmp a00948
001C5E  3               :
001C5E  3  A9 01                lda #1 		; KILL
001C60  3  85 rr                sta deadf
001C62  3  4C 8C 16     a00948: jmp grav
001C65  3               evnt01:
001C65  3  A9 03                lda #3
001C67  3  A0 06                ldy #6
001C69  3  D1 68                cmp (z80_ix),y
001C6B  3  F0 03                beq *+5
001C6D  3  4C 79 1C             jmp b00042
001C70  3  A9 01                lda #1
001C72  3  A0 0C                ldy #12
001C74  3  91 68                sta (z80_ix),y
001C76  3  4C 7F 1C             jmp b00055
001C79  3  A9 01        b00042: lda #1
001C7B  3  A0 0C                ldy #12
001C7D  3  91 68                sta (z80_ix),y
001C7F  3  A9 00        b00055: lda #0
001C81  3  A0 0B                ldy #11
001C83  3  D1 68                cmp (z80_ix),y
001C85  3  F0 03                beq *+5
001C87  3  4C E5 1C             jmp b00288
001C8A  3  A0 0C                ldy #12
001C8C  3  B1 68                lda (z80_ix),y 	; REPEAT
001C8E  3  85 rr                sta loopa
001C90  3  20 3D 0E     b00094: jsr cangl	; CANGOLEFT
001C93  3  F0 03                beq :+
001C95  3  4C D0 1C             jmp b00241
001C98  3               :
001C98  3  A0 09                ldy #9 		; SPRITELEFT
001C9A  3  B1 68                lda (z80_ix),y
001C9C  3  38                   sec
001C9D  3  E9 02                sbc #2
001C9F  3  91 68                sta (z80_ix),y
001CA1  3  A9 10                lda #16
001CA3  3  85 62                sta z80_c
001CA5  3  A0 09                ldy #9
001CA7  3  B1 68                lda (z80_ix),y
001CA9  3  38                   sec
001CAA  3  E5 62                sbc z80_c
001CAC  3  A0 09                ldy #9
001CAE  3  91 68                sta (z80_ix),y
001CB0  3  20 08 0E             jsr cangd	; CANGODOWN
001CB3  3  F0 03                beq :+
001CB5  3  4C BE 1C             jmp b00202
001CB8  3               :
001CB8  3  A9 01                lda #1
001CBA  3  A0 0B                ldy #11
001CBC  3  91 68                sta (z80_ix),y
001CBE  3  A9 10        b00202: lda #16
001CC0  3  85 62                sta z80_c
001CC2  3  A0 09                ldy #9
001CC4  3  B1 68                lda (z80_ix),y
001CC6  3  18                   clc
001CC7  3  65 62                adc z80_c
001CC9  3  A0 09                ldy #9
001CCB  3  91 68                sta (z80_ix),y
001CCD  3  4C D6 1C             jmp b00255
001CD0  3  A9 01        b00241: lda #1
001CD2  3  A0 0B                ldy #11
001CD4  3  91 68                sta (z80_ix),y
001CD6  3  C6 rr        b00255: dec loopa	; ENDREPEAT
001CD8  3  F0 03                beq :+
001CDA  3  4C 90 1C             jmp b00094
001CDD  3               :
001CDD  3  A9 00                lda #0		; ANIMATEBACK
001CDF  3  20 4B 15             jsr animbk
001CE2  3  4C 3D 1D             jmp b00494
001CE5  3  A0 0C        b00288: ldy #12
001CE7  3  B1 68                lda (z80_ix),y 	; REPEAT
001CE9  3  85 rr                sta loopa
001CEB  3  20 4F 0E     b00305: jsr cangr	; CANGORIGHT
001CEE  3  F0 03                beq :+
001CF0  3  4C 2B 1D             jmp b00453
001CF3  3               :
001CF3  3  A0 09                ldy #9 		; SPRITERIGHT
001CF5  3  B1 68                lda (z80_ix),y
001CF7  3  18                   clc
001CF8  3  69 02                adc #2
001CFA  3  91 68                sta (z80_ix),y
001CFC  3  A9 10                lda #16
001CFE  3  85 62                sta z80_c
001D00  3  A0 09                ldy #9
001D02  3  B1 68                lda (z80_ix),y
001D04  3  18                   clc
001D05  3  65 62                adc z80_c
001D07  3  A0 09                ldy #9
001D09  3  91 68                sta (z80_ix),y
001D0B  3  20 08 0E             jsr cangd	; CANGODOWN
001D0E  3  F0 03                beq :+
001D10  3  4C 19 1D             jmp b00413
001D13  3               :
001D13  3  A9 00                lda #0
001D15  3  A0 0B                ldy #11
001D17  3  91 68                sta (z80_ix),y
001D19  3  A9 10        b00413: lda #16
001D1B  3  85 62                sta z80_c
001D1D  3  A0 09                ldy #9
001D1F  3  B1 68                lda (z80_ix),y
001D21  3  38                   sec
001D22  3  E5 62                sbc z80_c
001D24  3  A0 09                ldy #9
001D26  3  91 68                sta (z80_ix),y
001D28  3  4C 31 1D             jmp b00466
001D2B  3  A9 00        b00453: lda #0
001D2D  3  A0 0B                ldy #11
001D2F  3  91 68                sta (z80_ix),y
001D31  3  C6 rr        b00466: dec loopa	; ENDREPEAT
001D33  3  F0 03                beq :+
001D35  3  4C EB 1C             jmp b00305
001D38  3               :
001D38  3  A9 00                lda #0		; ANIMATE
001D3A  3  20 25 15             jsr animsp
001D3D  3  A9 00        b00494: lda #0 	; COLLISION
001D3F  3  85 63                sta z80_b
001D41  3  20 70 15             jsr sktyp
001D44  3  B0 03                bcs :+
001D46  3  4C 4D 1D             jmp b00529
001D49  3               :
001D49  3  A9 01                lda #1 		; KILL
001D4B  3  85 rr                sta deadf
001D4D  3  60           b00529: rts
001D4E  3               evnt02:
001D4E  3  A9 05                lda #5
001D50  3  A0 06                ldy #6
001D52  3  D1 68                cmp (z80_ix),y
001D54  3  F0 03                beq *+5
001D56  3  4C 62 1D             jmp c00042
001D59  3  A9 02                lda #2
001D5B  3  A0 0C                ldy #12
001D5D  3  91 68                sta (z80_ix),y
001D5F  3  4C 68 1D             jmp c00055
001D62  3  A9 01        c00042: lda #1
001D64  3  A0 0C                ldy #12
001D66  3  91 68                sta (z80_ix),y
001D68  3  A9 00        c00055: lda #0
001D6A  3  A0 0B                ldy #11
001D6C  3  D1 68                cmp (z80_ix),y
001D6E  3  F0 03                beq *+5
001D70  3  4C 9D 1D             jmp c00175
001D73  3  A0 0C                ldy #12
001D75  3  B1 68                lda (z80_ix),y 	; REPEAT
001D77  3  85 rr                sta loopa
001D79  3  20 D3 0D     c00094: jsr cangu	; CANGOUP
001D7C  3  F0 03                beq :+
001D7E  3  4C 8D 1D             jmp c00140
001D81  3               :
001D81  3  A0 08                ldy #8 		; SPRITEUP
001D83  3  B1 68                lda (z80_ix),y
001D85  3  38                   sec
001D86  3  E9 02                sbc #2
001D88  3  91 68                sta (z80_ix),y
001D8A  3  4C 93 1D             jmp c00154
001D8D  3  A9 01        c00140: lda #1
001D8F  3  A0 0B                ldy #11
001D91  3  91 68                sta (z80_ix),y
001D93  3  C6 rr        c00154: dec loopa	; ENDREPEAT
001D95  3  F0 03                beq :+
001D97  3  4C 79 1D             jmp c00094
001D9A  3               :
001D9A  3  4C C4 1D             jmp c00269
001D9D  3  A0 0C        c00175: ldy #12
001D9F  3  B1 68                lda (z80_ix),y 	; REPEAT
001DA1  3  85 rr                sta loopa
001DA3  3  20 08 0E     c00192: jsr cangd	; CANGODOWN
001DA6  3  F0 03                beq :+
001DA8  3  4C B7 1D             jmp c00239
001DAB  3               :
001DAB  3  A0 08                ldy #8 		; SPRITEDOWN
001DAD  3  B1 68                lda (z80_ix),y
001DAF  3  18                   clc
001DB0  3  69 02                adc #2
001DB2  3  91 68                sta (z80_ix),y
001DB4  3  4C BD 1D             jmp c00252
001DB7  3  A9 00        c00239: lda #0
001DB9  3  A0 0B                ldy #11
001DBB  3  91 68                sta (z80_ix),y
001DBD  3  C6 rr        c00252: dec loopa	; ENDREPEAT
001DBF  3  F0 03                beq :+
001DC1  3  4C A3 1D             jmp c00192
001DC4  3               :
001DC4  3  A9 00        c00269: lda #0		; ANIMATE
001DC6  3  20 25 15             jsr animsp
001DC9  3  A9 00                lda #0 	; COLLISION
001DCB  3  85 63                sta z80_b
001DCD  3  20 70 15             jsr sktyp
001DD0  3  B0 03                bcs :+
001DD2  3  4C D9 1D             jmp c00316
001DD5  3               :
001DD5  3  A9 01                lda #1 		; KILL
001DD7  3  85 rr                sta deadf
001DD9  3  60           c00316: rts
001DDA  3               evnt03:
001DDA  3  A9 00                lda #0
001DDC  3  A0 0B                ldy #11
001DDE  3  D1 68                cmp (z80_ix),y
001DE0  3  F0 03                beq *+5
001DE2  3  4C 02 1E             jmp d00089
001DE5  3  20 3D 0E             jsr cangl	; CANGOLEFT
001DE8  3  F0 03                beq :+
001DEA  3  4C F9 1D             jmp d00071
001DED  3               :
001DED  3  A0 09                ldy #9 		; SPRITELEFT
001DEF  3  B1 68                lda (z80_ix),y
001DF1  3  38                   sec
001DF2  3  E9 02                sbc #2
001DF4  3  91 68                sta (z80_ix),y
001DF6  3  4C FF 1D             jmp d00084
001DF9  3  A9 01        d00071: lda #1
001DFB  3  A0 0B                ldy #11
001DFD  3  91 68                sta (z80_ix),y
001DFF  3  4C 1C 1E     d00084: jmp d00150
001E02  3  20 4F 0E     d00089: jsr cangr	; CANGORIGHT
001E05  3  F0 03                beq :+
001E07  3  4C 16 1E             jmp d00137
001E0A  3               :
001E0A  3  A0 09                ldy #9 		; SPRITERIGHT
001E0C  3  B1 68                lda (z80_ix),y
001E0E  3  18                   clc
001E0F  3  69 02                adc #2
001E11  3  91 68                sta (z80_ix),y
001E13  3  4C 1C 1E             jmp d00150
001E16  3  A9 00        d00137: lda #0
001E18  3  A0 0B                ldy #11
001E1A  3  91 68                sta (z80_ix),y
001E1C  3  A9 00        d00150: lda #0
001E1E  3  A0 0A                ldy #10
001E20  3  D1 68                cmp (z80_ix),y
001E22  3  F0 03                beq *+5
001E24  3  4C 44 1E             jmp d00237
001E27  3  20 D3 0D             jsr cangu	; CANGOUP
001E2A  3  F0 03                beq :+
001E2C  3  4C 3B 1E             jmp d00218
001E2F  3               :
001E2F  3  A0 08                ldy #8 		; SPRITEUP
001E31  3  B1 68                lda (z80_ix),y
001E33  3  38                   sec
001E34  3  E9 02                sbc #2
001E36  3  91 68                sta (z80_ix),y
001E38  3  4C 41 1E             jmp d00232
001E3B  3  A9 01        d00218: lda #1
001E3D  3  A0 0A                ldy #10
001E3F  3  91 68                sta (z80_ix),y
001E41  3  4C 5E 1E     d00232: jmp d00297
001E44  3  20 08 0E     d00237: jsr cangd	; CANGODOWN
001E47  3  F0 03                beq :+
001E49  3  4C 58 1E             jmp d00284
001E4C  3               :
001E4C  3  A0 08                ldy #8 		; SPRITEDOWN
001E4E  3  B1 68                lda (z80_ix),y
001E50  3  18                   clc
001E51  3  69 02                adc #2
001E53  3  91 68                sta (z80_ix),y
001E55  3  4C 5E 1E             jmp d00297
001E58  3  A9 00        d00284: lda #0
001E5A  3  A0 0A                ldy #10
001E5C  3  91 68                sta (z80_ix),y
001E5E  3  A9 00        d00297: lda #0		; ANIMATE
001E60  3  20 25 15             jsr animsp
001E63  3  A9 00                lda #0 	; COLLISION
001E65  3  85 63                sta z80_b
001E67  3  20 70 15             jsr sktyp
001E6A  3  B0 03                bcs :+
001E6C  3  4C 73 1E             jmp d00344
001E6F  3               :
001E6F  3  A9 01                lda #1 		; KILL
001E71  3  85 rr                sta deadf
001E73  3  60           d00344: rts
001E74  3               evnt04:
001E74  3  60                   rts
001E75  3               evnt05:
001E75  3  A9 00                lda #0		; ANIMATE
001E77  3  20 25 15             jsr animsp
001E7A  3  60                   rts
001E7B  3               evnt06:
001E7B  3  20 6D 09             jsr skobj	; DETECTOBJECT
001E7E  3  85 rr                sta varobj
001E80  3  A9 FE                lda #254
001E82  3  C5 rr                cmp varobj
001E84  3  B0 03                bcs *+5
001E86  3  4C 90 1E             jmp g00053
001E89  3  A9 FF                lda #255	; REMOVE
001E8B  3  A0 05                ldy #5
001E8D  3  91 68                sta (z80_ix),y
001E8F  3  60                   rts		; EXIT
001E90  3  A5 rr        g00053: lda varj
001E92  3  C5 rr                cmp scno
001E94  3  F0 03                beq *+5
001E96  3  4C C0 1E             jmp g00157
001E99  3  A9 00                lda #0		; GOT
001E9B  3  20 1B 09             jsr gotob
001E9E  3  C9 FF                cmp #255
001EA0  3  F0 03                beq :+
001EA2  3  4C A8 1E             jmp g00099
001EA5  3               :
001EA5  3  4C B9 1E             jmp g00136
001EA8  3  A0 09        g00099: ldy #9
001EAA  3  B1 68                lda (z80_ix),y	; PUT
001EAC  3  85 rr                sta dispx
001EAE  3  A0 08                ldy #8
001EB0  3  B1 68                lda (z80_ix),y
001EB2  3  85 rr                sta dispy
001EB4  3  A9 00                lda #0
001EB6  3  20 4C 09             jsr drpob
001EB9  3  A9 FF        g00136: lda #255	; REMOVE
001EBB  3  A0 05                ldy #5
001EBD  3  91 68                sta (z80_ix),y
001EBF  3  60                   rts		; EXIT
001EC0  3  A5 rr        g00157: lda vark
001EC2  3  C5 rr                cmp scno
001EC4  3  F0 03                beq *+5
001EC6  3  4C F0 1E             jmp g00261
001EC9  3  A9 01                lda #1		; GOT
001ECB  3  20 1B 09             jsr gotob
001ECE  3  C9 FF                cmp #255
001ED0  3  F0 03                beq :+
001ED2  3  4C D8 1E             jmp g00203
001ED5  3               :
001ED5  3  4C E9 1E             jmp g00240
001ED8  3  A0 09        g00203: ldy #9
001EDA  3  B1 68                lda (z80_ix),y	; PUT
001EDC  3  85 rr                sta dispx
001EDE  3  A0 08                ldy #8
001EE0  3  B1 68                lda (z80_ix),y
001EE2  3  85 rr                sta dispy
001EE4  3  A9 01                lda #1
001EE6  3  20 4C 09             jsr drpob
001EE9  3  A9 FF        g00240: lda #255	; REMOVE
001EEB  3  A0 05                ldy #5
001EED  3  91 68                sta (z80_ix),y
001EEF  3  60                   rts		; EXIT
001EF0  3  A5 rr        g00261: lda varl
001EF2  3  C5 rr                cmp scno
001EF4  3  F0 03                beq *+5
001EF6  3  4C 20 1F             jmp g00365
001EF9  3  A9 02                lda #2		; GOT
001EFB  3  20 1B 09             jsr gotob
001EFE  3  C9 FF                cmp #255
001F00  3  F0 03                beq :+
001F02  3  4C 08 1F             jmp g00307
001F05  3               :
001F05  3  4C 19 1F             jmp g00344
001F08  3  A0 09        g00307: ldy #9
001F0A  3  B1 68                lda (z80_ix),y	; PUT
001F0C  3  85 rr                sta dispx
001F0E  3  A0 08                ldy #8
001F10  3  B1 68                lda (z80_ix),y
001F12  3  85 rr                sta dispy
001F14  3  A9 02                lda #2
001F16  3  20 4C 09             jsr drpob
001F19  3  A9 FF        g00344: lda #255	; REMOVE
001F1B  3  A0 05                ldy #5
001F1D  3  91 68                sta (z80_ix),y
001F1F  3  60                   rts		; EXIT
001F20  3  A5 rr        g00365: lda vari
001F22  3  C5 rr                cmp scno
001F24  3  F0 03                beq *+5
001F26  3  4C 50 1F             jmp g00469
001F29  3  A9 03                lda #3		; GOT
001F2B  3  20 1B 09             jsr gotob
001F2E  3  C9 FF                cmp #255
001F30  3  F0 03                beq :+
001F32  3  4C 38 1F             jmp g00411
001F35  3               :
001F35  3  4C 49 1F             jmp g00448
001F38  3  A0 09        g00411: ldy #9
001F3A  3  B1 68                lda (z80_ix),y	; PUT
001F3C  3  85 rr                sta dispx
001F3E  3  A0 08                ldy #8
001F40  3  B1 68                lda (z80_ix),y
001F42  3  85 rr                sta dispy
001F44  3  A9 03                lda #3
001F46  3  20 4C 09             jsr drpob
001F49  3  A9 FF        g00448: lda #255	; REMOVE
001F4B  3  A0 05                ldy #5
001F4D  3  91 68                sta (z80_ix),y
001F4F  3  60                   rts		; EXIT
001F50  3  A9 FF        g00469: lda #255	; REMOVE
001F52  3  A0 05                ldy #5
001F54  3  91 68                sta (z80_ix),y
001F56  3  60                   rts
001F57  3               evnt07:
001F57  3  A9 00                lda #0 	; COLLISION
001F59  3  85 63                sta z80_b
001F5B  3  20 70 15             jsr sktyp
001F5E  3  B0 03                bcs :+
001F60  3  4C BB 1F             jmp h00243
001F63  3               :
001F63  3  A9 00                lda #0
001F65  3  A0 07                ldy #7
001F67  3  D1 68                cmp (z80_ix),y
001F69  3  F0 03                beq *+5
001F6B  3  4C 71 1F             jmp h00053
001F6E  3  4C BB 1F             jmp h00243
001F71  3  A5 rr        h00053: lda skptr	; OTHER
001F73  3  85 68                sta z80_x
001F75  3  A5 rr                lda skptr+1
001F77  3  85 69                sta z80_i
001F79  3  A9 01                lda #1
001F7B  3  A0 06                ldy #6
001F7D  3  D1 68                cmp (z80_ix),y
001F7F  3  F0 03                beq *+5
001F81  3  4C 96 1F             jmp h00148
001F84  3  A0 09                ldy #9 		; SPRITERIGHT
001F86  3  B1 68                lda (z80_ix),y
001F88  3  18                   clc
001F89  3  69 02                adc #2
001F8B  3  91 68                sta (z80_ix),y
001F8D  3  A0 09                ldy #9 		; SPRITERIGHT
001F8F  3  B1 68                lda (z80_ix),y
001F91  3  18                   clc
001F92  3  69 02                adc #2
001F94  3  91 68                sta (z80_ix),y
001F96  3  A9 00        h00148: lda #0
001F98  3  A0 06                ldy #6
001F9A  3  D1 68                cmp (z80_ix),y
001F9C  3  F0 03                beq *+5
001F9E  3  4C B3 1F             jmp h00221
001FA1  3  A0 09                ldy #9 		; SPRITELEFT
001FA3  3  B1 68                lda (z80_ix),y
001FA5  3  38                   sec
001FA6  3  E9 02                sbc #2
001FA8  3  91 68                sta (z80_ix),y
001FAA  3  A0 09                ldy #9 		; SPRITELEFT
001FAC  3  B1 68                lda (z80_ix),y
001FAE  3  38                   sec
001FAF  3  E9 02                sbc #2
001FB1  3  91 68                sta (z80_ix),y
001FB3  3  A5 rr        h00221: lda ogptr	; ENDSPRITE
001FB5  3  85 68                sta z80_x
001FB7  3  A5 rr                lda ogptr+1
001FB9  3  85 69                sta z80_i
001FBB  3  A9 00        h00243: lda #0
001FBD  3  A0 0B                ldy #11
001FBF  3  D1 68                cmp (z80_ix),y
001FC1  3  90 03                bcc *+5
001FC3  3  4C D6 1F             jmp h00299
001FC6  3  A9 04                lda #4
001FC8  3  A0 0B                ldy #11
001FCA  3  D1 68                cmp (z80_ix),y
001FCC  3  B0 03                bcs *+5
001FCE  3  4C D6 1F             jmp h00299
001FD1  3  A9 00                lda #0		; ANIMATE
001FD3  3  20 25 15             jsr animsp
001FD6  3  A9 19        h00299: lda #25
001FD8  3  A0 0B                ldy #11
001FDA  3  D1 68                cmp (z80_ix),y
001FDC  3  90 03                bcc *+5
001FDE  3  4C F1 1F             jmp h00356
001FE1  3  A9 1D                lda #29
001FE3  3  A0 0B                ldy #11
001FE5  3  D1 68                cmp (z80_ix),y
001FE7  3  B0 03                bcs *+5
001FE9  3  4C F1 1F             jmp h00356
001FEC  3  A9 00                lda #0		; ANIMATEBACK
001FEE  3  20 4B 15             jsr animbk
001FF1  3  A0 0B        h00356: ldy #11
001FF3  3  B1 68                lda (z80_ix),y
001FF5  3  18                   clc
001FF6  3  69 01                adc #1
001FF8  3  A0 0B                ldy #11
001FFA  3  91 68                sta (z80_ix),y
001FFC  3  A9 96                lda #150
001FFE  3  A0 0B                ldy #11
002000  3  D1 68                cmp (z80_ix),y
002002  3  F0 03                beq *+5
002004  3  4C 0D 20             jmp h00418
002007  3  A9 00                lda #0
002009  3  A0 0B                ldy #11
00200B  3  91 68                sta (z80_ix),y
00200D  3  60           h00418: rts
00200E  3               evnt08:
00200E  3  A9 00                lda #0		; ANIMATE
002010  3  20 25 15             jsr animsp
002013  3  A9 00                lda #0 	; COLLISION
002015  3  85 63                sta z80_b
002017  3  20 70 15             jsr sktyp
00201A  3  B0 03                bcs :+
00201C  3  4C 53 20             jmp i00142
00201F  3               :
00201F  3  A9 00                lda #0		; GOT
002021  3  20 1B 09             jsr gotob
002024  3  C9 FF                cmp #255
002026  3  F0 03                beq :+
002028  3  4C 53 20             jmp i00142
00202B  3               :
00202B  3  A9 01                lda #1		; GOT
00202D  3  20 1B 09             jsr gotob
002030  3  C9 FF                cmp #255
002032  3  F0 03                beq :+
002034  3  4C 53 20             jmp i00142
002037  3               :
002037  3  A9 02                lda #2		; GOT
002039  3  20 1B 09             jsr gotob
00203C  3  C9 FF                cmp #255
00203E  3  F0 03                beq :+
002040  3  4C 53 20             jmp i00142
002043  3               :
002043  3  A9 03                lda #3		; GOT
002045  3  20 1B 09             jsr gotob
002048  3  C9 FF                cmp #255
00204A  3  F0 03                beq :+
00204C  3  4C 53 20             jmp i00142
00204F  3               :
00204F  3  A9 01                lda #1		; ENDGAME
002051  3  85 rr                sta gamwon
002053  3  60           i00142: rts
002054  3               evnt09:
002054  3  A9 00                lda #0
002056  3  A0 05                ldy #5
002058  3  D1 68                cmp (z80_ix),y
00205A  3  F0 03                beq *+5
00205C  3  4C 9B 20             jmp j00150
00205F  3  A9 FF                lda #255
002061  3  C5 rr                cmp varb
002063  3  D0 03                bne *+5
002065  3  4C 7D 20             jmp j00086
002068  3  A9 FF                lda #255
00206A  3  C5 rr                cmp varc
00206C  3  D0 03                bne *+5
00206E  3  4C 7D 20             jmp j00086
002071  3  A5 rr                lda varb
002073  3  A0 08                ldy #8
002075  3  91 68                sta (z80_ix),y
002077  3  A5 rr                lda varc
002079  3  A0 09                ldy #9
00207B  3  91 68                sta (z80_ix),y
00207D  3  A9 02        j00086: lda #2
00207F  3  A0 05                ldy #5
002081  3  D1 68                cmp (z80_ix),y
002083  3  F0 03                beq *+5
002085  3  4C 9B 20             jmp j00150
002088  3  A5 rr                lda vara
00208A  3  18                   clc
00208B  3  69 01                adc #1
00208D  3  85 rr                sta vara
00208F  3  A9 00                lda #0
002091  3  A0 0B                ldy #11
002093  3  91 68                sta (z80_ix),y
002095  3  A9 45                lda #69
002097  3  A0 0C                ldy #12
002099  3  91 68                sta (z80_ix),y
00209B  3  60           j00150: rts
00209C  3               evnt10:
00209C  3  A9 15                lda #21
00209E  3  85 rr                sta chary
0020A0  3  A9 18                lda #24
0020A2  3  85 rr                sta charx
0020A4  3  A0 00                ldy #0		; SHOWSCORE
0020A6  3  A9 06                lda #6
0020A8  3  85 63                sta z80_b
0020AA  3  20 8E 0A             jsr dscor
0020AD  3  A9 18                lda #24
0020AF  3  85 rr                sta charx
0020B1  3  A9 03                lda #3 	; REPEAT
0020B3  3  85 rr                sta loopa
0020B5  3  A9 00        k00058: lda #0 		; PUTBLOCK
0020B7  3  20 46 0C             jsr pbpattr
0020BA  3  C6 rr                dec loopa	; ENDREPEAT
0020BC  3  F0 03                beq :+
0020BE  3  4C B5 20             jmp k00058
0020C1  3               :
0020C1  3  A9 0C                lda #12
0020C3  3  85 rr                sta charx
0020C5  3  A9 00                lda #0		; GOT
0020C7  3  20 1B 09             jsr gotob
0020CA  3  C9 FF                cmp #255
0020CC  3  F0 03                beq :+
0020CE  3  4C D9 20             jmp k00135
0020D1  3               :
0020D1  3  A9 49                lda #73 		; PUTBLOCK
0020D3  3  20 46 0C             jsr pbpattr
0020D6  3  4C DE 20             jmp k00147
0020D9  3  A9 46        k00135: lda #70 		; PUTBLOCK
0020DB  3  20 46 0C             jsr pbpattr
0020DE  3  A9 01        k00147: lda #1		; GOT
0020E0  3  20 1B 09             jsr gotob
0020E3  3  C9 FF                cmp #255
0020E5  3  F0 03                beq :+
0020E7  3  4C F2 20             jmp k00187
0020EA  3               :
0020EA  3  A9 4A                lda #74 		; PUTBLOCK
0020EC  3  20 46 0C             jsr pbpattr
0020EF  3  4C F7 20             jmp k00200
0020F2  3  A9 47        k00187: lda #71 		; PUTBLOCK
0020F4  3  20 46 0C             jsr pbpattr
0020F7  3  A9 02        k00200: lda #2		; GOT
0020F9  3  20 1B 09             jsr gotob
0020FC  3  C9 FF                cmp #255
0020FE  3  F0 03                beq :+
002100  3  4C 0B 21             jmp k00240
002103  3               :
002103  3  A9 4B                lda #75 		; PUTBLOCK
002105  3  20 46 0C             jsr pbpattr
002108  3  4C 10 21             jmp k00252
00210B  3  A9 48        k00240: lda #72 		; PUTBLOCK
00210D  3  20 46 0C             jsr pbpattr
002110  3  A9 03        k00252: lda #3		; GOT
002112  3  20 1B 09             jsr gotob
002115  3  C9 FF                cmp #255
002117  3  F0 03                beq :+
002119  3  4C 24 21             jmp k00292
00211C  3               :
00211C  3  A9 4C                lda #76 		; PUTBLOCK
00211E  3  20 46 0C             jsr pbpattr
002121  3  4C 29 21             jmp k00305
002124  3  A9 4D        k00292: lda #77 		; PUTBLOCK
002126  3  20 46 0C             jsr pbpattr
002129  3  A9 00        k00305: lda #0
00212B  3  C5 rr                cmp varm
00212D  3  F0 03                beq *+5
00212F  3  4C 44 21             jmp k00362
002132  3  A9 00                lda #0
002134  3  C5 rr                cmp varn
002136  3  F0 03                beq *+5
002138  3  4C 44 21             jmp k00362
00213B  3  A9 01                lda #1
00213D  3  85 rr                sta numlif
00213F  3  A9 01                lda #1 		; KILL
002141  3  85 rr                sta deadf
002143  3  60                   rts		; EXIT
002144  3  A5 rr        k00362: lda vara
002146  3  18                   clc
002147  3  69 01                adc #1
002149  3  85 rr                sta vara
00214B  3  A9 0A                lda #10
00214D  3  C5 rr                cmp vara
00214F  3  F0 03                beq *+5
002151  3  4C 58 21             jmp k00402
002154  3  A9 00                lda #0
002156  3  85 rr                sta vara
002158  3  A9 15        k00402: lda #21
00215A  3  85 rr                sta chary
00215C  3  A9 07                lda #7
00215E  3  85 rr                sta charx
002160  3  A9 54                lda #84 		; PUTBLOCK
002162  3  20 46 0C             jsr pbpattr
002165  3  A5 rr                lda charx
002167  3  18                   clc
002168  3  69 01                adc #1
00216A  3  85 rr                sta charx
00216C  3  A5 rr                lda numlif	; DISPLAY
00216E  3  20 00 16             jsr disply
002171  3  A9 15                lda #21
002173  3  85 rr                sta chary
002175  3  A9 13                lda #19
002177  3  85 rr                sta charx
002179  3  A9 59                lda #89 		; PUTBLOCK
00217B  3  20 46 0C             jsr pbpattr
00217E  3  A9 00                lda #0 		; PUTBLOCK
002180  3  20 46 0C             jsr pbpattr
002183  3  A5 rr                lda varp
002185  3  85 rr                sta vars
002187  3  A5 rr                lda vars
002189  3  4A                   lsr a
00218A  3  4A                   lsr a
00218B  3  4A                   lsr a
00218C  3  85 rr                sta vars
00218E  3  A9 00                lda #0
002190  3  C5 rr                cmp vars
002192  3  90 03                bcc *+5
002194  3  4C A7 21             jmp k00585
002197  3  A5 rr                lda vars 	; REPEAT
002199  3  85 rr                sta loopa
00219B  3  A9 53        k00556: lda #83 		; PUTBLOCK
00219D  3  20 46 0C             jsr pbpattr
0021A0  3  C6 rr                dec loopa	; ENDREPEAT
0021A2  3  F0 03                beq :+
0021A4  3  4C 9B 21             jmp k00556
0021A7  3               :
0021A7  3  A5 rr        k00585: lda vars
0021A9  3  0A                   asl a
0021AA  3  0A                   asl a
0021AB  3  0A                   asl a
0021AC  3  85 rr                sta vars
0021AE  3  A5 rr                lda vars
0021B0  3  85 62                sta z80_c
0021B2  3  A5 rr                lda varp
0021B4  3  38                   sec
0021B5  3  E5 62                sbc z80_c
0021B7  3  85 rr                sta varp
0021B9  3  A5 rr                lda varp
0021BB  3  85 rr                sta vart
0021BD  3  A5 rr                lda vart
0021BF  3  4A                   lsr a
0021C0  3  85 rr                sta vart
0021C2  3  A9 4F                lda #79
0021C4  3  85 62                sta z80_c
0021C6  3  A5 rr                lda vart
0021C8  3  18                   clc
0021C9  3  65 62                adc z80_c
0021CB  3  85 rr                sta vart
0021CD  3  A9 0A                lda #10
0021CF  3  C5 rr                cmp vart
0021D1  3  90 03                bcc *+5
0021D3  3  4C DE 21             jmp k00708
0021D6  3  A5 rr                lda vart 		; PUTBLOCK
0021D8  3  20 46 0C             jsr pbpattr
0021DB  3  4C E3 21             jmp k00720
0021DE  3  A9 4F        k00708: lda #79 		; PUTBLOCK
0021E0  3  20 46 0C             jsr pbpattr
0021E3  3  A5 rr        k00720: lda vars
0021E5  3  85 62                sta z80_c
0021E7  3  A5 rr                lda varp
0021E9  3  18                   clc
0021EA  3  65 62                adc z80_c
0021EC  3  85 rr                sta varp
0021EE  3  A5 rr                lda varq
0021F0  3  38                   sec
0021F1  3  E9 01                sbc #1
0021F3  3  85 rr                sta varq
0021F5  3  A9 1E                lda #30
0021F7  3  C5 rr                cmp varq
0021F9  3  B0 03                bcs *+5
0021FB  3  4C 02 22             jmp k00785
0021FE  3  A9 64                lda #100
002200  3  85 rr                sta varq
002202  3  A9 64        k00785: lda #100
002204  3  C5 rr                cmp varq
002206  3  F0 03                beq *+5
002208  3  4C 12 22             jmp k00818
00220B  3  A5 rr                lda varp
00220D  3  38                   sec
00220E  3  E9 01                sbc #1
002210  3  85 rr                sta varp
002212  3  A9 00        k00818: lda #0
002214  3  C5 rr                cmp varp
002216  3  F0 03                beq *+5
002218  3  4C 27 22             jmp k00862
00221B  3  A9 01                lda #1 		; KILL
00221D  3  85 rr                sta deadf
00221F  3  A9 28                lda #40
002221  3  85 rr                sta varp
002223  3  A9 63                lda #99
002225  3  85 rr                sta varq
002227  3  A5 rr        k00862: lda varo
002229  3  38                   sec
00222A  3  E9 01                sbc #1
00222C  3  85 rr                sta varo
00222E  3  A9 FF                lda #255
002230  3  C5 rr                cmp varo
002232  3  F0 03                beq *+5
002234  3  4C 42 22             jmp k00918
002237  3  A9 19                lda #25
002239  3  85 rr                sta varo
00223B  3  A5 rr                lda varn
00223D  3  38                   sec
00223E  3  E9 01                sbc #1
002240  3  85 rr                sta varn
002242  3  A9 FF        k00918: lda #255
002244  3  C5 rr                cmp varn
002246  3  F0 03                beq *+5
002248  3  4C 56 22             jmp k00958
00224B  3  A9 3B                lda #59
00224D  3  85 rr                sta varn
00224F  3  A5 rr                lda varm
002251  3  38                   sec
002252  3  E9 01                sbc #1
002254  3  85 rr                sta varm
002256  3  A9 00        k00958: lda #0
002258  3  C5 rr                cmp varm
00225A  3  F0 03                beq *+5
00225C  3  4C 77 22             jmp k01023
00225F  3  A9 1E                lda #30
002261  3  C5 rr                cmp varn
002263  3  B0 03                bcs *+5
002265  3  4C 77 22             jmp k01023
002268  3  A9 19                lda #25
00226A  3  C5 rr                cmp varo
00226C  3  F0 03                beq *+5
00226E  3  4C 77 22             jmp k01023
002271  3  A9 28                lda #40		; BEEP
002273  3  0A                   asl a
002274  3  8D 33 06             sta sndtyp
002277  3  A9 15        k01023: lda #21
002279  3  85 rr                sta chary
00227B  3  A9 02                lda #2
00227D  3  85 rr                sta charx
00227F  3  A5 rr                lda varm	; DISPLAY
002281  3  20 00 16             jsr disply
002284  3  A9 05                lda #5
002286  3  C5 rr                cmp varo
002288  3  90 03                bcc *+5
00228A  3  4C 95 22             jmp k01085
00228D  3  A9 00                lda #0 		; PUTBLOCK
00228F  3  20 46 0C             jsr pbpattr
002292  3  4C 9A 22             jmp k01097
002295  3  A9 4E        k01085: lda #78 		; PUTBLOCK
002297  3  20 46 0C             jsr pbpattr
00229A  3  A9 09        k01097: lda #9
00229C  3  C5 rr                cmp varn
00229E  3  B0 03                bcs *+5
0022A0  3  4C A8 22             jmp k01125
0022A3  3  A9 00                lda #0	; DISPLAY
0022A5  3  20 00 16             jsr disply
0022A8  3  A5 rr        k01125: lda varn	; DISPLAY
0022AA  3  20 00 16             jsr disply
0022AD  3  A9 00                lda #0 		; PUTBLOCK
0022AF  3  20 46 0C             jsr pbpattr
0022B2  3  A9 08                lda #8
0022B4  3  C5 rr                cmp varp
0022B6  3  B0 03                bcs *+5
0022B8  3  4C CA 22             jmp k01196
0022BB  3  A9 02                lda #2
0022BD  3  C5 rr                cmp vara
0022BF  3  B0 03                bcs *+5
0022C1  3  4C CA 22             jmp k01196
0022C4  3  A9 28                lda #40		; BEEP
0022C6  3  0A                   asl a
0022C7  3  8D 33 06             sta sndtyp
0022CA  3  60           k01196: rts
0022CB  3               evnt11:
0022CB  3  60                   rts
0022CC  3               evnt12:
0022CC  3  A9 01                lda #1
0022CE  3  85 rr                sta chary
0022D0  3  A9 09                lda #9
0022D2  3  85 rr                sta charx
0022D4  3  A9 00                lda #0  	; MESSAGE
0022D6  3  20 C4 10             jsr dmsg
0022D9  3  A9 0A                lda #10 	; INK
0022DB  3  20 46 1A             jsr setfgcol
0022DE  3  A9 08                lda #8 	; PAPER
0022E0  3  20 4F 1A             jsr setbgcol
0022E3  3  A9 02                lda #2
0022E5  3  85 rr                sta chary
0022E7  3  A9 06                lda #6
0022E9  3  85 rr                sta charx
0022EB  3  A9 01                lda #1		; PRINTMODE
0022ED  3  85 rr                sta prtmod
0022EF  3  A9 01                lda #1  	; MESSAGE
0022F1  3  20 C4 10             jsr dmsg
0022F4  3  A9 00                lda #0		; PRINTMODE
0022F6  3  85 rr                sta prtmod
0022F8  3  A9 0C                lda #12 	; INK
0022FA  3  20 46 1A             jsr setfgcol
0022FD  3  A9 08                lda #8 	; PAPER
0022FF  3  20 4F 1A             jsr setbgcol
002302  3  A9 05                lda #5
002304  3  85 rr                sta chary
002306  3  A9 07                lda #7
002308  3  85 rr                sta charx
00230A  3  A9 09                lda #9  	; MESSAGE
00230C  3  20 C4 10             jsr dmsg
00230F  3  A9 09                lda #9
002311  3  85 rr                sta chary
002313  3  A9 00                lda #0
002315  3  85 rr                sta charx
002317  3  A9 0F                lda #15 	; INK
002319  3  20 46 1A             jsr setfgcol
00231C  3  A9 08                lda #8 	; PAPER
00231E  3  20 4F 1A             jsr setbgcol
002321  3  A9 02                lda #2  	; MESSAGE
002323  3  20 C4 10             jsr dmsg
002326  3  A9 16                lda #22
002328  3  85 rr                sta chary
00232A  3  A9 06                lda #6
00232C  3  85 rr                sta charx
00232E  3  A9 09                lda #9 	; INK
002330  3  20 46 1A             jsr setfgcol
002333  3  A9 08                lda #8 	; PAPER
002335  3  20 4F 1A             jsr setbgcol
002338  3  A9 08                lda #8  	; MESSAGE
00233A  3  20 C4 10             jsr dmsg
00233D  3  A9 63                lda #99
00233F  3  85 rr                sta contrl
002341  3  A9 63        m00260: lda #99
002343  3  C5 rr                cmp contrl
002345  3  F0 03                beq *+5
002347  3  4C 8D 23             jmp m00403
00234A  3  A0 07                ldy #7 	; KEY
00234C  3  B9 7E 66             lda keys,y
00234F  3  20 E7 0F             jsr ktest
002352  3  90 03                bcc :+
002354  3  4C 5B 23             jmp m00310
002357  3               :
002357  3  A9 00                lda #0
002359  3  85 rr                sta contrl
00235B  3  A0 08        m00310: ldy #8 	; KEY
00235D  3  B9 7E 66             lda keys,y
002360  3  20 E7 0F             jsr ktest
002363  3  90 03                bcc :+
002365  3  4C 6C 23             jmp m00342
002368  3               :
002368  3  A9 01                lda #1
00236A  3  85 rr                sta contrl
00236C  3  A0 09        m00342: ldy #9 	; KEY
00236E  3  B9 7E 66             lda keys,y
002371  3  20 E7 0F             jsr ktest
002374  3  90 03                bcc :+
002376  3  4C 7D 23             jmp m00375
002379  3               :
002379  3  A9 02                lda #2
00237B  3  85 rr                sta contrl
00237D  3  A0 0A        m00375: ldy #10 	; KEY
00237F  3  B9 7E 66             lda keys,y
002382  3  20 E7 0F             jsr ktest
002385  3  90 03                bcc :+
002387  3  4C 8A 23             jmp m00399
00238A  3               :
00238A  3  4C 41 23     m00399: jmp m00260
00238D  3  60           m00403: rts
00238E  3               evnt13:
00238E  3  A9 0E                lda #14 	; INK
002390  3  20 46 1A             jsr setfgcol
002393  3  A9 08                lda #8 	; PAPER
002395  3  20 4F 1A             jsr setbgcol
002398  3  20 7F 06             jsr cls		; CLS
00239B  3  A9 00                lda #0
00239D  3  85 rr                sta vara
00239F  3  A9 FF                lda #255
0023A1  3  85 rr                sta varb
0023A3  3  A9 FF                lda #255
0023A5  3  85 rr                sta varc
0023A7  3  A9 28                lda #40
0023A9  3  85 rr                sta varp
0023AB  3  A9 63                lda #99
0023AD  3  85 rr                sta varq
0023AF  3  A9 04                lda #4
0023B1  3  85 rr                sta varm
0023B3  3  A9 3B                lda #59
0023B5  3  85 rr                sta varn
0023B7  3  A9 19                lda #25
0023B9  3  85 rr                sta varo
0023BB  3  A9 1D                lda #29 		; PUTBLOCK
0023BD  3  20 46 0C             jsr pbpattr
0023C0  3  A9 1E                lda #30 	; REPEAT
0023C2  3  85 rr                sta loopa
0023C4  3  A9 21        n00119: lda #33 		; PUTBLOCK
0023C6  3  20 46 0C             jsr pbpattr
0023C9  3  C6 rr                dec loopa	; ENDREPEAT
0023CB  3  F0 03                beq :+
0023CD  3  4C C4 23             jmp n00119
0023D0  3               :
0023D0  3  A9 1E                lda #30 		; PUTBLOCK
0023D2  3  20 46 0C             jsr pbpattr
0023D5  3  A9 00                lda #0
0023D7  3  85 rr                sta chary
0023D9  3  A9 12                lda #18 	; REPEAT
0023DB  3  85 rr                sta loopa
0023DD  3  A5 rr        n00179: lda chary
0023DF  3  18                   clc
0023E0  3  69 01                adc #1
0023E2  3  85 rr                sta chary
0023E4  3  A9 00                lda #0
0023E6  3  85 rr                sta charx
0023E8  3  A9 22                lda #34 		; PUTBLOCK
0023EA  3  20 46 0C             jsr pbpattr
0023ED  3  A9 1F                lda #31
0023EF  3  85 rr                sta charx
0023F1  3  A9 22                lda #34 		; PUTBLOCK
0023F3  3  20 46 0C             jsr pbpattr
0023F6  3  C6 rr                dec loopa	; ENDREPEAT
0023F8  3  F0 03                beq :+
0023FA  3  4C DD 23             jmp n00179
0023FD  3               :
0023FD  3  A5 rr                lda chary
0023FF  3  18                   clc
002400  3  69 01                adc #1
002402  3  85 rr                sta chary
002404  3  A9 00                lda #0
002406  3  85 rr                sta charx
002408  3  A9 25                lda #37 		; PUTBLOCK
00240A  3  20 46 0C             jsr pbpattr
00240D  3  A9 1E                lda #30 	; REPEAT
00240F  3  85 rr                sta loopa
002411  3  A9 21        n00300: lda #33 		; PUTBLOCK
002413  3  20 46 0C             jsr pbpattr
002416  3  C6 rr                dec loopa	; ENDREPEAT
002418  3  F0 03                beq :+
00241A  3  4C 11 24             jmp n00300
00241D  3               :
00241D  3  A9 25                lda #37 		; PUTBLOCK
00241F  3  20 46 0C             jsr pbpattr
002422  3  A9 03                lda #3 	; REPEAT
002424  3  85 rr                sta loopa
002426  3  A5 rr        n00352: lda chary
002428  3  18                   clc
002429  3  69 01                adc #1
00242B  3  85 rr                sta chary
00242D  3  A9 00                lda #0
00242F  3  85 rr                sta charx
002431  3  A9 22                lda #34 		; PUTBLOCK
002433  3  20 46 0C             jsr pbpattr
002436  3  A9 1F                lda #31
002438  3  85 rr                sta charx
00243A  3  A9 22                lda #34 		; PUTBLOCK
00243C  3  20 46 0C             jsr pbpattr
00243F  3  C6 rr                dec loopa	; ENDREPEAT
002441  3  F0 03                beq :+
002443  3  4C 26 24             jmp n00352
002446  3               :
002446  3  A9 00                lda #0
002448  3  85 rr                sta charx
00244A  3  A9 17                lda #23
00244C  3  85 rr                sta chary
00244E  3  A9 20                lda #32 		; PUTBLOCK
002450  3  20 46 0C             jsr pbpattr
002453  3  A9 1E                lda #30 	; REPEAT
002455  3  85 rr                sta loopa
002457  3  A9 21        n00465: lda #33 		; PUTBLOCK
002459  3  20 46 0C             jsr pbpattr
00245C  3  C6 rr                dec loopa	; ENDREPEAT
00245E  3  F0 03                beq :+
002460  3  4C 57 24             jmp n00465
002463  3               :
002463  3  A9 1F                lda #31 		; PUTBLOCK
002465  3  20 46 0C             jsr pbpattr
002468  3  A9 05                lda #5
00246A  3  85 rr                sta numlif
00246C  3  A9 05                lda #5
00246E  3  85 65                sta z80_d	; GETRANDOM
002470  3  20 BF 0F             jsr random
002473  3  85 67                sta z80_h
002475  3  20 5A 08             jsr imul
002478  3  A5 67                lda z80_h
00247A  3  85 rr                sta varrnd
00247C  3  A5 rr                lda varrnd
00247E  3  18                   clc
00247F  3  69 01                adc #1
002481  3  85 rr                sta varrnd
002483  3  A5 rr                lda varrnd
002485  3  85 rr                sta varj
002487  3  A9 05                lda #5
002489  3  85 65                sta z80_d	; GETRANDOM
00248B  3  20 BF 0F             jsr random
00248E  3  85 67                sta z80_h
002490  3  20 5A 08             jsr imul
002493  3  A5 67                lda z80_h
002495  3  85 rr                sta varrnd
002497  3  A9 07                lda #7
002499  3  85 62                sta z80_c
00249B  3  A5 rr                lda varrnd
00249D  3  18                   clc
00249E  3  65 62                adc z80_c
0024A0  3  85 rr                sta varrnd
0024A2  3  A5 rr                lda varrnd
0024A4  3  85 rr                sta vark
0024A6  3  A9 05                lda #5
0024A8  3  85 65                sta z80_d	; GETRANDOM
0024AA  3  20 BF 0F             jsr random
0024AD  3  85 67                sta z80_h
0024AF  3  20 5A 08             jsr imul
0024B2  3  A5 67                lda z80_h
0024B4  3  85 rr                sta varrnd
0024B6  3  A9 0D                lda #13
0024B8  3  85 62                sta z80_c
0024BA  3  A5 rr                lda varrnd
0024BC  3  18                   clc
0024BD  3  65 62                adc z80_c
0024BF  3  85 rr                sta varrnd
0024C1  3  A5 rr                lda varrnd
0024C3  3  85 rr                sta varl
0024C5  3  A9 03                lda #3
0024C7  3  85 65                sta z80_d	; GETRANDOM
0024C9  3  20 BF 0F             jsr random
0024CC  3  85 67                sta z80_h
0024CE  3  20 5A 08             jsr imul
0024D1  3  A5 67                lda z80_h
0024D3  3  85 rr                sta varrnd
0024D5  3  A9 13                lda #19
0024D7  3  85 62                sta z80_c
0024D9  3  A5 rr                lda varrnd
0024DB  3  18                   clc
0024DC  3  65 62                adc z80_c
0024DE  3  85 rr                sta varrnd
0024E0  3  A5 rr                lda varrnd
0024E2  3  85 rr                sta vari
0024E4  3  60                   rts
0024E5  3               evnt14:
0024E5  3  A9 00                lda #0
0024E7  3  85 rr                sta vara
0024E9  3  A9 00                lda #0
0024EB  3  C5 rr                cmp vard
0024ED  3  F0 03                beq *+5
0024EF  3  4C FA 24             jmp o00043
0024F2  3  A9 FF                lda #255
0024F4  3  85 rr                sta varb
0024F6  3  A9 FF                lda #255
0024F8  3  85 rr                sta varc
0024FA  3  60           o00043: rts
0024FB  3               evnt15:
0024FB  3  A9 09                lda #9
0024FD  3  A0 05                ldy #5
0024FF  3  D1 68                cmp (z80_ix),y
002501  3  F0 03                beq *+5
002503  3  4C 0A 25             jmp p00034
002506  3  A9 01                lda #1 		; KILL
002508  3  85 rr                sta deadf
00250A  3  60           p00034: rts
00250B  3               evnt16:
00250B  3  A9 7F                lda #127		; BEEP
00250D  3  0A                   asl a
00250E  3  8D 33 06             sta sndtyp
002511  3  A5 rr                lda numlif
002513  3  38                   sec
002514  3  E9 01                sbc #1
002516  3  85 rr                sta numlif
002518  3  A9 01                lda #1
00251A  3  85 rr                sta vard
00251C  3  60                   rts
00251D  3               evnt17:
00251D  3  A9 0F                lda #15 	; INK
00251F  3  20 46 1A             jsr setfgcol
002522  3  A9 08                lda #8 	; PAPER
002524  3  20 4F 1A             jsr setbgcol
002527  3  20 7F 06             jsr cls		; CLS
00252A  3  A9 08                lda #8
00252C  3  85 rr                sta chary
00252E  3  A9 0B                lda #11
002530  3  85 rr                sta charx
002532  3  A9 01                lda #1		; PRINTMODE
002534  3  85 rr                sta prtmod
002536  3  A9 07                lda #7  	; MESSAGE
002538  3  20 C4 10             jsr dmsg
00253B  3  A9 00                lda #0		; PRINTMODE
00253D  3  85 rr                sta prtmod
00253F  3  A9 0E                lda #14 	; INK
002541  3  20 46 1A             jsr setfgcol
002544  3  A9 08                lda #8 	; PAPER
002546  3  20 4F 1A             jsr setbgcol
002549  3  A5 rr                lda chary
00254B  3  18                   clc
00254C  3  69 01                adc #1
00254E  3  85 rr                sta chary
002550  3  A9 00                lda #0
002552  3  85 rr                sta charx
002554  3  A9 05                lda #5  	; MESSAGE
002556  3  20 C4 10             jsr dmsg
002559  3  A9 FA                lda #250 	; DELAY
00255B  3  20 9F 05             jsr delay
00255E  3  A9 C8                lda #200 	; DELAY
002560  3  20 9F 05             jsr delay
002563  3  60                   rts
002564  3               evnt18:
002564  3  A5 rr                lda numlif 	; REPEAT
002566  3  85 rr                sta loopa
002568  3  A9 64        s00013: lda #<100		; SCORE
00256A  3  85 66                sta z80_l
00256C  3  A9 00                lda #>100
00256E  3  85 67                sta z80_h
002570  3  20 DE 0A             jsr addsc
002573  3  C6 rr                dec loopa	; ENDREPEAT
002575  3  F0 03                beq :+
002577  3  4C 68 25             jmp s00013
00257A  3               :
00257A  3  A5 rr                lda varm 	; REPEAT
00257C  3  85 rr                sta loopa
00257E  3  A9 3C        s00066: lda #<60		; SCORE
002580  3  85 66                sta z80_l
002582  3  A9 00                lda #>60
002584  3  85 67                sta z80_h
002586  3  20 DE 0A             jsr addsc
002589  3  C6 rr                dec loopa	; ENDREPEAT
00258B  3  F0 03                beq :+
00258D  3  4C 7E 25             jmp s00066
002590  3               :
002590  3  A5 rr                lda varn 	; REPEAT
002592  3  85 rr                sta loopa
002594  3  A9 01        s00118: lda #<1		; SCORE
002596  3  85 66                sta z80_l
002598  3  A9 00                lda #>1
00259A  3  85 67                sta z80_h
00259C  3  20 DE 0A             jsr addsc
00259F  3  C6 rr                dec loopa	; ENDREPEAT
0025A1  3  F0 03                beq :+
0025A3  3  4C 94 25             jmp s00118
0025A6  3               :
0025A6  3  A9 0E                lda #14 	; INK
0025A8  3  20 46 1A             jsr setfgcol
0025AB  3  A9 08                lda #8 	; PAPER
0025AD  3  20 4F 1A             jsr setbgcol
0025B0  3  20 7F 06             jsr cls		; CLS
0025B3  3  A9 09                lda #9
0025B5  3  85 rr                sta chary
0025B7  3  A9 09                lda #9
0025B9  3  85 rr                sta charx
0025BB  3  A9 0F                lda #15 	; INK
0025BD  3  20 46 1A             jsr setfgcol
0025C0  3  A9 08                lda #8 	; PAPER
0025C2  3  20 4F 1A             jsr setbgcol
0025C5  3  A9 01                lda #1		; PRINTMODE
0025C7  3  85 rr                sta prtmod
0025C9  3  A9 06                lda #6  	; MESSAGE
0025CB  3  20 C4 10             jsr dmsg
0025CE  3  A9 00                lda #0		; PRINTMODE
0025D0  3  85 rr                sta prtmod
0025D2  3  A9 64                lda #100 	; DELAY
0025D4  3  20 9F 05             jsr delay
0025D7  3  A9 0E                lda #14 	; INK
0025D9  3  20 46 1A             jsr setfgcol
0025DC  3  A9 08                lda #8 	; PAPER
0025DE  3  20 4F 1A             jsr setbgcol
0025E1  3  A9 04                lda #4  	; MESSAGE
0025E3  3  20 C4 10             jsr dmsg
0025E6  3  A9 0E                lda #14
0025E8  3  85 rr                sta chary
0025EA  3  A9 0A                lda #10
0025EC  3  85 rr                sta charx
0025EE  3  A5 rr                lda varm	; DISPLAY
0025F0  3  20 00 16             jsr disply
0025F3  3  A9 4E                lda #78 		; PUTBLOCK
0025F5  3  20 46 0C             jsr pbpattr
0025F8  3  A9 09                lda #9
0025FA  3  C5 rr                cmp varn
0025FC  3  B0 03                bcs *+5
0025FE  3  4C 06 26             jmp s00372
002601  3  A9 00                lda #0	; DISPLAY
002603  3  20 00 16             jsr disply
002606  3  A5 rr        s00372: lda varn	; DISPLAY
002608  3  20 00 16             jsr disply
00260B  3  A9 41                lda #65
00260D  3  85 rr                sta vara
00260F  3  A9 FA                lda #250 	; REPEAT
002611  3  85 rr                sta loopa
002613  3  A9 05        s00403: lda #5 	; INK
002615  3  20 46 1A             jsr setfgcol
002618  3  A9 07                lda #7 	; PAPER
00261A  3  20 4F 1A             jsr setbgcol
00261D  3  A9 10                lda #16
00261F  3  85 rr                sta chary
002621  3  A9 11                lda #17
002623  3  85 rr                sta charx
002625  3  A0 00                ldy #0		; SHOWSCORE
002627  3  A9 06                lda #6
002629  3  85 63                sta z80_b
00262B  3  20 8E 0A             jsr dscor
00262E  3  A9 02                lda #2 	; DELAY
002630  3  20 9F 05             jsr delay
002633  3  A9 47                lda #71
002635  3  C5 rr                cmp vara
002637  3  F0 03                beq *+5
002639  3  4C 40 26             jmp s00498
00263C  3  A9 41                lda #65
00263E  3  85 rr                sta vara
002640  3  A5 rr        s00498: lda vara
002642  3  18                   clc
002643  3  69 01                adc #1
002645  3  85 rr                sta vara
002647  3  C6 rr                dec loopa	; ENDREPEAT
002649  3  F0 03                beq :+
00264B  3  4C 13 26             jmp s00403
00264E  3               :
00264E  3  A9 32                lda #50 	; DELAY
002650  3  20 9F 05             jsr delay
002653  3  60                   rts
002654  3               evnt19:
002654  3  60                   rts
002655  3               evnt20:
002655  3  60                   rts
002656  3  60           ptcusr: rts
002657  3               msgdat:
002657  3  52 4F 42 4F          .byte "ROBOT_1_IN...",141
00265B  3  54 5F 31 5F  
00265F  3  49 4E 2E 2E  
002665  3  54 48 45 5F          .byte "THE_SHIP_OF_DOOM;;",141
002669  3  53 48 49 50  
00266D  3  5F 4F 46 5F  
002678  3  5F 54 48 45          .byte "_THE_CREW_LEFT_YOU_BEHIND....",13
00267C  3  5F 43 52 45  
002680  3  57 5F 4C 45  
002696  3  5F 54 48 45          .byte "_THE_SHIP_WILL_CRASH_INTO_THE",13
00269A  3  5F 53 48 49  
00269E  3  50 5F 57 49  
0026B4  3  5F 53 55 4E          .byte "_SUN_IN_5_MINUTES.",13
0026B8  3  5F 49 4E 5F  
0026BC  3  35 5F 4D 49  
0026C7  3  5F 54 4F 5F          .byte "_TO_SAVE_YOURSELF,_COLLECT_ALL",13
0026CB  3  53 41 56 45  
0026CF  3  5F 59 4F 55  
0026E6  3  5F 46 4F 55          .byte "_FOUR_KEYS_AND_GET_TO_THE",13
0026EA  3  52 5F 4B 45  
0026EE  3  59 53 5F 41  
002700  3  5F 54 45 4C          .byte "_TELEPORT_ROOM.",13
002704  3  45 50 4F 52  
002708  3  54 5F 52 4F  
002710  3  5F 43 4F 4C          .byte "_COLLECT_DATA_KEYS_FOR_POINTS.",13
002714  3  4C 45 43 54  
002718  3  5F 44 41 54  
00272F  3  5F 52 45 43          .byte "_RECHARGE_SOCKETS_ARE_LOCATED",13
002733  3  48 41 52 47  
002737  3  45 5F 53 4F  
00274D  3  5F 54 48 52          .byte "_THROUGHOUT_THE_SHIP.",13
002751  3  4F 55 47 48  
002755  3  4F 55 54 5F  
002763  3  0D                   .byte 13
002764  3  5F 52 55 4E          .byte "_RUN_OUT_OF_BATTERY._YOU_DIE.",13
002768  3  5F 4F 55 54  
00276C  3  5F 4F 46 5F  
002782  3  5F 5F 52 55          .byte "__RUN_OUT_OF_TIME._YOU_DIE.",13
002786  3  4E 5F 4F 55  
00278A  3  54 5F 4F 46  
00279E  3  5F 5F 5F 5F          .byte "_________DON",39
0027A2  3  5F 5F 5F 5F  
0027A6  3  5F 44 4F 4E  
0027AB  3  54 5F 44 49          .byte "T_DIE;",141
0027AF  3  45 3B 8D     
0027B2  3  47 41 4D 45          .byte "GAME_PAUSED",141
0027B6  3  5F 50 41 55  
0027BA  3  53 45 44 8D  
0027BE  3  0D                   .byte 13
0027BF  3  5F 5F 5F 5F          .byte "______ROBOT_1_ESCAPED_A",13
0027C3  3  5F 5F 52 4F  
0027C7  3  42 4F 54 5F  
0027D7  3  5F 5F 5F 5F          .byte "____FIREY_DEATH_WITH_JUST",13
0027DB  3  46 49 52 45  
0027DF  3  59 5F 44 45  
0027F1  3  5F 5F 5F 5F          .byte "__________XXXX_LEFT",13
0027F5  3  5F 5F 5F 5F  
0027F9  3  5F 5F 58 58  
002805  3  0D                   .byte 13
002806  3  5F 59 4F 55          .byte "_YOU_ALSO_SCORED_XXXXXX_POINTS;",141
00280A  3  5F 41 4C 53  
00280E  3  4F 5F 53 43  
002826  3  5F 5F 5F 5F          .byte "___________YOU__DIED",13
00282A  3  5F 5F 5F 5F  
00282E  3  5F 5F 5F 59  
00283B  3  0D                   .byte 13
00283C  3  5F 45 49 54          .byte "_EITHER_YOU_DIDNT_GET_OFF_THE_",13
002840  3  48 45 52 5F  
002844  3  59 4F 55 5F  
00285B  3  5F 53 48 49          .byte "_SHIP_IN_TIME_OR_YOU_RAN_OUT_OF",13
00285F  3  50 5F 49 4E  
002863  3  5F 54 49 4D  
00287B  3  5F 4C 49 56          .byte "_LIVES.",13
00287F  3  45 53 2E 0D  
002883  3  5F 5F 5F 5F          .byte "_______EITHER_WAY,_YOU",39
002887  3  5F 5F 5F 45  
00288B  3  49 54 48 45  
00289A  3  52 45 5F 44          .byte "RE_DEAD.",13
00289E  3  45 41 44 2E  
0028A2  3  0D           
0028A3  3  8D                   .byte 141
0028A4  3  57 45 4C 4C          .byte "WELL_DONE;",141
0028A8  3  5F 44 4F 4E  
0028AC  3  45 3B 8D     
0028AF  3  47 41 4D 45          .byte "GAME_OVER",141
0028B3  3  5F 4F 56 45  
0028B7  3  52 8D        
0028B9  3  7F 32 30 31          .byte "2017_Mat_Recardo",13
0028BD  3  37 5F 4D 61  
0028C1  3  74 5F 52 65  
0028CB  3  5F 5F 5F 5F          .byte "____Music_by_Sergey_Kosov",141
0028CF  3  4D 75 73 69  
0028D3  3  63 5F 62 79  
0028E5  3  31 5F 46 4F          .byte "1_FOR_KEYS_(ZXP)",13
0028E9  3  52 5F 4B 45  
0028ED  3  59 53 5F 28  
0028F6  3  5F 5F 5F 5F          .byte "_______2_FOR_KEMPSTON",13
0028FA  3  5F 5F 5F 32  
0028FE  3  5F 46 4F 52  
00290C  3  5F 5F 5F 5F          .byte "_______3_FOR_SINCLAIR",141
002910  3  5F 5F 5F 33  
002914  3  5F 46 4F 52  
002922  3               nummsg:
002922  3  0A                   .byte 10
002923  3               chgfx:
002923  3  AA AA AA AA          .byte 170,170,170,170,170,170,170,170
002927  3  AA AA AA AA  
00292B  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
00292F  3  FF FF FF FF  
002933  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
002937  3  FF FF FF FF  
00293B  3  FF FF FF FF          .byte 255,255,255,255,170,170,170,170
00293F  3  AA AA AA AA  
002943  3  55 55 55 55          .byte 85,85,85,85,170,170,170,170
002947  3  AA AA AA AA  
00294B  3  FF FF FF AA          .byte 255,255,255,170,170,170,170,170
00294F  3  AA AA AA AA  
002953  3  FF FF AA FF          .byte 255,255,170,255,170,170,170,170
002957  3  AA AA AA AA  
00295B  3  FF FF FF FF          .byte 255,255,255,255,255,255,170,170
00295F  3  FF FF AA AA  
002963  3  55 55 AA 55          .byte 85,85,170,85,170,85,170,170
002967  3  AA 55 AA AA  
00296B  3  FF EE BB FF          .byte 255,238,187,255,170,170,170,170
00296F  3  AA AA AA AA  
002973  3  2A 00 2A 00          .byte 42,0,42,0,42,0,42,0
002977  3  2A 00 2A 00  
00297B  3  FF FF FF FF          .byte 255,255,255,255,255,235,170,170
00297F  3  FF EB AA AA  
002983  3  FF FF FF AA          .byte 255,255,255,170,255,255,190,170
002987  3  FF FF BE AA  
00298B  3  55 AA 99 55          .byte 85,170,153,85,85,102,85,170
00298F  3  55 66 55 AA  
002993  3  00 AA 88 88          .byte 0,170,136,136,160,160,168,168
002997  3  A0 A0 A8 A8  
00299B  3  00 AA 88 88          .byte 0,170,136,136,160,160,168,0
00299F  3  A0 A0 A8 00  
0029A3  3  02 28 22 82          .byte 2,40,34,130,138,138,42,42
0029A7  3  8A 8A 2A 2A  
0029AB  3  08 08 20 20          .byte 8,8,32,32,32,32,8,8
0029AF  3  20 20 08 08  
0029B3  3  20 20 08 08          .byte 32,32,8,8,8,8,32,32
0029B7  3  08 08 20 20  
0029BB  3  FF EB EB BE          .byte 255,235,235,190,190,255,170,170
0029BF  3  BE FF AA AA  
0029C3  3  EB EB BE BE          .byte 235,235,190,190,190,190,235,235
0029C7  3  BE BE EB EB  
0029CB  3  00 2A 00 00          .byte 0,42,0,0,0,170,0,170
0029CF  3  00 AA 00 AA  
0029D3  3  00 AA 00 00          .byte 0,170,0,0,0,170,0,170
0029D7  3  00 AA 00 AA  
0029DB  3  00 A0 00 00          .byte 0,160,0,0,0,170,0,170
0029DF  3  00 AA 00 AA  
0029E3  3  2A 28 22 28          .byte 42,40,34,40,2,0,42,0
0029E7  3  02 00 2A 00  
0029EB  3  2A 28 28 20          .byte 42,40,40,32,32,0,0,0
0029EF  3  20 00 00 00  
0029F3  3  AA AA AA AA          .byte 170,170,170,170,102,102,85,85
0029F7  3  66 66 55 55  
0029FB  3  95 9A AA AA          .byte 149,154,170,170,149,154,170,170
0029FF  3  95 9A AA AA  
002A03  3  56 A6 AA AA          .byte 86,166,170,170,86,166,170,170
002A07  3  56 A6 AA AA  
002A0B  3  AA A8 A0 80          .byte 170,168,160,128,128,128,8,0
002A0F  3  80 80 08 00  
002A13  3  AA 2A 0A 22          .byte 170,42,10,34,2,2,0,0
002A17  3  02 02 00 00  
002A1B  3  00 00 02 02          .byte 0,0,2,2,34,10,42,170
002A1F  3  22 0A 2A AA  
002A23  3  00 08 80 80          .byte 0,8,128,128,128,160,168,170
002A27  3  80 A0 A8 AA  
002A2B  3  AA 00 AA 00          .byte 170,0,170,0,0,0,0,170
002A2F  3  00 00 00 AA  
002A33  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002A37  3  00 00 00 00  
002A3B  3  00 AA 00 00          .byte 0,170,0,0,0,0,170,0
002A3F  3  00 00 AA 00  
002A43  3  AA AA AA AA          .byte 170,170,170,170,170,170,170,170
002A47  3  AA AA AA AA  
002A4B  3  96 55 55 55          .byte 150,85,85,85,85,85,170,150
002A4F  3  55 55 AA 96  
002A53  3  AA FF AA FF          .byte 170,255,170,255,170,255,170,255
002A57  3  AA FF AA FF  
002A5B  3  FF FF BF FF          .byte 255,255,191,255,175,251,171,254
002A5F  3  AF FB AB FE  
002A63  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,170
002A67  3  FF FF FF AA  
002A6B  3  AA AA AA AA          .byte 170,170,170,170,168,160,160,160
002A6F  3  A8 A0 A0 A0  
002A73  3  AA AA AA AA          .byte 170,170,170,170,0,0,0,0
002A77  3  00 00 00 00  
002A7B  3  AA AA AA AA          .byte 170,170,170,170,42,10,10,10
002A7F  3  2A 0A 0A 0A  
002A83  3  0A 0A 0A 0A          .byte 10,10,10,10,10,10,10,10
002A87  3  0A 0A 0A 0A  
002A8B  3  0A 0A 0A 2A          .byte 10,10,10,42,170,170,170,170
002A8F  3  AA AA AA AA  
002A93  3  00 00 00 00          .byte 0,0,0,0,170,170,170,170
002A97  3  AA AA AA AA  
002A9B  3  A0 A0 A0 A8          .byte 160,160,160,168,170,170,170,170
002A9F  3  AA AA AA AA  
002AA3  3  A0 A0 A0 A0          .byte 160,160,160,160,160,160,160,160
002AA7  3  A0 A0 A0 A0  
002AAB  3  20 AA 00 00          .byte 32,170,0,0,0,0,0,32
002AAF  3  00 00 00 20  
002AB3  3  00 AA 02 02          .byte 0,170,2,2,2,2,2,170
002AB7  3  02 02 02 AA  
002ABB  3  AA 5A 55 95          .byte 170,90,85,149,150,85,85,169
002ABF  3  96 55 55 A9  
002AC3  3  AA AA 55 55          .byte 170,170,85,85,170,85,85,106
002AC7  3  AA 55 55 6A  
002ACB  3  55 55 AA 55          .byte 85,85,170,85,85,170,85,170
002ACF  3  55 AA 55 AA  
002AD3  3  55 55 5A 55          .byte 85,85,90,85,86,165,85,170
002AD7  3  56 A5 55 AA  
002ADB  3  FF FE FF AA          .byte 255,254,255,170,191,191,175,171
002ADF  3  BF BF AF AB  
002AE3  3  FF BE FF AA          .byte 255,190,255,170,255,255,255,255
002AE7  3  FF FF FF FF  
002AEB  3  FF BF FF AA          .byte 255,191,255,170,254,254,250,234
002AEF  3  FE FE FA EA  
002AF3  3  55 AA 55 55          .byte 85,170,85,85,170,170,170,170
002AF7  3  AA AA AA AA  
002AFB  3  55 AA 55 55          .byte 85,170,85,85,150,150,150,150
002AFF  3  96 96 96 96  
002B03  3  96 96 96 96          .byte 150,150,150,150,150,170,150,85
002B07  3  96 AA 96 55  
002B0B  3  FF FE FE FB          .byte 255,254,254,251,238,239,186,191
002B0F  3  EE EF BA BF  
002B13  3  55 95 AA 95          .byte 85,149,170,149,154,149,149,149
002B17  3  9A 95 95 95  
002B1B  3  6A 5A 96 56          .byte 106,90,150,86,165,85,85,85
002B1F  3  A5 55 55 55  
002B23  3  AA AA AA AA          .byte 170,170,170,170,86,85,86,90
002B27  3  56 55 56 5A  
002B2B  3  AA AA AA AA          .byte 170,170,170,170,170,106,106,90
002B2F  3  AA 6A 6A 5A  
002B33  3  AA 56 A9 AA          .byte 170,86,169,170,85,85,85,85
002B37  3  55 55 55 55  
002B3B  3  5A 95 95 55          .byte 90,149,149,85,85,90,85,170
002B3F  3  55 5A 55 AA  
002B43  3  55 55 55 55          .byte 85,85,85,85,86,170,85,170
002B47  3  56 AA 55 AA  
002B4B  3  56 55 55 55          .byte 86,85,85,85,169,169,86,170
002B4F  3  A9 A9 56 AA  
002B53  3  AA AA AA AA          .byte 170,170,170,170,170,170,170,170
002B57  3  AA AA AA AA  
002B5B  3  AA AA AA AA          .byte 170,170,170,170,170,170,170,170
002B5F  3  AA AA AA AA  
002B63  3  AA AA AA AA          .byte 170,170,170,170,170,170,170,170
002B67  3  AA AA AA AA  
002B6B  3  55 69 69 69          .byte 85,105,105,105,105,105,105,85
002B6F  3  69 69 69 55  
002B73  3  96 69 69 69          .byte 150,105,105,105,105,105,105,150
002B77  3  69 69 69 96  
002B7B  3  96 96 96 69          .byte 150,150,150,105,105,105,105,85
002B7F  3  69 69 69 55  
002B83  3  96 96 55 69          .byte 150,150,85,105,105,85,150,150
002B87  3  69 55 96 96  
002B8B  3  AA AA AA AA          .byte 170,170,170,170,170,170,170,170
002B8F  3  AA AA AA AA  
002B93  3  AA AA 9A AA          .byte 170,170,154,170,170,154,170,170
002B97  3  AA 9A AA AA  
002B9B  3  AA AA AA AA          .byte 170,170,170,170,170,170,170,170
002B9F  3  AA AA AA AA  
002BA3  3  AA 6A 6A 6A          .byte 170,106,106,106,106,106,106,170
002BA7  3  6A 6A 6A AA  
002BAB  3  AA 5A 5A 5A          .byte 170,90,90,90,90,90,90,170
002BAF  3  5A 5A 5A AA  
002BB3  3  AA 56 56 56          .byte 170,86,86,86,86,86,86,170
002BB7  3  56 56 56 AA  
002BBB  3  AA 55 55 55          .byte 170,85,85,85,85,85,85,170
002BBF  3  55 55 55 AA  
002BC3  3  A5 95 55 55          .byte 165,149,85,85,85,85,105,85
002BC7  3  55 55 69 55  
002BCB  3  A5 96 9A 6A          .byte 165,150,154,106,85,85,106,85
002BCF  3  55 55 6A 55  
002BD3  3  55 AA AA AA          .byte 85,170,170,170,85,85,170,85
002BD7  3  55 55 AA 55  
002BDB  3  5A A6 A9 A9          .byte 90,166,169,169,85,85,169,85
002BDF  3  55 55 A9 55  
002BE3  3  55 55 55 55          .byte 85,85,85,85,85,85,85,170
002BE7  3  55 55 55 AA  
002BEB  3  A6 9A 9A 55          .byte 166,154,154,85,166,166,154,170
002BEF  3  A6 A6 9A AA  
002BF3  3               bprop:
002BF3  3  00                   .byte 0
002BF4  3  02                   .byte 2
002BF5  3  02                   .byte 2
002BF6  3  01                   .byte 1
002BF7  3  02                   .byte 2
002BF8  3  01                   .byte 1
002BF9  3  01                   .byte 1
002BFA  3  01                   .byte 1
002BFB  3  02                   .byte 2
002BFC  3  01                   .byte 1
002BFD  3  02                   .byte 2
002BFE  3  01                   .byte 1
002BFF  3  01                   .byte 1
002C00  3  01                   .byte 1
002C01  3  01                   .byte 1
002C02  3  01                   .byte 1
002C03  3  01                   .byte 1
002C04  3  02                   .byte 2
002C05  3  02                   .byte 2
002C06  3  01                   .byte 1
002C07  3  00                   .byte 0
002C08  3  02                   .byte 2
002C09  3  02                   .byte 2
002C0A  3  02                   .byte 2
002C0B  3  02                   .byte 2
002C0C  3  02                   .byte 2
002C0D  3  05                   .byte 5
002C0E  3  03                   .byte 3
002C0F  3  03                   .byte 3
002C10  3  00                   .byte 0
002C11  3  00                   .byte 0
002C12  3  00                   .byte 0
002C13  3  00                   .byte 0
002C14  3  00                   .byte 0
002C15  3  00                   .byte 0
002C16  3  00                   .byte 0
002C17  3  00                   .byte 0
002C18  3  00                   .byte 0
002C19  3  00                   .byte 0
002C1A  3  00                   .byte 0
002C1B  3  00                   .byte 0
002C1C  3  00                   .byte 0
002C1D  3  00                   .byte 0
002C1E  3  00                   .byte 0
002C1F  3  00                   .byte 0
002C20  3  00                   .byte 0
002C21  3  00                   .byte 0
002C22  3  00                   .byte 0
002C23  3  00                   .byte 0
002C24  3  02                   .byte 2
002C25  3  02                   .byte 2
002C26  3  02                   .byte 2
002C27  3  02                   .byte 2
002C28  3  02                   .byte 2
002C29  3  02                   .byte 2
002C2A  3  01                   .byte 1
002C2B  3  01                   .byte 1
002C2C  3  01                   .byte 1
002C2D  3  01                   .byte 1
002C2E  3  01                   .byte 1
002C2F  3  00                   .byte 0
002C30  3  02                   .byte 2
002C31  3  02                   .byte 2
002C32  3  02                   .byte 2
002C33  3  02                   .byte 2
002C34  3  02                   .byte 2
002C35  3  02                   .byte 2
002C36  3  02                   .byte 2
002C37  3  02                   .byte 2
002C38  3  02                   .byte 2
002C39  3  00                   .byte 0
002C3A  3  02                   .byte 2
002C3B  3  00                   .byte 0
002C3C  3  00                   .byte 0
002C3D  3  00                   .byte 0
002C3E  3  00                   .byte 0
002C3F  3  00                   .byte 0
002C40  3  00                   .byte 0
002C41  3  00                   .byte 0
002C42  3  00                   .byte 0
002C43  3  00                   .byte 0
002C44  3  00                   .byte 0
002C45  3  00                   .byte 0
002C46  3  00                   .byte 0
002C47  3  00                   .byte 0
002C48  3  02                   .byte 2
002C49  3  02                   .byte 2
002C4A  3  02                   .byte 2
002C4B  3  06                   .byte 6
002C4C  3  06                   .byte 6
002C4D  3               sprgfx:
002C4D  3  00 00 C0 00          .byte 0,0,192,0,195,255,204,63,240,255,51,255,63,207,207,255,207,15,255,255,192,3,255,252,240,15,63,255,240,12,255,255
002C51  3  C3 FF CC 3F  
002C55  3  F0 FF 33 FF  
002C6D  3  00 00 30 00          .byte 0,0,48,0,240,255,243,15,252,63,204,255,207,243,243,255,243,195,255,255,240,0,63,255,252,3,207,255,60,3,255,255
002C71  3  F0 FF F3 0F  
002C75  3  FC 3F CC FF  
002C8D  3  00 00 0C 00          .byte 0,0,12,0,252,63,252,195,255,15,243,63,243,252,252,255,252,240,255,255,60,0,207,255,255,0,243,255,207,0,255,255
002C91  3  FC 3F FC C3  
002C95  3  FF 0F F3 3F  
002CAD  3  00 00 03 00          .byte 0,0,3,0,255,15,255,48,255,195,252,207,60,255,255,63,63,60,255,255,15,0,243,255,63,192,252,255,51,192,255,255
002CB1  3  FF 0F FF 30  
002CB5  3  FF C3 FC CF  
002CCD  3  00 00 C0 00          .byte 0,0,192,0,195,255,204,63,240,255,51,255,63,207,207,255,207,15,255,255,192,3,255,255,48,12,255,255,240,15,255,252
002CD1  3  C3 FF CC 3F  
002CD5  3  F0 FF 33 FF  
002CED  3  00 00 30 00          .byte 0,0,48,0,240,255,243,15,252,63,204,255,207,243,243,255,243,195,255,255,240,0,255,255,12,3,255,255,252,3,63,255
002CF1  3  F0 FF F3 0F  
002CF5  3  FC 3F CC FF  
002D0D  3  00 00 0C 00          .byte 0,0,12,0,252,63,252,195,255,15,243,63,243,252,252,255,252,240,255,255,60,0,255,255,195,0,255,255,255,0,207,255
002D11  3  FC 3F FC C3  
002D15  3  FF 0F F3 3F  
002D2D  3  00 00 03 00          .byte 0,0,3,0,255,15,255,48,255,195,252,207,60,255,255,63,63,60,255,255,15,0,255,255,48,192,255,255,63,192,243,255
002D31  3  FF 0F FF 30  
002D35  3  FF C3 FC CF  
002D4D  3  C0 00 C3 FF          .byte 192,0,195,255,204,63,240,255,51,255,63,207,207,255,207,15,255,255,192,3,0,0,63,255,240,15,255,252,48,15,63,255
002D51  3  CC 3F F0 FF  
002D55  3  33 FF 3F CF  
002D6D  3  30 00 F0 FF          .byte 48,0,240,255,243,15,252,63,204,255,207,243,243,255,243,195,255,255,240,0,0,0,207,255,252,3,63,255,204,3,207,255
002D71  3  F3 0F FC 3F  
002D75  3  CC FF CF F3  
002D8D  3  0C 00 FC 3F          .byte 12,0,252,63,252,195,255,15,243,63,243,252,252,255,252,240,255,255,60,0,0,0,243,255,255,0,207,255,243,0,243,255
002D91  3  FC C3 FF 0F  
002D95  3  F3 3F F3 FC  
002DAD  3  03 00 FF 0F          .byte 3,0,255,15,255,48,255,195,252,207,60,255,255,63,63,60,255,255,15,0,0,0,252,255,63,192,243,255,60,192,252,255
002DB1  3  FF 30 FF C3  
002DB5  3  FC CF 3C FF  
002DCD  3  00 00 00 03          .byte 0,0,0,3,255,195,252,51,255,15,255,204,243,252,255,243,240,243,255,255,192,3,63,255,240,15,255,252,48,15,255,255
002DD1  3  FF C3 FC 33  
002DD5  3  FF 0F FF CC  
002DED  3  00 00 C0 00          .byte 0,0,192,0,255,240,255,12,255,195,63,243,60,255,255,252,252,60,255,255,240,0,207,255,252,3,63,255,204,3,255,255
002DF1  3  FF F0 FF 0C  
002DF5  3  FF C3 3F F3  
002E0D  3  00 00 30 00          .byte 0,0,48,0,63,252,63,195,255,240,207,252,207,63,63,255,63,15,255,255,60,0,243,255,255,0,207,255,243,0,255,255
002E11  3  3F FC 3F C3  
002E15  3  FF F0 CF FC  
002E2D  3  00 00 0C 00          .byte 0,0,12,0,15,255,207,240,63,252,51,255,243,207,207,255,207,195,255,255,15,0,252,255,63,192,243,255,60,192,255,255
002E31  3  0F FF CF F0  
002E35  3  3F FC 33 FF  
002E4D  3  00 00 00 03          .byte 0,0,0,3,255,195,252,51,255,15,255,204,243,252,255,243,240,243,255,255,192,3,255,255,48,12,255,255,240,15,63,255
002E51  3  FF C3 FC 33  
002E55  3  FF 0F FF CC  
002E6D  3  00 00 C0 00          .byte 0,0,192,0,255,240,255,12,255,195,63,243,60,255,255,252,252,60,255,255,240,0,255,255,12,3,255,255,252,3,207,255
002E71  3  FF F0 FF 0C  
002E75  3  FF C3 3F F3  
002E8D  3  00 00 30 00          .byte 0,0,48,0,63,252,63,195,255,240,207,252,207,63,63,255,63,15,255,255,60,0,255,255,195,0,255,255,255,0,243,255
002E91  3  3F FC 3F C3  
002E95  3  FF F0 CF FC  
002EAD  3  00 00 0C 00          .byte 0,0,12,0,15,255,207,240,63,252,51,255,243,207,207,255,207,195,255,255,15,0,255,255,48,192,255,255,63,192,252,255
002EB1  3  0F FF CF F0  
002EB5  3  3F FC 33 FF  
002ECD  3  00 03 FF C3          .byte 0,3,255,195,252,51,255,15,255,204,243,252,255,243,240,243,255,255,192,3,0,0,255,252,240,15,63,255,240,12,255,252
002ED1  3  FC 33 FF 0F  
002ED5  3  FF CC F3 FC  
002EED  3  C0 00 FF F0          .byte 192,0,255,240,255,12,255,195,63,243,60,255,255,252,252,60,255,255,240,0,0,0,63,255,252,3,207,255,60,3,63,255
002EF1  3  FF 0C FF C3  
002EF5  3  3F F3 3C FF  
002F0D  3  30 00 3F FC          .byte 48,0,63,252,63,195,255,240,207,252,207,63,63,255,63,15,255,255,60,0,0,0,207,255,255,0,243,255,207,0,207,255
002F11  3  3F C3 FF F0  
002F15  3  CF FC CF 3F  
002F2D  3  0C 00 0F FF          .byte 12,0,15,255,207,240,63,252,51,255,243,207,207,255,207,195,255,255,15,0,0,0,243,255,63,192,252,255,51,192,243,255
002F31  3  CF F0 3F FC  
002F35  3  33 FF F3 CF  
002F4D  3  03 C0 0F F0          .byte 3,192,15,240,12,48,48,204,48,204,48,60,192,51,192,51,192,3,192,3,48,12,48,12,48,12,12,48,15,240,3,192
002F51  3  0C 30 30 CC  
002F55  3  30 CC 30 3C  
002F6D  3  00 F0 03 FC          .byte 0,240,3,252,3,12,12,51,12,51,12,15,240,12,240,12,240,0,240,0,12,3,12,3,12,3,3,12,3,252,0,240
002F71  3  03 0C 0C 33  
002F75  3  0C 33 0C 0F  
002F8D  3  00 3C 00 FF          .byte 0,60,0,255,0,195,195,12,195,12,195,3,60,3,60,3,60,0,60,0,195,0,195,0,195,0,0,195,0,255,0,60
002F91  3  00 C3 C3 0C  
002F95  3  C3 0C C3 03  
002FAD  3  00 0F C0 3F          .byte 0,15,192,63,192,48,48,195,48,195,240,192,207,0,207,0,15,0,15,0,48,192,48,192,48,192,192,48,192,63,0,15
002FB1  3  C0 30 30 C3  
002FB5  3  30 C3 F0 C0  
002FCD  3  00 00 03 C0          .byte 0,0,3,192,12,48,48,12,48,204,48,60,192,51,192,51,192,3,192,3,48,12,48,12,48,12,12,48,3,192,0,0
002FD1  3  0C 30 30 0C  
002FD5  3  30 CC 30 3C  
002FED  3  00 00 00 F0          .byte 0,0,0,240,3,12,12,3,12,51,12,15,240,12,240,12,240,0,240,0,12,3,12,3,12,3,3,12,0,240,0,0
002FF1  3  03 0C 0C 03  
002FF5  3  0C 33 0C 0F  
00300D  3  00 00 00 3C          .byte 0,0,0,60,0,195,195,0,195,12,195,3,60,3,60,3,60,0,60,0,195,0,195,0,195,0,0,195,0,60,0,0
003011  3  00 C3 C3 00  
003015  3  C3 0C C3 03  
00302D  3  00 00 00 0F          .byte 0,0,0,15,192,48,48,192,48,195,240,192,207,0,207,0,15,0,15,0,48,192,48,192,48,192,192,48,0,15,0,0
003031  3  C0 30 30 C0  
003035  3  30 C3 F0 C0  
00304D  3  00 00 03 C0          .byte 0,0,3,192,12,48,48,12,48,204,192,51,192,51,192,15,192,15,192,3,192,3,48,12,48,12,12,48,3,192,0,0
003051  3  0C 30 30 0C  
003055  3  30 CC C0 33  
00306D  3  00 00 00 F0          .byte 0,0,0,240,3,12,12,3,12,51,240,12,240,12,240,3,240,3,240,0,240,0,12,3,12,3,3,12,0,240,0,0
003071  3  03 0C 0C 03  
003075  3  0C 33 F0 0C  
00308D  3  00 00 00 3C          .byte 0,0,0,60,0,195,195,0,195,12,60,3,60,3,252,0,252,0,60,0,60,0,195,0,195,0,0,195,0,60,0,0
003091  3  00 C3 C3 00  
003095  3  C3 0C 3C 03  
0030AD  3  00 00 00 0F          .byte 0,0,0,15,192,48,48,192,48,195,207,0,207,0,63,0,63,0,15,0,15,0,48,192,48,192,192,48,0,15,0,0
0030B1  3  C0 30 30 C0  
0030B5  3  30 C3 CF 00  
0030CD  3  03 C0 0C 30          .byte 3,192,12,48,48,12,48,204,192,51,192,51,192,15,192,15,192,3,192,3,192,3,192,3,48,12,48,12,12,48,3,192
0030D1  3  30 0C 30 CC  
0030D5  3  C0 33 C0 33  
0030ED  3  00 F0 03 0C          .byte 0,240,3,12,12,3,12,51,240,12,240,12,240,3,240,3,240,0,240,0,240,0,240,0,12,3,12,3,3,12,0,240
0030F1  3  0C 03 0C 33  
0030F5  3  F0 0C F0 0C  
00310D  3  00 3C 00 C3          .byte 0,60,0,195,195,0,195,12,60,3,60,3,252,0,252,0,60,0,60,0,60,0,60,0,195,0,195,0,0,195,0,60
003111  3  C3 00 C3 0C  
003115  3  3C 03 3C 03  
00312D  3  00 0F C0 30          .byte 0,15,192,48,48,192,48,195,207,0,207,0,63,0,63,0,15,0,15,0,15,0,15,0,48,192,48,192,192,48,0,15
003131  3  30 C0 30 C3  
003135  3  CF 00 CF 00  
00314D  3  00 00 00 00          .byte 0,0,0,0,0,0,63,252,48,12,63,252,15,240,3,192,255,255,207,243,51,204,207,243,255,255,255,255,204,51,48,12
003151  3  00 00 3F FC  
003155  3  30 0C 3F FC  
00316D  3  00 00 00 00          .byte 0,0,0,0,0,0,15,255,12,3,15,255,3,252,0,240,255,255,243,252,12,243,243,252,255,255,255,255,243,12,12,3
003171  3  00 00 0F FF  
003175  3  0C 03 0F FF  
00318D  3  00 00 00 00          .byte 0,0,0,0,0,0,195,255,195,0,195,255,0,255,0,60,255,255,60,255,195,60,60,255,255,255,255,255,60,195,195,0
003191  3  00 00 C3 FF  
003195  3  C3 00 C3 FF  
0031AD  3  00 00 00 00          .byte 0,0,0,0,0,0,240,255,48,192,240,255,192,63,0,15,255,255,207,63,48,207,207,63,255,255,255,255,207,48,48,192
0031B1  3  00 00 F0 FF  
0031B5  3  30 C0 F0 FF  
0031CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,63,252,48,12,63,252,15,240,255,255,207,243,51,204,207,243,255,255,255,255,204,51,48,12
0031D1  3  00 00 00 00  
0031D5  3  3F FC 30 0C  
0031ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,15,255,12,3,15,255,3,252,255,255,243,252,12,243,243,252,255,255,255,255,243,12,12,3
0031F1  3  00 00 00 00  
0031F5  3  0F FF 0C 03  
00320D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,195,255,195,0,195,255,0,255,255,255,60,255,195,60,60,255,255,255,255,255,60,195,195,0
003211  3  00 00 00 00  
003215  3  C3 FF C3 00  
00322D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,240,255,48,192,240,255,192,63,255,255,207,63,48,207,207,63,255,255,255,255,207,48,48,192
003231  3  00 00 00 00  
003235  3  F0 FF 30 C0  
00324D  3  00 00 00 00          .byte 0,0,0,0,0,0,63,252,48,12,63,252,15,240,3,192,255,255,207,243,51,204,207,243,255,255,255,255,204,51,48,12
003251  3  00 00 3F FC  
003255  3  30 0C 3F FC  
00326D  3  00 00 00 00          .byte 0,0,0,0,0,0,15,255,12,3,15,255,3,252,0,240,255,255,243,252,12,243,243,252,255,255,255,255,243,12,12,3
003271  3  00 00 0F FF  
003275  3  0C 03 0F FF  
00328D  3  00 00 00 00          .byte 0,0,0,0,0,0,195,255,195,0,195,255,0,255,0,60,255,255,60,255,195,60,60,255,255,255,255,255,60,195,195,0
003291  3  00 00 C3 FF  
003295  3  C3 00 C3 FF  
0032AD  3  00 00 00 00          .byte 0,0,0,0,0,0,240,255,48,192,240,255,192,63,0,15,255,255,207,63,48,207,207,63,255,255,255,255,207,48,48,192
0032B1  3  00 00 F0 FF  
0032B5  3  30 C0 F0 FF  
0032CD  3  00 00 00 00          .byte 0,0,0,0,63,252,48,12,63,252,15,240,3,192,15,240,255,255,207,243,51,204,207,243,255,255,255,255,204,51,48,12
0032D1  3  3F FC 30 0C  
0032D5  3  3F FC 0F F0  
0032ED  3  00 00 00 00          .byte 0,0,0,0,15,255,12,3,15,255,3,252,0,240,3,252,255,255,243,252,12,243,243,252,255,255,255,255,243,12,12,3
0032F1  3  0F FF 0C 03  
0032F5  3  0F FF 03 FC  
00330D  3  00 00 00 00          .byte 0,0,0,0,195,255,195,0,195,255,0,255,0,60,0,255,255,255,60,255,195,60,60,255,255,255,255,255,60,195,195,0
003311  3  C3 FF C3 00  
003315  3  C3 FF 00 FF  
00332D  3  00 00 00 00          .byte 0,0,0,0,240,255,48,192,240,255,192,63,0,15,192,63,255,255,207,63,48,207,207,63,255,255,255,255,207,48,48,192
003331  3  F0 FF 30 C0  
003335  3  F0 FF C0 3F  
00334D  3  03 C0 FF FF          .byte 3,192,255,255,3,192,15,240,48,12,48,60,48,60,48,60,48,12,63,252,60,12,60,12,15,240,12,48,12,48,15,240
003351  3  03 C0 0F F0  
003355  3  30 0C 30 3C  
00336D  3  00 F0 FF FF          .byte 0,240,255,255,0,240,3,252,12,3,12,15,12,15,12,15,12,3,15,255,15,3,15,3,3,252,3,12,3,12,3,252
003371  3  00 F0 03 FC  
003375  3  0C 03 0C 0F  
00338D  3  00 3C FF FF          .byte 0,60,255,255,0,60,0,255,195,0,195,3,195,3,195,3,195,0,195,255,195,192,195,192,0,255,0,195,0,195,0,255
003391  3  00 3C 00 FF  
003395  3  C3 00 C3 03  
0033AD  3  00 0F FF FF          .byte 0,15,255,255,0,15,192,63,48,192,240,192,240,192,240,192,48,192,240,255,48,240,48,240,192,63,192,48,192,48,192,63
0033B1  3  00 0F C0 3F  
0033B5  3  30 C0 F0 C0  
0033CD  3  03 C0 0F F0          .byte 3,192,15,240,3,192,15,240,48,12,48,204,48,204,48,204,48,12,63,252,51,12,51,12,15,240,12,48,12,240,15,0
0033D1  3  03 C0 0F F0  
0033D5  3  30 0C 30 CC  
0033ED  3  00 F0 03 FC          .byte 0,240,3,252,0,240,3,252,12,3,12,51,12,51,12,51,12,3,15,255,12,195,12,195,3,252,3,12,3,60,3,192
0033F1  3  00 F0 03 FC  
0033F5  3  0C 03 0C 33  
00340D  3  00 3C 00 FF          .byte 0,60,0,255,0,60,0,255,195,0,195,12,195,12,195,12,195,0,195,255,195,48,195,48,0,255,0,195,0,207,0,240
003411  3  00 3C 00 FF  
003415  3  C3 00 C3 0C  
00342D  3  00 0F C0 3F          .byte 0,15,192,63,0,15,192,63,48,192,48,195,48,195,48,195,48,192,240,255,48,204,48,204,192,63,192,48,192,51,0,60
003431  3  00 0F C0 3F  
003435  3  30 C0 30 C3  
00344D  3  03 C0 03 C0          .byte 3,192,3,192,3,192,15,240,48,12,51,12,51,12,51,12,48,12,63,252,48,204,48,204,15,240,12,48,15,240,0,0
003451  3  03 C0 0F F0  
003455  3  30 0C 33 0C  
00346D  3  00 F0 00 F0          .byte 0,240,0,240,0,240,3,252,12,3,12,195,12,195,12,195,12,3,15,255,12,51,12,51,3,252,3,12,3,252,0,0
003471  3  00 F0 03 FC  
003475  3  0C 03 0C C3  
00348D  3  00 3C 00 3C          .byte 0,60,0,60,0,60,0,255,195,0,195,48,195,48,195,48,195,0,195,255,195,12,195,12,0,255,0,195,0,255,0,0
003491  3  00 3C 00 FF  
003495  3  C3 00 C3 30  
0034AD  3  00 0F 00 0F          .byte 0,15,0,15,0,15,192,63,48,192,48,204,48,204,48,204,48,192,240,255,48,195,48,195,192,63,192,48,192,63,0,0
0034B1  3  00 0F C0 3F  
0034B5  3  30 C0 30 CC  
0034CD  3  03 C0 0F F0          .byte 3,192,15,240,3,192,15,240,48,12,60,12,60,12,60,12,48,12,63,252,48,60,48,60,15,240,12,48,15,48,0,240
0034D1  3  03 C0 0F F0  
0034D5  3  30 0C 3C 0C  
0034ED  3  00 F0 03 FC          .byte 0,240,3,252,0,240,3,252,12,3,15,3,15,3,15,3,12,3,15,255,12,15,12,15,3,252,3,12,3,204,0,60
0034F1  3  00 F0 03 FC  
0034F5  3  0C 03 0F 03  
00350D  3  00 3C 00 FF          .byte 0,60,0,255,0,60,0,255,195,0,195,192,195,192,195,192,195,0,195,255,195,3,195,3,0,255,0,195,0,243,0,15
003511  3  00 3C 00 FF  
003515  3  C3 00 C3 C0  
00352D  3  00 0F C0 3F          .byte 0,15,192,63,0,15,192,63,48,192,48,240,48,240,48,240,48,192,240,255,240,192,240,192,192,63,192,48,192,60,192,3
003531  3  00 0F C0 3F  
003535  3  30 C0 30 F0  
00354D  3  03 C0 0C 30          .byte 3,192,12,48,48,12,63,252,63,252,204,51,207,243,255,255,48,12,63,252,12,48,48,12,63,252,0,0,0,0,0,0
003551  3  30 0C 3F FC  
003555  3  3F FC CC 33  
00356D  3  00 F0 03 0C          .byte 0,240,3,12,12,3,15,255,15,255,243,12,243,252,255,255,12,3,15,255,3,12,12,3,15,255,0,0,0,0,0,0
003571  3  0C 03 0F FF  
003575  3  0F FF F3 0C  
00358D  3  00 3C 00 C3          .byte 0,60,0,195,195,0,195,255,195,255,60,195,60,255,255,255,195,0,195,255,0,195,195,0,195,255,0,0,0,0,0,0
003591  3  C3 00 C3 FF  
003595  3  C3 FF 3C C3  
0035AD  3  00 0F C0 30          .byte 0,15,192,48,48,192,240,255,240,255,207,48,207,63,255,255,48,192,240,255,192,48,48,192,240,255,0,0,0,0,0,0
0035B1  3  30 C0 F0 FF  
0035B5  3  F0 FF CF 30  
0035CD  3  03 C0 0C 30          .byte 3,192,12,48,48,12,48,12,48,12,207,243,207,243,255,255,48,12,63,252,12,48,48,12,63,252,3,192,3,192,0,0
0035D1  3  30 0C 30 0C  
0035D5  3  30 0C CF F3  
0035ED  3  00 F0 03 0C          .byte 0,240,3,12,12,3,12,3,12,3,243,252,243,252,255,255,12,3,15,255,3,12,12,3,15,255,0,240,0,240,0,0
0035F1  3  0C 03 0C 03  
0035F5  3  0C 03 F3 FC  
00360D  3  00 3C 00 C3          .byte 0,60,0,195,195,0,195,0,195,0,60,255,60,255,255,255,195,0,195,255,0,195,195,0,195,255,0,60,0,60,0,0
003611  3  C3 00 C3 00  
003615  3  C3 00 3C FF  
00362D  3  00 0F C0 30          .byte 0,15,192,48,48,192,48,192,48,192,207,63,207,63,255,255,48,192,240,255,192,48,48,192,240,255,0,15,0,15,0,0
003631  3  30 C0 30 C0  
003635  3  30 C0 CF 3F  
00364D  3  03 C0 0C 30          .byte 3,192,12,48,48,12,63,252,63,252,204,51,207,243,255,255,48,12,63,252,12,48,48,12,63,252,12,48,3,192,3,192
003651  3  30 0C 3F FC  
003655  3  3F FC CC 33  
00366D  3  00 F0 03 0C          .byte 0,240,3,12,12,3,15,255,15,255,243,12,243,252,255,255,12,3,15,255,3,12,12,3,15,255,3,12,0,240,0,240
003671  3  0C 03 0F FF  
003675  3  0F FF F3 0C  
00368D  3  00 3C 00 C3          .byte 0,60,0,195,195,0,195,255,195,255,60,195,60,255,255,255,195,0,195,255,0,195,195,0,195,255,0,195,0,60,0,60
003691  3  C3 00 C3 FF  
003695  3  C3 FF 3C C3  
0036AD  3  00 0F C0 30          .byte 0,15,192,48,48,192,240,255,240,255,207,48,207,63,255,255,48,192,240,255,192,48,48,192,240,255,192,48,0,15,0,15
0036B1  3  30 C0 F0 FF  
0036B5  3  F0 FF CF 30  
0036CD  3  03 C0 0C 30          .byte 3,192,12,48,48,12,63,252,63,252,207,243,204,51,255,255,48,12,63,252,12,48,48,12,63,252,48,12,12,48,15,240
0036D1  3  30 0C 3F FC  
0036D5  3  3F FC CF F3  
0036ED  3  00 F0 03 0C          .byte 0,240,3,12,12,3,15,255,15,255,243,252,243,12,255,255,12,3,15,255,3,12,12,3,15,255,12,3,3,12,3,252
0036F1  3  0C 03 0F FF  
0036F5  3  0F FF F3 FC  
00370D  3  00 3C 00 C3          .byte 0,60,0,195,195,0,195,255,195,255,60,255,60,195,255,255,195,0,195,255,0,195,195,0,195,255,195,0,0,195,0,255
003711  3  C3 00 C3 FF  
003715  3  C3 FF 3C FF  
00372D  3  00 0F C0 30          .byte 0,15,192,48,48,192,240,255,240,255,207,63,207,48,255,255,48,192,240,255,192,48,48,192,240,255,48,192,192,48,192,63
003731  3  30 C0 F0 FF  
003735  3  F0 FF CF 3F  
00374D  3  03 C0 03 C0          .byte 3,192,3,192,3,192,3,192,3,0,243,207,255,255,255,255,243,15,3,192,3,0,3,192,3,192,3,192,3,192,3,192
003751  3  03 C0 03 C0  
003755  3  03 00 F3 CF  
00376D  3  00 F0 00 F0          .byte 0,240,0,240,0,240,0,240,0,192,252,243,255,255,255,255,252,195,0,240,0,192,0,240,0,240,0,240,0,240,0,240
003771  3  00 F0 00 F0  
003775  3  00 C0 FC F3  
00378D  3  00 3C 00 3C          .byte 0,60,0,60,0,60,0,60,0,48,255,60,255,255,255,255,255,48,0,60,0,48,0,60,0,60,0,60,0,60,0,60
003791  3  00 3C 00 3C  
003795  3  00 30 FF 3C  
0037AD  3  00 0F 00 0F          .byte 0,15,0,15,0,15,0,15,0,12,63,207,255,255,255,255,63,204,0,15,0,12,0,15,0,15,0,15,0,15,0,15
0037B1  3  00 0F 00 0F  
0037B5  3  00 0C 3F CF  
0037CD  3  0F F0 0F F0          .byte 15,240,15,240,15,240,15,240,3,0,63,252,63,252,63,252,63,60,3,192,3,0,3,192,15,240,15,240,15,240,15,240
0037D1  3  0F F0 0F F0  
0037D5  3  03 00 3F FC  
0037ED  3  03 FC 03 FC          .byte 3,252,3,252,3,252,3,252,0,192,15,255,15,255,15,255,15,207,0,240,0,192,0,240,3,252,3,252,3,252,3,252
0037F1  3  03 FC 03 FC  
0037F5  3  00 C0 0F FF  
00380D  3  00 FF 00 FF          .byte 0,255,0,255,0,255,0,255,0,48,195,255,195,255,195,255,195,243,0,60,0,48,0,60,0,255,0,255,0,255,0,255
003811  3  00 FF 00 FF  
003815  3  00 30 C3 FF  
00382D  3  C0 3F C0 3F          .byte 192,63,192,63,192,63,192,63,0,12,240,255,240,255,240,255,240,252,0,15,0,12,0,15,192,63,192,63,192,63,192,63
003831  3  C0 3F C0 3F  
003835  3  00 0C F0 FF  
00384D  3  3F FC 3F FC          .byte 63,252,63,252,63,60,63,252,3,0,3,192,3,192,3,192,3,192,3,192,3,0,3,192,63,252,63,252,63,252,60,60
003851  3  3F 3C 3F FC  
003855  3  03 00 03 C0  
00386D  3  0F FF 0F FF          .byte 15,255,15,255,15,207,15,255,0,192,0,240,0,240,0,240,0,240,0,240,0,192,0,240,15,255,15,255,15,255,15,15
003871  3  0F CF 0F FF  
003875  3  00 C0 00 F0  
00388D  3  C3 FF C3 FF          .byte 195,255,195,255,195,243,195,255,0,48,0,60,0,60,0,60,0,60,0,60,0,48,0,60,195,255,195,255,195,255,195,195
003891  3  C3 F3 C3 FF  
003895  3  00 30 00 3C  
0038AD  3  F0 FF F0 FF          .byte 240,255,240,255,240,252,240,255,0,12,0,15,0,15,0,15,0,15,0,15,0,12,0,15,240,255,240,255,240,255,240,240
0038B1  3  F0 FC F0 FF  
0038B5  3  00 0C 00 0F  
0038CD  3  0F F0 0F F0          .byte 15,240,15,240,15,240,15,240,3,0,63,252,63,252,63,252,63,60,3,192,3,0,3,192,15,240,15,240,15,240,15,240
0038D1  3  0F F0 0F F0  
0038D5  3  03 00 3F FC  
0038ED  3  03 FC 03 FC          .byte 3,252,3,252,3,252,3,252,0,192,15,255,15,255,15,255,15,207,0,240,0,192,0,240,3,252,3,252,3,252,3,252
0038F1  3  03 FC 03 FC  
0038F5  3  00 C0 0F FF  
00390D  3  00 FF 00 FF          .byte 0,255,0,255,0,255,0,255,0,48,195,255,195,255,195,255,195,243,0,60,0,48,0,60,0,255,0,255,0,255,0,255
003911  3  00 FF 00 FF  
003915  3  00 30 C3 FF  
00392D  3  C0 3F C0 3F          .byte 192,63,192,63,192,63,192,63,0,12,240,255,240,255,240,255,240,252,0,15,0,12,0,15,192,63,192,63,192,63,192,63
003931  3  C0 3F C0 3F  
003935  3  00 0C F0 FF  
00394D  3  0F F0 3F F0          .byte 15,240,63,240,51,252,0,0,255,252,3,240,63,240,0,12,15,240,63,192,204,252,195,195,243,252,243,252,204,60,60,60
003951  3  33 FC 00 00  
003955  3  FF FC 03 F0  
00396D  3  03 FC 0F FC          .byte 3,252,15,252,12,255,0,0,63,255,0,252,15,252,0,3,3,252,15,240,51,63,240,240,60,255,60,255,51,15,15,15
003971  3  0C FF 00 00  
003975  3  3F FF 00 FC  
00398D  3  00 FF 03 FF          .byte 0,255,3,255,195,63,0,0,207,255,0,63,3,255,192,0,0,255,3,252,204,207,60,60,207,63,207,63,204,195,195,195
003991  3  C3 3F 00 00  
003995  3  CF FF 00 3F  
0039AD  3  C0 3F C0 FF          .byte 192,63,192,255,240,207,0,0,243,255,192,15,192,255,48,0,192,63,0,255,243,51,15,15,243,207,243,207,243,48,240,240
0039B1  3  F0 CF 00 00  
0039B5  3  F3 FF C0 0F  
0039CD  3  0F F0 3F F0          .byte 15,240,63,240,51,252,0,0,255,252,3,240,63,240,0,12,15,240,63,192,204,252,243,195,243,252,195,252,204,60,60,60
0039D1  3  33 FC 00 00  
0039D5  3  FF FC 03 F0  
0039ED  3  03 FC 0F FC          .byte 3,252,15,252,12,255,0,0,63,255,0,252,15,252,0,3,3,252,15,240,51,63,252,240,60,255,48,255,51,15,15,15
0039F1  3  0C FF 00 00  
0039F5  3  3F FF 00 FC  
003A0D  3  00 FF 03 FF          .byte 0,255,3,255,195,63,0,0,207,255,0,63,3,255,192,0,0,255,3,252,204,207,63,60,207,63,204,63,204,195,195,195
003A11  3  C3 3F 00 00  
003A15  3  CF FF 00 3F  
003A2D  3  C0 3F C0 FF          .byte 192,63,192,255,240,207,0,0,243,255,192,15,192,255,48,0,192,63,0,255,243,51,15,207,243,207,243,15,243,48,240,240
003A31  3  F0 CF 00 00  
003A35  3  F3 FF C0 0F  
003A4D  3  0F F0 3F F0          .byte 15,240,63,240,51,252,0,0,255,252,3,240,63,240,0,12,15,240,63,192,204,252,207,195,243,252,195,252,204,60,60,60
003A51  3  33 FC 00 00  
003A55  3  FF FC 03 F0  
003A6D  3  03 FC 0F FC          .byte 3,252,15,252,12,255,0,0,63,255,0,252,15,252,0,3,3,252,15,240,51,63,243,240,60,255,48,255,51,15,15,15
003A71  3  0C FF 00 00  
003A75  3  3F FF 00 FC  
003A8D  3  00 FF 03 FF          .byte 0,255,3,255,195,63,0,0,207,255,0,63,3,255,192,0,0,255,3,252,204,207,60,252,207,63,204,63,204,195,195,195
003A91  3  C3 3F 00 00  
003A95  3  CF FF 00 3F  
003AAD  3  C0 3F C0 FF          .byte 192,63,192,255,240,207,0,0,243,255,192,15,192,255,48,0,192,63,0,255,243,51,15,63,243,207,243,15,243,48,240,240
003AB1  3  F0 CF 00 00  
003AB5  3  F3 FF C0 0F  
003ACD  3  0F F0 3F F0          .byte 15,240,63,240,51,252,0,0,255,252,3,240,63,240,0,12,15,240,63,192,204,252,195,195,243,252,207,252,204,60,60,60
003AD1  3  33 FC 00 00  
003AD5  3  FF FC 03 F0  
003AED  3  03 FC 0F FC          .byte 3,252,15,252,12,255,0,0,63,255,0,252,15,252,0,3,3,252,15,240,51,63,240,240,60,255,51,255,51,15,15,15
003AF1  3  0C FF 00 00  
003AF5  3  3F FF 00 FC  
003B0D  3  00 FF 03 FF          .byte 0,255,3,255,195,63,0,0,207,255,0,63,3,255,192,0,0,255,3,252,204,207,60,60,207,63,204,255,204,195,195,195
003B11  3  C3 3F 00 00  
003B15  3  CF FF 00 3F  
003B2D  3  C0 3F C0 FF          .byte 192,63,192,255,240,207,0,0,243,255,192,15,192,255,48,0,192,63,0,255,243,51,15,15,243,207,243,63,243,48,240,240
003B31  3  F0 CF 00 00  
003B35  3  F3 FF C0 0F  
003B4D  3  00 00 30 30          .byte 0,0,48,48,63,240,63,192,63,240,51,240,255,240,240,240,63,240,48,192,48,48,192,48,192,12,192,60,192,60,192,60
003B51  3  3F F0 3F C0  
003B55  3  3F F0 33 F0  
003B6D  3  00 00 0C 0C          .byte 0,0,12,12,15,252,15,240,15,252,12,252,63,252,60,60,15,252,12,48,12,12,48,12,48,3,48,15,48,15,48,15
003B71  3  0F FC 0F F0  
003B75  3  0F FC 0C FC  
003B8D  3  00 00 03 03          .byte 0,0,3,3,3,255,3,252,3,255,3,63,15,255,15,15,3,255,3,12,3,3,12,3,204,0,204,3,204,3,204,3
003B91  3  03 FF 03 FC  
003B95  3  03 FF 03 3F  
003BAD  3  00 00 C0 C0          .byte 0,0,192,192,192,255,0,255,192,255,192,207,195,255,195,195,192,255,0,195,192,192,195,0,51,0,243,0,243,0,243,0
003BB1  3  C0 FF 00 FF  
003BB5  3  C0 FF C0 CF  
003BCD  3  30 30 3F F0          .byte 48,48,63,240,15,240,63,240,63,48,63,252,60,60,63,240,12,48,48,48,48,12,192,12,192,12,192,12,192,12,192,0
003BD1  3  0F F0 3F F0  
003BD5  3  3F 30 3F FC  
003BED  3  0C 0C 0F FC          .byte 12,12,15,252,3,252,15,252,15,204,15,255,15,15,15,252,3,12,12,12,12,3,48,3,48,3,48,3,48,3,48,0
003BF1  3  03 FC 0F FC  
003BF5  3  0F CC 0F FF  
003C0D  3  03 03 03 FF          .byte 3,3,3,255,0,255,3,255,3,243,195,255,195,195,3,255,0,195,3,3,195,0,204,0,204,0,204,0,204,0,12,0
003C11  3  00 FF 03 FF  
003C15  3  03 F3 C3 FF  
003C2D  3  C0 C0 C0 FF          .byte 192,192,192,255,192,63,192,255,192,252,240,255,240,240,192,255,192,48,192,192,48,192,51,0,51,0,51,0,51,0,3,0
003C31  3  C0 3F C0 FF  
003C35  3  C0 FC F0 FF  
003C4D  3  0C 0C 0F FC          .byte 12,12,15,252,15,240,15,252,12,252,63,252,60,60,15,252,12,48,12,12,48,12,48,3,48,3,48,3,48,3,0,3
003C51  3  0F F0 0F FC  
003C55  3  0C FC 3F FC  
003C6D  3  03 03 03 FF          .byte 3,3,3,255,3,252,3,255,3,63,15,255,15,15,3,255,3,12,3,3,12,3,204,0,204,0,204,0,204,0,192,0
003C71  3  03 FC 03 FF  
003C75  3  03 3F 0F FF  
003C8D  3  C0 C0 C0 FF          .byte 192,192,192,255,0,255,192,255,192,207,195,255,195,195,192,255,0,195,192,192,195,0,51,0,51,0,51,0,51,0,48,0
003C91  3  00 FF C0 FF  
003C95  3  C0 CF C3 FF  
003CAD  3  30 30 F0 3F          .byte 48,48,240,63,192,63,240,63,240,51,240,255,240,240,240,63,192,48,48,48,48,192,12,192,12,192,12,192,12,192,12,0
003CB1  3  C0 3F F0 3F  
003CB5  3  F0 33 F0 FF  
003CCD  3  0C 0C 0F FC          .byte 12,12,15,252,15,240,15,252,12,252,63,252,60,60,15,252,12,48,12,12,12,12,12,3,12,3,15,3,15,3,15,3
003CD1  3  0F F0 0F FC  
003CD5  3  0C FC 3F FC  
003CED  3  03 03 03 FF          .byte 3,3,3,255,3,252,3,255,3,63,15,255,15,15,3,255,3,12,3,3,3,3,195,0,195,0,195,192,195,192,195,192
003CF1  3  03 FC 03 FF  
003CF5  3  03 3F 0F FF  
003D0D  3  C0 C0 C0 FF          .byte 192,192,192,255,0,255,192,255,192,207,195,255,195,195,192,255,0,195,192,192,192,192,48,192,48,192,48,240,48,240,48,240
003D11  3  00 FF C0 FF  
003D15  3  C0 CF C3 FF  
003D2D  3  30 30 F0 3F          .byte 48,48,240,63,192,63,240,63,240,51,240,255,240,240,240,63,192,48,48,48,48,48,12,48,12,48,12,60,12,60,12,60
003D31  3  C0 3F F0 3F  
003D35  3  F0 33 F0 FF  
003D4D  3  00 00 0C 0C          .byte 0,0,12,12,15,252,3,252,15,252,15,204,15,255,15,15,15,252,3,12,12,12,12,3,48,3,60,3,60,3,60,3
003D51  3  0F FC 03 FC  
003D55  3  0F FC 0F CC  
003D6D  3  00 00 03 03          .byte 0,0,3,3,3,255,0,255,3,255,3,243,195,255,195,195,3,255,0,195,3,3,195,0,204,0,207,0,207,0,207,0
003D71  3  03 FF 00 FF  
003D75  3  03 FF 03 F3  
003D8D  3  00 00 C0 C0          .byte 0,0,192,192,192,255,192,63,192,255,192,252,240,255,240,240,192,255,192,48,192,192,48,192,51,0,51,192,51,192,51,192
003D91  3  C0 FF C0 3F  
003D95  3  C0 FF C0 FC  
003DAD  3  00 00 30 30          .byte 0,0,48,48,240,63,240,15,240,63,48,63,252,63,60,60,240,63,48,12,48,48,12,48,12,192,12,240,12,240,12,240
003DB1  3  F0 3F F0 0F  
003DB5  3  F0 3F 30 3F  
003DCD  3  00 00 0C 0C          .byte 0,0,12,12,15,252,3,252,15,252,15,204,15,255,15,15,15,252,15,12,60,12,48,12,192,12,240,60,240,60,240,60
003DD1  3  0F FC 03 FC  
003DD5  3  0F FC 0F CC  
003DED  3  00 00 03 03          .byte 0,0,3,3,3,255,0,255,3,255,3,243,195,255,195,195,3,255,3,195,15,3,12,3,48,3,60,15,60,15,60,15
003DF1  3  03 FF 00 FF  
003DF5  3  03 FF 03 F3  
003E0D  3  00 00 C0 C0          .byte 0,0,192,192,192,255,192,63,192,255,192,252,240,255,240,240,192,255,192,240,195,192,195,0,204,0,207,3,207,3,207,3
003E11  3  C0 FF C0 3F  
003E15  3  C0 FF C0 FC  
003E2D  3  00 00 30 30          .byte 0,0,48,48,240,63,240,15,240,63,48,63,252,63,60,60,240,63,48,60,48,240,48,192,51,0,243,192,243,192,243,192
003E31  3  F0 3F F0 0F  
003E35  3  F0 3F 30 3F  
003E4D  3  0F F0 3C FC          .byte 15,240,60,252,48,60,192,51,192,15,192,15,192,15,255,255,240,195,195,15,60,60,48,252,15,48,12,48,3,192,3,192
003E51  3  30 3C C0 33  
003E55  3  C0 0F C0 0F  
003E6D  3  03 FC 0F 3F          .byte 3,252,15,63,12,15,240,12,240,3,240,3,240,3,255,255,252,48,240,195,15,15,12,63,3,204,3,12,0,240,0,240
003E71  3  0C 0F F0 0C  
003E75  3  F0 03 F0 03  
003E8D  3  00 FF C3 CF          .byte 0,255,195,207,195,3,60,3,252,0,252,0,252,0,255,255,63,12,252,48,195,195,195,15,0,243,0,195,0,60,0,60
003E91  3  C3 03 3C 03  
003E95  3  FC 00 FC 00  
003EAD  3  C0 3F F0 F3          .byte 192,63,240,243,240,192,207,0,63,0,63,0,63,0,255,255,15,195,63,12,240,240,240,195,192,60,192,48,0,15,0,15
003EB1  3  F0 C0 CF 00  
003EB5  3  3F 00 3F 00  
003ECD  3  0F F0 3C FC          .byte 15,240,60,252,48,204,192,51,192,51,192,51,192,51,255,255,252,243,243,207,63,60,60,252,15,240,15,48,3,192,3,192
003ED1  3  30 CC C0 33  
003ED5  3  C0 33 C0 33  
003EED  3  03 FC 0F 3F          .byte 3,252,15,63,12,51,240,12,240,12,240,12,240,12,255,255,255,60,252,243,15,207,15,63,3,252,3,204,0,240,0,240
003EF1  3  0C 33 F0 0C  
003EF5  3  F0 0C F0 0C  
003F0D  3  00 FF C3 CF          .byte 0,255,195,207,195,12,60,3,60,3,60,3,60,3,255,255,63,207,255,60,195,243,195,207,0,255,0,243,0,60,0,60
003F11  3  C3 0C 3C 03  
003F15  3  3C 03 3C 03  
003F2D  3  C0 3F F0 F3          .byte 192,63,240,243,48,195,207,0,207,0,207,0,207,0,255,255,207,243,63,207,240,252,240,243,192,63,192,60,0,15,0,15
003F31  3  30 C3 CF 00  
003F35  3  CF 00 CF 00  
003F4D  3  0F F0 3C FC          .byte 15,240,60,252,48,204,192,195,192,195,192,195,192,195,255,255,204,51,240,195,51,12,60,60,12,240,15,240,3,192,3,192
003F51  3  30 CC C0 C3  
003F55  3  C0 C3 C0 C3  
003F6D  3  03 FC 0F 3F          .byte 3,252,15,63,12,51,240,48,240,48,240,48,240,48,255,255,243,12,252,48,12,195,15,15,3,60,3,252,0,240,0,240
003F71  3  0C 33 F0 30  
003F75  3  F0 30 F0 30  
003F8D  3  00 FF C3 CF          .byte 0,255,195,207,195,12,60,12,60,12,60,12,60,12,255,255,60,195,63,12,195,48,195,195,0,207,0,255,0,60,0,60
003F91  3  C3 0C 3C 0C  
003F95  3  3C 0C 3C 0C  
003FAD  3  C0 3F F0 F3          .byte 192,63,240,243,48,195,15,3,15,3,15,3,15,3,255,255,207,48,15,195,48,204,240,240,192,51,192,63,0,15,0,15
003FB1  3  30 C3 0F 03  
003FB5  3  0F 03 0F 03  
003FCD  3  0F F0 3F 3C          .byte 15,240,63,60,51,12,195,3,195,3,195,3,195,3,255,255,207,63,252,243,51,204,63,60,12,240,15,240,3,192,3,192
003FD1  3  33 0C C3 03  
003FD5  3  C3 03 C3 03  
003FED  3  03 FC 0F CF          .byte 3,252,15,207,12,195,240,192,240,192,240,192,240,192,255,255,243,207,255,60,12,243,15,207,3,60,3,252,0,240,0,240
003FF1  3  0C C3 F0 C0  
003FF5  3  F0 C0 F0 C0  
00400D  3  00 FF C3 F3          .byte 0,255,195,243,195,48,60,48,60,48,60,48,60,48,255,255,252,243,63,207,195,60,195,243,0,207,0,255,0,60,0,60
004011  3  C3 30 3C 30  
004015  3  3C 30 3C 30  
00402D  3  C0 3F F0 FC          .byte 192,63,240,252,48,204,15,12,15,12,15,12,15,12,255,255,255,60,207,243,48,207,240,252,192,51,192,63,0,15,0,15
004031  3  30 CC 0F 0C  
004035  3  0F 0C 0F 0C  
00404D  3  0F F0 3F 3C          .byte 15,240,63,60,51,12,204,3,204,3,204,3,204,3,255,255,195,15,204,51,48,204,51,12,12,48,12,240,3,192,3,192
004051  3  33 0C CC 03  
004055  3  CC 03 CC 03  
00406D  3  03 FC 0F CF          .byte 3,252,15,207,12,195,243,0,243,0,243,0,243,0,255,255,240,195,243,12,12,51,12,195,3,12,3,60,0,240,0,240
004071  3  0C C3 F3 00  
004075  3  F3 00 F3 00  
00408D  3  00 FF C3 F3          .byte 0,255,195,243,195,48,60,192,60,192,60,192,60,192,255,255,252,48,60,195,195,12,195,48,0,195,0,207,0,60,0,60
004091  3  C3 30 3C C0  
004095  3  3C C0 3C C0  
0040AD  3  C0 3F F0 FC          .byte 192,63,240,252,48,204,15,48,15,48,15,48,15,48,255,255,63,12,207,48,48,195,48,204,192,48,192,51,0,15,0,15
0040B1  3  30 CC 0F 30  
0040B5  3  0F 30 0F 30  
0040CD  3  0F F0 3F 3C          .byte 15,240,63,60,60,12,204,3,240,3,240,3,240,3,255,255,195,207,207,63,60,252,51,204,15,48,12,240,3,192,3,192
0040D1  3  3C 0C CC 03  
0040D5  3  F0 03 F0 03  
0040ED  3  03 FC 0F CF          .byte 3,252,15,207,15,3,243,0,252,0,252,0,252,0,255,255,240,243,243,207,15,63,12,243,3,204,3,60,0,240,0,240
0040F1  3  0F 03 F3 00  
0040F5  3  FC 00 FC 00  
00410D  3  00 FF C3 F3          .byte 0,255,195,243,195,192,60,192,63,0,63,0,63,0,255,255,252,60,252,243,195,207,195,60,0,243,0,207,0,60,0,60
004111  3  C3 C0 3C C0  
004115  3  3F 00 3F 00  
00412D  3  C0 3F F0 FC          .byte 192,63,240,252,48,240,15,48,15,192,15,192,15,192,255,255,63,15,255,60,240,243,48,207,192,60,192,51,0,15,0,15
004131  3  30 F0 0F 30  
004135  3  0F C0 0F C0  
00414D  3  00 00 03 C0          .byte 0,0,3,192,3,192,3,60,0,255,0,243,63,255,48,255,240,60,192,192,240,204,252,252,207,204,48,192,63,0,0,0
004151  3  03 C0 03 3C  
004155  3  00 FF 00 F3  
00416D  3  00 00 00 F0          .byte 0,0,0,240,0,240,0,207,192,63,192,60,207,255,204,63,60,15,48,48,60,51,63,63,51,243,12,48,15,192,0,0
004171  3  00 F0 00 CF  
004175  3  C0 3F C0 3C  
00418D  3  00 00 00 3C          .byte 0,0,0,60,0,60,192,51,240,15,48,15,243,255,243,15,207,3,12,12,207,12,207,207,204,252,3,12,3,240,0,0
004191  3  00 3C C0 33  
004195  3  F0 0F 30 0F  
0041AD  3  00 00 00 0F          .byte 0,0,0,15,0,15,240,12,252,3,204,3,252,255,252,195,243,192,3,3,51,195,243,243,51,63,0,195,0,252,0,0
0041B1  3  00 0F F0 0C  
0041B5  3  FC 03 CC 03  
0041CD  3  03 F0 03 30          .byte 3,240,3,48,3,240,3,192,3,192,3,252,0,60,15,60,12,252,48,204,60,243,51,255,12,204,15,0,0,0,0,0
0041D1  3  03 F0 03 C0  
0041D5  3  03 C0 03 FC  
0041ED  3  00 FC 00 CC          .byte 0,252,0,204,0,252,0,240,0,240,0,255,0,15,3,207,3,63,12,51,207,60,204,255,3,51,3,192,0,0,0,0
0041F1  3  00 FC 00 F0  
0041F5  3  00 F0 00 FF  
00420D  3  00 3F 00 33          .byte 0,63,0,51,0,63,0,60,0,60,192,63,192,3,192,243,192,207,195,12,51,207,243,63,192,204,0,240,0,0,0,0
004211  3  00 3F 00 3C  
004215  3  00 3C C0 3F  
00422D  3  C0 0F C0 0C          .byte 192,15,192,12,192,15,0,15,0,15,240,15,240,0,240,60,240,51,48,195,204,243,252,207,48,51,0,60,0,0,0,0
004231  3  C0 0F 00 0F  
004235  3  00 0F F0 0F  
00424D  3  00 C0 03 30          .byte 0,192,3,48,3,240,0,240,0,60,0,48,0,15,15,51,15,63,48,255,48,255,15,63,15,0,0,0,0,0,0,0
004251  3  03 F0 00 F0  
004255  3  00 3C 00 30  
00426D  3  00 30 00 CC          .byte 0,48,0,204,0,252,0,60,0,15,0,12,192,3,195,204,195,207,204,63,204,63,195,207,3,192,0,0,0,0,0,0
004271  3  00 FC 00 3C  
004275  3  00 0F 00 0C  
00428D  3  00 0C 00 33          .byte 0,12,0,51,0,63,0,15,192,3,0,3,240,0,48,243,240,243,243,15,243,15,240,243,0,240,0,0,0,0,0,0
004291  3  00 3F 00 0F  
004295  3  C0 03 00 03  
0042AD  3  00 03 C0 0C          .byte 0,3,192,12,192,15,192,3,240,0,192,0,60,0,204,60,252,60,252,195,252,195,252,60,0,60,0,0,0,0,0,0
0042B1  3  C0 0F C0 03  
0042B5  3  F0 00 C0 00  
0042CD  3  00 00 00 C0          .byte 0,0,0,192,3,192,0,240,0,240,0,48,0,63,0,51,15,63,15,63,15,63,15,63,0,0,0,0,0,0,0,0
0042D1  3  03 C0 00 F0  
0042D5  3  00 F0 00 30  
0042ED  3  00 00 00 30          .byte 0,0,0,48,0,240,0,60,0,60,0,12,192,15,192,12,195,207,195,207,195,207,195,207,0,0,0,0,0,0,0,0
0042F1  3  00 F0 00 3C  
0042F5  3  00 3C 00 0C  
00430D  3  00 00 00 0C          .byte 0,0,0,12,0,60,0,15,0,15,0,3,240,3,48,3,240,243,240,243,240,243,240,243,0,0,0,0,0,0,0,0
004311  3  00 3C 00 0F  
004315  3  00 0F 00 03  
00432D  3  00 00 00 03          .byte 0,0,0,3,0,15,192,3,192,3,192,0,252,0,204,0,252,60,252,60,252,60,252,60,0,0,0,0,0,0,0,0
004331  3  00 0F C0 03  
004335  3  C0 03 C0 00  
00434D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
004351  3  00 00 00 00  
004355  3  00 00 00 00  
00436D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
004371  3  00 00 00 00  
004375  3  00 00 00 00  
00438D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
004391  3  00 00 00 00  
004395  3  00 00 00 00  
0043AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
0043B1  3  00 00 00 00  
0043B5  3  00 00 00 00  
0043CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,207,255,0,0
0043D1  3  00 00 00 00  
0043D5  3  00 00 00 00  
0043ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,243,255,0,0
0043F1  3  00 00 00 00  
0043F5  3  00 00 00 00  
00440D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,252,255,0,0
004411  3  00 00 00 00  
004415  3  00 00 00 00  
00442D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,63,0,0
004431  3  00 00 00 00  
004435  3  00 00 00 00  
00444D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,207,255,0,0,255,255,255,255,255,255,255,255
004451  3  00 00 00 00  
004455  3  00 00 00 00  
00446D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,243,255,0,0,255,255,255,255,255,255,255,255
004471  3  00 00 00 00  
004475  3  00 00 00 00  
00448D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,252,255,0,0,255,255,255,255,255,255,255,255
004491  3  00 00 00 00  
004495  3  00 00 00 00  
0044AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,63,0,0,255,255,255,255,255,255,255,255
0044B1  3  00 00 00 00  
0044B5  3  00 00 00 00  
0044CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,255,255,0,0,207,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255
0044D1  3  00 00 00 00  
0044D5  3  00 00 FF FF  
0044ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,255,255,0,0,243,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255
0044F1  3  00 00 00 00  
0044F5  3  00 00 FF FF  
00450D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,255,255,0,0,252,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255
004511  3  00 00 00 00  
004515  3  00 00 FF FF  
00452D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,255,255,0,0,255,63,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255
004531  3  00 00 00 00  
004535  3  00 00 FF FF  
00454D  3  FF FF 00 00          .byte 255,255,0,0,207,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
004551  3  CF FF 00 00  
004555  3  FF FF FF FF  
00456D  3  FF FF 00 00          .byte 255,255,0,0,243,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
004571  3  F3 FF 00 00  
004575  3  FF FF FF FF  
00458D  3  FF FF 00 00          .byte 255,255,0,0,252,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
004591  3  FC FF 00 00  
004595  3  FF FF FF FF  
0045AD  3  FF FF 00 00          .byte 255,255,0,0,255,63,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
0045B1  3  FF 3F 00 00  
0045B5  3  FF FF FF FF  
0045CD  3  00 00 00 00          .byte 0,0,0,0,48,12,0,0,12,48,192,3,192,3,0,0,48,12,48,12,12,48,192,3,195,3,0,0,240,15,255,255
0045D1  3  30 0C 00 00  
0045D5  3  0C 30 C0 03  
0045ED  3  00 00 00 00          .byte 0,0,0,0,12,3,0,0,3,12,240,0,240,0,0,0,12,3,12,3,3,12,240,0,240,192,0,0,252,3,255,255
0045F1  3  0C 03 00 00  
0045F5  3  03 0C F0 00  
00460D  3  00 00 00 00          .byte 0,0,0,0,195,0,0,0,0,195,60,0,60,0,0,0,195,0,195,0,0,195,60,0,60,48,0,0,255,0,255,255
004611  3  C3 00 00 00  
004615  3  00 C3 3C 00  
00462D  3  00 00 00 00          .byte 0,0,0,0,48,192,0,0,192,48,15,0,15,0,0,0,48,192,48,192,192,48,15,0,15,12,0,0,63,192,255,255
004631  3  30 C0 00 00  
004635  3  C0 30 0F 00  
00464D  3  00 00 00 00          .byte 0,0,0,0,12,48,0,0,192,3,0,0,48,12,48,12,12,48,195,3,192,3,0,0,48,12,48,12,204,51,255,255
004651  3  0C 30 00 00  
004655  3  C0 03 00 00  
00466D  3  00 00 00 00          .byte 0,0,0,0,3,12,0,0,240,0,0,0,12,3,12,3,3,12,240,192,240,0,0,0,12,3,12,3,243,12,255,255
004671  3  03 0C 00 00  
004675  3  F0 00 00 00  
00468D  3  00 00 00 00          .byte 0,0,0,0,0,195,0,0,60,0,0,0,195,0,195,0,0,195,60,48,60,0,0,0,195,0,195,0,60,195,255,255
004691  3  00 C3 00 00  
004695  3  3C 00 00 00  
0046AD  3  00 00 00 00          .byte 0,0,0,0,192,48,0,0,15,0,0,0,48,192,48,192,192,48,15,12,15,0,0,0,48,192,48,192,207,48,255,255
0046B1  3  C0 30 00 00  
0046B5  3  0F 00 00 00  
0046CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,51,12,48,12,12,48,192,3,192,3,0,0,48,12,48,12,12,48,192,3,192,3,255,255
0046D1  3  00 00 00 00  
0046D5  3  33 0C 30 0C  
0046ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,12,195,12,3,3,12,240,0,240,0,0,0,12,3,12,3,3,12,240,0,240,0,255,255
0046F1  3  00 00 00 00  
0046F5  3  0C C3 0C 03  
00470D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,195,48,195,0,0,195,60,0,60,0,0,0,195,0,195,0,0,195,60,0,60,0,255,255
004711  3  00 00 00 00  
004715  3  C3 30 C3 00  
00472D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,48,204,48,192,192,48,15,0,15,0,0,0,48,192,48,192,192,48,15,0,15,0,255,255
004731  3  00 00 00 00  
004735  3  30 CC 30 C0  
00474D  3  00 00 C0 00          .byte 0,0,192,0,0,0,3,0,0,3,0,0,0,0,48,0,0,192,0,0,0,0,0,12,0,0,48,0,0,0,0,0
004751  3  00 00 03 00  
004755  3  00 03 00 00  
00476D  3  00 00 30 00          .byte 0,0,48,0,0,0,0,192,192,0,0,0,0,0,12,0,0,48,0,0,0,0,0,3,0,0,12,0,0,0,0,0
004771  3  00 00 00 C0  
004775  3  C0 00 00 00  
00478D  3  00 00 0C 00          .byte 0,0,12,0,0,0,0,48,48,0,0,0,0,0,3,0,0,12,0,0,0,0,192,0,0,0,3,0,0,0,0,0
004791  3  00 00 00 30  
004795  3  30 00 00 00  
0047AD  3  00 00 03 00          .byte 0,0,3,0,0,0,0,12,12,0,0,0,0,0,0,192,0,3,0,0,0,0,48,0,0,0,0,192,0,0,0,0
0047B1  3  00 00 00 0C  
0047B5  3  0C 00 00 00  
0047CD  3  00 00 00 03          .byte 0,0,0,3,0,0,12,0,0,12,0,0,0,0,192,0,3,0,0,0,0,0,0,48,0,0,192,0,0,0,0,0
0047D1  3  00 00 0C 00  
0047D5  3  00 0C 00 00  
0047ED  3  00 00 C0 00          .byte 0,0,192,0,0,0,3,0,0,3,0,0,0,0,48,0,0,192,0,0,0,0,0,12,0,0,48,0,0,0,0,0
0047F1  3  00 00 03 00  
0047F5  3  00 03 00 00  
00480D  3  00 00 30 00          .byte 0,0,48,0,0,0,0,192,192,0,0,0,0,0,12,0,0,48,0,0,0,0,0,3,0,0,12,0,0,0,0,0
004811  3  00 00 00 C0  
004815  3  C0 00 00 00  
00482D  3  00 00 0C 00          .byte 0,0,12,0,0,0,0,48,48,0,0,0,0,0,3,0,0,12,0,0,0,0,192,0,0,0,3,0,0,0,0,0
004831  3  00 00 00 30  
004835  3  30 00 00 00  
00484D  3  00 00 00 0C          .byte 0,0,0,12,0,0,48,0,0,48,0,0,0,0,0,3,12,0,0,0,0,0,0,192,0,0,0,3,0,0,0,0
004851  3  00 00 30 00  
004855  3  00 30 00 00  
00486D  3  00 00 00 03          .byte 0,0,0,3,0,0,12,0,0,12,0,0,0,0,192,0,3,0,0,0,0,0,0,48,0,0,192,0,0,0,0,0
004871  3  00 00 0C 00  
004875  3  00 0C 00 00  
00488D  3  00 00 C0 00          .byte 0,0,192,0,0,0,3,0,0,3,0,0,0,0,48,0,0,192,0,0,0,0,0,12,0,0,48,0,0,0,0,0
004891  3  00 00 03 00  
004895  3  00 03 00 00  
0048AD  3  00 00 30 00          .byte 0,0,48,0,0,0,0,192,192,0,0,0,0,0,12,0,0,48,0,0,0,0,0,3,0,0,12,0,0,0,0,0
0048B1  3  00 00 00 C0  
0048B5  3  C0 00 00 00  
0048CD  3  00 00 00 30          .byte 0,0,0,48,0,0,192,0,0,192,0,0,0,0,0,12,48,0,0,0,0,0,3,0,0,0,0,12,0,0,0,0
0048D1  3  00 00 C0 00  
0048D5  3  00 C0 00 00  
0048ED  3  00 00 00 0C          .byte 0,0,0,12,0,0,48,0,0,48,0,0,0,0,0,3,12,0,0,0,0,0,0,192,0,0,0,3,0,0,0,0
0048F1  3  00 00 30 00  
0048F5  3  00 30 00 00  
00490D  3  00 00 00 03          .byte 0,0,0,3,0,0,12,0,0,12,0,0,0,0,192,0,3,0,0,0,0,0,0,48,0,0,192,0,0,0,0,0
004911  3  00 00 0C 00  
004915  3  00 0C 00 00  
00492D  3  00 00 C0 00          .byte 0,0,192,0,0,0,3,0,0,3,0,0,0,0,48,0,0,192,0,0,0,0,0,12,0,0,48,0,0,0,0,0
004931  3  00 00 03 00  
004935  3  00 03 00 00  
00494D  3  00 00 00 C0          .byte 0,0,0,192,0,0,0,3,3,0,0,0,0,0,0,48,192,0,0,0,0,0,12,0,0,0,0,48,0,0,0,0
004951  3  00 00 00 03  
004955  3  03 00 00 00  
00496D  3  00 00 00 30          .byte 0,0,0,48,0,0,192,0,0,192,0,0,0,0,0,12,48,0,0,0,0,0,3,0,0,0,0,12,0,0,0,0
004971  3  00 00 C0 00  
004975  3  00 C0 00 00  
00498D  3  00 00 00 0C          .byte 0,0,0,12,0,0,48,0,0,48,0,0,0,0,0,3,12,0,0,0,0,0,0,192,0,0,0,3,0,0,0,0
004991  3  00 00 30 00  
004995  3  00 30 00 00  
0049AD  3  00 00 00 03          .byte 0,0,0,3,0,0,12,0,0,12,0,0,0,0,192,0,3,0,0,0,0,0,0,48,0,0,192,0,0,0,0,0
0049B1  3  00 00 0C 00  
0049B5  3  00 0C 00 00  
0049CD  3  00 00 03 00          .byte 0,0,3,0,0,0,0,12,12,0,0,0,0,0,0,192,0,3,0,0,0,0,48,0,0,0,0,192,0,0,0,0
0049D1  3  00 00 00 0C  
0049D5  3  0C 00 00 00  
0049ED  3  00 00 00 C0          .byte 0,0,0,192,0,0,0,3,3,0,0,0,0,0,0,48,192,0,0,0,0,0,12,0,0,0,0,48,0,0,0,0
0049F1  3  00 00 00 03  
0049F5  3  03 00 00 00  
004A0D  3  00 00 00 30          .byte 0,0,0,48,0,0,192,0,0,192,0,0,0,0,0,12,48,0,0,0,0,0,3,0,0,0,0,12,0,0,0,0
004A11  3  00 00 C0 00  
004A15  3  00 C0 00 00  
004A2D  3  00 00 00 0C          .byte 0,0,0,12,0,0,48,0,0,48,0,0,0,0,0,3,12,0,0,0,0,0,0,192,0,0,0,3,0,0,0,0
004A31  3  00 00 30 00  
004A35  3  00 30 00 00  
004A4D  3  00 00 30 00          .byte 0,0,48,0,0,0,0,192,48,0,0,0,0,0,3,0,0,12,0,0,0,0,192,0,0,0,12,0,0,0,0,0
004A51  3  00 00 00 C0  
004A55  3  30 00 00 00  
004A6D  3  00 00 0C 00          .byte 0,0,12,0,0,0,0,48,12,0,0,0,0,0,0,192,0,3,0,0,0,0,48,0,0,0,3,0,0,0,0,0
004A71  3  00 00 00 30  
004A75  3  0C 00 00 00  
004A8D  3  00 00 03 00          .byte 0,0,3,0,0,0,0,12,3,0,0,0,0,0,0,48,192,0,0,0,0,0,12,0,0,0,0,192,0,0,0,0
004A91  3  00 00 00 0C  
004A95  3  03 00 00 00  
004AAD  3  00 00 00 C0          .byte 0,0,0,192,0,0,0,3,0,192,0,0,0,0,0,12,48,0,0,0,0,0,3,0,0,0,0,48,0,0,0,0
004AB1  3  00 00 00 03  
004AB5  3  00 C0 00 00  
004ACD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004AD1  3  00 00 00 00  
004AD5  3  00 00 00 00  
004AED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004AF1  3  00 00 00 00  
004AF5  3  00 00 00 00  
004B0D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004B11  3  00 00 00 00  
004B15  3  00 00 00 00  
004B2D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004B31  3  00 00 00 00  
004B35  3  00 00 00 00  
004B4D  3               frmlst:
004B4D  3  00 03                .byte 0,3
004B4F  3  03 03                .byte 3,3
004B51  3  06 04                .byte 6,4
004B53  3  0A 04                .byte 10,4
004B55  3  0E 04                .byte 14,4
004B57  3  12 04                .byte 18,4
004B59  3  16 04                .byte 22,4
004B5B  3  1A 04                .byte 26,4
004B5D  3  1E 06                .byte 30,6
004B5F  3  24 06                .byte 36,6
004B61  3  2A 04                .byte 42,4
004B63  3  2E 05                .byte 46,5
004B65  3  33 03                .byte 51,3
004B67  3  36 07                .byte 54,7
004B69  3  3D 01 3E 00          .byte 61,1,62,0
004B6D  3               scdat:
004B6D  3  BA 00 D7 00          .word 186,215,282,205,209,226,221,179,222,293,222,213,274,189,156,208,211,251,148,152,266,208
004B71  3  1A 01 CD 00  
004B75  3  D1 00 E2 00  
004B99  3  FF 00 26 19          .byte 255,0,38,25,24,25,24,25,24,25,24,25,24,25,24,255,0,18,24,255,0,10,25,255,0,16,37,0,25,255,0,10,24
004B9D  3  18 19 18 19  
004BA1  3  18 19 18 19  
004BBA  3  FF 00 10 3B          .byte 255,0,16,59,0,24,255,0,6,55,56,56,57,25,255,0,16,60,0,25,255,0,7,12,12,0,24,255,0,15,25,24,25
004BBE  3  00 18 FF 00  
004BC2  3  06 37 38 38  
004BDB  3  18 FF 00 07          .byte 24,255,0,7,60,60,0,25,24,25,24,255,0,12,24,8,8,8,0,0,0,255,8,10,25,255,0,12,25,255,0,16,24
004BDF  3  3C 3C 00 19  
004BE3  3  18 19 18 FF  
004BFC  3  FF 00 0C 18          .byte 255,0,12,24,255,0,16,25,255,0,12,25,255,0,16,24,255,0,12,24,255,0,16,25,255,0,12,25,255,8,10,0,0,0
004C00  3  FF 00 10 19  
004C04  3  FF 00 0C 19  
004C1E  3  08 08 08 18          .byte 8,8,8,24,255,0,12,24,255,0,16,25,255,0,12,25,255,0,16,24,255,0,12,24,255,0,16,25,255,0,12,25,255,0,16
004C22  3  FF 00 0C 18  
004C26  3  FF 00 10 19  
004C41  3  18 FF 00 0C          .byte 24,255,0,12,24,8,8,8,0,0,0,255,8,10,25,255,0,7
004C45  3  18 08 08 08  
004C49  3  00 00 00 FF  
004C53  3  FF 00 10 1D          .byte 255,0,16,29,255,10,13,255,0,10,37,255,0,4,29,10,255,25,13,255,0,10,59,0,0,0,29,10,255,0,13,25,255,0,10
004C57  3  FF 0A 0D FF  
004C5B  3  00 0A 25 FF  
004C76  3  3C 00 00 1D          .byte 60,0,0,29,10,255,0,14,25,255,0,9,29,255,10,4,255,0,15,25,255,0,6,29,10,10,10,255,0,8,27,28,255,8,9
004C7A  3  0A FF 00 0E  
004C7E  3  19 FF 00 09  
004C99  3  19 FF 00 04          .byte 25,255,0,4,29,10,10,255,0,14,36,255,0,7,25,0,0,0,29,10,255,0,13,27,28,0,36,255,0,7,25,0,0
004C9D  3  1D 0A 0A FF  
004CA1  3  00 0E 24 FF  
004CBA  3  1D 0A FF 00          .byte 29,10,255,0,17,36,255,0,7,25,0,0,10,255,0,8,27,28,255,8,16,25,0,29,10,255,0,11,36,255,0,14,25
004CBE  3  11 24 FF 00  
004CC2  3  07 19 00 00  
004CDB  3  00 0A FF 00          .byte 0,10,255,0,9,27,28,0,36,255,0,14,25,0,10,255,0,12,36,255,0,14,25,29,10,255,0,5,27,28,255,8,20
004CDF  3  09 1B 1C 00  
004CE3  3  24 FF 00 0E  
004CFC  3  19 0A 19 00          .byte 25,10,25,0,89,255,0,6,36,255,0,18,25,10,25,255,0,5,27,28,0,36,255,0,19,10,25,0,88,255,0,6,36
004D00  3  59 FF 00 06  
004D04  3  24 FF 00 12  
004D1D  3  FF 00 13 0A          .byte 255,0,19,10,25,255,8,22,255,0,4,8,8
004D21  3  19 FF 08 16  
004D25  3  FF 00 04 08  
004D2A  3  FF 0A 1F 00          .byte 255,10,31,0,0,40,255,0,7,36,255,0,6,36,255,0,7,40,0,0,10,10,38,38,39,255,0,7,36,255,0,6,36
004D2E  3  00 28 FF 00  
004D32  3  07 24 FF 00  
004D4B  3  FF 00 07 3D          .byte 255,0,7,61,38,38,10,10,255,0,10,36,255,0,6,36,255,0,10,10,10,0,0,255,8,10,0,27,28,0,255,8,10
004D4F  3  26 26 0A 0A  
004D53  3  FF 00 0A 24  
004D6C  3  00 00 0A 0A          .byte 0,0,10,10,255,0,4,36,255,0,8,27,28,255,0,8,36,255,0,4,10,10,255,0,4,36,255,0,8,27,28,255,0,8
004D70  3  FF 00 04 24  
004D74  3  FF 00 08 1B  
004D8E  3  24 FF 00 04          .byte 36,255,0,4,10,10,255,0,4,36,255,0,8,27,28,255,0,8,36,255,0,4,10,10,255,8,6,0,0,0,8,8,8
004D92  3  0A 0A FF 00  
004D96  3  04 24 FF 00  
004DAF  3  00 1B 1C 00          .byte 0,27,28,0,8,8,8,0,0,0,255,8,6,10,10,255,0,10,36,0,0,27,28,255,0,8,36,255,0,4,10,10,255,0,10
004DB3  3  08 08 08 00  
004DB7  3  00 00 FF 08  
004DD2  3  24 00 00 1B          .byte 36,0,0,27,28,255,0,8,36,255,0,4,10,10,255,0,10,36,0,0,27,28,255,0,8,36,255,0,4,10,10,0,0
004DD6  3  1C FF 00 08  
004DDA  3  24 FF 00 04  
004DF3  3  FF 08 0A 00          .byte 255,8,10,0,27,28,0,255,8,10,0,0,10,10,255,0,4,34,255,0,4,34,0,0,0,27,28,0,0,0,34,255,0,4
004DF7  3  1B 1C 00 FF  
004DFB  3  08 0A 00 00  
004E15  3  22 FF 00 04          .byte 34,255,0,4,10,10,255,0,4,32,255,33,4,31,0,0,0,27,28,0,0,0,32,255,33,4,31,255,0,4,10,255,0,14
004E19  3  0A 0A FF 00  
004E1D  3  04 20 FF 21  
004E37  3  1B 1C FF 00          .byte 27,28,255,0,28,27,28,255,0,14,255,8,30
004E3B  3  1C 1B 1C FF  
004E3F  3  00 0E FF 08  
004E44  3  FF 0A 09 00          .byte 255,10,9,0,0,0,255,10,19,255,0,28,10,10,255,0,28,10,10,255,0,28,10,10,255,8,17,255,0,8,8,8,8
004E48  3  00 00 FF 0A  
004E4C  3  13 FF 00 1C  
004E65  3  0A 0A FF 00          .byte 10,10,255,0,15,36,255,0,12,10,10,255,0,15,36,255,0,12,10,10,255,0,15,36,0,0,27,28,8,8,27,28,255,0,4
004E69  3  0F 24 FF 00  
004E6D  3  0C 0A 0A FF  
004E88  3  0A 0A FF 00          .byte 10,10,255,0,15,36,0,0,27,28,0,0,27,28,255,0,5,10,255,0,15,36,255,0,13,10,255,8,17,255,0,8,8,8,8
004E8C  3  0F 24 00 00  
004E90  3  1B 1C 00 00  
004EAB  3  0A 0A 00 00          .byte 10,10,0,0,34,0,40,255,0,7,40,0,34,255,0,5,27,28,255,0,6,10,10,0,0,35,0,61,255,38,7,39,0
004EAF  3  22 00 28 FF  
004EB3  3  00 07 28 00  
004ECC  3  23 FF 00 05          .byte 35,255,0,5,27,28,255,0,6,10,10,0,0,34,255,0,11,34,255,0,5,27,28,255,0,6,10,10,0,0,32,255,33,11
004ED0  3  1B 1C FF 00  
004ED4  3  06 0A 0A 00  
004EEE  3  1F FF 00 05          .byte 31,255,0,5,27,28,255,0,4,89,0,10,255,0,21,27,28,255,0,6,10,255,0,21,27,28,255,0,4,88,0,10,255,8,30
004EF2  3  1B 1C FF 00  
004EF6  3  04 59 00 0A  
004F11  3  FF 0A 1F FF          .byte 255,10,31,255,0,11,40,0,0,40,40,0,0,40,0,0,34,0,34,0,34,0,0,10,10,0,41,42,42,43,0,41,42,42
004F15  3  00 0B 28 00  
004F19  3  00 28 28 00  
004F33  3  2B 00 28 00          .byte 43,0,40,0,0,40,40,0,0,40,0,0,35,0,35,0,35,0,0,10,10,0,48,0,0,44,0,48,0,0,44,0,61
004F37  3  00 28 28 00  
004F3B  3  00 28 00 00  
004F54  3  26 26 27 3D          .byte 38,38,39,61,38,38,39,0,0,34,0,34,0,34,0,0,10,10,0,48,0,0,44,0,48,0,0,44,255,0,11,32,33
004F58  3  26 26 27 00  
004F5C  3  00 22 00 22  
004F75  3  25 21 25 21          .byte 37,33,37,33,33,10,10,0,47,46,46,45,0,47,46,46,45,255,0,18,10,10,255,0,28,10,10,255,0,28,10,255,0,29
004F79  3  21 0A 0A 00  
004F7D  3  2F 2E 2E 2D  
004F97  3  0A FF 00 1D          .byte 10,255,0,29,10,255,8,7,255,0,22,10,10,255,0,4,36,255,0,23,10,10,255,0,4,36,0,8,8,255,0,20,10,10
004F9B  3  0A FF 08 07  
004F9F  3  FF 00 16 0A  
004FB9  3  FF 00 04 24          .byte 255,0,4,36,255,0,23,10,10,255,0,4,36,0,0,0,8,8,255,0,18,10,10,255,0,4,36,255,0,24,10,255,0,4
004FBD  3  FF 00 17 0A  
004FC1  3  0A FF 00 04  
004FDB  3  24 FF 00 18          .byte 36,255,0,24,255,8,30
004FDF  3  FF 08 1E     
004FE2  3  FF 0A 05 1E          .byte 255,10,5,30,255,0,24,10,0,0,0,14,10,30,255,0,6,37,255,0,16,10,255,0,4,14,10,30,255,0,5,59,255,0,16
004FE6  3  FF 00 18 0A  
004FEA  3  00 00 00 0E  
005005  3  0A FF 00 05          .byte 10,255,0,5,14,10,30,255,0,4,60,255,0,16,10,255,0,6,14,255,10,12,30,255,0,9,10,255,0,18,14,10,10,10
005009  3  0E 0A 1E FF  
00500D  3  00 04 3C FF  
005027  3  1E FF 00 06          .byte 30,255,0,6,10,255,0,21,14,10,10,30,255,0,4,10,255,0,22,36,14,10,30,0,0,0,10,255,0,22,36,0,14
00502B  3  0A FF 00 15  
00502F  3  0E 0A 0A 1E  
005048  3  0A 1E 00 00          .byte 10,30,0,0,10,255,4,5,27,28,255,0,15,36,0,0,14,10,0,0,10,0,89,0,0,0,27,28,255,0,15,36,0,0,0
00504C  3  0A FF 04 05  
005050  3  1B 1C FF 00  
00506B  3  0A 1E 00 0A          .byte 10,30,0,10,255,0,5,27,28,255,0,15,36,0,0,0,14,10,0,10,0,88,0,0,0,27,28,255,0,15,36,255,0,4
00506F  3  FF 00 05 1B  
005073  3  1C FF 00 0F  
00508D  3  0A 00 0A FF          .byte 10,0,10,255,4,12,27,28,255,0,8,21,255,22,4,10,30,10,255,0,12,27,28,255,0,13,14,10,255,0,13,27,28
005091  3  04 0C 1B 1C  
005095  3  FF 00 08 15  
0050AE  3  FF 00 0E 0A          .byte 255,0,14,10,255,0,13,27,28,255,0,14,10,255,8,23,255,0,4,8,8,10
0050B2  3  FF 00 0D 1B  
0050B6  3  1C FF 00 0E  
0050C4  3  FF 0A 1F FF          .byte 255,10,31,255,0,28,1,10,255,0,10,41,42,42,43,255,0,14,1,10,255,0,10,48,0,0,44,255,0,14,1,10,255,0,10
0050C8  3  00 1C 01 0A  
0050CC  3  FF 00 0A 29  
0050E7  3  30 00 00 2C          .byte 48,0,0,44,255,0,9,27,28,6,6,6,1,10,255,0,10,47,46,46,45,255,0,9,27,28,0,0,0,1,10,255,0,23
0050EB  3  FF 00 09 1B  
0050EF  3  1C 06 06 06  
005109  3  1B 1C 00 00          .byte 27,28,0,0,0,1,10,0,0,255,9,18,0,0,0,27,28,6,6,6,1,10,255,0,23,27,28,0,0,0,1,10,255,0,23
00510D  3  00 01 0A 00  
005111  3  00 FF 09 12  
00512C  3  1B 1C 00 00          .byte 27,28,0,0,0,1,10,255,0,23,27,28,0,0,0,1,10,0,0,255,9,18,0,0,0,27,28,6,6,6,1,10,255,0,23
005130  3  00 01 0A FF  
005134  3  00 17 1B 1C  
00514F  3  1B 1C 00 00          .byte 27,28,0,0,0,1,10,255,0,6,29,255,33,8,30,255,0,7,27,28,0,0,0,1,10,5,5,255,0,4,34,255,0,8
005153  3  00 01 0A FF  
005157  3  00 06 1D FF  
005171  3  22 FF 00 07          .byte 34,255,0,7,27,28,0,0,0,1,10,255,0,6,35,255,0,8,35,255,0,7,27,28,255,0,4,10,255,0,6,34,255,0,8
005175  3  1B 1C 00 00  
005179  3  00 01 0A FF  
005194  3  22 FF 00 0D          .byte 34,255,0,13,255,3,23,255,0,4,3,3,3
005198  3  FF 03 17 FF  
00519C  3  00 04 03 03  
0051A1  3  FF 0A 18 FF          .byte 255,10,24,255,0,4,10,10,2,255,0,8,34,255,0,10,34,255,0,8,1,2,255,0,8,35,255,0,10,35,255,0,8
0051A5  3  00 04 0A 0A  
0051A9  3  02 FF 00 08  
0051C2  3  01 02 FF 00          .byte 1,2,255,0,8,32,255,33,10,31,255,0,8,1,2,6,6,255,0,23,6,6,6,1,2,255,0,28,1,2,255,0,4
0051C6  3  08 20 FF 21  
0051CA  3  0A 1F FF 00  
0051E3  3  FF 0B 05 00          .byte 255,11,5,0,0,0,255,11,4,0,0,0,255,11,4,255,0,5,1,2,255,0,28,1,2,6,6,255,0,24,6,6,1
0051E7  3  00 00 FF 0B  
0051EB  3  04 00 00 00  
005204  3  02 FF 00 1A          .byte 2,255,0,26,89,0,1,2,255,0,4,255,11,5,0,0,0,255,11,4,0,0,0,255,11,5,255,0,4,1,2,255,0,26
005208  3  59 00 01 02  
00520C  3  FF 00 04 FF  
005226  3  58 00 01 02          .byte 88,0,1,2,6,6,255,0,24,6,6,1,2,255,0,28,1,2,255,0,4,255,11,5,0,0,0,255,11,4,0,0,0
00522A  3  06 06 FF 00  
00522E  3  18 06 06 01  
005247  3  FF 0B 05 FF          .byte 255,11,5,255,0,4,1,255,0,60,255,3,30
00524B  3  00 04 01 FF  
00524F  3  00 3C FF 03  
005254  3  FF 0A 1E 02          .byte 255,10,30,2,255,0,5,40,255,0,14,40,0,34,255,0,5,1,2,255,0,5,40,255,0,14,40,0,35,255,0,5,1
005258  3  FF 00 05 28  
00525C  3  FF 00 0E 28  
005275  3  02 FF 26 05          .byte 2,255,38,5,39,255,0,14,61,38,34,255,38,5,1,2,255,0,22,35,255,0,5,1,2,255,0,22,32,255,33,5,1
005279  3  27 FF 00 0E  
00527D  3  3D 26 22 FF  
005296  3  02 FF 00 1C          .byte 2,255,0,28,1,2,255,0,28,1,2,255,11,9,255,0,4,11,11,11,255,0,4,255,11,8,1,2,255,0,28,1,2
00529A  3  01 02 FF 00  
00529E  3  1C 01 02 FF  
0052B7  3  FF 00 09 1B          .byte 255,0,9,27,28,255,0,7,27,28,255,0,8,1,2,255,0,9,27,28,255,0,7,27,28,255,0,8,1,2,255,0,28
0052BB  3  1C FF 00 07  
0052BF  3  1B 1C FF 00  
0052D8  3  01 02 00 00          .byte 1,2,0,0,0,49,50,255,9,6,0,0,0,9,0,0,0,255,9,5,49,50,0,0,0,1,2,9,0,0,49,50,27
0052DC  3  00 31 32 FF  
0052E0  3  09 06 00 00  
0052F9  3  1C FF 00 0E          .byte 28,255,0,14,27,28,49,50,0,0,9,1,255,0,4,49,50,27,28,255,0,14,27,28,49,50,255,0,8,49,50,27,28
0052FD  3  1B 1C 31 32  
005301  3  00 00 09 01  
00531A  3  00 00 1A 1A          .byte 0,0,26,26,0,0,0,26,0,0,0,26,26,0,27,28,49,50,255,0,4,255,6,30
00531E  3  00 00 00 1A  
005322  3  00 00 00 1A  
005332  3  FF 0A 1E 02          .byte 255,10,30,2,255,0,28,1,2,255,0,23,41,42,42,43,0,1,2,255,0,23,48,0,0,44,0,1,2,255,0,23,48
005336  3  FF 00 1C 01  
00533A  3  02 FF 00 17  
005353  3  00 00 2C 00          .byte 0,0,44,0,1,2,0,0,0,255,3,4,2,3,3,255,0,13,47,46,46,45,0,1,2,255,0,7,2,255,0,20,1
005357  3  01 02 00 00  
00535B  3  00 FF 03 04  
005374  3  02 FF 00 07          .byte 2,255,0,7,2,0,0,0,3,3,2,3,3,3,255,0,11,1,2,3,3,255,0,5,2,255,0,5,2,255,0,14,1
005378  3  02 00 00 00  
00537C  3  03 03 02 03  
005395  3  02 FF 00 07          .byte 2,255,0,7,2,0,29,37,30,0,2,255,0,5,3,3,2,255,0,6,1,2,255,0,7,2,0,35,35,35,0,2,255,33,5
005399  3  02 00 1D 25  
00539D  3  1E 00 02 FF  
0053B8  3  1E 00 02 FF          .byte 30,0,2,255,0,6,1,2,0,0,0,3,3,0,0,2,0,34,34,34,0,2,33,33,33,30,0,34,0,2,0,0,0
0053BC  3  00 06 01 02  
0053C0  3  00 00 00 03  
0053D9  3  03 03 03 01          .byte 3,3,3,1,2,255,0,7,2,29,37,34,37,30,2,33,30,0,34,0,34,0,2,255,0,6,1,2,255,0,7,2,34
0053DD  3  02 FF 00 07  
0053E1  3  02 1D 25 22  
0053FA  3  00 22 00 22          .byte 0,34,0,34,2,0,34,0,34,0,34,0,2,255,0,6,1,2,3,3,0,0,0,27,28,2,34,0,34,0,34,2,0
0053FE  3  02 00 22 00  
005402  3  22 00 22 00  
00541B  3  22 00 22 00          .byte 34,0,34,0,34,0,2,3,3,3,0,0,0,1,255,0,6,27,28,2,35,0,35,0,35,2,0,35,0,35,0,35,0
00541F  3  22 00 02 03  
005423  3  03 03 00 00  
00543C  3  02 FF 00 0D          .byte 2,255,0,13,27,28,2,34,26,34,26,34,2,26,34,26,34,26,34,26,2,255,0,7,255,9,30
005440  3  1B 1C 02 22  
005444  3  1A 22 1A 22  
005457  3  FF 0A 1E 02          .byte 255,10,30,2,255,0,5,34,0,0,0,40,255,0,8,40,0,0,0,34,255,0,5,1,2,255,38,5,35,38,38,38,39
00545B  3  FF 00 05 22  
00545F  3  00 00 00 28  
005478  3  FF 00 08 3D          .byte 255,0,8,61,38,38,38,35,255,38,5,1,2,255,0,5,34,255,0,16,34,255,0,5,1,2,255,33,5,31,255,0,16
00547C  3  26 26 26 23  
005480  3  FF 26 05 01  
005499  3  20 21 1E 00          .byte 32,33,30,0,0,0,1,2,255,0,24,34,0,0,0,1,2,255,0,24,32,33,33,33,1,2,255,0,28,1,2,255,0,28
00549D  3  00 00 01 02  
0054A1  3  FF 00 18 22  
0054BB  3  01 02 FF 00          .byte 1,2,255,0,28,1,2,255,0,12,49,50,0,0,0,49,50,255,0,9,1,2,255,0,12,49,50,0,0,0,49,50,255,0,9
0054BF  3  1C 01 02 FF  
0054C3  3  00 0C 31 32  
0054DE  3  01 02 FF 00          .byte 1,2,255,0,8,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,255,0,5,1,2,255,0,8,54,60,0,60,0
0054E2  3  08 3A 3B 3A  
0054E6  3  3B 3A 3B 3A  
0054FF  3  3C 00 3C 00          .byte 60,0,60,0,60,0,60,0,60,54,255,0,5,1,2,0,0,0,6,6,27,28,255,6,17,1,0,0,0,1,255,0,6
005503  3  3C 00 3C 00  
005507  3  3C 36 FF 00  
005520  3  1B 1C FF 00          .byte 27,28,255,0,17,1,255,0,10,27,28,255,0,17,1,255,0,4,255,9,30
005524  3  11 01 FF 00  
005528  3  0A 1B 1C FF  
005535  3  FF 0A 17 FF          .byte 255,10,23,255,0,4,10,10,10,2,0,34,255,0,26,10,2,0,35,255,0,8,41,42,42,43,255,0,14,10,2,33,31
005539  3  00 04 0A 0A  
00553D  3  0A 02 00 22  
005556  3  FF 00 08 30          .byte 255,0,8,48,0,0,44,255,0,14,10,2,255,0,10,48,0,0,44,255,0,9,27,28,9,9,9,10,2,255,0,10,47
00555A  3  00 00 2C FF  
00555E  3  00 0E 0A 02  
005577  3  2E 2E 2D FF          .byte 46,46,45,255,0,9,27,28,0,0,0,10,2,255,0,23,27,28,0,0,0,10,2,0,0,0,255,9,17,0,0,0,27
00557B  3  00 09 1B 1C  
00557F  3  00 00 00 0A  
005598  3  1C 09 09 09          .byte 28,9,9,9,10,2,255,0,23,27,28,0,0,0,10,2,9,9,255,0,19,9,9,27,28,0,0,0,10,2,255,0,23
00559C  3  0A 02 FF 00  
0055A0  3  17 1B 1C 00  
0055B9  3  1B 1C 00 00          .byte 27,28,0,0,0,10,2,0,0,0,255,9,17,0,0,0,27,28,9,9,9,10,2,255,0,23,27,28,0,0,0,10,2
0055BD  3  00 0A 02 00  
0055C1  3  00 00 FF 09  
0055DA  3  FF 00 17 1B          .byte 255,0,23,27,28,0,0,0,10,2,9,9,255,0,21,27,28,0,89,0,10,255,0,24,27,28,0,0,0,10,255,0,24
0055DE  3  1C 00 00 00  
0055E2  3  0A 02 09 09  
0055FB  3  1B 1C 00 58          .byte 27,28,0,88,0,10,255,3,23,255,0,4,3,3,3
0055FF  3  00 0A FF 03  
005603  3  17 FF 00 04  
00560A  3  FF 0A 05 22          .byte 255,10,5,34,10,34,10,10,10,40,255,10,11,255,0,4,10,10,18,10,255,38,4,35,38,35,38,38,38,39,255,0,17
00560E  3  0A 22 0A 0A  
005612  3  0A 28 FF 0A  
00562B  3  12 0A FF 00          .byte 18,10,255,0,4,35,0,35,255,0,21,18,10,255,0,4,34,0,34,0,41,42,42,43,255,0,16,18,255,10,7,35,0
00562F  3  04 23 00 23  
005633  3  FF 00 15 12  
00564C  3  30 00 00 2C          .byte 48,0,0,44,255,0,7,55,255,56,6,27,28,18,30,255,33,5,10,35,0,48,0,0,44,255,0,14,27,28,18,31,255,33,5
005650  3  FF 00 07 37  
005654  3  FF 38 06 1B  
00566F  3  0A 22 00 2F          .byte 10,34,0,47,46,46,45,255,0,4,55,57,255,0,8,27,28,18,30,255,33,5,10,35,255,0,19,27,28,18,31,255,33,5
005673  3  2E 2E 2D FF  
005677  3  00 04 37 39  
005691  3  0A 23 FF 00          .byte 10,35,255,0,19,27,28,18,30,255,33,5,10,34,255,0,11,55,57,255,0,6,27,28,18,31,255,33,5,10,35,255,0,21
005695  3  13 1B 1C 12  
005699  3  1E FF 21 05  
0056B3  3  12 1E FF 21          .byte 18,30,255,33,5,10,35,255,0,21,18,31,255,33,5,10,31,255,0,12,55,255,56,4,57,0,0,0,18,255,10,7,255,0,5
0056B7  3  05 0A 23 FF  
0056BB  3  00 15 12 1F  
0056D6  3  33 34 FF 00          .byte 51,52,255,0,15,18,10,255,0,11,53,54,0,89,0,0,21,23,255,0,8,55,18,10,0,49,50,0,49,50,0,49,50
0056DA  3  0F 12 0A FF  
0056DE  3  00 0B 35 36  
0056F7  3  00 33 34 33          .byte 0,51,52,51,52,255,0,15,10,0,49,50,0,49,50,0,49,50,0,53,54,53,54,88,255,0,14,10,255,7,16,255,0,4
0056FB  3  34 FF 00 0F  
0056FF  3  0A 00 31 32  
005719  3  FF 07 09             .byte 255,7,9
00571C  3  FF 0A 1E 12          .byte 255,10,30,18,255,0,28,17,18,255,0,28,17,18,255,0,28,17,18,255,0,28,17,18,255,0,7,49,50,255,0,10,51
005720  3  FF 00 1C 11  
005724  3  12 FF 00 1C  
00573D  3  34 FF 00 07          .byte 52,255,0,7,17,18,255,0,7,49,50,255,0,10,53,54,255,0,7,17,18,255,0,6,49,50,49,50,255,0,8,51,52
005741  3  11 12 FF 00  
005745  3  07 31 32 FF  
00575E  3  33 34 FF 00          .byte 51,52,255,0,6,17,18,255,0,6,49,50,49,50,255,0,8,53,54,53,54,255,0,6,17,18,27,28,14,255,15,8,16
005762  3  06 11 12 FF  
005766  3  00 06 31 32  
00577F  3  FF 00 04 0E          .byte 255,0,4,14,255,15,8,16,27,28,17,18,27,28,255,0,24,27,28,17,18,27,28,255,0,24,27,28,17,18,27,28,255,0,24
005783  3  FF 0F 08 10  
005787  3  1B 1C 11 12  
0057A2  3  1B 1C 11 12          .byte 27,28,17,18,27,28,255,0,24,27,28,17,18,14,255,15,4,16,27,28,0,0,0,14,255,15,4,16,0,0,0,27,28
0057A6  3  1B 1C FF 00  
0057AA  3  18 1B 1C 11  
0057C3  3  0E FF 0F 04          .byte 14,255,15,4,16,17,255,0,7,27,28,255,0,12,27,28,255,0,37,255,7,30
0057C7  3  10 11 FF 00  
0057CB  3  07 1B 1C FF  
0057D9  3  FF 0A 1E 12          .byte 255,10,30,18,255,0,29,18,255,0,29,18,255,0,29,18,255,0,22,14,255,15,6,18,255,0,14,14,255,15,5,16,255,0,7
0057DD  3  FF 00 1D 12  
0057E1  3  FF 00 1D 12  
0057FC  3  11 12 FF 00          .byte 17,18,255,0,28,17,18,255,0,7,14,255,15,5,16,255,0,14,17,18,255,0,28,17,18,14,27,28,15,16,255,0,23
005800  3  1C 11 12 FF  
005804  3  00 07 0E FF  
00581D  3  11 12 00 1B          .byte 17,18,0,27,28,255,0,24,14,17,18,0,27,28,255,0,25,17,18,255,0,8,21,255,22,16,23,0,0,17,18,14,15,15,15
005821  3  1C FF 00 18  
005825  3  0E 11 12 00  
005840  3  10 FF 00 08          .byte 16,255,0,8,61,38,38,39,255,0,9,27,28,17,18,255,0,14,21,23,255,0,7,89,0,0,27,28,17,255,0,27,27
005844  3  3D 26 26 27  
005848  3  FF 00 09 1B  
005861  3  1C 11 FF 00          .byte 28,17,255,0,24,88,0,0,27,28,17,255,7,14,255,0,4,255,7,12
005865  3  18 58 00 00  
005869  3  1B 1C 11 FF  
005875  3  FF 0A 1E FF          .byte 255,10,30,255,0,29,17,255,0,29,17,255,0,29,17,255,22,23,23,255,0,5,17,18,255,0,28,17,18,255,0,25,55
005879  3  00 1D 11 FF  
00587D  3  00 1D 11 FF  
005896  3  38 38 11 12          .byte 56,56,17,18,255,0,5,49,50,255,0,5,41,42,42,43,255,0,12,17,18,255,0,5,49,50,255,0,5,48,0,0,44
00589A  3  FF 00 05 31  
00589E  3  32 FF 00 05  
0058B7  3  FF 00 0C 11          .byte 255,0,12,17,18,255,0,4,49,50,49,50,255,0,4,48,0,0,44,255,0,7,55,255,56,4,17,18,255,0,4,49,50
0058BB  3  12 FF 00 04  
0058BF  3  31 32 31 32  
0058D8  3  31 32 FF 00          .byte 49,50,255,0,4,47,46,46,45,255,0,12,17,18,0,0,0,49,50,49,50,49,50,255,0,19,17,18,0,0,0,49,50
0058DC  3  04 2F 2E 2E  
0058E0  3  2D FF 00 0C  
0058F9  3  31 32 31 32          .byte 49,50,49,50,255,0,13,55,255,56,5,17,18,0,0,49,50,49,50,49,50,49,50,255,0,18,17,18,0,0,49,50,49
0058FD  3  FF 00 0D 37  
005901  3  FF 38 05 11  
00591A  3  32 31 32 31          .byte 50,49,50,49,50,255,0,6,55,56,56,57,255,0,8,17,18,0,58,59,255,58,6,59,58,255,0,18,18,0,26,60,255,0,6
00591E  3  32 FF 00 06  
005922  3  37 38 38 39  
00593D  3  3C 1A FF 00          .byte 60,26,255,0,18,255,7,30
005941  3  12 FF 07 1E  
005945  3  FF 0A 1E 12          .byte 255,10,30,18,255,0,4,255,37,4,255,0,12,255,37,4,255,0,4,17,18,255,0,4,255,35,4,255,0,12,255,35,4
005949  3  FF 00 04 FF  
00594D  3  25 04 FF 00  
005966  3  FF 00 04 11          .byte 255,0,4,17,18,255,0,4,255,34,4,255,0,12,255,34,4,255,0,4,17,18,255,33,4,31,34,34,34,255,0,12,34,34,34
00596A  3  12 FF 00 04  
00596E  3  FF 22 04 FF  
005989  3  20 FF 21 04          .byte 32,255,33,4,17,18,255,0,5,34,34,34,255,0,12,34,34,34,255,0,5,17,18,255,33,5,31,35,35,255,0,12,35,35
00598D  3  11 12 FF 00  
005991  3  05 22 22 22  
0059AB  3  20 FF 21 05          .byte 32,255,33,5,17,18,255,0,6,34,34,255,0,12,34,34,255,0,6,17,18,255,33,6,31,34,255,0,12,34,32,255,33,6
0059AF  3  11 12 FF 00  
0059B3  3  06 22 22 FF  
0059CD  3  11 12 FF 00          .byte 17,18,255,0,7,34,255,0,12,34,255,0,7,17,18,255,33,7,31,255,0,12,32,255,33,7,17,18,255,0,28,17,18
0059D1  3  07 22 FF 00  
0059D5  3  0C 22 FF 00  
0059EE  3  FF 00 1C 11          .byte 255,0,28,17,18,255,0,28,17,18,255,0,28,17,255,0,8,58,59,255,58,10,59,58,255,0,15,26,26,60,255,0,10
0059F2  3  12 FF 00 1C  
0059F6  3  11 12 FF 00  
005A0F  3  3C 1A 1A FF          .byte 60,26,26,255,0,7,255,7,30
005A13  3  00 07 FF 07  
005A17  3  1E           
005A18  3  FF 0A 17 FF          .byte 255,10,23,255,0,4,10,10,10,18,255,0,28,17,18,255,0,27,89,17,18,255,0,28,17,18,255,0,27,88,17,18,255,0,23
005A1C  3  00 04 0A 0A  
005A20  3  0A 12 FF 00  
005A3B  3  0E FF 0F 04          .byte 14,255,15,4,17,18,255,0,5,27,28,21,255,22,10,23,27,28,255,0,7,17,18,255,0,5,27,28,0,36,255,0,8
005A3F  3  11 12 FF 00  
005A43  3  05 1B 1C 15  
005A5C  3  24 00 1B 1C          .byte 36,0,27,28,255,0,7,17,18,255,0,5,27,28,0,36,255,0,8,36,0,27,28,255,0,7,17,18,255,0,5,27,28
005A60  3  FF 00 07 11  
005A64  3  12 FF 00 05  
005A7D  3  00 24 FF 00          .byte 0,36,255,0,8,36,0,27,28,255,0,7,17,18,255,0,5,27,28,0,36,255,0,8,36,0,27,28,255,0,7,17,18
005A81  3  08 24 00 1B  
005A85  3  1C FF 00 07  
005A9E  3  00 00 00 31          .byte 0,0,0,49,50,21,255,22,16,23,49,50,0,0,0,17,18,0,0,0,49,50,255,0,18,49,50,0,0,0,17,18,0,0,0
005AA2  3  32 15 FF 16  
005AA6  3  10 17 31 32  
005AC1  3  31 32 FF 00          .byte 49,50,255,0,18,49,50,0,0,0,17,18,16,0,0,49,50,255,0,18,49,50,0,0,14,17,255,0,4,51,52,0,0
005AC5  3  12 31 32 00  
005AC9  3  00 00 11 12  
005AE2  3  33 34 00 33          .byte 51,52,0,51,52,0,51,52,0,51,52,0,51,52,0,0,51,52,255,0,8,53,54,0,0,53,54,0,53,54,0,53,54
005AE6  3  34 00 33 34  
005AEA  3  00 33 34 00  
005B03  3  00 35 36 00          .byte 0,53,54,0,53,54,0,0,53,54,255,0,4,255,7,30
005B07  3  35 36 00 00  
005B0B  3  35 36 FF 00  
005B13  3  FF 0A 10 1E          .byte 255,10,16,30,255,0,13,18,255,0,14,32,255,10,4,30,255,0,9,18,255,0,18,32,10,10,10,30,255,0,6,18,255,0,21
005B17  3  FF 00 0D 12  
005B1B  3  FF 00 0E 20  
005B36  3  20 0A 0A 1E          .byte 32,10,10,30,255,0,4,18,255,0,21,255,10,4,30,0,0,0,18,255,0,21,10,62,63,64,65,0,0,0,18,255,0,21
005B3A  3  FF 00 04 12  
005B3E  3  FF 00 15 FF  
005B58  3  0A 42 43 44          .byte 10,66,67,68,69,0,0,0,18,255,0,21,255,10,6,30,0,18,255,0,26,32,10,0,18,255,0,27,10,0,18,255,0,27
005B5C  3  45 00 00 00  
005B60  3  12 FF 00 15  
005B7A  3  0A 1E 12 FF          .byte 10,30,18,255,0,27,32,10,18,255,0,28,10,18,255,0,28,10,18,255,0,22,85,86,86,87,0,0,10,255,0,29,10
005B7E  3  00 1B 20 0A  
005B82  3  12 FF 00 1C  
005B9B  3  FF 00 1D FF          .byte 255,0,29,255,10,24,255,12,4,10,10,10
005B9F  3  0A 18 FF 0C  
005BA3  3  04 0A 0A 0A  
005BA7  3  FF 0A 11 FF          .byte 255,10,17,255,0,4,255,10,10,255,0,28,17,10,255,0,28,17,10,255,0,28,17,10,255,0,28,17,10,255,0,15,14
005BAB  3  00 04 FF 0A  
005BAF  3  0A FF 00 1C  
005BC8  3  FF 0F 04 10          .byte 255,15,4,16,255,0,7,17,10,255,0,28,17,10,255,15,12,16,255,0,10,14,255,15,4,17,10,255,0,28,17,10,255,0,28
005BCC  3  FF 00 07 11  
005BD0  3  0A FF 00 1C  
005BEB  3  11 0A FF 00          .byte 17,10,255,0,14,14,255,15,6,16,255,0,6,17,10,255,0,28,17,10,255,0,28,17,10,255,15,12,16,255,0,10,14
005BEF  3  0E 0E FF 0F  
005BF3  3  06 10 FF 00  
005C0C  3  FF 0F 04 11          .byte 255,15,4,17,10,0,49,50,0,49,50,0,49,50,0,49,50,255,0,17,10,0,49,50,0,49,50,0,49,50,0,49,50
005C10  3  0A 00 31 32  
005C14  3  00 31 32 00  
005C2D  3  FF 00 11 0A          .byte 255,0,17,10,58,59,255,58,9,59,58,255,0,16,10,255,15,29
005C31  3  3A 3B FF 3A  
005C35  3  09 3B 3A FF  
005C3F  3  FF 0A 1E 12          .byte 255,10,30,18,255,0,5,40,0,34,0,34,0,34,0,34,255,0,14,18,18,0,41,42,42,43,40,0,35,0,35,0,35
005C43  3  FF 00 05 28  
005C47  3  00 22 00 22  
005C60  3  00 23 FF 00          .byte 0,35,255,0,9,41,42,42,43,0,18,18,0,48,0,0,44,40,0,34,0,34,0,34,0,34,255,0,9,48,0,0,44
005C64  3  09 29 2A 2A  
005C68  3  2B 00 12 12  
005C81  3  00 12 12 00          .byte 0,18,18,0,48,0,0,44,40,0,35,0,35,0,35,0,35,255,0,9,48,0,0,44,0,18,18,0,47,46,46,45,40
005C85  3  30 00 00 2C  
005C89  3  28 00 23 00  
005CA2  3  00 20 FF 21          .byte 0,32,255,33,13,30,0,47,46,46,45,0,18,18,255,38,5,39,255,0,15,34,255,0,6,18,18,255,0,21,35,255,0,6
005CA6  3  0D 1E 00 2F  
005CAA  3  2E 2E 2D 00  
005CC4  3  12 12 FF 00          .byte 18,18,255,0,21,34,255,0,6,18,18,255,0,5,49,50,255,0,14,32,33,33,37,33,33,33,18,18,255,0,5,49,50
005CC8  3  15 22 FF 00  
005CCC  3  06 12 12 FF  
005CE5  3  FF 00 11 22          .byte 255,0,17,34,0,0,0,18,18,255,0,4,49,50,49,50,255,0,16,35,0,0,0,18,18,255,0,4,49,50,49,50,255,0,16
005CE9  3  00 00 00 12  
005CED  3  12 FF 00 04  
005D08  3  22 00 00 00          .byte 34,0,0,0,18,18,0,0,0,49,50,49,50,49,50,255,0,15,32,33,33,33,18,18,0,0,0,49,50,49,50,49,50
005D0C  3  12 12 00 00  
005D10  3  00 31 32 31  
005D29  3  FF 00 13 12          .byte 255,0,19,18,0,0,0,49,50,49,50,49,50,49,50,255,0,22,49,50,49,50,49,50,49,50,255,0,19,255,15,30
005D2D  3  00 00 00 31  
005D31  3  32 31 32 31  
005D49  3  FF 16 0D 17          .byte 255,22,13,23,255,0,4,21,255,22,11,18,0,0,34,255,0,25,18,18,33,33,31,255,0,25,18,18,255,0,28,18,17
005D4D  3  FF 00 04 15  
005D51  3  FF 16 0B 12  
005D6A  3  00 00 00 15          .byte 0,0,0,21,255,22,20,23,0,27,28,18,18,255,0,6,34,255,0,15,34,0,0,0,27,28,18,18,255,0,6,34,255,0,15
005D6E  3  FF 16 14 17  
005D72  3  00 1B 1C 12  
005D8D  3  22 00 00 00          .byte 34,0,0,0,27,28,18,18,16,255,0,5,35,255,0,15,35,0,0,0,27,28,18,18,255,0,6,34,255,0,15,34,0,0,0
005D91  3  1B 1C 12 12  
005D95  3  10 FF 00 05  
005DB0  3  1B 1C 12 12          .byte 27,28,18,18,0,0,0,14,255,15,20,16,0,27,28,18,18,255,0,6,34,255,0,15,34,0,0,0,27,28,18,18,255,0,6
005DB4  3  00 00 00 0E  
005DB8  3  FF 0F 14 10  
005DD3  3  23 FF 00 0F          .byte 35,255,0,15,35,0,0,0,27,28,18,18,16,255,0,5,34,255,0,15,34,0,0,0,27,28,18,18,255,0,6,34,255,0,15
005DD7  3  23 00 00 00  
005DDB  3  1B 1C 12 12  
005DF6  3  22 00 00 00          .byte 34,0,0,0,27,28,18,18,0,0,0,14,255,15,20,16,0,27,28,18,255,0,27,27,28,18,255,0,27,27,28,18,255,15,30
005DFA  3  1B 1C 12 12  
005DFE  3  00 00 00 0E  
005E19  3               numsc:
005E19  3  16                   .byte 22
005E1A  3               nmedat:
005E1A  3  00 01 18 88          .byte 0,1,24,136,255
005E1E  3  FF           
005E1F  3  00 01 80 E0          .byte 0,1,128,224,1,3,96,160,6,14,24,224,1,7,64,184,255
005E23  3  01 03 60 A0  
005E27  3  06 0E 18 E0  
005E30  3  00 00 80 10          .byte 0,0,128,16,6,14,56,224,1,8,24,160,1,8,88,64,255
005E34  3  06 0E 38 E0  
005E38  3  01 08 18 A0  
005E41  3  00 00 18 58          .byte 0,0,24,88,6,14,48,16,1,3,72,80,1,8,128,80,255
005E45  3  06 0E 30 10  
005E49  3  01 03 48 50  
005E52  3  00 00 48 10          .byte 0,0,72,16,6,14,128,16,2,5,40,112,2,4,64,152,2,9,56,200,7,11,128,80,5,13,32,32,5,13,32,72,255
005E56  3  06 0E 80 10  
005E5A  3  02 05 28 70  
005E73  3  00 00 80 10          .byte 0,0,128,16,6,14,40,16,2,2,56,88,2,2,64,168,2,2,96,144,255
005E77  3  06 0E 28 10  
005E7B  3  02 02 38 58  
005E88  3  00 01 80 E0          .byte 0,1,128,224,5,13,32,104,1,3,48,48,1,7,80,64,1,8,128,80,255
005E8C  3  05 0D 20 68  
005E90  3  01 03 30 30  
005E9D  3  00 00 80 10          .byte 0,0,128,16,6,14,24,16,2,5,24,32,2,5,48,88,2,5,80,152,7,11,128,72,7,11,128,168,255
005EA1  3  06 0E 18 10  
005EA5  3  02 05 18 20  
005EBA  3  00 00 80 10          .byte 0,0,128,16,6,14,40,120,1,8,56,16,1,8,56,184,2,5,72,104,2,5,72,144,255
005EBE  3  06 0E 28 78  
005EC2  3  01 08 38 10  
005ED3  3  00 00 80 10          .byte 0,0,128,16,5,13,32,208,6,14,16,16,2,5,16,152,255
005ED7  3  05 0D 20 D0  
005EDB  3  06 0E 10 10  
005EE4  3  00 00 80 10          .byte 0,0,128,16,6,14,128,192,2,5,40,88,2,5,72,176,7,11,128,72,255
005EE8  3  06 0E 80 C0  
005EEC  3  02 05 28 58  
005EF9  3  00 01 18 C8          .byte 0,1,24,200,5,13,32,104,6,14,40,16,1,8,48,40,1,8,80,56,1,8,128,72,255
005EFD  3  05 0D 20 68  
005F01  3  06 0E 28 10  
005F12  3  00 01 18 C8          .byte 0,1,24,200,5,13,40,88,2,9,24,128,255
005F16  3  05 0D 28 58  
005F1A  3  02 09 18 80  
005F1F  3  00 00 80 10          .byte 0,0,128,16,6,14,16,40,2,5,72,120,7,11,128,120,255
005F23  3  06 0E 10 28  
005F27  3  02 05 48 78  
005F30  3  00 00 80 10          .byte 0,0,128,16,6,14,48,224,1,7,88,80,2,5,24,56,255
005F34  3  06 0E 30 E0  
005F38  3  01 07 58 50  
005F41  3  00 01 80 E0          .byte 0,1,128,224,5,13,72,120,6,14,112,16,2,9,104,96,2,5,96,152,7,11,128,152,255
005F45  3  05 0D 48 78  
005F49  3  06 0E 70 10  
005F5A  3  00 01 80 E0          .byte 0,1,128,224,6,14,112,120,2,5,104,88,2,5,104,152,2,4,48,104,2,4,48,136,255
005F5E  3  06 0E 70 78  
005F62  3  02 05 68 58  
005F73  3  00 01 18 C8          .byte 0,1,24,200,6,14,80,112,1,8,40,128,1,7,80,72,255
005F77  3  06 0E 50 70  
005F7B  3  01 08 28 80  
005F84  3  00 00 80 10          .byte 0,0,128,16,8,12,128,200,3,2,24,16,3,6,32,80,3,10,48,152,255
005F88  3  08 0C 80 C8  
005F8C  3  03 02 18 10  
005F99  3  00 00 18 98          .byte 0,0,24,152,1,3,128,128,1,8,48,40,6,14,96,16,255
005F9D  3  01 03 80 80  
005FA1  3  01 08 30 28  
005FAA  3  00 00 80 10          .byte 0,0,128,16,5,13,32,32,5,13,32,208,2,5,64,136,2,5,104,160,3,10,24,160,6,14,64,56,255
005FAE  3  05 0D 20 20  
005FB2  3  05 0D 20 D0  
005FC7  3  00 00 80 10          .byte 0,0,128,16,1,7,104,112,1,7,64,120,6,14,24,224,255
005FCB  3  01 07 68 70  
005FCF  3  01 07 40 78  
005FD8  3               NUMOBJ = 24
005FD8  3               objdta:
005FD8  3  3F FC 30 0C          .byte 63,252,48,12,63,252,63,252,48,12,63,252,60,60,60,60,60,60,60,60,60,60,60,60,63,252,48,12,48,12,15,240,254,128,64,254,128,64
005FDC  3  3F FC 3F FC  
005FE0  3  30 0C 3F FC  
005FFE  3  3F FC 30 0C          .byte 63,252,48,12,63,252,63,252,48,12,51,204,60,60,60,60,60,60,60,60,60,60,60,60,51,204,48,12,48,12,15,240,254,8,8,254,8,8
006002  3  3F FC 3F FC  
006006  3  30 0C 33 CC  
006024  3  3F FC 30 0C          .byte 63,252,48,12,63,252,63,252,48,12,51,204,51,204,51,204,60,60,60,60,60,60,60,60,63,252,48,12,48,12,15,240,254,8,8,254,8,8
006028  3  3F FC 3F FC  
00602C  3  30 0C 33 CC  
00604A  3  3F FC 30 0C          .byte 63,252,48,12,63,252,63,252,48,12,51,204,51,204,63,252,60,60,60,60,63,252,51,204,51,204,48,12,48,12,15,240,254,8,8,254,8,8
00604E  3  3F FC 3F FC  
006052  3  30 0C 33 CC  
006070  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,1,128,160,1,128,160
006074  3  00 00 00 00  
006078  3  00 00 00 00  
006096  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,2,56,96,2,56,96
00609A  3  00 00 00 00  
00609E  3  00 00 00 00  
0060BC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,3,128,56,3,128,56
0060C0  3  00 00 00 00  
0060C4  3  00 00 00 00  
0060E2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,4,128,200,4,128,200
0060E6  3  00 00 00 00  
0060EA  3  00 00 00 00  
006108  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,5,128,64,5,128,64
00610C  3  00 00 00 00  
006110  3  00 00 00 00  
00612E  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,6,128,128,6,128,128
006132  3  00 00 00 00  
006136  3  00 00 00 00  
006154  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,7,88,16,7,88,16
006158  3  00 00 00 00  
00615C  3  00 00 00 00  
00617A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,8,96,120,8,96,120
00617E  3  00 00 00 00  
006182  3  00 00 00 00  
0061A0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,9,48,136,9,48,136
0061A4  3  00 00 00 00  
0061A8  3  00 00 00 00  
0061C6  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,10,104,56,10,104,56
0061CA  3  00 00 00 00  
0061CE  3  00 00 00 00  
0061EC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,11,80,224,11,80,224
0061F0  3  00 00 00 00  
0061F4  3  00 00 00 00  
006212  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,12,104,152,12,104,152
006216  3  00 00 00 00  
00621A  3  00 00 00 00  
006238  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,13,104,200,13,104,200
00623C  3  00 00 00 00  
006240  3  00 00 00 00  
00625E  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,14,128,168,14,128,168
006262  3  00 00 00 00  
006266  3  00 00 00 00  
006284  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,15,88,200,15,88,200
006288  3  00 00 00 00  
00628C  3  00 00 00 00  
0062AA  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,16,128,24,16,128,24
0062AE  3  00 00 00 00  
0062B2  3  00 00 00 00  
0062D0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,17,80,192,17,80,192
0062D4  3  00 00 00 00  
0062D8  3  00 00 00 00  
0062F6  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,19,128,152,19,128,152
0062FA  3  00 00 00 00  
0062FE  3  00 00 00 00  
00631C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,20,128,96,20,128,96
006320  3  00 00 00 00  
006324  3  00 00 00 00  
006342  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,15,240,15,240,15,240,15,240,12,48,15,240,21,128,208,21,128,208
006346  3  00 00 00 00  
00634A  3  00 00 00 00  
006368  3               font:
006368  3  79 3E 32 47          .byte 121,62,50,71,205,236,126,205
00636C  3  CD EC 7E CD  
006370  3  18 81 CD D5          .byte 24,129,205,213,220,201,48,0
006374  3  DC C9 30 00  
006378  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
00637C  3  00 00 00 00  
006380  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
006384  3  6C FE 6C 00  
006388  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
00638C  3  7E 1E 7E 18  
006390  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
006394  3  30 6E CE 00  
006398  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
00639C  3  7E CC 7E 00  
0063A0  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0063A4  3  00 00 00 00  
0063A8  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0063AC  3  18 18 0C 00  
0063B0  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0063B4  3  30 30 60 00  
0063B8  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0063BC  3  7E 18 3C 00  
0063C0  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0063C4  3  7E 18 18 00  
0063C8  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0063CC  3  00 18 18 30  
0063D0  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0063D4  3  7E 00 00 00  
0063D8  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0063DC  3  00 38 38 00  
0063E0  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0063E4  3  18 30 60 00  
0063E8  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0063EC  3  F6 E6 7C 00  
0063F0  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0063F4  3  18 18 7E 00  
0063F8  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0063FC  3  7C C0 FE 00  
006400  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
006404  3  06 C6 7C 00  
006408  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
00640C  3  D8 FE 18 00  
006410  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
006414  3  06 C6 7C 00  
006418  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
00641C  3  C6 C6 7C 00  
006420  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
006424  3  18 30 30 00  
006428  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
00642C  3  C6 C6 7C 00  
006430  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
006434  3  7E 06 7C 00  
006438  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
00643C  3  00 00 30 00  
006440  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
006444  3  30 00 30 00  
006448  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
00644C  3  30 18 0C 00  
006450  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
006454  3  00 7E 00 00  
006458  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
00645C  3  0C 18 30 00  
006460  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
006464  3  18 00 18 00  
006468  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
00646C  3  FE C0 7C 00  
006470  3  00 FC C6 C6          .byte 0,252,198,198,254,198,198,0
006474  3  FE C6 C6 00  
006478  3  00 FC C6 FC          .byte 0,252,198,252,198,198,254,0
00647C  3  C6 C6 FE 00  
006480  3  00 7E C6 C0          .byte 0,126,198,192,192,198,126,0
006484  3  C0 C6 7E 00  
006488  3  00 F8 CC C6          .byte 0,248,204,198,198,198,254,0
00648C  3  C6 C6 FE 00  
006490  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
006494  3  C0 C0 FE 00  
006498  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
00649C  3  C0 C0 C0 00  
0064A0  3  00 7E C6 C0          .byte 0,126,198,192,222,198,126,0
0064A4  3  DE C6 7E 00  
0064A8  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0064AC  3  C6 C6 C6 00  
0064B0  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0064B4  3  18 18 7E 00  
0064B8  3  00 06 06 06          .byte 0,6,6,6,198,198,252,0
0064BC  3  C6 C6 FC 00  
0064C0  3  00 C6 CC F8          .byte 0,198,204,248,222,198,198,0
0064C4  3  DE C6 C6 00  
0064C8  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0064CC  3  C0 C0 FE 00  
0064D0  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0064D4  3  C6 C6 C6 00  
0064D8  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0064DC  3  DE CE C6 00  
0064E0  3  00 7E C6 C6          .byte 0,126,198,198,198,198,124,0
0064E4  3  C6 C6 7C 00  
0064E8  3  00 FC C6 C6          .byte 0,252,198,198,254,192,192,0
0064EC  3  FE C0 C0 00  
0064F0  3  00 7E C6 C6          .byte 0,126,198,198,246,222,124,0
0064F4  3  F6 DE 7C 00  
0064F8  3  00 FE C6 C6          .byte 0,254,198,198,252,204,198,0
0064FC  3  FC CC C6 00  
006500  3  00 FC C0 FE          .byte 0,252,192,254,6,198,254,0
006504  3  06 C6 FE 00  
006508  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
00650C  3  30 30 30 00  
006510  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,126,0
006514  3  C6 C6 7E 00  
006518  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
00651C  3  C6 6C 38 00  
006520  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,110,0
006524  3  C6 FE 6E 00  
006528  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
00652C  3  38 6C C6 00  
006530  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
006534  3  30 30 30 00  
006538  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
00653C  3  30 60 FE 00  
006540  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
006544  3  18 18 1E 00  
006548  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
00654C  3  30 18 0C 00  
006550  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
006554  3  30 30 F0 00  
006558  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
00655C  3  30 30 30 00  
006560  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
006564  3  00 00 00 00  
006568  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
00656C  3  60 60 FE 00  
006570  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
006574  3  7C CC 7C 00  
006578  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
00657C  3  66 66 7C 00  
006580  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
006584  3  60 60 3C 00  
006588  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
00658C  3  CC CC 7C 00  
006590  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
006594  3  F8 C0 7C 00  
006598  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
00659C  3  30 30 30 00  
0065A0  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0065A4  3  CC 7C 0C 78  
0065A8  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0065AC  3  CC CC CC 00  
0065B0  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0065B4  3  30 30 78 00  
0065B8  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0065BC  3  0C 0C 6C 38  
0065C0  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0065C4  3  70 78 6C 00  
0065C8  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0065CC  3  30 30 1C 00  
0065D0  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0065D4  3  FC FC FC 00  
0065D8  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0065DC  3  CC CC CC 00  
0065E0  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0065E4  3  CC CC 78 00  
0065E8  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0065EC  3  CC F8 C0 C0  
0065F0  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0065F4  3  CC 7C 0C 0E  
0065F8  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0065FC  3  60 60 60 00  
006600  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
006604  3  78 0C F8 00  
006608  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00660C  3  30 30 1C 00  
006610  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
006614  3  CC CC 78 00  
006618  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00661C  3  78 78 30 00  
006620  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
006624  3  FC FC 78 00  
006628  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00662C  3  30 78 CC 00  
006630  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
006634  3  CC 7C 0C 78  
006638  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00663C  3  30 60 FC 00  
006640  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
006644  3  18 18 1E 00  
006648  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00664C  3  18 18 18 00  
006650  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
006654  3  30 30 F0 00  
006658  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
00665C  3  00 00 00 00  
006660  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
006664  3  E3 BB C6 7C  
006668  3               jtab:
006668  3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,255,0,0,0,1,1,1,2,2,4,6,8,8,8,99
00666C  3  FE FF FF FF  
006670  3  00 00 00 01  
00667E  3  35 15 64 24  keys:   .byte 53,21,100,36,20,33,17,33,17,1,146
006682  3  14 21 11 21  
006686  3  11 01 92     
006689  3               
006689  2               
006689  1               	.include "z80.asm"
006689  2               ;------------------------------------------------------
006689  2               ; z80.asm
006689  2               ; spectrum stuff
006689  2               ; adresses
006689  2               
006689  2               
006689  2               ; Contains seperatly 1 bit set
006689  2               
006689  2               _bitmem0	= $f8
006689  2               _bitmem1	= $f9
006689  2               _bitmem2	= $fa
006689  2               _bitmem3	= $fb
006689  2               _bitmem4	= $fc
006689  2               _bitmem5	= $fd
006689  2               _bitmem6	= $fe
006689  2               _bitmem7	= $ff
006689  2               
006689  2               ; constants
006689  2               _bitvalue0	= $01
006689  2               _bitvalue1	= $02
006689  2               _bitvalue2	= $04
006689  2               _bitvalue3	= $08
006689  2               _bitvalue4	= $10
006689  2               _bitvalue5	= $20
006689  2               _bitvalue6	= $40
006689  2               _bitvalue7	= $80
006689  2               
006689  2               _notbitvalue0	= $fe
006689  2               _notbitvalue1	= $fd
006689  2               _notbitvalue2	= $fb
006689  2               _notbitvalue3	= $f7
006689  2               _notbitvalue4	= $ef
006689  2               _notbitvalue5	= $df
006689  2               _notbitvalue6	= $bf
006689  2               _notbitvalue7	= $7f
006689  2               
006689  2               
006689  2               exx:
006689  2  A5 62        		lda z80_c
00668B  2  A4 6E        		ldy z80_cp
00668D  2  84 62        		sty z80_c
00668F  2  85 6E        		sta z80_cp
006691  2  A5 63        		lda z80_b
006693  2  A4 6F        		ldy z80_bp
006695  2  84 63        		sty z80_b
006697  2  85 6F        		sta z80_bp
006699  2  A5 64        		lda z80_e
00669B  2  A4 70        		ldy z80_ep
00669D  2  84 64        		sty z80_e
00669F  2  85 70        		sta z80_ep
0066A1  2  A5 65        		lda z80_d
0066A3  2  A4 71        		ldy z80_dp
0066A5  2  84 65        		sty z80_d
0066A7  2  85 71        		sta z80_dp
0066A9  2  A5 rr        		lda scraddr
0066AB  2  A4 72        		ldy z80_lp
0066AD  2  84 rr        		sty scraddr
0066AF  2  85 72        		sta z80_lp
0066B1  2  A5 rr        		lda scraddr+1
0066B3  2  A4 73        		ldy z80_hp
0066B5  2  84 rr        		sty scraddr+1
0066B7  2  85 73        		sta z80_hp
0066B9  2  60           		rts
0066BA  2               
0066BA  2               
0066BA  1               eind_asm:
0066BA  1               eop:					; End Of Program
0066BA  1               

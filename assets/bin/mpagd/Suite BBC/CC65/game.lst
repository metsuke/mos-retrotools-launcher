ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; BBC AGD Engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ; BBC Micro version by Kieran Connell 2018
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               ;----------------------------------------------------------------------
000000r 1               ;BBC configuration
000000r 1               
000000r 1               swrflag	= 1				; SW RAM
000000r 1               scrchar = 32				; chars/line
000000r 1               
000000r 1               ;----------------------------------------------------------------------
000000r 1               
000000r 1               .DEFINE asm_code 	$0e00		; assembly address _BEEB
000000r 1               .DEFINE load_address 	$1200		; load address _BEEB
000000r 1               
000000r 1               .if swrflag
000000r 1               	.DEFINE data_address $8000	; data address _SWRAM
000000r 1               .endif
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 1 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 0 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 1 ;
000000r 2               kflag = 0 ;
000000r 2               
000000r 1               
000000r 1               ;----------------------------------------------------------------------
000000r 1               ; BBC MICRO PLATFORM DEFINES
000000r 1               ;----------------------------------------------------------------------
000000r 1               
000000r 1               ; _BEEB MOS calls
000000r 1               
000000r 1               	OSBYTE	 = $fff4
000000r 1               	OSFILE	 = $ffdd
000000r 1               	OSWRCH	 = $ffee
000000r 1               	OSASCI	 = $ffe3
000000r 1               	OSWORD	 = $fff1
000000r 1               	OSFIND	 = $ffce
000000r 1               	OSGBPB	 = $ffd1
000000r 1               	OSARGS	 = $ffda
000000r 1               
000000r 1               	EVENTV	 = $0220
000000r 1               
000000r 1               	PAL_black = 0 ^ 7
000000r 1               	PAL_white = 7 ^ 7
000000r 1               
000000r 1               ; System constants
000000r 1               
000000r 1               	ScreenSize	= scrchar*24*8		; Startaddress video RAM _BEEB
000000r 1               	ScreenAddr 	= $8000 - ScreenSize	; Screen size bytes _BEEB
000000r 1               	ScreenRowBytes	= scrchar*8		; columns
000000r 1               	SpriteMaxY	= 177			; used for clipping bottom of screen
000000r 1               
000000r 1               ; AGD Engine Workspace
000000r 1               
000000r 1               	MAP 		= $300				; properties map buffer (3x256 bytes)
000000r 1               	SCADTB_lb	= MAP + $300
000000r 1               	SCADTB_hb	= SCADTB_lb + $100
000000r 1               .if pflag
000000r 1                   SHRAPN 		= $B00 - (NUMSHR * SHRSIZ)	; shrapnel table (55x6 bytes)
000000r 1               .endif
000000r 1               	sprtab		= $B00				; NUMSPR*TABSIZ
000000r 1               
000000r 1               ;----------------------------------------------------------------------
000000r 1               ; ZERO PAGE SEGMENT
000000r 1               ;----------------------------------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               
000000r 1               .include "z80-zp.inc"
000000r 2               ;ws	 = $60
000000r 2               
000000r 2  xx           z80_f: .res 1;	 = ws+$00
000001r 2  xx           z80_a: .res 1;	 = ws+$01
000002r 2               z80_af	 = z80_f
000002r 2               
000002r 2  xx           z80_c: .res 1;	 = ws+$02
000003r 2  xx           z80_b: .res 1;	 = ws+$03
000004r 2               z80_bc	 = z80_c
000004r 2               
000004r 2  xx           z80_e: .res 1;	 = ws+$04
000005r 2  xx           z80_d: .res 1;	 = ws+$05
000006r 2               z80_de	 = z80_e
000006r 2               
000006r 2  xx           z80_l: .res 1;	 = ws+$06
000007r 2  xx           z80_h: .res 1;	 = ws+$07
000008r 2               z80_hl	 = z80_l
000008r 2               
000008r 2  xx           z80_x: .res 1;    = ws+$08
000009r 2  xx           z80_i: .res 1;    = ws+$09
00000Ar 2               z80_ix	 = z80_x
00000Ar 2               
00000Ar 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00000Cr 2               
00000Cr 2  xx           z80_fp: .res 1;	 = ws+$0c
00000Dr 2  xx           z80_ap: .res 1;	 = ws+$0d
00000Er 2               
00000Er 2  xx           z80_cp: .res 1;	 = ws+$0e
00000Fr 2  xx           z80_bp: .res 1;	 = ws+$0f
000010r 2               z80_bcp	 = z80_cp
000010r 2               
000010r 2  xx           z80_ep: .res 1;	 = ws+$10
000011r 2  xx           z80_dp: .res 1;	 = ws+$11
000012r 2               z80_dep	 = z80_ep
000012r 2               
000012r 2  xx           z80_lp: .res 1;	 = ws+$12
000013r 2  xx           z80_hp: .res 1;	 = ws+$13
000014r 2               z80_hlp	 = z80_lp
000014r 2               
000014r 2  xx xx        z80_sp: .res 2;   = ws+$14
000016r 2               
000016r 2  xx           z80_reg0: .res 1; = ws+$16
000017r 2  xx           z80_reg1: .res 1; = ws+$17
000018r 2  xx           z80_reg2: .res 1; = ws+$18
000019r 2  xx           z80_reg3: .res 1; = ws+$19
00001Ar 2               
00001Ar 2               ;z80_r: .res 1;	 = ws+$1a
00001Ar 2               
00001Ar 1               .include "engine-zp.inc"
00001Ar 2               ;----------------------------------------------------------------------
00001Ar 2               ; AGD 6502 Engine Zero Page Variables
00001Ar 2               ;----------------------------------------------------------------------
00001Ar 2               
00001Ar 2               ; Variables start here.
00001Ar 2               
00001Ar 2  xx           scno:	.res 1			; present screen number.
00001Br 2  xx           numlif:	.res 1			; number of lives.
00001Cr 2               
00001Cr 2  xx           vara:	.res 1			; general-purpose variable.
00001Dr 2  xx           varb:	.res 1			; general-purpose variable.
00001Er 2  xx           varc:	.res 1			; general-purpose variable.
00001Fr 2  xx           vard:	.res 1			; general-purpose variable.
000020r 2  xx           vare:	.res 1			; general-purpose variable.
000021r 2  xx           varf:	.res 1			; general-purpose variable.
000022r 2  xx           varg:	.res 1			; general-purpose variable.
000023r 2  xx           varh:	.res 1			; general-purpose variable.
000024r 2  xx           vari:	.res 1			; general-purpose variable.
000025r 2  xx           varj:	.res 1			; general-purpose variable.
000026r 2  xx           vark:	.res 1			; general-purpose variable.
000027r 2  xx           varl:	.res 1			; general-purpose variable.
000028r 2  xx           varm:	.res 1			; general-purpose variable.
000029r 2  xx           varn:	.res 1			; general-purpose variable.
00002Ar 2  xx           varo:	.res 1			; general-purpose variable.
00002Br 2  xx           varp:	.res 1			; general-purpose variable.
00002Cr 2  xx           varq:	.res 1			; general-purpose variable.
00002Dr 2  xx           varr:	.res 1			; general-purpose variable.
00002Er 2  xx           vars:	.res 1			; general-purpose variable.
00002Fr 2  xx           vart:	.res 1			; general-purpose variable.
000030r 2  xx           varu:	.res 1			; general-purpose variable.
000031r 2  xx           varv:	.res 1			; general-purpose variable.
000032r 2  xx           varw:	.res 1			; general-purpose variable.
000033r 2  xx           varz:	.res 1			; general-purpose variable.
000034r 2               
000034r 2  xx           charx:	.res 1			; cursor x position.
000035r 2  xx           chary:	.res 1			; cursor y position.
000036r 2               
000036r 2  xx           clock:	.res 1			; last clock reading.
000037r 2  xx           varrnd:	.res 1	        ; last random number.
000038r 2  xx           varobj:	.res 1  	    ; last object number.
000039r 2  xx           varopt:	.res 1     		; last option chosen from menu.
00003Ar 2  xx           varblk:	.res 1  		; block type.
00003Br 2  xx           nexlev:	.res 1			; next level flag.
00003Cr 2  xx           restfl:	.res 1			; restart screen flag.
00003Dr 2  xx           deadf:	.res 1			; dead flag.
00003Er 2  xx           gamwon:	.res 1			; game won flag.
00003Fr 2  xx           dispx:	.res 1			; cursor x position.
000040r 2  xx           dispy:	.res 1			; cursor y position.
000041r 2               
000041r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000042r 2  xx           joyval:	.res 1			; joystick reading.
000043r 2  xx           frmno:	.res 1			; selected frame.
000044r 2               
000044r 2               ;----------------------------------------------------
000044r 2               ; Missing vars
000044r 2               ;----------------------------------------------------
000044r 2               
000044r 2  xx           loopa:		.res 1
000045r 2  xx           loopb:		.res 1
000046r 2  xx           loopc:		.res 1
000047r 2  xx xx        FontPtr:    .res 2
000049r 2               
000049r 2               ; Local vars
000049r 2               
000049r 2  xx xx        scraddr:    .res 2
00004Br 2  xx xx        fntaddr:    .res 2
00004Dr 2  xx xx        tileaddr:   .res 2
00004Fr 2  xx xx        bufaddr:    .res 2
000051r 2               
000051r 2  xx xx        tmp:        .res 2
000053r 2  xx xx        scr_l:      .res 2
000055r 2  xx xx        scr_r:      .res 2
000057r 2  xx xx        scr_txt:    .res 2
000059r 2               
000059r 2  xx           xtmp:	    .res 1
00005Ar 2  xx           ytmp:	    .res 1
00005Br 2  xx           spcnt:	    .res 1
00005Cr 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
00005Er 2  xx           seed:	    .res 1		; seed for random numbers.
00005Fr 2               
00005Fr 2  xx           ccnt:       .res 1
000060r 2  xx           flag:	    .res 1
000061r 2  xx           rcol:	    .res 1
000062r 2  xx           rrow:	    .res 1
000063r 2               
000063r 2  xx           combyt:	    .res 1		; byte type compressed.
000064r 2  xx           comcnt:	    .res 1		; compression counter.
000065r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
000066r 2  xx           qscnt:	    .res 1
000067r 2               
000067r 2  xx           sprptr:	    .res 1      ; not a ptr
000068r 2  xx           sprcnt:	    .res 1
000069r 2               
000069r 2  xx xx        skptr:	    .res 2		; search pointer.
00006Br 2  xx           sktptr:	    .res 1      ; not a ptr
00006Cr 2  xx           tmproom:	.res 1
00006Dr 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
00006Fr 2               
00006Fr 2  xx xx xx     spr:	    .res 3      ; static sprite data
000072r 2  xx           vsync_count:.res 1
000073r 2  xx           colpatt:	.res 1
000074r 2  xx           sprtmp:     .res 1
000075r 2  xx           sprtmp2:    .res 1
000076r 2  xx           sprshft:    .res 1
000077r 2               
000077r 2  xx           spriteink:  .res 1
000078r 2  xx           colour_byte:.res 1
000079r 2  xx           colour_xor: .res 1
00007Ar 2               
00007Ar 2               .if mflag
00007Ar 2  xx xx        TmpAddr:	.res 2
00007Cr 2  xx           bwid:	    .res 1     ; box/menu width.
00007Dr 2  xx           blen:	    .res 1     ; box/menu height.
00007Er 2  xx           btop:	    .res 1     ; box coordinates.
00007Fr 2  xx           blft:	    .res 1
000080r 2               .endif
000080r 2               
000080r 2               .if pflag
000080r 2               shrctr:	    .res 1
000080r 2               explcnt:	.res 1
000080r 2               seed3:	    .res 1
000080r 2               .endif
000080r 2               
000080r 2               .if aflag
000080r 2               pbptr:       .res 2
000080r 2               pbbuf:	     .res 2
000080r 2               .endif
000080r 2               
000080r 2  xx           tmp1:	    .res 1
000081r 2  xx           tmp2:	    .res 1
000082r 2               
000082r 1               
000082r 1               ;----------------------------------------------------------------------
000082r 1               ; ZCODE SEGMENT
000082r 1               ;----------------------------------------------------------------------
000082r 1               
000082r 1               .segment "CODE"
000000r 1               .org asm_code
000E00  1               
000E00  1               start_asm:
000E00  1               
000E00  1  4C 09 62     	jmp relocate + load_address - asm_code
000E03  1               
000E03  1               boot_game:
000E03  1               
000E03  1               ; Zero ZP vars
000E03  1               
000E03  1               clear_zp:
000E03  1  A2 00        	ldx #0
000E05  1  8A           	txa
000E06  1               	:
000E06  1  95 00        	sta $00, x
000E08  1  E8           	inx
000E09  1  E0 A0        	cpx #$a0
000E0B  1  D0 F9        	bne :-
000E0D  1               
000E0D  1               	; Init non-zero vars
000E0D  1  A9 03        	lda #3
000E0F  1  85 rr        	sta numlif
000E11  1               
000E11  1  A2 FF        	ldx #255
000E13  1  86 rr        	stx varrnd
000E15  1  86 rr        	stx varopt
000E17  1  86 rr        	stx varblk
000E19  1  CA           	dex
000E1A  1  86 rr        	stx varobj
000E1C  1               
000E1C  1  20 84 0E     	jsr bbcinit
000E1F  1               
000E1F  1               	; Call AGD Engine start game
000E1F  1  20 00 16     	jsr start_game
000E22  1               
000E22  1  20 A3 0E     	jsr bbckill
000E25  1               
000E25  1                   ; Wait for keypress
000E25  1  A2 FF        	ldx #$ff
000E27  1  A0 7F        	ldy #$7f
000E29  1  A9 81        	lda #$81
000E2B  1  20 F4 FF     	jsr OSBYTE
000E2E  1               
000E2E  1               	; Restart or exit
000E2E  1  4C 03 0E     	jmp boot_game
000E31  1               
000E31  1               ;----------------------------------------------------------------------
000E31  1               ; PLATFORM SPECIFIC ENGINE CODE
000E31  1               ;----------------------------------------------------------------------
000E31  1               
000E31  1               	.include "z80.asm"
000E31  2               ;------------------------------------------------------
000E31  2               ; z80.asm
000E31  2               ; spectrum stuff
000E31  2               ; adresses
000E31  2               
000E31  2               ;ws	 = $60
000E31  2               
000E31  2               ;z80_f	 = ws+$00
000E31  2               ;z80_a	 = ws+$01
000E31  2               ;z80_af	 = z80_f
000E31  2               
000E31  2               ;z80_c	 = ws+$02
000E31  2               ;z80_b	 = ws+$03
000E31  2               ;z80_bc	 = z80_c
000E31  2               
000E31  2               ;z80_e	 = ws+$04
000E31  2               ;z80_d	 = ws+$05
000E31  2               ;z80_de	 = z80_e
000E31  2               
000E31  2               ;z80_l	 = ws+$06
000E31  2               ;z80_h	 = ws+$07
000E31  2               ;z80_hl	 = z80_l
000E31  2               
000E31  2               ;z80_x    = ws+$08
000E31  2               ;z80_i    = ws+$09
000E31  2               ;z80_ix	 = z80_x
000E31  2               
000E31  2               ;z80_iy	 = ws+$0a
000E31  2               
000E31  2               ;z80_fp	 = ws+$0c
000E31  2               ;z80_ap	 = ws+$0d
000E31  2               
000E31  2               ;z80_cp	 = ws+$0e
000E31  2               ;z80_bp	 = ws+$0f
000E31  2               ;z80_bcp = z80_cp
000E31  2               
000E31  2               ;z80_ep	 = ws+$10
000E31  2               ;z80_dp	 = ws+$11
000E31  2               ;z80_dep = z80_ep
000E31  2               
000E31  2               ;z80_lp	 = ws+$12
000E31  2               ;z80_hp	 = ws+$13
000E31  2               ;z80_hlp = z80_lp
000E31  2               
000E31  2               ;z80_sp   = ws+$14
000E31  2               
000E31  2               ;z80_reg0 = ws+$16
000E31  2               ;z80_reg1 = ws+$17
000E31  2               ;z80_reg2 = ws+$18
000E31  2               ;z80_reg3 = ws+$19
000E31  2               
000E31  2               ;z80_r	 = ws+$1a
000E31  2               
000E31  2               ; Contains seperatly 1 bit set
000E31  2               ; _BEEB this is not safe memory to use as required by MOS
000E31  2               
000E31  2               _bitmem0	= $f8
000E31  2               _bitmem1	= $f9
000E31  2               _bitmem2	= $fa
000E31  2               _bitmem3	= $fb
000E31  2               _bitmem4	= $fc
000E31  2               _bitmem5	= $fd
000E31  2               _bitmem6	= $fe
000E31  2               _bitmem7	= $ff
000E31  2               
000E31  2               ; constants
000E31  2               _bitvalue0	= $01
000E31  2               _bitvalue1	= $02
000E31  2               _bitvalue2	= $04
000E31  2               _bitvalue3	= $08
000E31  2               _bitvalue4	= $10
000E31  2               _bitvalue5	= $20
000E31  2               _bitvalue6	= $40
000E31  2               _bitvalue7	= $80
000E31  2               
000E31  2               _notbitvalue0	= $fe
000E31  2               _notbitvalue1	= $fd
000E31  2               _notbitvalue2	= $fb
000E31  2               _notbitvalue3	= $f7
000E31  2               _notbitvalue4	= $ef
000E31  2               _notbitvalue5	= $df
000E31  2               _notbitvalue6	= $bf
000E31  2               _notbitvalue7	= $7f
000E31  2               
000E31  2               
000E31  2               ;add_hl_bc:
000E31  2               ;		lda z80_l
000E31  2               ;		clc
000E31  2               ;		adc z80_c
000E31  2               ;		sta z80_l
000E31  2               ;		lda z80_h
000E31  2               ;		adc z80_b
000E31  2               ;		sta z80_h
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;add_ix_de:
000E31  2               ;		lda z80_ix
000E31  2               ;		clc
000E31  2               ;		adc z80_e
000E31  2               ;		sta z80_ix
000E31  2               ;		lda z80_ix+1
000E31  2               ;		adc z80_d
000E31  2               ;		sta z80_ix+1
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;add_iy_de:
000E31  2               ;		lda z80_iy
000E31  2               ;		clc
000E31  2               ;		adc z80_e
000E31  2               ;		sta z80_iy
000E31  2               ;		lda z80_iy+1
000E31  2               ;		adc z80_d
000E31  2               ;		sta z80_iy+1
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;add_hl_de:
000E31  2               ;		lda z80_l
000E31  2               ;		clc
000E31  2               ;		adc z80_e
000E31  2               ;		sta z80_l
000E31  2               ;		lda z80_h
000E31  2               ;		adc z80_d
000E31  2               ;		sta z80_h
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;add_ix_bc:
000E31  2               ;		lda z80_ix
000E31  2               ;		clc
000E31  2               ;		adc z80_c
000E31  2               ;		sta z80_ix
000E31  2               ;		lda z80_ix+1
000E31  2               ;		adc z80_b
000E31  2               ;		sta z80_ix+1
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;add_iy_bc:
000E31  2               ;		lda z80_iy
000E31  2               ;		clc
000E31  2               ;		adc z80_c
000E31  2               ;		sta z80_iy
000E31  2               ;		lda z80_iy+1
000E31  2               ;		adc z80_b
000E31  2               ;		sta z80_iy+1
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;sbc_hl_de:
000E31  2               ;		lda z80_l
000E31  2               ;		sbc z80_e
000E31  2               ;		sta z80_l
000E31  2               ;		lda z80_h
000E31  2               ;		sbc z80_d
000E31  2               ;		sta z80_h
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;sbc_hl_bc:
000E31  2               ;		lda z80_l
000E31  2               ;		sbc z80_c
000E31  2               ;		sta z80_l
000E31  2               ;		lda z80_h
000E31  2               ;		sbc z80_b
000E31  2               ;		sta z80_h
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;cmp_hl_bc:
000E31  2               ;		lda z80_l
000E31  2               ;		cmp z80_c
000E31  2               ;		bne cmp_hl_bc_end
000E31  2               ;		lda z80_h
000E31  2               ;		cmp z80_b
000E31  2               ;cmp_hl_bc_end:
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;cmp_iy_ix:
000E31  2               ;		lda z80_iy
000E31  2               ;		cmp z80_ix
000E31  2               ;		bne cmp_iy_ix_end
000E31  2               ;		lda z80_iy+1
000E31  2               ;		cmp z80_ix+1
000E31  2               ;cmp_iy_ix_end:
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;dec_hl:
000E31  2               ;		lda z80_l
000E31  2               ;		bne dec_hl_no_dec_h
000E31  2               ;		dec z80_h
000E31  2               ;dec_hl_no_dec_h:
000E31  2               ;		dec z80_l
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;dec_ix:
000E31  2               ;		lda z80_ix
000E31  2               ;		bne dec_ix_no_dec_h
000E31  2               ;		dec z80_ix+1
000E31  2               ;dec_ix_no_dec_h:
000E31  2               ;		dec z80_ix
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;dec_bc:
000E31  2               ;		lda z80_c
000E31  2               ;		bne dec_bc_no_dec_b
000E31  2               ;		dec z80_b
000E31  2               ;dec_bc_no_dec_b:
000E31  2               ;		dec z80_c
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;dec_de:
000E31  2               ;		lda z80_e
000E31  2               ;		bne dec_de_no_dec_d
000E31  2               ;		dec z80_d
000E31  2               ;dec_de_no_dec_d:
000E31  2               ;		dec z80_e
000E31  2               ;		rts
000E31  2               ;
000E31  2               ;ex_af_afs:
000E31  2               ;	rts
000E31  2               ;ex_de_hl:
000E31  2               ;		lda z80_e
000E31  2               ;		ldx z80_l
000E31  2               ;		stx z80_e
000E31  2               ;		sta z80_l
000E31  2               ;		lda z80_d
000E31  2               ;		ldx z80_h
000E31  2               ;		stx z80_d
000E31  2               ;		sta z80_h
000E31  2               ;		rts
000E31  2               ;
000E31  2               exx:
000E31  2  A5 rr        		lda z80_c
000E33  2  A4 rr        		ldy z80_cp
000E35  2  84 rr        		sty z80_c
000E37  2  85 rr        		sta z80_cp
000E39  2  A5 rr        		lda z80_b
000E3B  2  A4 rr        		ldy z80_bp
000E3D  2  84 rr        		sty z80_b
000E3F  2  85 rr        		sta z80_bp
000E41  2  A5 rr        		lda z80_e
000E43  2  A4 rr        		ldy z80_ep
000E45  2  84 rr        		sty z80_e
000E47  2  85 rr        		sta z80_ep
000E49  2  A5 rr        		lda z80_d
000E4B  2  A4 rr        		ldy z80_dp
000E4D  2  84 rr        		sty z80_d
000E4F  2  85 rr        		sta z80_dp
000E51  2  A5 rr        		lda scraddr
000E53  2  A4 rr        		ldy z80_lp
000E55  2  84 rr        		sty scraddr
000E57  2  85 rr        		sta z80_lp
000E59  2  A5 rr        		lda scraddr+1
000E5B  2  A4 rr        		ldy z80_hp
000E5D  2  84 rr        		sty scraddr+1
000E5F  2  85 rr        		sta z80_hp
000E61  2  60           		rts
000E62  2               
000E62  2               ;ex_sp_hl:
000E62  2               ;		tsx
000E62  2               ;		lda $0103,x
000E62  2               ;		ldy z80_h
000E62  2               ;		sta z80_h
000E62  2               ;		tya
000E62  2               ;		sta $0103,x
000E62  2               ;		lda $0104,x
000E62  2               ;		ldy z80_l
000E62  2               ;		sta z80_l
000E62  2               ;		tya
000E62  2               ;		sta $104,x
000E62  2               ;		rts
000E62  2               ;
000E62  2               ;ldi:
000E62  2               ;	rts
000E62  2               ;ldir:
000E62  2               ;		ldy #$00
000E62  2               ;		ldx z80_b
000E62  2               ;		beq ldir_last_page
000E62  2               ;ldir_loop:
000E62  2               ;		lda (z80_hl),y
000E62  2               ;		sta (z80_de),y
000E62  2               ;		iny
000E62  2               ;		bne ldir_loop
000E62  2               ;		inc z80_h
000E62  2               ;		inc z80_d
000E62  2               ;		dex
000E62  2               ;		bne ldir_loop
000E62  2               ;ldir_last_page:
000E62  2               ;		lda z80_c
000E62  2               ;		beq ldir_end
000E62  2               ;ldir_last_page_loop:
000E62  2               ;		lda (z80_hl),y
000E62  2               ;		sta (z80_de),y
000E62  2               ;		iny
000E62  2               ;		cpy z80_c
000E62  2               ;		bne ldir_last_page_loop
000E62  2               ;ldir_end:
000E62  2               ;		stx z80_c
000E62  2               ;		stx z80_b
000E62  2               ;		tya
000E62  2               ;		clc
000E62  2               ;		adc z80_l
000E62  2               ;		sta z80_l
000E62  2               ;		bcc *+4
000E62  2               ;		inc z80_h
000E62  2               ;		tya
000E62  2               ;		clc
000E62  2               ;		adc z80_e
000E62  2               ;		sta z80_e
000E62  2               ;		bcc *+4
000E62  2               ;		inc z80_d
000E62  2               ;		rts
000E62  2               ;
000E62  2               ;lddr:		ldy #$00
000E62  2               ;lddr_loop:
000E62  2               ;		lda (z80_hl),y
000E62  2               ;		sta (z80_de),y
000E62  2               ;		jsr dec_hl
000E62  2               ;		jsr dec_de
000E62  2               ;		jsr dec_bc
000E62  2               ;		lda z80_b
000E62  2               ;		ora z80_c
000E62  2               ;		bne lddr_loop
000E62  2               ;		rts
000E62  2               ;ei:
000E62  2               ;		rts
000E62  2               ;di:
000E62  2               ;		rts
000E62  2               
000E62  2               ;-------------------------------------------------------------
000E62  2               ; Set bits in bitmem
000E62  2               ;-------------------------------------------------------------
000E62  2               
000E62  2               .if 0
000E62  2               z80_init:
000E62  2               	ldx #$00
000E62  2               	lda #$01
000E62  2               z80_init_loop:
000E62  2               	sta _bitmem0,x
000E62  2               	inx
000E62  2               	asl a
000E62  2               	bne z80_init_loop
000E62  2               	rts
000E62  2               .endif
000E62  2               
000E62  2               push_af:
000E62  2               push_bc:
000E62  2               push_de:
000E62  2               push_hl:
000E62  2               
000E62  2               pop_af:
000E62  2               pop_bc:
000E62  2               pop_de:
000E62  2               pop_ix:
000E62  2               pop_hl:
000E62  2               
000E62  2               add_hl_hl:
000E62  2               
000E62  2               inc_bc:
000E62  2               inc_de:
000E62  2               inc_hl:
000E62  2               inc_ix:
000E62  2               inc_sp:
000E62  2               
000E62  2               cpir:
000E62  2               
000E62  2               ex_af_af:
000E62  2               ;	rts
000E62  2               
000E62  1               	.include "bbc.inc"
000E62  2               ;----------------------------------------------------------------------
000E62  2               ; BBC Platform Specific functions
000E62  2               ;----------------------------------------------------------------------
000E62  2               
000E62  2               ;--------------------------------------------------------
000E62  2               ; Keys
000E62  2               ;
000E62  2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
000E62  2               ;             ||||||||
000E62  2               ;             |||||||+> Right    KEY 0  - X
000E62  2               ;             ||||||+-> Left     KEY 1  - Z
000E62  2               ;             |||||+--> Down     KEY 2  - .
000E62  2               ;             ||||+---> Up       KEY 3  - ;
000E62  2               ;             |||+----> Fire1    KEY 4  - SPC
000E62  2               ;             ||+-----> Fire2    KEY 5  - Q
000E62  2               ;             |+------> Fire3    KEY 6  - P
000E62  2               ;             +-------> Not used
000E62  2               ;
000E62  2               ;                       Option1  KEY 7  - 1
000E62  2               ;                       Option2  KEY 8  - 2
000E62  2               ;                       Option3  KEY 9  - 3
000E62  2               ;                       Option4  KEY 10 - 4
000E62  2               ;--------------------------------------------------------
000E62  2               
000E62  2               ;              X   Z   .   ;  SPC  Q   P
000E62  2               ;keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
000E62  2               ;        .byte $30,$31,$11,$12                   ; menu options.
000E62  2               
000E62  2  42 61 68 48  jkeys:  .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
000E66  2  62 10 37     
000E69  2  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
000E6D  2               
000E6D  2               ;----------------------------------------------------
000E6D  2               ; Wait for keypress.
000E6D  2               ;----------------------------------------------------
000E6D  2               
000E6D  2               prskey:
000E6D  2  8A           	txa
000E6E  2  48           	pha
000E6F  2               prsloop:
000E6F  2  20 24 0F     	jsr vsync
000E72  2               
000E72  2  A9 79        	lda #$79
000E74  2  A2 01        	ldx #$01
000E76  2  20 F4 FF     	jsr OSBYTE
000E79  2               
000E79  2  E0 FF        	cpx #$ff
000E7B  2  F0 F2        	beq prsloop		; wait until key pressed
000E7D  2  8A           	txa
000E7E  2  20 7E 21     	jsr joykey
000E81  2  68           	pla
000E82  2  AA           	tax
000E83  2  60           	rts
000E84  2               
000E84  2               bbcinit:
000E84  2  78           	sei
000E85  2  AD 20 02     	lda EVENTV
000E88  2  8D B8 0E     	sta old_eventv
000E8B  2  AD 21 02     	lda EVENTV+1
000E8E  2  8D B9 0E     	sta old_eventv+1
000E91  2               
000E91  2  A9 BA        	lda #<event_handler
000E93  2  8D 20 02     	sta EVENTV
000E96  2  A9 0E        	lda #>event_handler
000E98  2  8D 21 02     	sta EVENTV+1
000E9B  2  58           	cli
000E9C  2               
000E9C  2               	; Enable VSYNC event.
000E9C  2  A9 0E        	lda #14
000E9E  2  A2 04        	ldx #4
000EA0  2  4C F4 FF     	jmp OSBYTE
000EA3  2               
000EA3  2               bbckill:
000EA3  2  78           	sei
000EA4  2  AD B8 0E     	lda old_eventv
000EA7  2  8D 20 02     	sta EVENTV
000EAA  2  AD B9 0E     	lda old_eventv+1
000EAD  2  8D 21 02     	sta EVENTV+1
000EB0  2  58           	cli
000EB1  2               
000EB1  2               	; Disable VSYNC event.
000EB1  2  A9 0D        	lda #13
000EB3  2  A2 04        	ldx #4
000EB5  2  4C F4 FF     	jmp OSBYTE
000EB8  2               
000EB8  2               
000EB8  2               old_eventv:
000EB8  2  xx xx        	.res 2
000EBA  2               
000EBA  2               event_handler:
000EBA  2  08           	php
000EBB  2  C9 04        	cmp #4
000EBD  2  D0 02        	bne not_vsync
000EBF  2               
000EBF  2  E6 rr        	inc vsync_count
000EC1  2               
000EC1  2               not_vsync:
000EC1  2  28           	plp
000EC2  2  6C B8 0E     	jmp (old_eventv)
000EC5  2               
000EC5  2               bbcsync:
000EC5  2  A5 rr        	lda vsync_count
000EC7  2  C9 02        	cmp #2
000EC9  2  90 FA        	bcc bbcsync
000ECB  2  A9 00        	lda #0
000ECD  2  85 rr        	sta vsync_count
000ECF  2  60           	rts
000ED0  2               
000ED0  2               ;--------------------------------------------------------
000ED0  2               ; Keyboard test routine.
000ED0  2               ;
000ED0  2               ; Input:
000ED0  2               ;  A = key to read, high nibble=row and low nibble=col
000ED0  2               ;
000ED0  2               ; Output:
000ED0  2               ;  carry clr = key pressed
000ED0  2               ;  carry set = key not pressed
000ED0  2               ;--------------------------------------------------------
000ED0  2               
000ED0  2               ktest:
000ED0  2  85 rr        	sta z80_a		; save key
000ED2  2  98           	tya
000ED3  2  48           	pha
000ED4  2               
000ED4  2               ; _BEEB keyboard read
000ED4  2  A5 rr        	lda z80_a
000ED6  2  49 80        	eor #$80		; _BEEB just look for this key
000ED8  2  AA           	tax
000ED9  2               
000ED9  2  A9 79        	lda #$79
000EDB  2  20 F4 FF     	jsr OSBYTE
000EDE  2               
000EDE  2  8A           	txa
000EDF  2  30 04        	bmi pressed 	; _BEEB X is negative if key is pressed
000EE1  2               
000EE1  2  38           	sec			; key not pressed
000EE2  2  68           	pla
000EE3  2  A8           	tay
000EE4  2  60           	rts
000EE5  2               
000EE5  2               pressed:
000EE5  2  A5 rr         lda z80_a
000EE7  2  8D FF 67      sta $67ff
000EEA  2  18           	clc			; key pressed
000EEB  2  68           	pla
000EEC  2  A8           	tay
000EED  2  60           	rts
000EEE  2               
000EEE  2               ;---------------------------------------------------------------
000EEE  2               ; Getkey in column,row format
000EEE  2               ;
000EEE  2               ; Output:
000EEE  2               ;  A = high nibble=row and low nibble=column key in matrix
000EEE  2               ;---------------------------------------------------------------
000EEE  2               
000EEE  2               kget:
000EEE  2  86 rr        	stx xtmp
000EF0  2               kget1:
000EF0  2  A9 79        	lda #$79			; _BEEB read keyboard with OSBYTE &79
000EF2  2  A2 01        	ldx #$01
000EF4  2  20 F4 FF     	jsr OSBYTE
000EF7  2               
000EF7  2  E0 FF        	cpx #$ff
000EF9  2  F0 F5        	beq kget1
000EFB  2               
000EFB  2  8A           	txa
000EFC  2  48           	pha
000EFD  2               kget2:
000EFD  2  A9 79        	lda #$79			; wait for released key
000EFF  2  A2 01        	ldx #$01
000F01  2  20 F4 FF     	jsr OSBYTE
000F04  2               
000F04  2  E0 FF        	cpx #$ff
000F06  2  D0 F5        	bne kget2
000F08  2               
000F08  2  68           	pla
000F09  2  A6 rr        	ldx xtmp
000F0B  2  60           	rts
000F0C  2               
000F0C  2               ;----------------------------------------------------
000F0C  2               ; AtoMMC joystick controls.
000F0C  2               ; _BEEB TODO
000F0C  2               ;----------------------------------------------------
000F0C  2               
000F0C  2               joyinit:
000F0C  2               joysin:
000F0C  2  60           	rts
000F0D  2               
000F0D  2               
000F0D  2               ;----------------------------------------------------
000F0D  2               ; Delay routine 1/50 sec
000F0D  2               ;
000F0D  2               ; Wait 1/60 sec = 16666 usec
000F0D  2               ; Wait 208 x 16 =  3328 usec
000F0D  2               ;                 19994 usec
000F0D  2               ; rts           =     6 usec
000F0D  2               ; Total         = 20000 usec
000F0D  2               ;----------------------------------------------------
000F0D  2               
000F0D  2               delay:
000F0D  2  85 rr        	sta xtmp
000F0F  2               del_loop:
000F0F  2  A9 13        	lda #19
000F11  2  20 F4 FF     	jsr OSBYTE		; wait for vsync _BEEB
000F14  2               
000F14  2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
000F16  2               delay1:
000F16  2  61 80        	adc ($80,x)		;	 6 usec
000F18  2  61 80        	adc ($80,x)		;	 6 usec
000F1A  2  88           	dey			;	 2 usec
000F1B  2  D0 F9        	bne delay1		;	 2 usec
000F1D  2  EA           	nop			; 2 usec
000F1E  2  EA           	nop			; 2 usec
000F1F  2               				; tot: 20000 usec
000F1F  2  C6 rr        	dec xtmp
000F21  2  D0 EC        	bne del_loop
000F23  2  60           	rts
000F24  2               
000F24  2               ;-------------------------------------------------------------
000F24  2               ; Screen synchronisation.
000F24  2               ;
000F24  2               ;  - read joystick/keyboard
000F24  2               ;  - handle sound
000F24  2               ;  - sync framerate with clock
000F24  2               ;  - handle shrapnel every even frame
000F24  2               ;-------------------------------------------------------------
000F24  2               
000F24  2               vsync:
000F24  2  48           	pha
000F25  2  98           	tya
000F26  2  48           	pha
000F27  2  8A           	txa
000F28  2  48           	pha
000F29  2  20 7E 21     	jsr joykey		; read joystick/keyboard.
000F2C  2               vsync1:
000F2C  2  A9 13        	lda #19
000F2E  2  20 F4 FF     	jsr OSBYTE		; _BEEB vsync
000F31  2               
000F31  2  A5 rr        	lda clock
000F33  2  29 01        	and #1
000F35  2  D0 03        	bne:+
000F37  2  20 03 19     	jsr proshr		; handle shrapnel every even frame
000F3A  2               :
000F3A  2  AD 45 0F     	lda sndtyp
000F3D  2  F0 00        	beq sndskip
000F3F  2               ; _BEEB TODO SOUND
000F3F  2               ;sndloop:
000F3F  2               ;	lda SpeakerBit		; handle sound
000F3F  2               ;	ldy sndtyp
000F3F  2               ;sndwait:
000F3F  2               ;	dey
000F3F  2               ;	bne sndwait
000F3F  2               ;	eor #4
000F3F  2               ;	sta SpeakerBit
000F3F  2               ;	dec sndtyp
000F3F  2               ;	bne sndloop
000F3F  2               sndskip:
000F3F  2  68           	pla
000F40  2  AA           	tax
000F41  2  68           	pla
000F42  2  A8           	tay
000F43  2  68           	pla
000F44  2  60           	rts
000F45  2               
000F45  2  00           sndtyp:	.byte 0
000F46  2               
000F46  2               ;----------------------------------------------------------------------
000F46  2               ; BBC video hardware fns
000F46  2               ;----------------------------------------------------------------------
000F46  2               
000F46  2               screeninit:
000F46  2  A2 0D        	ldx #13
000F48  2               crtcloop:
000F48  2  8E 00 FE     	stx $FE00
000F4B  2  BD 68 0F     	lda crtc_regs_high,x
000F4E  2  8D 01 FE     	sta $FE01
000F51  2  CA           	dex
000F52  2  10 F4        	bpl crtcloop
000F54  2               
000F54  2                   ; Set ULA
000F54  2  A9 88            lda #$88            ; MODE 4
000F56  2  8D 48 02         sta $248            ; Tell the OS or it will mess with ULA settings at vsync
000F59  2  8D 20 FE         sta $FE20
000F5C  2               
000F5C  2               ; fall through to palette
000F5C  2               
000F5C  2               setpal:
000F5C  2  A2 0F        	ldx #15
000F5E  2               palloop:
000F5E  2  BD 76 0F     	lda ula_pal,x
000F61  2  8D 21 FE     	sta $fe21
000F64  2  CA           	dex
000F65  2  10 F7        	bpl palloop
000F67  2  60           	rts
000F68  2               
000F68  2               crtc_regs_high:
000F68  2  3F           	.byte 63				; R0  horizontal total
000F69  2  20           	.byte 32				; R1  horizontal displayed
000F6A  2  31           	.byte 49				; R2  horizontal position
000F6B  2  24           	.byte $24				; R3  sync width 40 = &28
000F6C  2  26           	.byte 38				; R4  vertical total
000F6D  2  00           	.byte 0					; R5  vertical total adjust
000F6E  2  18           	.byte 24				; R6  vertical displayed
000F6F  2  23           	.byte 35				; R7  vertical position; 35=top of screen
000F70  2  00           	.byte $00				; R8  interlace
000F71  2  07           	.byte 7					; R9  scanlines per row
000F72  2  20           	.byte 32				; R10 cursor start
000F73  2  08           	.byte 8					; R11 cursor end
000F74  2  0D           	.byte >(ScreenAddr/8)	; R12 screen start address, high
000F75  2  00           	.byte <(ScreenAddr/8)	; R13 screen start address, low
000F76  2               
000F76  2               ula_pal:
000F76  2  07           	.byte $00 + PAL_black
000F77  2  17           	.byte $10 + PAL_black
000F78  2  27           	.byte $20 + PAL_black
000F79  2  37           	.byte $30 + PAL_black
000F7A  2  47           	.byte $40 + PAL_black
000F7B  2  57           	.byte $50 + PAL_black
000F7C  2  67           	.byte $60 + PAL_black
000F7D  2  77           	.byte $70 + PAL_black
000F7E  2  80           	.byte $80 + PAL_white
000F7F  2  90           	.byte $90 + PAL_white
000F80  2  A0           	.byte $a0 + PAL_white
000F81  2  B0           	.byte $b0 + PAL_white
000F82  2  C0           	.byte $c0 + PAL_white
000F83  2  D0           	.byte $d0 + PAL_white
000F84  2  E0           	.byte $e0 + PAL_white
000F85  2  F0           	.byte $f0 + PAL_white
000F86  2               
000F86  2               ;----------------------------------------------------
000F86  2               ; Draw sprite
000F86  2               ;----------------------------------------------------
000F86  2               .if oflag
000F86  2               sprite:
000F86  2  86 rr        	stx xtmp		; Save X-reg
000F88  2  20 DA 0F     	jsr scadd 		; get screen address in scraddr.
000F8B  2               
000F8B  2  A5 rr        	lda dispx 		; x position.
000F8D  2  29 07        	and #7 			; position straddling cells.
000F8F  2  85 rr        	sta z80_b		; store in b register.
000F91  2               
000F91  2  A5 rr        	lda z80_l		; store sprite graphic address.
000F93  2  8D A6 0F     	sta sprit1+1
000F96  2  8D AC 0F     	sta sprit2+1
000F99  2  A5 rr        	lda z80_h
000F9B  2  8D A7 0F     	sta sprit1+2
000F9E  2  8D AD 0F     	sta sprit2+2
000FA1  2               
000FA1  2  A2 00        	ldx #0			; pixel height.
000FA3  2  A0 00        	ldy #0
000FA5  2               sprit1:
000FA5  2               .if swrflag
000FA5  2  BD 41 A2     	lda objdta + data_address - data_start,x		; fetch first byte.
000FA8  2               .else
000FA8  2               	lda objdta,x		; fetch first byte.
000FA8  2               .endif
000FA8  2  85 rr        	sta spr
000FAA  2  E8           	inx
000FAB  2               sprit2:
000FAB  2               .if swrflag
000FAB  2  BD 41 A2     	lda objdta + data_address - data_start,x
000FAE  2               .else
000FAE  2               	lda objdta,x
000FAE  2               .endif
000FAE  2  85 rr        	sta spr+1
000FB0  2               
000FB0  2  A9 00        	lda #0
000FB2  2  85 rr        	sta spr+2
000FB4  2  20 DB 1E     	jsr sprit7		; shift sprite
000FB7  2               
000FB7  2  A5 rr        	lda spr			; fetch graphic.
000FB9  2  A0 00        	ldy #0			; _BEEB
000FBB  2  51 rr        	eor (scraddr),y		; merge with screen image.
000FBD  2  91 rr        	sta (scraddr),y		; write to screen.
000FBF  2               
000FBF  2  A5 rr        	lda spr+1		; fetch graphic.
000FC1  2  A0 08        	ldy #8			; _BEEB
000FC3  2  51 rr        	eor (scraddr),y		; merge with screen image.
000FC5  2  91 rr        	sta (scraddr),y		; write to screen.
000FC7  2               
000FC7  2  A5 rr        	lda spr+2		; fetch graphic.
000FC9  2  A0 10        	ldy #16			; _BEEB
000FCB  2  51 rr        	eor (scraddr),y		; merge with screen image.
000FCD  2  91 rr        	sta (scraddr),y		; write to screen.
000FCF  2               
000FCF  2  20 BC 10     	jsr nline
000FD2  2               
000FD2  2  E8           	inx			; next source byte.
000FD3  2  E0 20        	cpx #32
000FD5  2  D0 CE        	bne sprit1		; repeat
000FD7  2               
000FD7  2  A6 rr        	ldx xtmp		; retreive X-reg
000FD9  2  60           	rts
000FDA  2               
000FDA  2               ;spr:	.byte 0,0,0
000FDA  2               .endif
000FDA  2               ;------------------------------------------------------------------
000FDA  2               ; This routine returns a screen address for (dispx, dispy) in scraddr.
000FDA  2               ;------------------------------------------------------------------
000FDA  2               
000FDA  2               scadd:
000FDA  2  A6 rr        	ldx dispy
000FDC  2  A5 rr        	lda dispx
000FDE  2  29 F8        	and #$f8
000FE0  2  18           	clc
000FE1  2  7D 00 06     	adc SCADTB_lb,x
000FE4  2  85 rr        	sta scraddr
000FE6  2  BD 00 07     	lda SCADTB_hb,x
000FE9  2  69 00        	adc #0
000FEB  2  85 rr        	sta scraddr+1
000FED  2  60           	rts
000FEE  2               
000FEE  2               ;-----------------------------------------------------------------
000FEE  2               ; These are the sprite routines.
000FEE  2               ; sspria = single sprite, old (ix).
000FEE  2               ; ssprib = single sprite, new (ix+5).
000FEE  2               ; sspric = both sprites, old (ix) and new (ix+5).
000FEE  2               ;-----------------------------------------------------------------
000FEE  2               
000FEE  2               sspria:
000FEE  2  20 C8 24     	jsr gsprad		; get old sprite address.
000FF1  2               sspri2:
000FF1  2               .if rflag
000FF1  2  A5 rr        	lda z80_e				; 3c
000FF3  2  8D 89 10     	sta dline_spraddr1+1	; 4c
000FF6  2  8D A0 10     	sta dline_spraddr2+1	; 4c
000FF9  2  A5 rr        	lda z80_d				; 3c
000FFB  2  8D 8A 10     	sta dline_spraddr1+2	; 4c
000FFE  2  8D A1 10     	sta dline_spraddr2+2	; 4c
001001  2               
001001  2  A6 rr        	ldx sprshft
001003  2  BD 80 10     	lda shift_table,x
001006  2  8D 8C 10     	sta dline_shift1+1
001009  2  8D A3 10     	sta dline_shift2+1
00100C  2  BD 81 10     	lda shift_table+1,x
00100F  2  8D 8D 10     	sta dline_shift1+2
001012  2  8D A4 10     	sta dline_shift2+2
001015  2               
001015  2  A2 00        	ldx #0			; vertical lines.
001017  2               sspri0:
001017  2  20 88 10     	jsr dline		; draw a line.
00101A  2                 .if bflag
00101A  2               	cpx #48
00101A  2                 .else
00101A  2  E0 20        	cpx #32
00101C  2                 .endif
00101C  2  D0 F9        	bne sspri0		; repeat 16 times x 2 bytes
00101E  2  60           	rts
00101F  2               .else
00101F  2                 .if bflag
00101F  2               	lda #24
00101F  2                 .else
00101F  2               	lda #16			; vertical lines.
00101F  2                 .endif
00101F  2               	sta acnt
00101F  2               sspri0:
00101F  2               	jsr dline		; draw a line.
00101F  2               	dec acnt
00101F  2               	bne sspri0		; repeat 16 times
00101F  2               	rts
00101F  2               
00101F  2               acnt:	.byte 0
00101F  2               .endif
00101F  2               
00101F  2               ;-----------------------------------------------------------------
00101F  2               
00101F  2               ssprib:
00101F  2  20 A9 24     	jsr gspran 		; get new sprite address.
001022  2  4C F1 0F     	jmp sspri2
001025  2               
001025  2               ;-----------------------------------------------------------------
001025  2               
001025  2               sspric:
001025  2               .if rflag
001025  2  20 C8 24     	jsr gsprad 		; get old sprite address.
001028  2               
001028  2  A5 rr        	lda z80_e				; 3c
00102A  2  8D 23 11     	sta ddline_spraddr3+1	; 4c
00102D  2  8D 3A 11     	sta ddline_spraddr4+1	; 4c
001030  2               
001030  2  A5 rr        	lda z80_d				; 3c
001032  2  8D 24 11     	sta ddline_spraddr3+2	; 4c
001035  2  8D 3B 11     	sta ddline_spraddr4+2	; 4c
001038  2               
001038  2  A6 rr        	ldx sprshft
00103A  2  BD 80 10     	lda shift_table,x
00103D  2  8D 26 11     	sta ddline_shift3+1
001040  2  8D 3D 11     	sta ddline_shift4+1
001043  2  BD 81 10     	lda shift_table+1,x
001046  2  8D 27 11     	sta ddline_shift3+2
001049  2  8D 3E 11     	sta ddline_shift4+2
00104C  2               
00104C  2  20 31 0E     	jsr exx  		; store addresses.
00104F  2  20 A9 24     	jsr gspran 		; get new sprite addresses.
001052  2               
001052  2  A5 rr        	lda z80_e				; 3c
001054  2  8D D6 10     	sta ddline_spraddr1+1	; 4c
001057  2  8D ED 10     	sta ddline_spraddr2+1	; 4c
00105A  2               
00105A  2  A5 rr        	lda z80_d				; 3c
00105C  2  8D D7 10     	sta ddline_spraddr1+2	; 4c
00105F  2  8D EE 10     	sta ddline_spraddr2+2	; 4c
001062  2               
001062  2  A6 rr        	ldx sprshft
001064  2  BD 80 10     	lda shift_table,x
001067  2  8D D9 10     	sta ddline_shift1+1
00106A  2  8D F0 10     	sta ddline_shift2+1
00106D  2  BD 81 10     	lda shift_table+1,x
001070  2  8D DA 10     	sta ddline_shift1+2
001073  2  8D F1 10     	sta ddline_shift2+2
001076  2               
001076  2  A2 00        	ldx #0
001078  2               lloop:
001078  2  20 D5 10     	jsr ddline 		; draw a line.
00107B  2                 .if bflag
00107B  2               	cpx #48
00107B  2                 .else
00107B  2  E0 20        	cpx #32
00107D  2                 .endif
00107D  2  D0 F9        	bne lloop
00107F  2  60           	rts
001080  2               
001080  2               shift_table:
001080  2  00 12        .word shift0
001082  2  00 13        .word shift2
001084  2  00 14        .word shift4
001086  2  00 15        .word shift6
001088  2               
001088  2               ;-------------------------------------------------------------
001088  2               ; Drop through.
001088  2               ; Line drawn, now work out next target address.
001088  2               ;
001088  2               ; Input:
001088  2               ;  B  = right mask
001088  2               ;  C  = left mask
001088  2               ;  DE = spriteaddress
001088  2               ;  scraddr = screen address
001088  2               ;-------------------------------------------------------------
001088  2               
001088  2               dline:
001088  2               
001088  2               ; first screen byte
001088  2               
001088  2               dline_spraddr1:
001088  2  BC FF FF     	ldy $ffff,x 		; graphic data.
00108B  2               dline_shift1:
00108B  2  B9 FF FF     	lda $ffff,y
00108E  2  85 rr        	sta sprtmp
001090  2  25 rr        	and z80_c 			; mask away what's not needed.
001092  2               
001092  2  A0 00        	ldy #0
001094  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
001096  2  91 rr        	sta (scraddr),y 	; bung it in.
001098  2               
001098  2               ; carry to next screen byte
001098  2               
001098  2  A5 rr        	lda sprtmp			; fetch data.
00109A  2  25 rr        	and z80_b 			; mask away unwanted
00109C  2  85 rr        	sta sprtmp
00109E  2               
00109E  2               ; middle screen byte
00109E  2               
00109E  2  E8           	inx
00109F  2               dline_spraddr2:
00109F  2  BC FF FF     	ldy $ffff,x 		; second bit of data.
0010A2  2               dline_shift2:
0010A2  2  B9 FF FF     	lda $ffff,y
0010A5  2  85 rr        	sta sprtmp2
0010A7  2  25 rr        	and z80_c 			; mask away what's not needed.
0010A9  2  05 rr        	ora sprtmp
0010AB  2               
0010AB  2  A0 08        	ldy #8
0010AD  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0010AF  2  91 rr        	sta (scraddr),y 	; bung it in.
0010B1  2               
0010B1  2               ; carry to last screen byte
0010B1  2               
0010B1  2  A5 rr        	lda sprtmp2
0010B3  2  25 rr        	and z80_b 			; mask away unwanted
0010B5  2               
0010B5  2  A0 10        	ldy #16
0010B7  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0010B9  2  91 rr        	sta (scraddr),y 	; bung it in.
0010BB  2               
0010BB  2  E8           	inx
0010BC  2               .else
0010BC  2               	jsr gsprad 		; get old sprite address.
0010BC  2               	jsr exx  		; store addresses.
0010BC  2               	jsr gspran 		; get new sprite addresses.
0010BC  2               
0010BC  2               .if bflag
0010BC  2               	lda #23
0010BC  2               .else
0010BC  2               	lda #15
0010BC  2               .endif
0010BC  2               	sta ccnt
0010BC  2               lloop:
0010BC  2               	jsr dline 		; draw a line.
0010BC  2               	jsr exx  		; restore old addresses.
0010BC  2               	jsr dline 		; delete a line.
0010BC  2               	jsr exx  		; flip to new sprite addresses.
0010BC  2               	dec ccnt
0010BC  2               	bne lloop
0010BC  2               
0010BC  2               	jsr dline		; draw a line.
0010BC  2               	jsr exx 		; restore old addresses.
0010BC  2               
0010BC  2               ;-------------------------------------------------------------
0010BC  2               ; Drop through.
0010BC  2               ; Line drawn, now work out next target address.
0010BC  2               ;
0010BC  2               ; Input:
0010BC  2               ;  B  = right mask
0010BC  2               ;  C  = left mask
0010BC  2               ;  DE = spriteaddress
0010BC  2               ;  scraddr = screen address
0010BC  2               ;-------------------------------------------------------------
0010BC  2               
0010BC  2               dline:
0010BC  2               	ldy #0
0010BC  2               	lda (z80_de),y 		; graphic data.
0010BC  2               	pha
0010BC  2               	and z80_c 		; mask away what's not needed.
0010BC  2               	eor (scraddr),y 	; XOR with what's there.
0010BC  2               	sta (scraddr),y 	; bung it in.
0010BC  2               
0010BC  2               ; _BEEB screen arrangement
0010BC  2               ;	clc
0010BC  2               ;	lda scraddr
0010BC  2               ;	adc #16
0010BC  2               ;	sta scraddr
0010BC  2               ;	bcc :+
0010BC  2               ;	inc scraddr+1
0010BC  2               ;:
0010BC  2               	pla
0010BC  2               	and z80_b 		; mask away unwanted bits.
0010BC  2               	ldy #16
0010BC  2               	eor (scraddr),y 	; XOR with what's there.
0010BC  2               	sta (scraddr),y 	; bung it in.
0010BC  2               
0010BC  2               	inc z80_e 		; next graphic.
0010BC  2               	bne :+
0010BC  2               	inc z80_d
0010BC  2               :
0010BC  2               ; _BEEB screen arrangement
0010BC  2               ;	sec
0010BC  2               ;	lda scraddr 		; one character cell to the left.
0010BC  2               ;	sbc #8
0010BC  2               ;	sta scraddr
0010BC  2               ;	lda scraddr+1
0010BC  2               ;	sbc #0
0010BC  2               ;	sta scraddr+1
0010BC  2               
0010BC  2               	ldy #0
0010BC  2               	lda (z80_de),y 		; second bit of data.
0010BC  2               	ldy #8
0010BC  2               	eor (scraddr),y 	; XOR with what's there.
0010BC  2               	sta (scraddr),y 	; bung it in.
0010BC  2               
0010BC  2               	inc z80_e 		; point to next line of data.
0010BC  2               	bne :+
0010BC  2               	inc z80_d
0010BC  2               :
0010BC  2               ; _BEEB screen arrangement
0010BC  2               ;	sec
0010BC  2               ;	lda scraddr 		; another char left.
0010BC  2               ;	sbc #8
0010BC  2               ;	sta scraddr
0010BC  2               ;	lda scraddr+1
0010BC  2               ;	sbc #0
0010BC  2               ;	sta scraddr+1
0010BC  2               .endif
0010BC  2               
0010BC  2               ;----------------------------------------------------------------------
0010BC  2               ; Line drawn, now work out next target address.
0010BC  2               ;----------------------------------------------------------------------
0010BC  2               
0010BC  2               ; _BEEB screen arrangement
0010BC  2               
0010BC  2               nline:
0010BC  2  A5 rr        	lda scraddr 		; get low byte of address.
0010BE  2  29 07        	and #7
0010C0  2  C9 07        	cmp #7				; is this last line of row?
0010C2  2  F0 03        	beq beeb_next_row
0010C4  2               
0010C4  2               	; within same row
0010C4  2  E6 rr        	inc scraddr			; new low byte of address.
0010C6  2               ;	bne :+
0010C6  2               ;	inc scraddr+1		; new high byte of address.
0010C6  2               ;:
0010C6  2  60           	rts
0010C7  2               
0010C7  2               beeb_next_row:
0010C7  2  18           	clc
0010C8  2  A5 rr        	lda scraddr
0010CA  2  69 F9        	adc #<(ScreenRowBytes-7)
0010CC  2  85 rr        	sta scraddr			; new low byte of address.
0010CE  2  A5 rr        	lda scraddr+1
0010D0  2  69 00        	adc #>(ScreenRowBytes-7)
0010D2  2  85 rr        	sta scraddr+1		; new high byte of address.
0010D4  2  60           	rts
0010D5  2               
0010D5  2               .if rflag
0010D5  2               ;-------------------------------------------------------------
0010D5  2               ; Drop through.
0010D5  2               ; Line drawn, now work out next target address.
0010D5  2               ;
0010D5  2               ; Input:
0010D5  2               ;  B  = right mask
0010D5  2               ;  C  = left mask
0010D5  2               ;  DE = spriteaddress
0010D5  2               ;  scraddr = screen address
0010D5  2               ;-------------------------------------------------------------
0010D5  2               
0010D5  2               ddline:
0010D5  2               
0010D5  2               ; NEW SPRITE
0010D5  2               
0010D5  2               ; first screen byte
0010D5  2               
0010D5  2               ddline_spraddr1:
0010D5  2  BC FF FF     	ldy $ffff,x 		; graphic data.
0010D8  2               ddline_shift1:
0010D8  2  B9 FF FF     	lda $ffff,y
0010DB  2  85 rr        	sta sprtmp
0010DD  2  25 rr        	and z80_c 			; mask away what's not needed.
0010DF  2               
0010DF  2  A0 00        	ldy #0
0010E1  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0010E3  2  91 rr        	sta (scraddr),y 	; bung it in.
0010E5  2               
0010E5  2               ; carry to next screen byte
0010E5  2               
0010E5  2  A5 rr        	lda sprtmp			; fetch data.
0010E7  2  25 rr        	and z80_b 			; mask away unwanted
0010E9  2  85 rr        	sta sprtmp
0010EB  2               
0010EB  2               ; middle screen byte
0010EB  2               
0010EB  2  E8           	inx
0010EC  2               ddline_spraddr2:
0010EC  2  BC FF FF     	ldy $ffff,x 		; second bit of data.
0010EF  2               ddline_shift2:
0010EF  2  B9 FF FF     	lda $ffff,y
0010F2  2  85 rr        	sta sprtmp2
0010F4  2  25 rr        	and z80_c 			; mask away what's not needed.
0010F6  2  05 rr        	ora sprtmp
0010F8  2               
0010F8  2  A0 08        	ldy #8
0010FA  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0010FC  2  91 rr        	sta (scraddr),y 	; bung it in.
0010FE  2               
0010FE  2               ; carry to last screen byte
0010FE  2               
0010FE  2  A5 rr        	lda sprtmp2
001100  2  25 rr        	and z80_b 			; mask away unwanted
001102  2               
001102  2  A0 10        	ldy #16
001104  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
001106  2  91 rr        	sta (scraddr),y 	; bung it in.
001108  2               
001108  2               ; _BEEB next row
001108  2               
001108  2  A5 rr        	lda scraddr 		; get low byte of address.
00110A  2  29 07        	and #7
00110C  2  C9 07        	cmp #7				; is this last line of row?
00110E  2  F0 04        	beq :+
001110  2               
001110  2               	; within same row can't increment page
001110  2  E6 rr        	inc scraddr			; new low byte of address.
001112  2  D0 0D        	bne ddline2
001114  2               
001114  2               :
001114  2  18           	clc
001115  2  A5 rr        	lda scraddr
001117  2  69 F9        	adc #<(ScreenRowBytes-7)
001119  2  85 rr        	sta scraddr			; new low byte of address.
00111B  2  A5 rr        	lda scraddr+1
00111D  2  69 00        	adc #>(ScreenRowBytes-7)
00111F  2  85 rr        	sta scraddr+1		; new high byte of address.
001121  2               
001121  2               ; OLD SPRITE
001121  2               
001121  2               ddline2:
001121  2               
001121  2               ; still first row but different data!
001121  2               
001121  2  CA           	dex
001122  2               
001122  2               ; first screen byte
001122  2               
001122  2               ddline_spraddr3:
001122  2  BC FF FF     	ldy $ffff,x			; graphic data.
001125  2               ddline_shift3:
001125  2  B9 FF FF     	lda $ffff,y
001128  2  85 rr        	sta sprtmp
00112A  2  25 rr        	and z80_cp 			; mask away what's not needed.
00112C  2               
00112C  2  A0 00        	ldy #0
00112E  2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
001130  2  91 rr        	sta (z80_hlp),y 	; bung it in.
001132  2               
001132  2               ; carry to next screen byte
001132  2               
001132  2  A5 rr        	lda sprtmp			; fetch data.
001134  2  25 rr        	and z80_bp 			; mask away unwanted
001136  2  85 rr        	sta sprtmp
001138  2               
001138  2               ; middle screen byte
001138  2               
001138  2  E8           	inx
001139  2               ddline_spraddr4:
001139  2  BC FF FF     	ldy $ffff,x 		; second bit of data.
00113C  2               ddline_shift4:
00113C  2  B9 FF FF     	lda $ffff,y
00113F  2  85 rr        	sta sprtmp2
001141  2  25 rr        	and z80_cp 			; mask away what's not needed.
001143  2  05 rr        	ora sprtmp
001145  2               
001145  2  A0 08        	ldy #8
001147  2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
001149  2  91 rr        	sta (z80_hlp),y 	; bung it in.
00114B  2               
00114B  2               ; last screen byte
00114B  2               
00114B  2  A5 rr        	lda sprtmp2			; fetch data.
00114D  2  25 rr        	and z80_bp 			; mask away unwanted
00114F  2               
00114F  2  A0 10        	ldy #16
001151  2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
001153  2  91 rr        	sta (z80_hlp),y 	; bung it in.
001155  2               
001155  2               ; next row of sprite data
001155  2               
001155  2  E8           	inx
001156  2               
001156  2               ; _BEEB screen arrangement
001156  2               
001156  2  A5 rr        	lda z80_lp 			; get low byte of address.
001158  2  29 07        	and #7
00115A  2  C9 07        	cmp #7				; is this last line of row?
00115C  2  F0 03        	beq :+
00115E  2               
00115E  2               	; within same row can't increment page
00115E  2  E6 rr        	inc z80_lp			; new low byte of address.
001160  2  60           	rts
001161  2               
001161  2               :
001161  2  18           	clc
001162  2  A5 rr        	lda z80_lp
001164  2  69 F9        	adc #<(ScreenRowBytes-7)
001166  2  85 rr        	sta z80_lp			; new low byte of address.
001168  2  A5 rr        	lda z80_lp+1
00116A  2  69 00        	adc #>(ScreenRowBytes-7)
00116C  2  85 rr        	sta z80_lp+1		; new high byte of address.
00116E  2  60           	rts
00116F  2               .endif
00116F  2               
00116F  2               ;----------------------------------------------------
00116F  2               ; Display character in A at dispx,dispy.
00116F  2               ;
00116F  2               ; Input:
00116F  2               ;  A 	   = character to print
00116F  2               ;----------------------------------------------------
00116F  2               
00116F  2               pchar:
00116F  2  85 rr        	sta fntaddr
001171  2  A9 00        	lda #0
001173  2  85 rr        	sta fntaddr+1
001175  2  06 rr        	asl fntaddr  		; multiply char by 8.
001177  2  26 rr        	rol fntaddr+1
001179  2  06 rr        	asl fntaddr
00117B  2  26 rr        	rol fntaddr+1
00117D  2  06 rr        	asl fntaddr
00117F  2  26 rr        	rol fntaddr+1
001181  2               
001181  2  A5 rr        	lda fntaddr
001183  2  18           	clc
001184  2  69 D1        	adc #<(FONT-256)
001186  2  85 rr        	sta fntaddr		; that's the low byte.
001188  2  A5 rr        	lda fntaddr+1
00118A  2  69 A4        	adc #>(FONT-256)
00118C  2  85 rr        	sta fntaddr+1		; add displacement.
00118E  2               pchark:
00118E  2  20 0E 1E     	jsr gprad		; get screen address.
001191  2  A2 07        	ldx #7			; lines to write.
001193  2               pchar0:
001193  2  A0 00        	ldy #0
001195  2  B1 rr        	lda (fntaddr),y 	; get image byte.
001197  2  BC A6 11     	ldy scrtab,x		; Get rowoffset
00119A  2               .if iflag
00119A  2               	eor #TxtInvert		; Invert
00119A  2               .endif
00119A  2  91 rr        	sta (scraddr),y 	; copy to screen.
00119C  2  E6 rr        	inc fntaddr		; next image byte.
00119E  2  D0 02        	bne :+
0011A0  2  E6 rr        	inc fntaddr+1
0011A2  2               :
0011A2  2  CA           	dex			; next screen row down.
0011A3  2  10 EE        	bpl pchar0		; repeat.
0011A5  2  60           	rts
0011A6  2               
0011A6  2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
0011AA  2  03 02 01 00  
0011AE  2               ;scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
0011AE  2               
0011AE  2               .if rflag
0011AE  2               ;----------------------------------------------------
0011AE  2               ; Shift tables
0011AE  2               ;----------------------------------------------------
0011AE  2               
0011AE  2  xx xx xx xx  .align 256
0011B2  2  xx xx xx xx  
0011B6  2  xx xx xx xx  
001200  2               shift0:
001200  2  00 01 02 03  .repeat 256, i
001204  2  04 05 06 07  
001208  2  08 09 0A 0B  
001300  2               	.byte i
001300  2               .endrep
001300  2               
001300  2               shift2:
001300  2  00 40 80 C0  .repeat 256, i
001304  2  01 41 81 C1  
001308  2  02 42 82 C2  
001400  2               	.byte (i >> 2) | (i << 6) & $c0
001400  2               .endrep
001400  2               
001400  2               shift4:
001400  2  00 10 20 30  .repeat 256, i
001404  2  40 50 60 70  
001408  2  80 90 A0 B0  
001500  2               	.byte (i >> 4) | ((i << 4) & $f0)
001500  2               .endrep
001500  2               
001500  2               shift6:
001500  2  00 04 08 0C  .repeat 256, i
001504  2  10 14 18 1C  
001508  2  20 24 28 2C  
001600  2               	.byte (i >> 6) | ((i << 2) & $fc)
001600  2               .endrep
001600  2               .endif
001600  2               
001600  1               
001600  1               ;----------------------------------------------------------------------
001600  1               ; AGD 6502 ENGINE CODE + COMPILED GAME SCRIPT
001600  1               ;----------------------------------------------------------------------
001600  1               
001600  1               start_game:
001600  1               
001600  1               	.include "game.inc"
001600  2               .include "deleteme.inc"
001600  3               ; Game engine code --------------------------------------------------------------
001600  3               
001600  3               ; Arcade Game Designer.
001600  3               ; (C) 2008 Jonathan Cauldwell.
001600  3               ; ZX Spectrum Next Engine v0.1.
001600  3               
001600  3               ; Conditional compilation flags
001600  3               ; Code is installed if flag is set
001600  3               ; Flags are set in commandline assembly or by the compiler
001600  3               
001600  3               ; Flags set by AGD compiler
001600  3               ;	mflag  			; MENU + INV
001600  3               ;	pflag 			; particle engine
001600  3               ;	sflag 			; scrollytext
001600  3               ;	dflag 			; digging mode
001600  3               ;	cflag			; collectable blocks
001600  3               ;	oflag			; objects
001600  3               ;	lflag			; ladders
001600  3               ;
001600  3               ; Flags set manually
001600  3               ;	aflag			; adventure mode
001600  3               ;	bflag			; big sprites (16x24)
001600  3               ;	fflag			; floppy version (skip #0axx)
001600  3               ;	gflag			; graphic colour mode
001600  3               ;	hflag			; hidden sprite mode
001600  3               ;	iflag			; invert mode
001600  3               
001600  3               .if mflag
001600  3               	.out "- MEN/INV enabled"
001600  3               .endif
001600  3               .if pflag
001600  3               	.out "- Particles enabled"
001600  3               .endif
001600  3               .if sflag
001600  3               	.out "- Scrolling enabled"
001600  3               .endif
001600  3               .if dflag
001600  3               	.out "- Digging enabled"
001600  3               .endif
001600  3               .if cflag
001600  3               	.out "- Collectable blocks enabled"
001600  3               .endif
001600  3               .if oflag
001600  3               	.out "- Objects enabled"
001600  3               .endif
001600  3               .if lflag
001600  3               	.out "- Ladders enabled"
001600  3               .endif
001600  3               .if aflag
001600  3               	.out "- Adventure mode enabled"
001600  3               .endif
001600  3               .if bflag
001600  3               	.out "- Big Sprites (16x24) enabled"
001600  3               .endif
001600  3               .if gflag
001600  3               	.out "- Colourmode enabled"
001600  3               .endif
001600  3               .if hflag
001600  3               	.out "- Hidden sprites/foregroundblocks enabled"
001600  3               .endif
001600  3               .if iflag
001600  3               	.out "- Invert mode enabled"
001600  3               .endif
001600  3               .if rflag
001600  3               	.out "- RAM saving sprites enabled"
001600  3               .endif
001600  3               .if xflag
001600  3               	.out "- Metablocks 16x6"
001600  3               .endif
001600  3               
001600  3               ; Global definitions ------------------------------------------------------------
001600  3               
001600  3               .if swrflag
001600  3               	FONT = font + data_address - data_start				; Font address
001600  3               .else
001600  3               	FONT = font
001600  3               .endif
001600  3               
001600  3               ; Block characteristics.
001600  3               
001600  3               	PLATFM	= 1		; platform.
001600  3               	WALL	= PLATFM + 1	; solid wall.
001600  3               	LADDER	= WALL + 1	; ladder.
001600  3               	FODDER	= LADDER + 1	; fodder block.
001600  3               	DEADLY	= FODDER + 1	; deadly block.
001600  3               	CUSTOM	= DEADLY + 1	; custom block.
001600  3               	WATER	= CUSTOM + 1	; water block.
001600  3                       COLECT	= WATER + 1	; collectable block.
001600  3                       NUMTYP	= COLECT + 1	; number of types.
001600  3               
001600  3               ; Sprites.
001600  3               
001600  3               .if bflag
001600  3               	SPR_HGT	= 24		; Sprite height
001600  3               	SPR_WID = 16		; Sprite width
001600  3               	NUMSPR	= 8		; number of sprites.
001600  3               .else				; 16x16 sprites
001600  3               	SPR_HGT = 16		; Sprite height
001600  3               	SPR_WID = 16		; Sprite width
001600  3               	NUMSPR	= 12		; number of sprites.
001600  3               .endif
001600  3               	TABSIZ = 17			; size of each entry.
001600  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
001600  3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
001600  3               
001600  3               ; Sprite table variable offsets.
001600  3               
001600  3               	var_Type = 0		; sprite type
001600  3               	var_Image = 1		; sprite time number
001600  3               	var_Frame = 2		; sprite frame
001600  3               	var_Y = 3			; sprite y coordinate
001600  3               	var_X = 4			; sprite X coordinate
001600  3               
001600  3               	var_newType = 5		; sprite new type
001600  3               	var_newImage = 6	; sprite new image number
001600  3               	var_newFrame = 7	; sprite new frame
001600  3               	var_newY = 8		; sprite new y coordinate
001600  3               	var_newX = 9		; sprite new x coordinate
001600  3               
001600  3               	var_Direction = 10	; sprite direction
001600  3               	var_Param1 = 11		; sprite parameter 1
001600  3               	var_Param2 = 12		; sprite parameter 2
001600  3               
001600  3               	var_jumpLo = 13		; sprite jump ptr low
001600  3               	var_jumpHi = 14		; sprite jump ptr high
001600  3               	var_dataLo = 15		; sprite data ptr low
001600  3               	var_dataHi = 16		; sprite data ptr high
001600  3               
001600  3               ; Particle engine.
001600  3               
001600  3               	NUMSHR = 55			; pieces of shrapnel.
001600  3               	SHRSIZ = 6			; bytes per particle.
001600  3               
001600  3               .if iflag
001600  3               	TxtInvert   = $ff	; Invert byte for character printing
001600  3               	ScrFillByte = $ff	; Screen fill byte for CLS
001600  3               .else
001600  3               	TxtInvert   = $00	; Invert byte for character printing
001600  3               	ScrFillByte = $00	; Screen fill byte for CLS
001600  3               .endif
001600  3               
001600  3               	ASCII_NEWLINE = 13
001600  3               
001600  3               ;===============================================================
001600  3               ; Game starts here
001600  3               ;===============================================================
001600  3               
001600  3               ;--------------------------------------------------------------
001600  3               ; If a font is required...
001600  3               ;--------------------------------------------------------------
001600  3               
001600  3  20 04 19     	jsr game	 		; start the game.
001603  3  60           	rts
001604  3               
001604  3               ; Don't change the order of these four.
001604  3               ; Menu routine relies on winlft following wintop.
001604  3               
001604  3  01           wintop:	.byte WINDOWTOP		; top of window.
001605  3  01           winlft:	.byte WINDOWLFT		; left edge.
001606  3  12           winhgt:	.byte WINDOWHGT		; window height.
001607  3  1E           winwid:	.byte WINDOWWID		; window width.
001608  3  18           numob:	.byte NUMOBJ		; number of objects in game.
001609  3               
001609  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
001609  3               
001609  3  08           wntopx:	.byte (8 * WINDOWTOP)
00160A  3  08           wnlftx:	.byte (8 * WINDOWLFT)
00160B  3  88           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00160C  3  E6           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00160D  3               
00160D  3               ; Make sure pointers are arranged in the same order as the data itself.
00160D  3               
00160D  3               .if swrflag
00160D  3  B6 8D        frmptr:	.word frmlst + data_address - data_start        ; sprite frames.
00160F  3               .else
00160F  3               frmptr:	.word frmlst        ; sprite frames.
00160F  3               .endif
00160F  3               
00160F  3               ; Assorted game routines which can go in contended memory.
00160F  3               
00160F  3               ;--------------------------------------------------------------
00160F  3               ; Modify for inventory.
00160F  3               ; called by the INV command
00160F  3               ;
00160F  3               ; Input:
00160F  3               ;  X   = message nr with objects seperated with ,
00160F  3               ;
00160F  3               ; Output:
00160F  3               ;  OPT = selected line nr of INV menu
00160F  3               ;--------------------------------------------------------------
00160F  3               
00160F  3               .if mflag
00160F  3               minve:
00160F  3               .if xflag
00160F  3               	lda #WINDOWHGT
00160F  3               	asl a
00160F  3               	sta winhgt
00160F  3               	lda #WINDOWWID
00160F  3               	asl a
00160F  3               	sta winwid
00160F  3               .endif
00160F  3  A9 26        	lda #<(invdis)		; routine address.
001611  3  8D F7 16     	sta mod0+1		; set up menu routine.
001614  3  8D 68 16     	sta mod2+1		; set up count routine.
001617  3  A9 18        	lda #>(invdis)
001619  3  8D F8 16     	sta mod0+2
00161C  3  8D 69 16     	sta mod2+2
00161F  3  A9 3C        	lda #<(fopt)		; find option from available objects.
001621  3  8D 9B 17     	sta mod1+1		; set up routine.
001624  3  A9 18        	lda #>(fopt)
001626  3  8D 9C 17     	sta mod1+1+1
001629  3  4C 46 16     	jmp dbox		; do menu routine.
00162C  3               
00162C  3               ;--------------------------------------------------------------
00162C  3               ; Modify for menu.
00162C  3               ; called by the MENU command
00162C  3               ;
00162C  3               ; Input:
00162C  3               ;  X   = message nr with menu items seperated with ,
00162C  3               ;
00162C  3               ; Output:
00162C  3               ;  OPT = selected line nr of MENU menu
00162C  3               ;--------------------------------------------------------------
00162C  3               
00162C  3               mmenu:
00162C  3  A9 3A        	lda #<(always)		; routine address.
00162E  3  8D F7 16     	sta mod0+1		; set up routine.
001631  3  8D 68 16     	sta mod2+1		; set up count routine.
001634  3  A9 20        	lda #>(always)
001636  3  8D F8 16     	sta mod0+2
001639  3  8D 69 16     	sta mod2+2
00163C  3               
00163C  3  A9 C7        	lda #<(fstd)		; standard option selection.
00163E  3  8D 9B 17     	sta mod1+1		; set up routine.
001641  3  A9 17        	lda #>(fstd)
001643  3  8D 9C 17     	sta mod1+2
001646  3               
001646  3               ; Drop through into box routine.
001646  3               
001646  3               ;--------------------------------------------------------------
001646  3               ; Work out size of box for message or menu.
001646  3               ;--------------------------------------------------------------
001646  3               
001646  3               dbox:
001646  3               .if swrflag
001646  3  A9 00        	lda #<(msgdat + data_address - data_start)		; pointer to messages.
001648  3  85 rr        	sta z80_l
00164A  3  A9 80        	lda #>(msgdat + data_address - data_start)
00164C  3  85 rr        	sta z80_h
00164E  3               .else
00164E  3               	lda #<msgdat		; pointer to messages.
00164E  3               	sta z80_l
00164E  3               	lda #>msgdat
00164E  3               	sta z80_h
00164E  3               .endif
00164E  3               
00164E  3  20 D3 22     	jsr getwrd		; get message number.
001651  3               
001651  3  A5 rr        	lda z80_h		; store pointer to message.
001653  3  85 rr        	sta TmpAddr
001655  3  A5 rr        	lda z80_l
001657  3  85 rr        	sta TmpAddr+1
001659  3               
001659  3  A9 01        	lda #1			; height.
00165B  3  85 rr        	sta z80_d
00165D  3  A9 00        	lda #0			; start at object zero.
00165F  3  85 rr        	sta combyt		; store number of object in combyt.
001661  3  85 rr        	sta z80_e		; maximum width.
001663  3               dbox5:
001663  3  A9 00        	lda #0			; this line"s width.
001665  3  85 rr        	sta z80_b
001667  3               mod2:
001667  3  20 3A 20     	jsr always		; item in player"s possession?
00166A  3  C9 FF        	cmp #255
00166C  3  D0 02        	bne dbox6		; not in inventory, skip this line.
00166E  3  E6 rr        	inc z80_d		; add to tally.
001670  3               dbox6:
001670  3  A0 00        	ldy #0			; get character.
001672  3  B1 rr        	lda (z80_hl),y
001674  3  85 rr        	sta z80_a
001676  3  E6 rr        	inc z80_l		; next character.
001678  3  D0 02        	bne :+
00167A  3  E6 rr        	inc z80_h
00167C  3               :
00167C  3  A5 rr        	lda z80_a		; reached end of line?
00167E  3  C9 2C        	cmp #','
001680  3  F0 0D        	beq dbox3		; yes.
001682  3  C9 0D        	cmp #ASCII_NEWLINE
001684  3  F0 09        	beq dbox3		; yes.
001686  3  E6 rr        	inc z80_b		; add to this line"s width.
001688  3  A5 rr        	lda z80_a
00168A  3  30 10        	bmi dbox4		; end of message? yes, end count.
00168C  3  4C 70 16     	jmp dbox6		; repeat until we find the end.
00168F  3               dbox3:
00168F  3  A5 rr        	lda z80_e		; maximum line width.
001691  3  C5 rr        	cmp z80_b		; have we exceeded longest so far?
001693  3  10 CE        	bpl dbox5		; no, carry on looking.
001695  3  A5 rr        	lda z80_b		; make this the widest so far.
001697  3  85 rr        	sta z80_e
001699  3  4C 63 16     	jmp dbox5		; keep looking.
00169C  3               dbox4:
00169C  3  A5 rr        	lda z80_e		; maximum line width.
00169E  3  C5 rr        	cmp z80_b		; have we exceeded longest so far?
0016A0  3  10 04        	bpl dbox8		; no, carry on looking.
0016A2  3  A5 rr        	lda z80_b		; final line is the longest so far.
0016A4  3  85 rr        	sta z80_e
0016A6  3               dbox8:
0016A6  3  C6 rr        	dec z80_d		; decrement items found.
0016A8  3  D0 07        	bne :+			; total was zero.
0016AA  3  A9 FF        	lda #255
0016AC  3  85 rr        	sta varopt
0016AE  3  4C F1 17     	jmp dbox15
0016B1  3               :
0016B1  3  A5 rr        	lda z80_e		; longest line.
0016B3  3  D0 03        	bne :+			; was it zero?
0016B5  3  4C F1 17     	jmp dbox15		; total was zero.
0016B8  3               :
0016B8  3  85 rr        	sta bwid		; set up size.
0016BA  3  A5 rr        	lda z80_d
0016BC  3  85 rr        	sta blen
0016BE  3               
0016BE  3               ;--------------------------------------------------------------
0016BE  3               ; That's set up our box size.
0016BE  3               ;--------------------------------------------------------------
0016BE  3               
0016BE  3  AD 06 16     	lda winhgt		; window height in characters.
0016C1  3  38           	sec
0016C2  3  E5 rr        	sbc z80_d		; subtract height of box.
0016C4  3  4A           	lsr a			; divide by 2.
0016C5  3  18           	clc
0016C6  3  6D 04 16     	adc wintop		; add top edge of window.
0016C9  3  85 rr        	sta btop		; set up box top.
0016CB  3               
0016CB  3  AD 07 16     	lda winwid		; window width in characters.
0016CE  3  38           	sec
0016CF  3  E5 rr        	sbc z80_e		; subtract box width.
0016D1  3  4A           	lsr a			; divide by 2.
0016D2  3  18           	clc
0016D3  3  6D 05 16     	adc winlft		; add left edge of window.
0016D6  3  85 rr        	sta blft		; box left.
0016D8  3               
0016D8  3  A9 D1        	lda #<(FONT-256)		; font.
0016DA  3  8D C7 1C     	sta grbase		; set up for text display.
0016DD  3  A9 A4        	lda #>(FONT-256)
0016DF  3  8D C8 1C     	sta grbase+1
0016E2  3               
0016E2  3  A5 rr        	lda TmpAddr+1		; restore message pointer.
0016E4  3  85 rr        	sta z80_l
0016E6  3  A5 rr        	lda TmpAddr
0016E8  3  85 rr        	sta z80_h
0016EA  3               
0016EA  3  A5 rr        	lda btop		; box top.
0016EC  3  85 rr        	sta dispy		; set display coordinate.
0016EE  3  A9 00        	lda #0			; start at object zero.
0016F0  3  85 rr        	sta combyt		; store number of object in combyt.
0016F2  3               dbox2:
0016F2  3  A5 rr        	lda combyt		; get object number.
0016F4  3  85 rr        	sta z80_a
0016F6  3               mod0:
0016F6  3  20 3A 20     	jsr always		; check inventory for display.
0016F9  3  C9 FF        	cmp #255
0016FB  3  F0 03        	beq :+
0016FD  3  4C D1 17     	jmp dbox13		; not in inventory, skip this line.
001700  3               :
001700  3  A5 rr        	lda blft		; box left.
001702  3  85 rr        	sta dispx		; set left display position.
001704  3  A5 rr        	lda bwid		; box width.
001706  3  85 rr        	sta z80_b		; store width.
001708  3               dbox0:
001708  3  A0 00        	ldy #0			; get character.
00170A  3  B1 rr        	lda (z80_hl),y
00170C  3  C9 2C        	cmp #','		; end of line?
00170E  3  F0 59        	beq dbox1		; yes, next one.
001710  3  C9 0D        	cmp #ASCII_NEWLINE			; end of line?
001712  3  F0 55        	beq dbox1		; yes, next one.
001714  3               
001714  3  C9 8D        	cmp #141			; end of line?
001716  3  D0 05        	bne :+
001718  3  C6 rr        	dec bwid
00171A  3  4C 77 17     	jmp dbox7		; yes, next one.
00171D  3               :
00171D  3  C6 rr        	dec z80_b		; one less to display.
00171F  3  29 7F        	and #127		; remove terminator.
001721  3               
001721  3  20 D5 1E     	jsr pchr		; display on screen.
001724  3               
001724  3  A0 00        	ldy #0
001726  3  B1 rr        	lda (z80_hl),y		; get character.
001728  3  85 rr        	sta z80_a
00172A  3  E6 rr        	inc z80_l		; next character.
00172C  3  D0 02        	bne :+
00172E  3  E6 rr        	inc z80_h
001730  3               :
001730  3  A5 rr        	lda z80_a
001732  3  C9 80        	cmp #128		; end of message?
001734  3  30 03        	bmi :+
001736  3  4C 77 17     	jmp dbox7		; yes, job done.
001739  3               :
001739  3  A5 rr        	lda z80_b		; chars remaining.
00173B  3  F0 03        	beq :+			; are any left?
00173D  3  4C 08 17     	jmp dbox0		; yes, continue.
001740  3               :
001740  3               ;---------------------------------------------------
001740  3               ; Reached limit of characters per line.
001740  3               ;---------------------------------------------------
001740  3               
001740  3               dbox9:
001740  3  A0 00        	ldy #0
001742  3  B1 rr        	lda (z80_hl),y		; get character.
001744  3  E6 rr        	inc z80_l		; next one.
001746  3  D0 02        	bne :+
001748  3  E6 rr        	inc z80_h
00174A  3               :
00174A  3  C9 2C        	cmp #','		; another line?
00174C  3  F0 24        	beq dbox10		; yes, do next line.
00174E  3  C9 0D        	cmp #ASCII_NEWLINE			; another line?
001750  3  F0 20        	beq dbox10		; yes, do next line.
001752  3  C9 80        	cmp #128		; end of message?
001754  3  B0 03        	bcs :+
001756  3  4C 81 17     	jmp dbox11		; yes, finish message.
001759  3               :
001759  3  4C 40 17     	jmp dbox9
00175C  3               
00175C  3               ;---------------------------------------------------
00175C  3               ; Fill box to end of line.
00175C  3               ;---------------------------------------------------
00175C  3               
00175C  3               dboxf:
00175C  3  A9 20        	lda #32			; space character.
00175E  3  20 D5 1E     	jsr pchr		; display character.
001761  3  C6 rr        	dec z80_b
001763  3  F0 03        	beq :+
001765  3  4C 5C 17     	jmp dboxf		; repeat for remaining chars on line.
001768  3               :
001768  3  60           	rts
001769  3               dbox1:
001769  3  E6 rr        	inc z80_l		; skip character.
00176B  3  D0 02        	bne :+
00176D  3  E6 rr        	inc z80_h
00176F  3               :
00176F  3  20 5C 17     	jsr dboxf		; fill box out to right side.
001772  3               dbox10:
001772  3  E6 rr        	inc dispy		; y coordinate down a line next position.
001774  3  4C F2 16     	jmp dbox2		; next line.
001777  3               dbox7:
001777  3  A5 rr        	lda z80_b		; chars remaining.
001779  3  D0 03        	bne :+			; are any left?
00177B  3  4C 81 17     	jmp dbox11		; no, nothing to draw.
00177E  3               :
00177E  3  20 5C 17     	jsr dboxf		; fill message to line.
001781  3               
001781  3               ;------------------------------------------------------
001781  3               ; Drawn the box menu, now select option.
001781  3               ;------------------------------------------------------
001781  3               
001781  3               dbox11:
001781  3  A5 rr        	lda btop		; box top.
001783  3  85 rr        	sta dispy		; set bar position.
001785  3               dbox14:
001785  3  20 7E 21     	jsr joykey		; get controls.
001788  3  C9 7F        	cmp #$7f		; anything pressed?
00178A  3  D0 F9        	bne dbox14		; yes, debounce it.
00178C  3  20 FA 17     	jsr dbar		; draw bar.
00178F  3               dbox12:
00178F  3  20 7E 21     	jsr joykey		; get controls.
001792  3  C9 7F        	cmp #$7f		; anything pressed?
001794  3  F0 F9        	beq dbox12		; no, nothing.
001796  3  29 10        	and #16			; fire button pressed?
001798  3  D0 03        	bne :+
00179A  3               mod1:
00179A  3  4C C7 17     	jmp fstd		; yes, job done.
00179D  3               :
00179D  3  20 FA 17     	jsr dbar		; delete bar.
0017A0  3               
0017A0  3  A5 rr        	lda joyval		; joystick reading.
0017A2  3  29 08        	and #8			; going up?
0017A4  3  F0 13        	beq dboxu		; yes, go up.
0017A6  3               
0017A6  3  A6 rr        	ldx dispy		; vertical position of bar.
0017A8  3  E8           	inx			; look down.
0017A9  3  8A           	txa
0017AA  3  38           	sec
0017AB  3  E5 rr        	sbc btop		; find distance from top.
0017AD  3  C5 rr        	cmp blen		; top of box.
0017AF  3  D0 03        	bne :+
0017B1  3  4C 85 17     	jmp dbox14		; yes, go no further.
0017B4  3               :
0017B4  3  E6 rr        	inc dispy		; move bar.
0017B6  3  4C 85 17     	jmp dbox14		; continue.
0017B9  3               dboxu:
0017B9  3  A5 rr        	lda dispy		; vertical position of bar.
0017BB  3  C5 rr        	cmp btop		; are we at the top?
0017BD  3  D0 03        	bne :+
0017BF  3  4C 85 17     	jmp dbox14		; yes, go no further.
0017C2  3               :
0017C2  3  C6 rr        	dec dispy		; move bar.
0017C4  3  4C 85 17     	jmp dbox14		; continue.
0017C7  3               fstd:
0017C7  3  A5 rr        	lda dispy		; bar position.
0017C9  3  38           	sec
0017CA  3  E5 rr        	sbc btop		; find selected option.
0017CC  3  85 rr        	sta varopt		; store the option.
0017CE  3  4C A8 18     	jmp redraw		; redraw the screen.
0017D1  3               
0017D1  3               ;------------------------------------------------------
0017D1  3               ; Option not available.  Skip this line.
0017D1  3               ;------------------------------------------------------
0017D1  3               
0017D1  3               dbox13:
0017D1  3  A0 00        	ldy #0
0017D3  3  B1 rr        	lda (z80_hl),y		; get character.
0017D5  3  E6 rr        	inc z80_l		; next one.
0017D7  3               
0017D7  3  D0 02        	bne :+
0017D9  3  E6 rr        	inc z80_h
0017DB  3               :
0017DB  3  C9 2C        	cmp #','		; another line?
0017DD  3  D0 03        	bne :+
0017DF  3  4C F2 16     	jmp dbox2		; yes, do next line.
0017E2  3               :
0017E2  3  C9 0D        	cmp #ASCII_NEWLINE			; another line?
0017E4  3  D0 03        	bne :+
0017E6  3  4C F2 16     	jmp dbox2		; yes, do next line.
0017E9  3               :
0017E9  3               
0017E9  3  10 03        	bpl :+			; end of message?
0017EB  3  4C 81 17     	jmp dbox11		; yes, finish message.
0017EE  3               :
0017EE  3  4C D1 17     	jmp dbox13
0017F1  3               dbox15:
0017F1  3               .if xflag
0017F1  3               	lda #WINDOWWID
0017F1  3               	sta winwid
0017F1  3               	lda #WINDOWHGT
0017F1  3               	sta winhgt
0017F1  3               .endif
0017F1  3  A5 rr        	lda TmpAddr		; pop message pointer from the stack.
0017F3  3  85 rr        	sta z80_h
0017F5  3  A5 rr        	lda TmpAddr+1
0017F7  3  85 rr        	sta z80_l
0017F9  3  60           	rts
0017FA  3               
0017FA  3               ;------------------------------------------------------
0017FA  3               ; Invert bar
0017FA  3               ;------------------------------------------------------
0017FA  3               
0017FA  3               dbar:
0017FA  3  A5 rr        	lda blft		; box left.
0017FC  3  85 rr        	sta dispx		; set display coordinate.
0017FE  3  20 0E 1E     	jsr gprad		; get printing address.
001801  3               
001801  3  A5 rr        	lda bwid		; box width.
001803  3  85 rr        	sta z80_c		; loop counter in c.
001805  3  A5 rr        	lda z80_h
001807  3  85 rr        	sta z80_d		; store screen address high byte.
001809  3               dbar1:
001809  3  A2 07        	ldx #7			; pixel height in b.
00180B  3               dbar0:
00180B  3  BC A6 11     	ldy scrtab,x
00180E  3  B1 rr        	lda (scraddr),y		; get screen byte.
001810  3  49 FF        	eor #255		; reverse all bits.
001812  3  91 rr        	sta (scraddr),y		; write back to screen.
001814  3  CA           	dex			; next line down.
001815  3  10 F4        	bpl dbar0		; draw rest of character.
001817  3               
001817  3  A5 rr        	lda scraddr
001819  3  69 08        	adc #8
00181B  3  85 rr        	sta scraddr
00181D  3  90 02        	bcc :+
00181F  3  E6 rr        	inc scraddr+1
001821  3               :
001821  3  C6 rr        	dec z80_c		; decrement character counter.
001823  3  D0 E4        	bne dbar1		; repeat for whole line.
001825  3  60           	rts
001826  3               
001826  3               ;------------------------------------------------------
001826  3               ; Point to object
001826  3               ;
001826  3               ; Input:
001826  3               ;  -
001826  3               ;
001826  3               ; Output:
001826  3               ;  A = object number, A=255 if already in possession
001826  3               ;------------------------------------------------------
001826  3               
001826  3               invdis:
001826  3  A5 rr        	lda z80_l		; store message text pointer.
001828  3  48           	pha
001829  3  A5 rr        	lda z80_h
00182B  3  48           	pha
00182C  3  A5 rr        	lda combyt		; object number.
00182E  3  E6 rr        	inc combyt		; ready for next one.
001830  3  20 6F 1B     	jsr gotob		; check if we have object.
001833  3  A8           	tay
001834  3  68           	pla
001835  3  85 rr        	sta z80_h
001837  3  68           	pla
001838  3  85 rr        	sta z80_l
00183A  3  98           	tya
00183B  3  60           	rts
00183C  3               
00183C  3               ;------------------------------------------------------
00183C  3               ; Find option selected.
00183C  3               ;
00183C  3               ; Input:
00183C  3               ;  -
00183C  3               ;
00183C  3               ; Output:
00183C  3               ;  OPT = selected object
00183C  3               ;------------------------------------------------------
00183C  3               
00183C  3               fopt:
00183C  3  A5 rr        	lda dispy
00183E  3  38           	sec
00183F  3  E5 rr        	sbc btop		; find selected option.
001841  3  85 rr        	sta tmp+2		; option selected in b register.
001843  3  E6 rr        	inc tmp+2
001845  3               
001845  3  A9 00        	lda #0			; set to first item.
001847  3  85 rr        	sta combyt		; object number.
001849  3               fopt0:
001849  3  20 59 18     	jsr fobj		; find next object in inventory.
00184C  3  C6 rr        	dec tmp+2
00184E  3  D0 F9        	bne fopt0		; repeat for relevant steps down the list.
001850  3               
001850  3  A5 rr        	lda combyt		; get option.
001852  3  85 rr        	sta varopt		; store the option.
001854  3  C6 rr        	dec varopt		; one less, due to where we increment combyt.
001856  3  4C A8 18     	jmp redraw		; redraw the screen.
001859  3               fobj:
001859  3  A4 rr        	ldy combyt		; object number.
00185B  3  E6 rr        	inc combyt		; ready for next item.
00185D  3  98           	tya
00185E  3  20 6F 1B     	jsr gotob		; do we have this item?
001861  3  C9 FF        	cmp #255
001863  3  D0 01        	bne :+
001865  3  60           	rts
001866  3               :
001866  3  4C 59 18     	jmp fobj		; yes, it's on the list.
001869  3               .endif
001869  3               
001869  3               ;----------------------------------------------------
001869  3               ; Clear sprite table.
001869  3               ;
001869  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
001869  3               ;----------------------------------------------------
001869  3               
001869  3               xspr:
001869  3  A9 FF        	lda #255		; clear byte.
00186B  3  A2 00        	ldx #0			; length of table.
00186D  3               xspr0:
00186D  3  9D 00 0B     	sta sprtab,x		; sprite table.
001870  3  E8           	inx			; move to next byte.
001871  3  E0 CC        	cpx #SPRBUF
001873  3  D0 F8        	bne xspr0		; repeat for rest of table.
001875  3  60           	rts
001876  3               
001876  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001876  3               ; Sound, NOT IMPLEMENTED!!!
001876  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001876  3               ;
001876  3               ;silenc:
001876  3               ;	jsr silen1 		; silence channel 1.
001876  3               ;	jsr silen2 		; silence channel 2.
001876  3               ;	jsr silen3 		; silence channel 3.
001876  3               ;	jmp plsnd 		; play all channels to switch them off.
001876  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001876  3               
001876  3               ;-------------------------------------------------------------
001876  3               ; Initialise all objects.
001876  3               ;
001876  3               ; Reset current room,y,x to start room,y,x for all objects
001876  3               ;-------------------------------------------------------------
001876  3               
001876  3               .if oflag
001876  3               iniob:
001876  3               .if swrflag
001876  3  A9 41        	lda #<(objdta + data_address - data_start) 		; objects table.
001878  3  85 rr        	sta z80_x
00187A  3  A9 A2        	lda #>(objdta + data_address - data_start)
00187C  3  85 rr        	sta z80_i
00187E  3               .else
00187E  3               	lda #<objdta		; objects table.
00187E  3               	sta z80_x
00187E  3               	lda #>objdta
00187E  3               	sta z80_i
00187E  3               .endif
00187E  3               
00187E  3  AE 08 16     	ldx numob 		; number of objects in the game.
001881  3               iniob0:
001881  3  A0 23        	ldy #35
001883  3  B1 rr        	lda (z80_ix),y 		; start screen.
001885  3  A0 20        	ldy #32
001887  3  91 rr        	sta (z80_ix),y 		; set start screen.
001889  3               
001889  3  A0 24        	ldy #36
00188B  3  B1 rr        	lda (z80_ix),y 		; find start y.
00188D  3  A0 21        	ldy #33
00188F  3  91 rr        	sta (z80_ix),y 		; set start y.
001891  3               
001891  3  A0 25        	ldy #37
001893  3  B1 rr        	lda (z80_ix),y 		; get initial x.
001895  3  A0 22        	ldy #34
001897  3  91 rr        	sta (z80_ix),y 		; set x coord.
001899  3               
001899  3  18           	clc 			; point to next object.
00189A  3  A5 rr        	lda z80_x
00189C  3  69 26        	adc #38			; distance between objects.
00189E  3  85 rr        	sta z80_x
0018A0  3  90 02        	bcc :+
0018A2  3  E6 rr        	inc z80_i
0018A4  3               :
0018A4  3  CA           	dex 			; repeat.
0018A5  3  D0 DA        	bne iniob0
0018A7  3               
0018A7  3  60           	rts
0018A8  3               .endif
0018A8  3               
0018A8  3               ;-----------------------------------------------
0018A8  3               ; Redraw the screen.
0018A8  3               ;
0018A8  3               ; Remove old copy of all sprites for redraw.
0018A8  3               ;-----------------------------------------------
0018A8  3               
0018A8  3               redraw:
0018A8  3               .if xflag
0018A8  3               	lda #WINDOWWID
0018A8  3               	sta winwid
0018A8  3               	lda #WINDOWHGT
0018A8  3               	sta winhgt
0018A8  3               .endif
0018A8  3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
0018AA  3  48           	pha
0018AB  3  A5 rr        	lda z80_x
0018AD  3  48           	pha
0018AE  3               
0018AE  3  20 21 1F     	jsr droom		; show screen layout.
0018B1  3               .if oflag
0018B1  3  20 F3 1A     	jsr shwob		; draw objects.
0018B4  3               .endif
0018B4  3               numsp0:
0018B4  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0018B6  3  85 rr        	sta tmp
0018B8  3               
0018B8  3  A9 00        	lda #<sprtab		; sprite table.
0018BA  3  85 rr        	sta z80_x
0018BC  3  A9 0B        	lda #>sprtab
0018BE  3  85 rr        	sta z80_i
0018C0  3               redrw0:
0018C0  3  A0 00        	ldy #0
0018C2  3  B1 rr        	lda (z80_ix),y		; old sprite type.
0018C4  3  C9 FF        	cmp #255		; is it enabled?
0018C6  3  F0 0B        	beq redrw1 		; no, find next one.
0018C8  3               
0018C8  3  A0 03        	ldy #var_Y
0018CA  3  B1 rr        	lda (z80_ix),y 		; sprite y.
0018CC  3  C9 B1        	cmp #177		; beyond maximum?
0018CE  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0018D0  3               
0018D0  3  20 EE 0F     	jsr sspria		; show single sprite.
0018D3  3               
0018D3  3               redrw1:
0018D3  3  18           	clc			; next sprite.
0018D4  3  A5 rr        	lda z80_x
0018D6  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0018D8  3  85 rr        	sta z80_x
0018DA  3  90 02        	bcc :+
0018DC  3  E6 rr        	inc z80_i
0018DE  3               :
0018DE  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0018E0  3  D0 DE        	bne redrw0
0018E2  3               
0018E2  3               rpblc1:
0018E2  3               ;	jsr dshrp		; redraw shrapnel.
0018E2  3               
0018E2  3               .if aflag
0018E2  3               	jsr rbloc		; draw blocks for this screen
0018E2  3               .endif
0018E2  3  68           	pla			; retrieve sprite pointer.
0018E3  3  85 rr        	sta z80_x
0018E5  3  68           	pla
0018E6  3  85 rr        	sta z80_i
0018E8  3               
0018E8  3  60           	rts
0018E9  3               
0018E9  3               ;----------------------------------------------------------------------
0018E9  3               ; Clear screen routine.
0018E9  3               ;
0018E9  3               ; Fill screenmem $8000-$97ff with ScrFillByte
0018E9  3               ;----------------------------------------------------------------------
0018E9  3               
0018E9  3               cls:
0018E9  3  A9 68        	lda #>ScreenAddr		; screen address.
0018EB  3  8D F4 18     	sta clsloop+2
0018EE  3  A9 00        	lda #ScrFillByte
0018F0  3  A0 00        	ldy #0
0018F2  3               clsloop:
0018F2  3  99 00 68     	sta ScreenAddr,y
0018F5  3  C8           	iny
0018F6  3  D0 FA        	bne clsloop
0018F8  3  EE F4 18     	inc clsloop+2
0018FB  3  AE F4 18     	ldx clsloop+2
0018FE  3  E0 80        	cpx #>(ScreenAddr+ScreenSize)		; _BEEB
001900  3  D0 F0        	bne clsloop
001902  3  60           	rts
001903  3               
001903  3               ;----------------------------------------------------------------------
001903  3               ; FODDER check
001903  3               ;----------------------------------------------------------------------
001903  3               
001903  3               .if pflag .or dflag
001903  3               fdchk:
001903  3               	cmp #FODDER 		; is it fodder?
001903  3               	beq :+
001903  3               	rts 			; no.
001903  3               :
001903  3               	lda #0			; wipe fodder in MAP
001903  3               	ldy #0
001903  3               	sta (bufaddr),y 	; rewrite block type.
001903  3               
001903  3               	lda dispx		; x=x/8
001903  3               	pha
001903  3               	lsr a
001903  3               	lsr a
001903  3               	lsr a
001903  3               	sta dispx
001903  3               
001903  3               	lda dispy		; y=y/8
001903  3               	pha
001903  3               	lsr a
001903  3               	lsr a
001903  3               	lsr a
001903  3               	sta dispy
001903  3               
001903  3               	lda #0 			; block to write.
001903  3               	jsr pattr 		; write block.
001903  3               
001903  3               	pla
001903  3               	sta dispy
001903  3               	pla
001903  3               	sta dispx
001903  3               	rts
001903  3               .endif
001903  3               
001903  3               ;----------------------------------------------------
001903  3               ; Scrolly text and puzzle variables.
001903  3               ;----------------------------------------------------
001903  3               
001903  3               .if sflag
001903  3               txtbit:	.byte 128		; bit to write.
001903  3               txtwid:	.byte 16		; width of ticker message.
001903  3               .if swrflag
001903  3               txtpos:	.word (msgdat + data_address - data_start)
001903  3               txtini:	.word (msgdat + data_address - data_start)
001903  3               .else
001903  3               txtpos:	.word msgdat
001903  3               txtini:	.word msgdat
001903  3               .endif
001903  3               txtscr:	.word ScreenAddr
001903  3               .endif
001903  3               
001903  3               ;----------------------------------------------------
001903  3               ; Specialist routines.
001903  3               ; Process shrapnel.
001903  3               ;----------------------------------------------------
001903  3               proshr:
001903  3               .if pflag
001903  3               	lda #<SHRAPN		; table.
001903  3               	sta z80_x
001903  3               	lda #>SHRAPN
001903  3               	sta z80_i
001903  3               
001903  3               	lda #NUMSHR		; shrapnel pieces to process.
001903  3               	sta shrctr
001903  3               prosh0:
001903  3               	ldy #0
001903  3               	lda (z80_ix),y		; on/off marker.
001903  3               	asl a
001903  3               proshx:
001903  3               	bcs :+
001903  3               	jsr prosh1 		; on, so process it.
001903  3               :
001903  3               	clc
001903  3               	lda z80_x
001903  3               	adc #SHRSIZ
001903  3               	sta z80_x
001903  3               	bcc :+
001903  3               	inc z80_i
001903  3               :
001903  3               	dec shrctr		; round again.
001903  3               	bne prosh0
001903  3               .endif
001903  3               .if sflag
001903  3               	jsr scrly
001903  3               .endif
001903  3  60           	rts
001904  3               
001904  3               .if pflag
001904  3               ;----------------------------------------------------
001904  3               ; Proces shrapnel piece
001904  3               ;----------------------------------------------------
001904  3               
001904  3               prosh1:
001904  3               	jsr plot 		; delete the pixel.
001904  3               
001904  3               	lda #<shrptr		; shrapnel routine pointers.
001904  3               	sta z80_l
001904  3               	lda #>shrptr
001904  3               	sta z80_h
001904  3               
001904  3               	ldy #0
001904  3               	lda (z80_ix),y		; restore shrapnel type.
001904  3               	jsr prosh2 		; run the routine.
001904  3               	jsr chkxy		; check x and y are good before we redisplay.
001904  3               
001904  3               	lda #<SHRSIZ 		; distance to next.
001904  3               	sta z80_e
001904  3               	lda #>SHRSIZ
001904  3               	sta z80_d
001904  3               	rts
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Run the routine
001904  3               ;----------------------------------------------------
001904  3               
001904  3               prosh2:
001904  3               	asl a 			; 2 bytes per address.
001904  3               	tay
001904  3               	lda shrptr,y
001904  3               	sta z80_l
001904  3               	lda shrptr+1,y 		; fetch high byte from table.
001904  3               	sta z80_h
001904  3               	jmp (z80_hl) 		; jump to routine.
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Paricle routine table
001904  3               ;----------------------------------------------------
001904  3               
001904  3               shrptr:	.word laser		; laser.
001904  3               	.word trail		; vapour trail.
001904  3               	.word shrap		; shrapnel from explosion.
001904  3               	.word dotl		; horizontal starfield left.
001904  3               	.word dotr		; horizontal starfield right.
001904  3               	.word dotu		; vertical starfield up.
001904  3               	.word dotd		; vertical starfield down.
001904  3               	.word ptcusr		; user particle.
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Explosion shrapnel.
001904  3               ;----------------------------------------------------
001904  3               
001904  3               shrap:
001904  3               	ldy #1
001904  3               	lda (z80_ix),y 		; get the angle.
001904  3               	clc
001904  3               	adc #<shrsin		; shrapnel sine table.
001904  3               	sta z80_l
001904  3               	lda #>shrsin
001904  3               	adc #0
001904  3               	sta z80_h
001904  3               
001904  3               	ldy #0
001904  3               	lda (z80_hl),y 		; fetch value from table.
001904  3               	sta z80_e
001904  3               	inc z80_l 		; next byte of table.
001904  3               	bne :+
001904  3               	inc z80_h
001904  3               :
001904  3               	ldy #0
001904  3               	lda (z80_hl),y		; fetch value from table.
001904  3               	sta z80_d
001904  3               	inc z80_l		; next byte of table.
001904  3               	bne :+
001904  3               	inc z80_h
001904  3               :
001904  3               	ldy #0
001904  3               	lda (z80_hl),y 		; fetch value from table.
001904  3               	sta z80_c
001904  3               	inc z80_l 		; next byte of table.
001904  3               	bne :+
001904  3               	inc z80_h
001904  3               :
001904  3               	ldy #0
001904  3               	lda (z80_hl),y 		; fetch value from table.
001904  3               	sta z80_b
001904  3               
001904  3               	ldy #2
001904  3               	lda (z80_ix),y 		; x coordinate in hl.
001904  3               	clc
001904  3               	adc z80_e		; add sine lb
001904  3               	sta (z80_ix),y		; store new coordinate lb.
001904  3               	ldy #3
001904  3               	lda (z80_ix),y
001904  3               	adc z80_d		; add sine hb
001904  3               	sta (z80_ix),y		; store new coordinate hb.
001904  3               
001904  3               	ldy #4
001904  3               	lda (z80_ix),y	 	; y coordinate in hl.
001904  3               	clc
001904  3               	adc z80_c		; add cosine lb
001904  3               	sta (z80_ix),y		; store new coordinate lb.
001904  3               	ldy #5
001904  3               	lda (z80_ix),y
001904  3               	adc z80_b		; add cosine lb
001904  3               	sta (z80_ix),y		; store new coordinate hb.
001904  3               
001904  3               	rts
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Move dots
001904  3               ;----------------------------------------------------
001904  3               
001904  3               dotl:
001904  3               	ldy #5
001904  3               	lda (z80_ix),y
001904  3               	sec
001904  3               	sbc #1		 	; move left.
001904  3               	sta (z80_ix),y
001904  3               	rts
001904  3               dotr:
001904  3               	ldy #5
001904  3               	lda (z80_ix),y
001904  3               	clc
001904  3               	adc #1		 	; move left.
001904  3               	sta (z80_ix),y
001904  3               	rts
001904  3               dotu:
001904  3               	ldy #3
001904  3               	lda (z80_ix),y
001904  3               	sec
001904  3               	sbc #1		 	; move up.
001904  3               	sta (z80_ix),y
001904  3               	rts
001904  3               dotd:
001904  3               	ldy #3
001904  3               	lda (z80_ix),y
001904  3               	clc
001904  3               	adc #1			; move down.
001904  3               	sta (z80_ix),y
001904  3               	rts
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Check if coordinates are ok before redrawing at new position.
001904  3               ;
001904  3               ; left:   X>L		X=L	Ok
001904  3               ; right:  R+15>X	X=R	Ok
001904  3               ; top:    Y>T		Y=T	Ok
001904  3               ; bottom: B+15>Y	Y=B	Ok
001904  3               ;----------------------------------------------------
001904  3               
001904  3               chkxy:
001904  3               
001904  3               ; top:    Y>T		Y=T	Ok
001904  3               
001904  3               	ldy #3
001904  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
001904  3               	cmp wntopx		; window top.
001904  3               	bcs :+			; compare with top window limit.
001904  3               	jmp kilshr		; out of window, kill shrapnel.
001904  3               :
001904  3               ; left:   X>L		X=L	Ok
001904  3               
001904  3               	ldy #5
001904  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
001904  3               	cmp wnlftx		; left edge.
001904  3               	bcs :+			; compare with left window limit.
001904  3               	jmp kilshr		; out of window, kill shrapnel.
001904  3               :
001904  3               ; bottom: B+15>Y	Y=B	Ok
001904  3               
001904  3               	lda wnbotx		; point to bottom.
001904  3               	clc
001904  3               	adc #15
001904  3               	ldy #3
001904  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
001904  3               	bcs :+			; compare with shrapnel x coordinate.
001904  3               	jmp kilshr		; off screen, kill shrapnel..
001904  3               :
001904  3               ; right:  R+15>X	X=R	Ok
001904  3               
001904  3               	lda wnrgtx		; point to right edge.
001904  3               	clc
001904  3               	adc #15
001904  3               	ldy #5
001904  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
001904  3               	bcs :+			; compare with window limit.
001904  3               	jmp kilshr		; off screen, kill shrapnel.
001904  3               :
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Drop through.
001904  3               ; Display shrapnel.
001904  3               ;----------------------------------------------------
001904  3               
001904  3               plot:
001904  3               	ldy #3
001904  3               	lda (z80_ix),y		; y integer.
001904  3               	sta dispy	 	; workspace coordinates.
001904  3               	ldy #5
001904  3               	lda (z80_ix),y	 	; x integer.
001904  3               	sta dispx 		; workspace coordinates.
001904  3               
001904  3               	ldy #0
001904  3               	lda (z80_ix),y 		; type.
001904  3               	bne :+			; is it a laser?
001904  3               	jmp plot1 		; yes, draw laser instead.
001904  3               :
001904  3               plot0:
001904  3               	lda dispx		; which pixel within byte do we
001904  3               	and #7			; want to set first?
001904  3               	tay
001904  3               	lda dots,y 		; table of small pixel positions.
001904  3               	sta z80_e 		; get value.
001904  3               
001904  3               	jsr scadd 		; screen address.
001904  3               	ldy #0
001904  3               	lda (scraddr),y		; see what's already there.
001904  3               	eor z80_e
001904  3               	sta (scraddr),y 	; put back on screen.
001904  3               	rts
001904  3               
001904  3               plot1:
001904  3               	jsr scadd 		; screen address.
001904  3               	ldy #0
001904  3               	lda (scraddr),y 	; fetch byte there.
001904  3               	eor #255 		; toggle all bits.
001904  3               	sta (scraddr),y 	; new byte.
001904  3               	rts
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Switch off shrapnel
001904  3               ;----------------------------------------------------
001904  3               
001904  3               kilshr:
001904  3               	lda #128
001904  3               	ldy #0
001904  3               	sta (z80_ix),y	; switch off shrapnel.
001904  3               	rts
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Sine/cosine table
001904  3               ;----------------------------------------------------
001904  3               
001904  3               shrsin:	.word 0,1024,391,946,724,724,946,391
001904  3               	.word 1024,0,946,65144,724,64811,391,64589
001904  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
001904  3               	.word 64512,0,64589,391,64811,724,65144,946
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Create trail
001904  3               ;----------------------------------------------------
001904  3               
001904  3               trail:
001904  3               	ldy #1
001904  3               	lda (z80_ix),y 	; time remaining.
001904  3               	sec
001904  3               	sbc #1
001904  3               	sta (z80_ix),y
001904  3               	bne :+
001904  3               	jmp trailk		; time to switch it off.
001904  3               :
001904  3               	jsr qrand		; get a random number.
001904  3               	lsr a 			; x or y axis?
001904  3               	bcc :+
001904  3               	jmp trailv		; use y.
001904  3               :
001904  3               ; Trail horizontal
001904  3               
001904  3               	lsr a 			; which direction?
001904  3               	bcc :+
001904  3               	jmp traill		; go left.
001904  3               :
001904  3               ; Trail right
001904  3               
001904  3               	ldy #5
001904  3               	lda (z80_ix),y
001904  3               	clc
001904  3               	adc #1	 		; go right.
001904  3               	sta (z80_ix),y
001904  3               	rts
001904  3               
001904  3               ; Trail left
001904  3               
001904  3               traill:
001904  3               	ldy #5
001904  3               	lda (z80_ix),y
001904  3               	sec
001904  3               	sbc #1 			; go left.
001904  3               	sta (z80_ix),y
001904  3               	rts
001904  3               
001904  3               ; Trail vertical
001904  3               
001904  3               trailv:
001904  3               	lsr a		 	; which direction?
001904  3               	bcc :+
001904  3               	jmp trailu		; go up.
001904  3               :
001904  3               ; Trail down
001904  3               
001904  3               	ldy #3
001904  3               	lda (z80_ix),y
001904  3               	clc
001904  3               	adc #1 			; go down.
001904  3               	sta (z80_ix),y
001904  3               	rts
001904  3               
001904  3               ; Trail up
001904  3               
001904  3               trailu:
001904  3               	ldy #3
001904  3               	lda (z80_ix),y
001904  3               	sec
001904  3               	sbc #1 			; go up.
001904  3               	sta (z80_ix),y
001904  3               	rts
001904  3               
001904  3               ; Kill trail
001904  3               
001904  3               trailk:
001904  3               	lda #200		; set off-screen to kill vapour trail.
001904  3               	ldy #3
001904  3               	sta (z80_ix),y
001904  3               	rts
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Create laser beam
001904  3               ;----------------------------------------------------
001904  3               
001904  3               laser:
001904  3               	ldy #1
001904  3               	lda (z80_ix),y 		; direction.
001904  3               	ror a 			; left or right?
001904  3               	bcs :+
001904  3               	jmp laserl		; move left.
001904  3               :
001904  3               ; Laser right
001904  3               
001904  3               	lda #8			; distance to travel.
001904  3               	sta z80_b
001904  3               	jmp laserm		; move laser.
001904  3               
001904  3               ; Laser left
001904  3               
001904  3               laserl:
001904  3               	lda #248		; distance to travel.
001904  3               	sta z80_b
001904  3               laserm:
001904  3               	ldy #5
001904  3               	lda (z80_ix),y		; x position.
001904  3               	clc
001904  3               	adc z80_b		; add distance.
001904  3               	sta (z80_ix),y		; set new x coordinate.
001904  3               
001904  3               ; Test new block.
001904  3               
001904  3               	sta dispx 		; set x for block collision detection purposes.
001904  3               	ldy #3
001904  3               	lda (z80_ix),y 		; get y.
001904  3               	sta dispy		; set coordinate for collision test.
001904  3               	jsr tstbl 		; get block type there.
001904  3               	cmp #WALL		; is it solid?
001904  3               	bne :+
001904  3               	jmp trailk		; yes, it cannot pass.
001904  3               :
001904  3               .if pflag .or dflag
001904  3                       cmp #FODDER             ; is it fodder?
001904  3                       bne :+
001904  3                       jsr fdchk               ; remove fodder block.
001904  3                       jmp trailk              ; destroy laser.
001904  3               :
001904  3               .endif
001904  3               	rts
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Dots mask
001904  3               ;----------------------------------------------------
001904  3               
001904  3               dots:	.byte 128,64,32,16,8,4,2,1
001904  3               
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Plot, preserving de.
001904  3               ;----------------------------------------------------
001904  3               
001904  3               plotde:
001904  3               	lda z80_d 		; put de on stack.
001904  3               	pha
001904  3               	lda z80_e
001904  3               	pha
001904  3               
001904  3               	jsr plot 		; plot pixel.
001904  3               
001904  3               	pla			; restore de from stack.
001904  3               	sta z80_e
001904  3               	pla
001904  3               	sta z80_d
001904  3               
001904  3               	rts
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Shoot a laser.
001904  3               ;----------------------------------------------------
001904  3               
001904  3               shoot:
001904  3               	sta z80_c		; store direction in c register.
001904  3               	ldy #8
001904  3               	lda (z80_ix),y 		; y coordinate.
001904  3               	clc
001904  3               shoot1:
001904  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
001904  3               	sta z80_l 		; puty y coordinate in l.
001904  3               
001904  3               	ldy #9
001904  3               	lda (z80_ix),y 		; x coordinate in h.
001904  3               	sta z80_h
001904  3               
001904  3               	lda z80_i		; store pointer to sprite.
001904  3               	pha
001904  3               	lda z80_x
001904  3               	pha
001904  3               
001904  3               	jsr fpslot 		; find particle slot.
001904  3               	bcs :+
001904  3               	jmp vapou2		; failed, restore ix.
001904  3               :
001904  3               	lda #0
001904  3               	ldy #0
001904  3               	sta (z80_ix),y 		; set up a laser.
001904  3               
001904  3               	lda z80_c
001904  3               	ldy #1
001904  3               	sta (z80_ix),y 		; set the direction.
001904  3               
001904  3               	lda z80_l
001904  3               	ldy #3
001904  3               	sta (z80_ix),y		; set y coordinate.
001904  3               
001904  3               	ror z80_c		; check direction we want.
001904  3               	bcc :+
001904  3               	jmp shootr		; shoot right.
001904  3               :
001904  3               	lda z80_h		; X position.
001904  3               shoot0:
001904  3               	and #248		; align on character boundary.
001904  3               	ldy #5
001904  3               	sta (z80_ix),y		; set x coordinate.
001904  3               	jmp vapou0 		; draw first image.
001904  3               shootr:
001904  3               	lda z80_h		; x position.
001904  3               	clc
001904  3               	adc #15			; look right.
001904  3               	jmp shoot0		; align and continue.
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Create a bit of vapour trail.
001904  3               ;----------------------------------------------------
001904  3               
001904  3               vapour:
001904  3               	lda z80_i		; store pointer to sprite.
001904  3               	pha
001904  3               	lda z80_x
001904  3               	pha
001904  3               
001904  3               	ldy #8
001904  3               	lda (z80_ix),y 		; y coordinate.
001904  3               	clc
001904  3               vapou3:
001904  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
001904  3               	sta z80_l
001904  3               
001904  3               	ldy #9
001904  3               	lda (z80_ix),y 		; x coordinate.
001904  3               	adc #7
001904  3               	sta z80_h
001904  3               
001904  3               	jsr fpslot 		; find particle slot.
001904  3               	bcc :+
001904  3               	jmp vapou1		; no, we can use it.
001904  3               :
001904  3               vapou2:
001904  3               	pla
001904  3               	sta z80_x
001904  3               	pla
001904  3               	sta z80_i
001904  3               	rts
001904  3               vapou1:
001904  3               	lda z80_l
001904  3               	ldy #3
001904  3               	sta (z80_ix),y		; set up y.
001904  3               
001904  3               	lda z80_h
001904  3               	ldy #5
001904  3               	sta (z80_ix),y 		; set up x coordinate.
001904  3               
001904  3               	jsr qrand		; get quick random number.
001904  3               	and #15			; random time.
001904  3               	clc
001904  3               	adc #15			; minimum time on screen.
001904  3               	ldy #1
001904  3               	sta (z80_ix),y		; set time on screen.
001904  3               
001904  3               	lda #1
001904  3               	ldy #0
001904  3               	sta (z80_ix),y		; define particle as vapour trail.
001904  3               vapou0:
001904  3               	jsr chkxy		; plot first position.
001904  3               	jmp vapou2
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Create a user particle.
001904  3               ;----------------------------------------------------
001904  3               
001904  3               ptusr:
001904  3               	sta z80_f		; store timer.
001904  3               
001904  3               	ldy #8
001904  3               	lda (z80_ix),y 		; y coordinate.
001904  3               	clc
001904  3               	adc #7			; mid-point of sprite.
001904  3               	sta z80_l
001904  3               
001904  3               	ldy #9
001904  3               	lda (z80_ix),y 		; x coordinate.
001904  3               	clc
001904  3               	adc #7			; mid-point of sprite.
001904  3               	sta z80_h
001904  3               
001904  3               	jsr fpslot 		; find particle slot.
001904  3               	bcs ptusr1
001904  3               	rts 			; out of slots, can't generate anything.
001904  3               ptusr1:
001904  3               	lda z80_l
001904  3               	ldy #3
001904  3               	sta (z80_ix),y 		; set up y.
001904  3               
001904  3               	lda z80_h
001904  3               	ldy #5
001904  3               	sta (z80_ix),y		; set up x coordinate.
001904  3               
001904  3               	lda z80_f 		; restore timer.
001904  3               	ldy #1
001904  3               	sta (z80_ix),y		; set time on screen.
001904  3               
001904  3               	lda #7
001904  3               	ldy #0
001904  3               	sta (z80_ix),y		; define particle as user particle.
001904  3               
001904  3               	jmp chkxy		; plot first position.
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Create a vertical or horizontal star.
001904  3               ;----------------------------------------------------
001904  3               
001904  3               star:
001904  3               	lda z80_i		; store pointer to sprite.
001904  3               	pha
001904  3               	lda z80_x
001904  3               	pha
001904  3               
001904  3               	jsr fpslot 		; find particle slot.
001904  3               	bcs star7		; found one we can use.
001904  3               star0:
001904  3               	pla 			; restore sprite pointer.
001904  3               	sta z80_x
001904  3               	pla
001904  3               	sta z80_i
001904  3               	rts 			; out of slots, can't generate anything.
001904  3               star7:
001904  3               	lda z80_c		; direction.
001904  3               	and #3 			; is it left?
001904  3               	bne :+
001904  3               	jmp star1 		; yes, it's left.
001904  3               :
001904  3               	cmp #1 			; is it right?
001904  3               	bne :+
001904  3               	jmp star2 		; yes, it's right.
001904  3               :
001904  3               	cmp #2 			; is it up?
001904  3               	bne :+
001904  3               	jmp star3 		; yes, it's up.
001904  3               :
001904  3               	ldy wntopx 		; get edge of screen.
001904  3               	iny			; down one pixel.
001904  3               	tya
001904  3               star8:
001904  3               	ldy #3
001904  3               	sta (z80_ix),y 		; set y coord.
001904  3               	jsr qrand 		; get quick random number.
001904  3               star9:
001904  3               	ldy #5
001904  3               	sta (z80_ix),y		; set x position.
001904  3               
001904  3               	lda z80_c		; direction.
001904  3               	and #3			; zero to three.
001904  3               	clc
001904  3               	adc #3			; 3 to 6 for starfield.
001904  3               	ldy #0
001904  3               	sta (z80_ix),y		; define particle as star.
001904  3               	jsr chkxy		; plot first position.
001904  3               	jmp star0
001904  3               star1:
001904  3               	jsr qrand		; get quick random number.
001904  3               	ldy #3
001904  3               	sta (z80_ix),y 		; set y coord.
001904  3               
001904  3               	lda wnrgtx 		; get edge of screen.
001904  3               	clc
001904  3               	adc #15			; add width of sprite minus 1.
001904  3               	jmp star9
001904  3               star2:
001904  3               	jsr qrand 		; get quick random number.
001904  3               	ldy #3
001904  3               	sta (z80_ix),y		; set y coord.
001904  3               
001904  3               	lda wnlftx		; get edge of screen.
001904  3               	jmp star9
001904  3               star3:
001904  3               	lda wnbotx 		; get edge of screen.
001904  3               	clc
001904  3               	adc #15 		; height of sprite minus one pixel.
001904  3               	jmp star8
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Find particle slot for lasers or vapour trail.
001904  3               ; can't use alternate accumulator.
001904  3               ;----------------------------------------------------
001904  3               
001904  3               fpslot:
001904  3               	lda #<SHRAPN 		; shrapnel table.
001904  3               	sta z80_x
001904  3               	lda #>SHRAPN
001904  3               	sta z80_i
001904  3               
001904  3               	lda #NUMSHR		; number of pieces in table.
001904  3               	sta z80_b
001904  3               fpslt0:
001904  3               	ldy #0
001904  3               	lda (z80_ix),y		; get type.
001904  3               	asl a  			; is this slot in use?
001904  3               	bcc :+
001904  3               	rts			; no, we can use it.
001904  3               :
001904  3               	clc			; point to more shrapnel.
001904  3               	lda z80_x
001904  3               	adc #SHRSIZ
001904  3               	sta z80_x
001904  3               	bcc :+
001904  3               	inc z80_i
001904  3               :
001904  3               	dec z80_b		; repeat for all shrapnel.
001904  3               	bne fpslt0
001904  3               
001904  3               	clc
001904  3               	rts 			; out of slots, can't generate anything.
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Create an explosion at sprite position.
001904  3               ;----------------------------------------------------
001904  3               
001904  3               explod:
001904  3               	sta z80_c 		; particles to create.
001904  3               
001904  3               	lda z80_i 		; store pointer to sprite.
001904  3               	pha
001904  3               	lda z80_x
001904  3               	pha
001904  3               
001904  3               	ldy #8
001904  3               	lda (z80_ix),y 		; y coordinate.
001904  3               	sta z80_l
001904  3               	ldy #9
001904  3               	lda (z80_ix),y		; x coordinate.
001904  3               	sta z80_h
001904  3               
001904  3               	lda #<SHRAPN		; shrapnel table.
001904  3               	sta z80_x
001904  3               	lda #>SHRAPN
001904  3               	sta z80_i
001904  3               
001904  3               	lda #NUMSHR		; number of pieces in table.
001904  3               	sta explcnt
001904  3               expld0:
001904  3               	ldy #0
001904  3               	lda (z80_ix),y		; get type.
001904  3               	asl a 			; is this slot in use?
001904  3               	bcs expld1		; no, we can use it.
001904  3               expld2:
001904  3               	clc
001904  3               	lda z80_x
001904  3               	adc #SHRSIZ
001904  3               	sta z80_x
001904  3               	bcc :+
001904  3               	inc z80_i
001904  3               :
001904  3               	dec explcnt		; repeat for all shrapnel.
001904  3               	bne expld0
001904  3               expld3:
001904  3               	pla			; restore sprite pointer.
001904  3               	sta z80_x
001904  3               	pla
001904  3               	sta z80_i
001904  3               	rts 			; out of slots, can't generate any more.
001904  3               
001904  3               expld1:
001904  3               	lda z80_c		; shrapnel counter.
001904  3               	and #15			; 0 to 15.
001904  3               	clc			; add to x.
001904  3               	adc z80_l
001904  3               	ldy #3
001904  3               	sta (z80_ix),y		; y coord.
001904  3               
001904  3               	lda seed3 		; crap random number.
001904  3               	and #15			; 0 to 15.
001904  3               	clc 			; add to y.
001904  3               	adc z80_h
001904  3               	ldy #5
001904  3               	sta (z80_ix),y		; x coord.
001904  3               
001904  3               	lda #2
001904  3               	ldy #0
001904  3               	sta (z80_ix),y		; switch it on.
001904  3               
001904  3               	jsr chkxy		; plot first position.
001904  3               	jsr qrand		; quick random angle.
001904  3               	and #60 		; keep within range.
001904  3               	ldy #1
001904  3               	sta (z80_ix),y		; angle.
001904  3               
001904  3               	dec z80_c		; one less piece of shrapnel to generate.
001904  3               	bne expld2 		; back to main explosion loop.
001904  3               	jmp expld3 		; restore sprite pointer and exit.
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Quick random
001904  3               ;----------------------------------------------------
001904  3               
001904  3               qrand:
001904  3               	jsr random		; r register.
001904  3               	eor seed3		; combine with seed.
001904  3               	sta seed3 		; new seed.
001904  3               	rts
001904  3               
001904  3               ;----------------------------------------------------
001904  3               ; Display all shrapnel.
001904  3               ;----------------------------------------------------
001904  3               
001904  3               dshrp:
001904  3               	lda #<plotde		; display routine.
001904  3               	sta proshx+1
001904  3               	lda #>plotde
001904  3               	sta proshx+2
001904  3               	jsr proshr		; process shrapnel.
001904  3               
001904  3               	lda #<prosh1		; processing routine.
001904  3               	sta proshx+1
001904  3               	lda #>prosh1
001904  3               	sta proshx+2
001904  3               	rts
001904  3               
001904  3               ;------------------------------------------------------
001904  3               ; Particle engine.
001904  3               ;
001904  3               ; Init particle data for 55 particles in SHRAPN table.
001904  3               ; Every particle has 6 bytes.
001904  3               ;
001904  3               ; global:	-
001904  3               ; local:	x,y,hl
001904  3               ; calls:	-
001904  3               ;------------------------------------------------------
001904  3               
001904  3               inishr:
001904  3               	lda #<SHRAPN 		; table.
001904  3               	sta z80_l
001904  3               	lda #>SHRAPN
001904  3               	sta z80_h
001904  3               
001904  3               	ldy #0
001904  3               	ldx #NUMSHR		; shrapnel pieces to process.
001904  3               inish0:
001904  3               	lda #255 		; kill the shrapnel.
001904  3               	sta (z80_hl),y
001904  3               
001904  3               	clc 			; point there.
001904  3               	lda z80_l
001904  3               	adc #SHRSIZ		; distance to next.
001904  3               	sta z80_l
001904  3               	bcc :+
001904  3               	inc z80_h
001904  3               :
001904  3               	dex
001904  3               	bne inish0 		; round again.
001904  3               	rts
001904  3               
001904  3               ;------------------------------------------------------
001904  3               ; Check for collision between laser and sprite.
001904  3               ;------------------------------------------------------
001904  3               
001904  3               lcol:
001904  3               	lda #<SHRAPN		; shrapnel table.
001904  3               	sta z80_l
001904  3               	lda #>SHRAPN
001904  3               	sta z80_h
001904  3               
001904  3               	lda #NUMSHR		; number of pieces in table.
001904  3               	sta z80_b
001904  3               lcol0:
001904  3               	ldy #0
001904  3               	lda (z80_hl),y 		; get type.
001904  3               	beq lcol1		; yes, check collision.
001904  3               lcol3:
001904  3               	clc			; point to more shrapnel.
001904  3               	lda z80_l
001904  3               	adc #SHRSIZ
001904  3               	sta z80_l
001904  3               	bcc :+
001904  3               	inc z80_h
001904  3               :
001904  3               	dec z80_b		; repeat for all shrapnel.
001904  3               	bne lcol0
001904  3               	clc
001904  3               	rts 			; no collision, carry not set.
001904  3               lcol1:
001904  3               	ldy #3
001904  3               	lda (z80_hl),y		; get y.
001904  3               	sec
001904  3               	ldy #8
001904  3               	sbc (z80_ix),y		; subtract sprite y.
001904  3               lcolh:
001904  3               	cmp #SPR_HGT 		; within range?
001904  3               	bcc :+
001904  3               	jmp lcol2		; no, missed.
001904  3               :
001904  3               	ldy #5
001904  3               	lda (z80_hl),y 		; get x.
001904  3               	sec
001904  3               	ldy #9
001904  3               	sbc (z80_ix),y 		; subtract sprite y.
001904  3               	cmp #16			; within range?
001904  3               	bcs :+
001904  3               	jmp lcol4 		; yes, collision occurred.
001904  3               :
001904  3               lcol2:
001904  3               	jmp lcol3
001904  3               lcol4:
001904  3               	sec
001904  3               	rts 			; return with carry set for collision.
001904  3               .endif
001904  3               
001904  3               ;------------------------------------------------------
001904  3               ; Main game engine code starts here.
001904  3               ; After initialisation, mloop is the main loop
001904  3               ;------------------------------------------------------
001904  3               
001904  3               game:
001904  3               
001904  3               ; Set up screen address table.
001904  3               
001904  3               setsat:
001904  3  A9 00        	lda #<ScreenAddr		; start of screen.
001906  3  85 rr        	sta scraddr
001908  3  A9 68        	lda #>ScreenAddr
00190A  3  85 rr        	sta scraddr+1
00190C  3               
00190C  3  A0 00        	ldy #0			; vertical lines on screen.
00190E  3               setsa0:
00190E  3  A5 rr        	lda scraddr
001910  3  99 00 06     	sta SCADTB_lb,y		; write low byte.
001913  3  A5 rr        	lda scraddr+1
001915  3  99 00 07     	sta SCADTB_hb,y		; write high byte.
001918  3  20 BC 10     	jsr nline		; next line down.
00191B  3  C8           	iny			; next position in table.
00191C  3  D0 F0        	bne setsa0
00191E  3               
00191E  3               ; Init graphics mode
00191E  3               
00191E  3  20 46 0F     	jsr screeninit
001921  3               
001921  3               ; Init AtoMMC joystick
001921  3  20 0C 0F     	jsr joyinit		; AtoMMC joystick on PORT B
001924  3               
001924  3               rpblc2:
001924  3               .if pflag
001924  3               	jsr inishr 		; initialise particle engine.
001924  3               .endif
001924  3               evintr:
001924  3  20 FA 31     	jsr evnt12 		; call intro/menu event.
001927  3               
001927  3  A9 02        	lda #WALL 		; write default property.
001929  3  A2 00        	ldx #0
00192B  3               clrmap:
00192B  3  9D 00 03     	sta MAP,x 		; block properties.
00192E  3  9D 00 04     	sta MAP+256,x
001931  3  9D 00 05     	sta MAP+512,x
001934  3  E8           	inx			; next byte.
001935  3  D0 F4        	bne clrmap
001937  3               .if oflag
001937  3  20 76 18     	jsr iniob 		; initialise objects.
00193A  3               .endif
00193A  3  A9 00        	lda #0			; put zero in accumulator.
00193C  3  85 rr        	sta gamwon		; reset game won flag.
00193E  3               
00193E  3  20 A3 1A     	jsr inisc 		; init the score.
001941  3               mapst:
001941  3  AD DC 29     	lda stmap 		; start position on map.
001944  3  8D 9A 29     	sta roomtb		; set up position in table, if there is one.
001947  3               
001947  3               inipbl:
001947  3               .if aflag
001947  3               .if swrflag
001947  3               	lda #<(eop + data_address - data_start)		; reset blockpointer
001947  3               	sta pbptr
001947  3               	lda #>(eop + data_address - data_start)
001947  3               	sta pbptr+1
001947  3               .else
001947  3               	lda #<eop		; reset blockpointer
001947  3               	sta pbptr
001947  3               	lda #>eop
001947  3               	sta pbptr+1
001947  3               .endif
001947  3               .endif
001947  3  20 2E 26     	jsr initsc 		; set up first screen.
00194A  3               
00194A  3  A9 89        	lda #<ssprit 		; default to spare sprite in table.
00194C  3  85 rr        	sta z80_x
00194E  3  A9 29        	lda #>ssprit
001950  3  85 rr        	sta z80_i
001952  3               evini:
001952  3  20 94 32     	jsr evnt13 		; initialisation.
001955  3               
001955  3               ; Two restarts.
001955  3               ; First restart - clear all sprites and initialise everything.
001955  3               
001955  3               rstrt:
001955  3  20 43 1A     	jsr rsevt 		; restart events.
001958  3  20 69 18     	jsr xspr 		; clear sprite table.
00195B  3  20 9A 27     	jsr sprlst 		; fetch pointer to screen sprites.
00195E  3  20 23 28     	jsr ispr 		; initialise sprite table.
001961  3               
001961  3  4C 70 19     	jmp rstrt0
001964  3               
001964  3               ; Second restart - clear all but player, and don't initialise him.
001964  3               
001964  3               rstrtn:
001964  3  20 43 1A     	jsr rsevt		; restart events.
001967  3  20 C7 27     	jsr nspr 		; clear all non-player sprites.
00196A  3  20 9A 27     	jsr sprlst 		; fetch pointer to screen sprites.
00196D  3  20 60 28     	jsr kspr 		; initialise sprite table, no more players.
001970  3               
001970  3               ; Set up the player and/or enemy sprites.
001970  3               
001970  3               rstrt0:
001970  3  A9 00        	lda #0 			; zero in accumulator.
001972  3  85 rr        	sta nexlev 		; reset next level flag.
001974  3  85 rr        	sta restfl 		; reset restart flag.
001976  3  85 rr        	sta deadf 		; reset dead flag.
001978  3  20 21 1F     	jsr droom 		; show screen layout.
00197B  3               rpblc0:
00197B  3               .if pflag
00197B  3               	jsr inishr 		; initialise particle engine.
00197B  3               .endif
00197B  3               .if aflag
00197B  3               	jsr rbloc		; draw blocks for this screen
00197B  3               .endif
00197B  3               .if oflag
00197B  3  20 F3 1A     	jsr shwob		; draw objects.
00197E  3               .endif
00197E  3               
00197E  3  A9 00        	lda #<sprtab 		; address of sprite table, even sprites.
001980  3  85 rr        	sta z80_x
001982  3  A9 0B        	lda #>sprtab
001984  3  85 rr        	sta z80_i
001986  3  20 F8 23     	jsr dspr 		; display sprites.
001989  3               
001989  3  A9 11        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00198B  3  85 rr        	sta z80_x
00198D  3  A9 0B        	lda #>(sprtab+TABSIZ)
00198F  3  85 rr        	sta z80_i
001991  3  20 F8 23     	jsr dspr 		; display sprites.
001994  3               mloop:
001994  3  20 24 0F     	jsr vsync 		; synchronise with display.
001997  3               
001997  3  A9 00        	lda #<sprtab 		; address of sprite table, even sprites.
001999  3  85 rr        	sta z80_x
00199B  3  A9 0B        	lda #>sprtab
00199D  3  85 rr        	sta z80_i
00199F  3  20 F8 23     	jsr dspr 		; display even sprites.
0019A2  3               
0019A2  3               ;	jsr plsnd 		; play sounds.
0019A2  3  20 24 0F     	jsr vsync 		; synchronise with display.
0019A5  3               
0019A5  3  A9 11        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0019A7  3  85 rr        	sta z80_x
0019A9  3  A9 0B        	lda #>(sprtab+TABSIZ)
0019AB  3  85 rr        	sta z80_i
0019AD  3  20 F8 23     	jsr dspr 		; display odd sprites.
0019B0  3               
0019B0  3  A9 89        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0019B2  3  85 rr        	sta z80_x
0019B4  3  A9 29        	lda #>(ssprit)
0019B6  3  85 rr        	sta z80_i
0019B8  3               evlp1:
0019B8  3  20 CA 2F     	jsr evnt10 		; called once per main loop.
0019BB  3  20 76 23     	jsr pspr 		; process sprites.
0019BE  3               
0019BE  3               ; Main loop events.
0019BE  3               
0019BE  3  A9 89        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0019C0  3  85 rr        	sta z80_x
0019C2  3  A9 29        	lda #>ssprit
0019C4  3  85 rr        	sta z80_i
0019C6  3               evlp2:
0019C6  3  20 F9 31     	jsr evnt11 		; called once per main loop.
0019C9  3               bsortx:
0019C9  3  20 EC 22     	jsr bsort 		; sort sprites.
0019CC  3               
0019CC  3  A5 rr        	lda nexlev		; finished level flag.
0019CE  3  D0 1F        	bne newlev		; is set, go to next level.
0019D0  3  A5 rr        	lda gamwon		; finished game flag.
0019D2  3  D0 2A        	bne evwon		; is set, finish the game.
0019D4  3  A5 rr        	lda restfl 		; finished level flag.
0019D6  3  C9 01        	cmp #1			; has it been set?
0019D8  3  D0 03        	bne :+
0019DA  3  4C 55 19     	jmp rstrt		; yes, go to next level.
0019DD  3               :
0019DD  3  C9 02        	cmp #2			; has it been set?
0019DF  3  D0 03        	bne :+
0019E1  3  4C 64 19     	jmp rstrtn		; yes, go to next level.
0019E4  3               :
0019E4  3  A5 rr        	lda deadf 		; dead flag.
0019E6  3  D0 1C        	bne pdead		; yes, player dead.
0019E8  3               
0019E8  3               ; back to start of main loop.
0019E8  3               
0019E8  3  E6 rr        	inc frmno
0019EA  3  E6 rr        	inc clock
0019EC  3  4C 94 19     	jmp mloop		; switched to a jmp mloop during test mode.
0019EF  3               
0019EF  3               ;----------------------------------------------------------
0019EF  3               ; Read blocks from list and update screen accordingly.
0019EF  3               ;----------------------------------------------------------
0019EF  3               
0019EF  3               .if aflag
0019EF  3               rbloc:
0019EF  3               .if swrflag
0019EF  3               	lda #<(eop + data_address - data_start)		; reset blockpointer
0019EF  3               	sta pbbuf
0019EF  3               	lda #>(eop + data_address - data_start)
0019EF  3               	sta pbbuf+1
0019EF  3               .else
0019EF  3               	lda #<eop		; reset blockpointer
0019EF  3               	sta pbbuf
0019EF  3               	lda #>eop
0019EF  3               	sta pbbuf+1
0019EF  3               .endif
0019EF  3               
0019EF  3               rbloc2:
0019EF  3               	lda pbbuf			; check for last block
0019EF  3               	cmp pbptr
0019EF  3               	bne rbloc1
0019EF  3               	lda pbbuf+1
0019EF  3               	cmp pbptr+1
0019EF  3               	bne rbloc1
0019EF  3               	rts
0019EF  3               rbloc1:
0019EF  3               	ldy #0
0019EF  3               	lda (pbbuf),y		; check if block for this scno
0019EF  3               	cmp scno
0019EF  3               	bne rbloc0		; if not, skip
0019EF  3               	iny
0019EF  3               	lda (pbbuf),y		; get y
0019EF  3               	sta dispy
0019EF  3               	iny
0019EF  3               	lda (pbbuf),y		; get x
0019EF  3               	sta dispx
0019EF  3               	iny
0019EF  3               	lda (pbbuf),y		; get blocknr
0019EF  3               	jsr pattr2		; draw block
0019EF  3               rbloc0:
0019EF  3               	clc			; point to next block
0019EF  3               	lda pbbuf
0019EF  3               	adc #4
0019EF  3               	sta pbbuf
0019EF  3               	bcc rbloc2
0019EF  3               	inc pbbuf+1
0019EF  3               	jmp rbloc2
0019EF  3               .endif
0019EF  3               
0019EF  3               ;----------------------------------------------------------
0019EF  3               ; New level
0019EF  3               ;----------------------------------------------------------
0019EF  3               
0019EF  3               newlev:
0019EF  3  A5 rr        	lda scno 			; current screen.
0019F1  3  18           	clc
0019F2  3  69 01        	adc #1				; next screen.
0019F4  3               .if swrflag
0019F4  3  CD 82 A0     	cmp numsc + data_address - data_start			; total number of screens.
0019F7  3               .else
0019F7  3               	cmp numsc 			; total number of screens.
0019F7  3               .endif
0019F7  3  B0 05        	bcs evwon			; yes, game finished.
0019F9  3  85 rr        	sta scno			; set new level number.
0019FB  3  4C 55 19     	jmp rstrt			; restart, clearing all aliens.
0019FE  3               
0019FE  3               evwon:
0019FE  3  20 4C 34     	jsr evnt18		 	; game completed.
001A01  3  4C 18 1A     	jmp tidyup			; tidy up and return to BASIC/calling routine.
001A04  3               
001A04  3               ;----------------------------------------------------------
001A04  3               ; Player dead.
001A04  3               ;----------------------------------------------------------
001A04  3               
001A04  3               pdead:
001A04  3  A9 00        	lda #0				; zeroise accumulator.
001A06  3  85 rr        	sta deadf			; reset dead flag.
001A08  3               evdie:
001A08  3  20 07 34     	jsr evnt16 			; death subroutine.
001A0B  3  A5 rr        	lda numlif			; number of lives.
001A0D  3  F0 03        	beq :+
001A0F  3  4C 55 19     	jmp rstrt 			; restart game.
001A12  3               :
001A12  3               evfail:
001A12  3  20 19 34     	jsr evnt17 			; failure event.
001A15  3  4C 04 19     	jmp game			; restart game
001A18  3               
001A18  3               ;----------------------------------------------------------
001A18  3               ; Tidy things up
001A18  3               ;----------------------------------------------------------
001A18  3               
001A18  3               tidyup:
001A18  3  A0 00        	ldy #0				; digits to check.
001A1A  3               tidyu2:
001A1A  3  B9 B5 1C     	lda score,y 			; get score digit.
001A1D  3  CD BB 1C     	cmp hiscor 			; are we larger than high score digit?
001A20  3  90 07        	bcc tidyu0			; high score is bigger.
001A22  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
001A24  3  C8           	iny				; next digit of high score.
001A25  3  C0 06        	cpy #6
001A27  3  D0 F1        	bne tidyu2			; repeat for all digits
001A29  3               tidyu0:
001A29  3  A9 B5        	lda #<score			; return pointing to score.
001A2B  3  85 rr        	sta z80_c
001A2D  3  A9 1C        	lda #>score
001A2F  3  85 rr        	sta z80_b
001A31  3  60           	rts
001A32  3               tidyu1:
001A32  3  A0 05        	ldy #5
001A34  3               tidyu3:
001A34  3  B9 B5 1C     	lda score,y			; score.
001A37  3  99 BB 1C     	sta hiscor,y			; high score.
001A3A  3  88           	dey
001A3B  3  10 F7        	bpl tidyu3 			; copy score to high score.
001A3D  3               evnewh:
001A3D  3  20 14 35     	jsr evnt19			; new high score event.
001A40  3  4C 29 1A     	jmp tidyu0			; tidy up.
001A43  3               
001A43  3               ;--------------------------------------------------
001A43  3               ; Restart event.
001A43  3               ;--------------------------------------------------
001A43  3               
001A43  3               rsevt:
001A43  3  A9 89        	lda #<ssprit 			; default to spare element in table.
001A45  3  85 rr        	sta z80_x
001A47  3  A9 29        	lda #>ssprit
001A49  3  85 rr        	sta z80_i
001A4B  3               evrs:
001A4B  3  4C E1 33     	jmp evnt14	 		; call restart event.
001A4E  3               
001A4E  3               ;------------------------------------------------------------------
001A4E  3               ; Copy number passed in a to string position bc, right-justified.
001A4E  3               ;
001A4E  3               ; Input:
001A4E  3               ;  A  = number
001A4E  3               ;  BC = string address
001A4E  3               ;
001A4E  3               ; Output:
001A4E  3               ;  BC = string with number
001A4E  3               ;-----------------------------------------------------------------
001A4E  3               
001A4E  3               num2ch:
001A4E  3  85 rr        	sta z80_d		; Save number
001A50  3               
001A50  3  A9 00        	lda #0
001A52  3  85 rr        	sta flag
001A54  3               numdg3:
001A54  3  A2 64        	ldx #100		; hundreds column.
001A56  3  86 rr        	stx z80_e
001A58  3  20 68 1A     	jsr numdg		; show digit.
001A5B  3               numdg2:
001A5B  3  A2 0A        	ldx #10			; tens column.
001A5D  3  86 rr        	stx z80_e
001A5F  3  20 68 1A     	jsr numdg		; show digit.
001A62  3               
001A62  3  E6 rr        	inc flag
001A64  3  A2 01        	ldx #1			; units column.
001A66  3  86 rr        	stx z80_e
001A68  3               numdg:
001A68  3  A9 30        	lda #48			; clear digit.
001A6A  3  85 rr        	sta z80_a
001A6C  3               numdg1:
001A6C  3  A5 rr        	lda z80_d
001A6E  3  C5 rr        	cmp z80_e
001A70  3  90 0E        	bcc numdg0		; nothing to show.
001A72  3  38           	sec
001A73  3  A5 rr        	lda z80_d
001A75  3  E5 rr        	sbc z80_e		; subtract from column.
001A77  3  85 rr        	sta z80_d
001A79  3  E6 rr        	inc z80_a		; increment digit.
001A7B  3  E6 rr        	inc flag
001A7D  3  4C 6C 1A     	jmp numdg1		; repeat until column is zero.
001A80  3               numdg0:
001A80  3  A0 00        	ldy #0
001A82  3  A5 rr        	lda z80_a
001A84  3  91 rr        	sta (z80_bc),y		; write digit to buffer.
001A86  3  A5 rr        	lda flag
001A88  3  F0 06        	beq :+
001A8A  3  E6 rr        	inc z80_c		; next buffer position.
001A8C  3  D0 02        	bne :+
001A8E  3  E6 rr        	inc z80_b
001A90  3               :
001A90  3  60           	rts
001A91  3               num2dd:
001A91  3  85 rr        	sta z80_d		; Save number
001A93  3               
001A93  3  A9 01        	lda #1
001A95  3  85 rr        	sta flag
001A97  3               
001A97  3  4C 5B 1A     	jmp numdg2
001A9A  3               num2td:
001A9A  3  85 rr        	sta z80_d		; Save number
001A9C  3               
001A9C  3  A9 01        	lda #1
001A9E  3  85 rr        	sta flag
001AA0  3  4C 54 1A     	jmp numdg3
001AA3  3               
001AA3  3               ;---------------------------------------------------------
001AA3  3               ; Reset score to "000000"
001AA3  3               ;---------------------------------------------------------
001AA3  3               
001AA3  3               inisc:
001AA3  3  A9 30        	lda #'0'
001AA5  3  A2 05        	ldx #5			; digits to initialise.
001AA7  3               inisc0:
001AA7  3  9D B5 1C     	sta score,x 		; write zero digit.
001AAA  3  CA           	dex			; next column.
001AAB  3  10 FA        	bpl inisc0		; repeat for all digits.
001AAD  3               
001AAD  3  60           	rts
001AAE  3               
001AAE  3               ;-----------------------------------------------------
001AAE  3               ; Multiply h by d and return in hl.
001AAE  3               ;
001AAE  3               ; Input:
001AAE  3               ;  H = first number
001AAE  3               ;  D = second number
001AAE  3               ;
001AAE  3               ; Output:
001AAE  3               ;  HL = result H x D
001AAE  3               ;-----------------------------------------------------
001AAE  3               
001AAE  3               imul:
001AAE  3  A5 rr        	lda z80_d		; HL = H * D
001AB0  3  85 rr        	sta z80_e
001AB2  3  A5 rr        	lda z80_h
001AB4  3  85 rr        	sta z80_c		; make c first multiplier.
001AB6  3               imul0:
001AB6  3  A9 00        	lda #0			; zeroise total.
001AB8  3  85 rr        	sta z80_l
001ABA  3  85 rr        	sta z80_h
001ABC  3               
001ABC  3  A5 rr        	lda z80_h
001ABE  3  85 rr        	sta z80_d		; zeroise high byte.
001AC0  3               
001AC0  3  A9 08        	lda #8			; repeat 8 times.
001AC2  3  85 rr        	sta z80_b
001AC4  3               imul1:
001AC4  3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
001AC6  3  90 0E        	bcc imul2		; wasn't set.
001AC8  3  18           	clc			; bit was set, so add de.
001AC9  3  A5 rr        	lda z80_l
001ACB  3  65 rr        	adc z80_e
001ACD  3  85 rr        	sta z80_l
001ACF  3  A5 rr        	lda z80_h
001AD1  3  65 rr        	adc z80_d
001AD3  3  85 rr        	sta z80_h
001AD5  3  18           	clc 			; reset carry.
001AD6  3               imul2:
001AD6  3  06 rr        	asl z80_e 		; shift de 1 bit left.
001AD8  3  26 rr        	rol z80_d
001ADA  3  C6 rr        	dec z80_b
001ADC  3  D0 E6        	bne imul1		; repeat 8 times.
001ADE  3               
001ADE  3  60           	rts
001ADF  3               
001ADF  3               ;-----------------------------------------------
001ADF  3               ; Divide d by e and return in d, remainder in a.
001ADF  3               ;
001ADF  3               ; Input:
001ADF  3               ;  D = first number
001ADF  3               ;  E = second number
001ADF  3               ;
001ADF  3               ; Output:
001ADF  3               ;  D = result D/E
001ADF  3               ;  A = remainder
001ADF  3               ;-----------------------------------------------
001ADF  3               
001ADF  3               idiv:
001ADF  3  A9 00        	lda #0
001AE1  3  A0 08        	ldy #8		 	; bits to shift.
001AE3  3  06 rr        	asl z80_d
001AE5  3               idiv0:
001AE5  3  2A           	rol a 			; multiply d by 2.
001AE6  3  C5 rr        	cmp z80_e 		; test if e is smaller.
001AE8  3  90 02        	bcc idiv1		; e is greater, no division this time.
001AEA  3  E5 rr        	sbc z80_e		; subtract it.
001AEC  3               idiv1:
001AEC  3  26 rr        	rol z80_d		; rotate into d.
001AEE  3  88           	dey
001AEF  3  D0 F4        	bne idiv0		; repeat
001AF1  3  60           	rts
001AF2  3               
001AF2  3               ;---------------------------------------------------
001AF2  3               ; Play AY sound effect
001AF2  3               ;---------------------------------------------------
001AF2  3               
001AF2  3               plsnd:
001AF2  3  60           	rts
001AF3  3               
001AF3  3               ;---------------------------------------------------
001AF3  3               ; Objects handling.
001AF3  3               ; 32 bytes for image
001AF3  3               ; 3 for room, y and x
001AF3  3               ; 3 for starting room, y and x.
001AF3  3               ; 254 = disabled.
001AF3  3               ; 255 = object in player"s pockets.
001AF3  3               ;---------------------------------------------------
001AF3  3               
001AF3  3               ;---------------------------------------------------
001AF3  3               ; Show items present.
001AF3  3               ;---------------------------------------------------
001AF3  3               
001AF3  3               .if oflag
001AF3  3               shwob:
001AF3  3               .if swrflag
001AF3  3  A9 41        	lda #<(objdta + data_address - data_start) 			; objects table.
001AF5  3  85 rr        	sta z80_l
001AF7  3  A9 A2        	lda #>(objdta + data_address - data_start)
001AF9  3  85 rr        	sta z80_h
001AFB  3               .else
001AFB  3               	lda #<objdta			; objects table.
001AFB  3               	sta z80_l
001AFB  3               	lda #>objdta
001AFB  3               	sta z80_h
001AFB  3               .endif
001AFB  3  AD 08 16     	lda numob 			; number of objects in the game.
001AFE  3  85 rr        	sta sprcnt
001B00  3               shwob0:
001B00  3  A0 20        	ldy #32 			; distance to room number.
001B02  3  B1 rr        	lda (z80_hl),y 			; same as an item?
001B04  3  C5 rr        	cmp scno 			; current location.
001B06  3  D0 03        	bne :+
001B08  3  20 1D 1B     	jsr dobj 			; yes, display object.
001B0B  3               :
001B0B  3  18           	clc
001B0C  3  A5 rr        	lda z80_l
001B0E  3  69 26        	adc #38 			; distance to next item.
001B10  3  85 rr        	sta z80_l
001B12  3  A5 rr        	lda z80_h
001B14  3  69 00        	adc #0
001B16  3  85 rr        	sta z80_h	 		; point to it.
001B18  3  C6 rr        	dec sprcnt
001B1A  3  D0 E4        	bne shwob0 			; repeat for others.
001B1C  3  60           	rts
001B1D  3               
001B1D  3               ;---------------------------------------------------
001B1D  3               ; Display object.
001B1D  3               ; hl must point to object's start address.
001B1D  3               ;
001B1D  3               ; Input:
001B1D  3               ;  HL = object address
001B1D  3               ;---------------------------------------------------
001B1D  3               
001B1D  3               dobj:
001B1D  3  A0 21        	ldy #33
001B1F  3  B1 rr        	lda (z80_hl),y 			; point to y.
001B21  3  85 rr        	sta dispy
001B23  3  C8           	iny
001B24  3  B1 rr        	lda (z80_hl),y 			; point to x.
001B26  3  85 rr        	sta dispx
001B28  3               dobj1:
001B28  3  4C 86 0F     	jmp sprite 			; draw this sprite.
001B2B  3               
001B2B  3               ;--------------------------------------
001B2B  3               ; Remove an object.
001B2B  3               ;
001B2B  3               ; Input:
001B2B  3               ;  A = object number
001B2B  3               ;--------------------------------------
001B2B  3               
001B2B  3               remob:
001B2B  3  CD 08 16     	cmp numob			; number of objects in game.
001B2E  3  90 01        	bcc :+				; are we checking past the end?
001B30  3  60           	rts				; yes, can't get non-existent item.
001B31  3               :
001B31  3  48           	pha				; remember object.
001B32  3  20 40 1B     	jsr getob			; pick it up if we haven't already got it.
001B35  3  68           	pla				; retrieve object number.
001B36  3  20 6F 1B     	jsr gotob			; get its address.
001B39  3  A9 FE        	lda #254
001B3B  3  A0 20        	ldy #32
001B3D  3  91 rr        	sta (z80_hl),y			; remove it.
001B3F  3  60           	rts
001B40  3               
001B40  3               ;---------------------------------------------------
001B40  3               ; Pick up object number held in the accumulator.
001B40  3               ;
001B40  3               ; Input:
001B40  3               ;  A = object number
001B40  3               ;---------------------------------------------------
001B40  3               
001B40  3               getob:
001B40  3  CD 08 16     	cmp numob 		; number of objects in game.
001B43  3  90 01        	bcc :+			; are we checking past the end?
001B45  3  60           	rts			; yes, can't get non-existent item.
001B46  3               :
001B46  3  20 6F 1B     	jsr gotob 		; check if we already have it.
001B49  3  C9 FF        	cmp #255
001B4B  3  D0 01        	bne :+
001B4D  3  60           	rts			; we already do.
001B4E  3               :
001B4E  3  A0 20        	ldy #32
001B50  3  B1 rr        	lda (z80_hl),y		; is it on this screen?
001B52  3  C5 rr        	cmp scno 		; current screen.
001B54  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
001B56  3               
001B56  3  A9 FF        	lda #255
001B58  3  91 rr        	sta (z80_hl),y		; pick it up.
001B5A  3  C8           	iny 			; point to y coord.
001B5B  3               getob1:
001B5B  3  A0 21        	ldy #33
001B5D  3  B1 rr        	lda (z80_hl),y		; y coord.
001B5F  3  85 rr        	sta dispy
001B61  3  A0 22        	ldy #34
001B63  3  B1 rr        	lda (z80_hl),y 		; x coord.
001B65  3  85 rr        	sta dispx
001B67  3  4C 28 1B     	jmp dobj1 		; delete object sprite.
001B6A  3               getob0:
001B6A  3  A9 FF        	lda #255
001B6C  3  91 rr        	sta (z80_hl),y 		; pick it up.
001B6E  3  60           	rts
001B6F  3               .endif
001B6F  3               
001B6F  3               ;-----------------------------------------------------------------
001B6F  3               ; Got object check.
001B6F  3               ; Call with object in accumulator, returns zero set if in pockets.
001B6F  3               ;
001B6F  3               ; Input:
001B6F  3               ;  A = object number
001B6F  3               ;-----------------------------------------------------------------
001B6F  3               .if oflag .or mflag
001B6F  3               gotob:
001B6F  3  CD 08 16     	cmp numob 		; number of objects in game.
001B72  3  90 03        	bcc :+ 			; are we checking past the end?
001B74  3  4C 7B 1B     	jmp gotob0 		; yes, we can't have a non-existent object.
001B77  3               :
001B77  3  20 80 1B     	jsr findob		; find the object.
001B7A  3               gotob1:
001B7A  3  60           	rts
001B7B  3               
001B7B  3               gotob0:
001B7B  3  A9 FE        	lda #254 		; missing.
001B7D  3  4C 7A 1B     	jmp gotob1
001B80  3               
001B80  3               findob:
001B80  3  48           	pha			; save object number
001B81  3               .if swrflag
001B81  3  A9 41        	lda #<(objdta + data_address - data_start) 		; objects.
001B83  3  85 rr        	sta z80_l
001B85  3  A9 A2        	lda #>(objdta + data_address - data_start)
001B87  3  85 rr        	sta z80_h
001B89  3               .else
001B89  3               	lda #<objdta 		; objects.
001B89  3               	sta z80_l
001B89  3               	lda #>objdta
001B89  3               	sta z80_h
001B89  3               .endif
001B89  3  68           	pla			; retreive object number
001B8A  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
001B8C  3  AA           	tax 			; loop counter
001B8D  3               fndob2:
001B8D  3  18           	clc
001B8E  3  A5 rr        	lda z80_l
001B90  3  69 26        	adc #38 		; size of each object.
001B92  3  85 rr        	sta z80_l
001B94  3  90 02        	bcc :+
001B96  3  E6 rr        	inc z80_h
001B98  3               :
001B98  3  CA           	dex 			; repeat until we find address.
001B99  3  D0 F2        	bne fndob2
001B9B  3               fndob1:
001B9B  3  A0 20        	ldy #32			; distance to room it's in.
001B9D  3  B1 rr        	lda (z80_hl),y		; fetch status.
001B9F  3  60           	rts
001BA0  3               .endif
001BA0  3               
001BA0  3               ;---------------------------------------------
001BA0  3               ; Drop object number at (dispx, dispy).
001BA0  3               ;
001BA0  3               ; Input:
001BA0  3               ;  A = object number
001BA0  3               ;---------------------------------------------
001BA0  3               
001BA0  3               .if oflag
001BA0  3               drpob:
001BA0  3  CD 08 16     	cmp numob 		; are we checking past the end?
001BA3  3  90 01        	bcc :+
001BA5  3  60           	rts			; yes, can't drop non-existent item.
001BA6  3               :
001BA6  3  20 6F 1B     	jsr gotob		; make sure object is in inventory.
001BA9  3  C5 rr        	cmp scno		; already on this screen?
001BAB  3  D0 01        	bne :+
001BAD  3  60           	rts			; yes, nothing to do.
001BAE  3               :
001BAE  3  A0 20        	ldy #32
001BB0  3  A5 rr        	lda scno
001BB2  3  91 rr        	sta (z80_hl),y		; bring onto screen.
001BB4  3  A5 rr        	lda dispy		; sprite y coordinate.
001BB6  3  C8           	iny
001BB7  3  91 rr        	sta (z80_hl),y		; point to object y.
001BB9  3  A5 rr        	lda dispx 		; sprite x coordinate.
001BBB  3  C8           	iny
001BBC  3  91 rr        	sta (z80_hl),y 		; point to object x
001BBE  3  4C 1D 1B     	jmp dobj		; draw the object sprite.
001BC1  3               
001BC1  3               ;-----------------------------------------------
001BC1  3               ; Seek objects at sprite position.
001BC1  3               ;
001BC1  3               ; Output:
001BC1  3               ;  A = object number, if not found A=255
001BC1  3               ;-----------------------------------------------
001BC1  3               
001BC1  3               skobj:
001BC1  3               .if swrflag
001BC1  3  A9 41        	lda #<(objdta + data_address - data_start) 		; pointer to objects.
001BC3  3  85 rr        	sta z80_l
001BC5  3  A9 A2        	lda #>(objdta + data_address - data_start)
001BC7  3  85 rr        	sta z80_h
001BC9  3               .else
001BC9  3               	lda #<objdta 		; pointer to objects.
001BC9  3               	sta z80_l
001BC9  3               	lda #>objdta
001BC9  3               	sta z80_h
001BC9  3               .endif
001BC9  3               
001BC9  3  AD 08 16     	lda numob 		; number of objects in game.
001BCC  3  85 rr        	sta z80_b 		; set up the loop counter.
001BCE  3               skobj0:
001BCE  3  A5 rr        	lda scno		; current room number.
001BD0  3  A0 20        	ldy #32
001BD2  3  D1 rr        	cmp (z80_hl),y		; is object in here?
001BD4  3  D0 03        	bne :+
001BD6  3  20 EB 1B     	jsr skobj1		; yes, check coordinates.
001BD9  3               :
001BD9  3  18           	clc			; point to next object in table.
001BDA  3  A5 rr        	lda z80_l
001BDC  3  69 26        	adc #38			; size of each object.
001BDE  3  85 rr        	sta z80_l
001BE0  3  90 02        	bcc :+
001BE2  3  E6 rr        	inc z80_h
001BE4  3               :
001BE4  3  C6 rr        	dec z80_b
001BE6  3  D0 E6        	bne skobj0		; repeat for all objects.
001BE8  3               
001BE8  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
001BEA  3  60           	rts
001BEB  3               
001BEB  3               skobj1:
001BEB  3  A0 21        	ldy #33			; point to y coordinate.
001BED  3  B1 rr        	lda (z80_hl),y		; point to y coordinate.
001BEF  3  38           	sec
001BF0  3  A0 08        	ldy #var_newY
001BF2  3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
001BF4  3  18           	clc
001BF5  3  69 0F        	adc #15			; add sprite height minus one.
001BF7  3  C9 1F        	cmp #31			; within range?
001BF9  3  B0 18        	bcs skobj2		; no, ignore object.
001BFB  3               
001BFB  3  A0 22        	ldy #34			; point to x coordinate now.
001BFD  3  B1 rr        	lda (z80_hl),y 		; get coordinate.
001BFF  3  38           	sec
001C00  3  A0 09        	ldy #var_newX
001C02  3  F1 rr        	sbc (z80_ix),y 		; subtract the sprite x.
001C04  3  18           	clc			; add sprite width minus one.
001C05  3  69 0F        	adc #15
001C07  3  C9 1F        	cmp #31			; within range?
001C09  3  B0 08        	bcs skobj2		; no, ignore object.
001C0B  3               
001C0B  3  68           	pla			; remove return address from stack.
001C0C  3  68           	pla
001C0D  3               
001C0D  3  AD 08 16     	lda numob 		; objects in game.
001C10  3  38           	sec
001C11  3  E5 rr        	sbc z80_b		; subtract loop counter.
001C13  3               skobj2:
001C13  3  60           	rts			; accumulator now points to object.
001C14  3               .endif
001C14  3               
001C14  3               ;---------------------------------------------------------------------
001C14  3               ; Spawn a new sprite.
001C14  3               ;---------------------------------------------------------------------
001C14  3               
001C14  3               spawn:
001C14  3  A9 00        	lda #<sprtab		; sprite table.
001C16  3  85 rr        	sta z80_l
001C18  3  A9 0B        	lda #>sprtab
001C1A  3  85 rr        	sta z80_h
001C1C  3               numsp1:
001C1C  3  A9 0C        	lda #NUMSPR		; number of sprites.
001C1E  3  85 rr        	sta spcnt
001C20  3               spaw0:
001C20  3  A0 00        	ldy #var_Type
001C22  3  B1 rr        	lda (z80_hl),y		; get sprite type.
001C24  3  C9 FF        	cmp #255		; is it an unused slot?
001C26  3  F0 0F        	beq spaw1 		; yes, we can use this one.
001C28  3               
001C28  3  18           	clc 			; point to next sprite in table.
001C29  3  A5 rr        	lda z80_l
001C2B  3  69 11        	adc #TABSIZ		; size of each entry.
001C2D  3  85 rr        	sta z80_l
001C2F  3  90 02        	bcc :+
001C31  3  E6 rr        	inc z80_h
001C33  3               :
001C33  3  C6 rr        	dec spcnt		; one less iteration.
001C35  3  D0 E9        	bne spaw0		; keep going until we find a slot.
001C37  3               
001C37  3               ; Didn't find one but drop through and set up a dummy sprite instead.
001C37  3               
001C37  3               spaw1:
001C37  3  A5 rr        	lda z80_i		; address of original sprite.
001C39  3  48           	pha
001C3A  3  A5 rr        	lda z80_x
001C3C  3  48           	pha
001C3D  3               
001C3D  3  A5 rr        	lda z80_l		; store spawned sprite address.
001C3F  3  85 rr        	sta spptr
001C41  3  A5 rr        	lda z80_h
001C43  3  85 rr        	sta spptr+1
001C45  3               
001C45  3  A5 rr        	lda z80_c
001C47  3  A0 00        	ldy #var_Type
001C49  3  91 rr        	sta (z80_hl),y 		; set the type.
001C4B  3  A0 05        	ldy #var_newType
001C4D  3  91 rr        	sta (z80_hl),y		; copy
001C4F  3               
001C4F  3  A5 rr        	lda z80_b
001C51  3  A0 01        	ldy #var_Image
001C53  3  91 rr        	sta (z80_hl),y		; set the image.
001C55  3  A0 06        	ldy #var_newImage
001C57  3  91 rr        	sta (z80_hl),y		; copy
001C59  3               
001C59  3  A9 00        	lda #0 				; frame zero.
001C5B  3  A0 02        	ldy #var_Frame
001C5D  3  91 rr        	sta (z80_hl),y		; set frame.
001C5F  3  A0 07        	ldy #var_newFrame
001C61  3  91 rr        	sta (z80_hl),y		; copy
001C63  3               
001C63  3  A0 08        	ldy #8
001C65  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
001C67  3  A0 03        	ldy #3
001C69  3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
001C6B  3  A0 08        	ldy #8
001C6D  3  91 rr        	sta (z80_hl),y		; copy
001C6F  3               
001C6F  3  A0 09        	ldy #9
001C71  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
001C73  3  A0 04        	ldy #4
001C75  3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
001C77  3  A0 09        	ldy #9
001C79  3  91 rr        	sta (z80_hl),y		; copy
001C7B  3               
001C7B  3  A0 0A        	ldy #10				; direction of original.
001C7D  3  B1 rr        	lda (z80_ix),y
001C7F  3  91 rr        	sta (z80_hl),y		; direction
001C81  3               
001C81  3  A9 00        	lda #0
001C83  3  A0 0D        	ldy #var_jumpLo
001C85  3  91 rr        	sta (z80_hl),y		; reset parameter.
001C87  3  C8           	iny
001C88  3  91 rr        	sta (z80_hl),y		; reset parameter.
001C8A  3  C8           	iny
001C8B  3  91 rr        	sta (z80_hl),y		; reset parameter.
001C8D  3  C8           	iny
001C8E  3  91 rr        	sta (z80_hl),y		; reset parameter.
001C90  3               rtssp:
001C90  3  A5 rr        	lda spptr			; address of new sprite.
001C92  3  85 rr        	sta z80_x
001C94  3  A5 rr        	lda spptr+1
001C96  3  85 rr        	sta z80_i
001C98  3               evis1:
001C98  3  20 82 2F     	jsr evnt09 			; call sprite initialisation event.
001C9B  3               
001C9B  3  A5 rr        	lda spptr 			; address of new sprite.
001C9D  3  85 rr        	sta z80_x
001C9F  3  A5 rr        	lda spptr+1
001CA1  3  85 rr        	sta z80_i
001CA3  3               
001CA3  3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
001CA3  3  A0 03        	ldy #var_Y
001CA5  3  B1 rr        	lda (z80_hl), y		; old x coord
001CA7  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
001CA9  3  B0 03        	bcs :+				; yes, don't draw it.
001CAB  3               
001CAB  3  20 EE 0F     	jsr sspria 			; display the new sprite.
001CAE  3               :
001CAE  3  68           	pla					; address of original sprite.
001CAF  3  85 rr        	sta z80_x
001CB1  3  68           	pla
001CB2  3  85 rr        	sta z80_i
001CB4  3               
001CB4  3  60           	rts
001CB5  3               
001CB5  3  30 30 30 30  score:	.byte "000000"		; player"s score.
001CB9  3  30 30        
001CBB  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
001CBF  3  30 30        
001CC1  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
001CC5  3  30 30        
001CC7  3  00 68        grbase:	.word ScreenAddr	; graphics base address.
001CC9  3               
001CC9  3               ;----------------------------------------------------
001CC9  3               ; Check y-pos
001CC9  3               ;----------------------------------------------------
001CC9  3               
001CC9  3               checkx:
001CC9  3  A5 rr        	lda dispy		; y position.
001CCB  3  C9 18        	cmp #24			; off screen?
001CCD  3  B0 01        	bcs :+
001CCF  3  60           	rts			; no, it's okay.
001CD0  3               :
001CD0  3  68           	pla			; remove return address from stack.
001CD1  3  85 rr        	sta z80_l
001CD3  3  68           	pla
001CD4  3  85 rr        	sta z80_h
001CD6  3  60           	rts
001CD7  3               
001CD7  3               ;-----------------------------------------------
001CD7  3               ; Displays the current high score.
001CD7  3               ;-----------------------------------------------
001CD7  3               
001CD7  3               dhisc:
001CD7  3  A9 BB        	lda #<hiscor 		; high score text.
001CD9  3  8D 0E 1D     	sta dscor3+1
001CDC  3  8D 29 1D     	sta bscor3+1
001CDF  3  A9 1C        	lda #>hiscor
001CE1  3  8D 0F 1D     	sta dscor3+2
001CE4  3  8D 2A 1D     	sta bscor3+2
001CE7  3  4C FA 1C     	jmp dscor1		; check in printable range then show 6 digits.
001CEA  3               
001CEA  3               ;------------------------------------------------------
001CEA  3               ; Displays the current score.
001CEA  3               ;------------------------------------------------------
001CEA  3               
001CEA  3               dscor:
001CEA  3  A9 B5        	lda #<score		; score text.
001CEC  3  8D 0E 1D     	sta dscor3+1
001CEF  3  8D 29 1D     	sta bscor3+1
001CF2  3  A9 1C        	lda #>score
001CF4  3  8D 0F 1D     	sta dscor3+2
001CF7  3  8D 2A 1D     	sta bscor3+2
001CFA  3               dscor1:
001CFA  3  8C 25 1D     	sty tmpscr
001CFD  3  20 C0 22     	jsr preprt		; set up font and print position.
001D00  3  20 C9 1C     	jsr checkx		; make sure we're in a printable range.
001D03  3               
001D03  3               ;	lda #6			; digits to display.
001D03  3               ;	sta z80_b
001D03  3  A5 rr        	lda prtmod		; get print mode.
001D05  3  F0 03        	beq :+			; standard size text?
001D07  3  4C 26 1D     	jmp bscor0		; no, show double-height.
001D0A  3               :
001D0A  3               dscor0:
001D0A  3               ;	ldy #0
001D0A  3               ;	lda (z80_hl),y 		; fetch character.
001D0A  3  AC 25 1D     	ldy tmpscr
001D0D  3               dscor3:
001D0D  3  B9 B5 1C     	lda score,y
001D10  3  20 6F 11     	jsr pchar 		; display character.
001D13  3  E6 rr        	inc dispx		; move along x coordinate
001D15  3               
001D15  3               ;	inc z80_l		; next score column.
001D15  3               ;	bne :+
001D15  3               ;	inc z80_h
001D15  3               ;:
001D15  3  EE 25 1D     	inc tmpscr
001D18  3  C6 rr        	dec z80_b
001D1A  3  D0 EE        	bne dscor0 		; repeat for all digits.
001D1C  3               dscor2:
001D1C  3  A5 rr        	lda dispx 		; set up display coordinates.
001D1E  3  85 rr        	sta charx
001D20  3  A5 rr        	lda dispy
001D22  3  85 rr        	sta chary
001D24  3  60           	rts
001D25  3               
001D25  3  00           tmpscr:	.byte 0
001D26  3               ;------------------------------------------------------
001D26  3               ; Displays the current score in double-height characters.
001D26  3               ;
001D26  3               ; Input:
001D26  3               ;  B  = digit number
001D26  3               ;  HL = score string
001D26  3               ;------------------------------------------------------
001D26  3               
001D26  3               bscor0:
001D26  3               ;	ldy #0
001D26  3               
001D26  3               ;	lda (z80_hl),y 		; fetch character.
001D26  3  A4 rr        	ldy tmp
001D28  3               bscor3:
001D28  3  B9 B5 1C     	lda score,y
001D2B  3  20 47 22     	jsr bchar 		; display big char.
001D2E  3               
001D2E  3               ;	inc z80_l 		; next score column.
001D2E  3               ;	bne :+
001D2E  3               ;	inc z80_h
001D2E  3               ;:
001D2E  3  E6 rr        	inc tmp
001D30  3  C6 rr        	dec z80_b
001D32  3  F0 03        	beq :+
001D34  3  4C 26 1D     	jmp bscor0 		; repeat for all digits.
001D37  3               :
001D37  3  4C 1C 1D     	jmp dscor2 		; tidy up line and column variables.
001D3A  3               
001D3A  3               ;-----------------------------------------------------
001D3A  3               ; Adds number in the hl pair to the score.
001D3A  3               ;-----------------------------------------------------
001D3A  3               
001D3A  3               addsc:
001D3A  3  A9 B6        	lda #<(score+1) 	; ten thousands column.
001D3C  3  85 rr        	sta z80_e
001D3E  3  A9 1C        	lda #>(score+1)
001D40  3  85 rr        	sta z80_d
001D42  3  A9 10        	lda #<10000		; amount to add each time.
001D44  3  85 rr        	sta z80_c
001D46  3  A9 27        	lda #>10000
001D48  3  85 rr        	sta z80_b
001D4A  3  20 8E 1D     	jsr incsc		; add to score.
001D4D  3               
001D4D  3  E6 rr        	inc z80_e		; thousands column.
001D4F  3  D0 02        	bne :+
001D51  3  E6 rr        	inc z80_d
001D53  3               :
001D53  3  A9 E8        	lda #<1000		; amount to add each time.
001D55  3  85 rr        	sta z80_c
001D57  3  A9 03        	lda #>1000
001D59  3  85 rr        	sta z80_b
001D5B  3  20 8E 1D     	jsr incsc 		; add to score.
001D5E  3               
001D5E  3  E6 rr        	inc z80_e		; hundreds column.
001D60  3  D0 02        	bne :+
001D62  3  E6 rr        	inc z80_d
001D64  3               :
001D64  3  A9 64        	lda #<100		; amount to add each time.
001D66  3  85 rr        	sta z80_c
001D68  3  A9 00        	lda #>100
001D6A  3  85 rr        	sta z80_b
001D6C  3  20 8E 1D     	jsr incsc		; add to score.
001D6F  3               
001D6F  3  E6 rr        	inc z80_e 		; tens column.
001D71  3  D0 02        	bne :+
001D73  3  E6 rr        	inc z80_d
001D75  3               :
001D75  3  A9 0A        	lda #<10		; amount to add each time.
001D77  3  85 rr        	sta z80_c
001D79  3  A9 00        	lda #>10
001D7B  3  85 rr        	sta z80_b
001D7D  3  20 8E 1D     	jsr incsc 		; add to score.
001D80  3               
001D80  3  E6 rr        	inc z80_e		; units column.
001D82  3  D0 02        	bne :+
001D84  3  E6 rr        	inc z80_d
001D86  3               :
001D86  3  A9 01        	lda #<1			; units.
001D88  3  85 rr        	sta z80_c
001D8A  3  A9 00        	lda #>1
001D8C  3  85 rr        	sta z80_b
001D8E  3               incsc:
001D8E  3  A5 rr        	lda z80_h		; store amount to add.
001D90  3  48           	pha
001D91  3  A5 rr        	lda z80_l
001D93  3  48           	pha
001D94  3               
001D94  3  38           	sec			; subtract from amount to add.
001D95  3  A5 rr        	lda z80_l
001D97  3  E5 rr        	sbc z80_c
001D99  3  85 rr        	sta z80_l
001D9B  3  A5 rr        	lda z80_h
001D9D  3  E5 rr        	sbc z80_b
001D9F  3  85 rr        	sta z80_h
001DA1  3  90 14        	bcc incsc0		; too much, restore value.
001DA3  3               
001DA3  3  68           	pla			; delete the previous amount from the stack.
001DA4  3  68           	pla
001DA5  3               
001DA5  3  A5 rr        	lda z80_d 		; store column position.
001DA7  3  48           	pha
001DA8  3  A5 rr        	lda z80_e
001DAA  3  48           	pha
001DAB  3  20 BE 1D     	jsr incsc2		; do the increment.
001DAE  3               
001DAE  3  68           	pla			; restore column.
001DAF  3  85 rr        	sta z80_e
001DB1  3  68           	pla
001DB2  3  85 rr        	sta z80_d
001DB4  3  4C 8E 1D     	jmp incsc		; repeat until all added.
001DB7  3               
001DB7  3               incsc0:
001DB7  3  68           	pla			; restore previous value.
001DB8  3  85 rr        	sta z80_l
001DBA  3  68           	pla
001DBB  3  85 rr        	sta z80_h
001DBD  3  60           	rts
001DBE  3               incsc2:
001DBE  3  A0 00        	ldy #0
001DC0  3  B1 rr        	lda (z80_de),y 		; get amount.
001DC2  3  18           	clc
001DC3  3  69 01        	adc #1			; add one to column.
001DC5  3  91 rr        	sta (z80_de),y		; write new column total.
001DC7  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
001DC9  3  B0 01        	bcs :+
001DCB  3  60           	rts			; no, carry on.
001DCC  3               :
001DCC  3  A9 30        	lda #'0'		; make it zero.
001DCE  3  91 rr        	sta (z80_de),y		; write new column total.
001DD0  3  C6 rr        	dec z80_e		; back one column.
001DD2  3  D0 02        	bne :+
001DD4  3  C6 rr        	dec z80_d
001DD6  3               :
001DD6  3  4C BE 1D     	jmp incsc2
001DD9  3               
001DD9  3               ;------------------------------------
001DD9  3               ; Add bonus to score and reset bonus
001DD9  3               ;------------------------------------
001DD9  3               
001DD9  3               addbo:
001DD9  3  A2 05        	ldx #5			; last digit.
001DDB  3  18           	clc
001DDC  3               addbo0:
001DDC  3  BD B5 1C     	lda score,x		; get score.
001DDF  3  7D C1 1C     	adc bonus,x		; add bonus.
001DE2  3  38           	sec			; 0 to 18.
001DE3  3  E9 30        	sbc #48
001DE5  3  48           	pha
001DE6  3  A9 30        	lda #'0'
001DE8  3  9D C1 1C     	sta bonus,x
001DEB  3  68           	pla
001DEC  3  C9 3A        	cmp #58
001DEE  3  90 03        	bcc addbo1
001DF0  3  38           	sec
001DF1  3  E9 0A        	sbc #10
001DF3  3               addbo1:
001DF3  3  9D B5 1C     	sta score,x		; zeroise bonus.
001DF6  3  CA           	dex			; next digit.
001DF7  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
001DF9  3  60           	rts
001DFA  3               
001DFA  3               ;------------------------------------
001DFA  3               ; Swap score and bonus.
001DFA  3               ;------------------------------------
001DFA  3               
001DFA  3               swpsb:
001DFA  3  A2 05        	ldx #5			; digits to add.
001DFC  3               swpsb0:
001DFC  3  BD B5 1C     	lda score,x 		; get score digits.
001DFF  3  48           	pha			; save digit
001E00  3  BD C1 1C     	lda bonus,x 		; get bonus digits.
001E03  3  9D B5 1C     	sta score,x		; switch score-bonus
001E06  3  68           	pla
001E07  3  9D C1 1C     	sta bonus,x
001E0A  3  CA           	dex 			; repeat for all 6 digits.
001E0B  3  10 EF        	bpl swpsb0
001E0D  3  60           	rts
001E0E  3               
001E0E  3               ;----------------------------------------------------
001E0E  3               ; Get print address.
001E0E  3               ;----------------------------------------------------
001E0E  3               
001E0E  3               gprad:
001E0E  3  98           	tya
001E0F  3  48           	pha
001E10  3               
001E10  3  A5 rr        	lda dispx 		; x coordinate.
001E12  3  85 rr        	sta scraddr
001E14  3  A9 00        	lda #0
001E16  3  85 rr        	sta scraddr+1
001E18  3  06 rr        	asl scraddr  	; multiply char by 8
001E1A  3  26 rr        	rol scraddr+1
001E1C  3  06 rr        	asl scraddr
001E1E  3  26 rr        	rol scraddr+1
001E20  3  06 rr        	asl scraddr
001E22  3  26 rr        	rol scraddr+1
001E24  3               
001E24  3  A5 rr        	lda dispy		; y coordinate.
001E26  3  0A           	asl a
001E27  3  0A           	asl a
001E28  3  0A           	asl a			; multiply char by 8
001E29  3  A8           	tay
001E2A  3               
001E2A  3  18           	clc
001E2B  3  A5 rr        	lda scraddr
001E2D  3  79 00 06     	adc SCADTB_lb,y
001E30  3  85 rr        	sta scraddr
001E32  3  A5 rr        	lda scraddr+1
001E34  3  79 00 07     	adc SCADTB_hb,y
001E37  3  85 rr        	sta scraddr+1
001E39  3               
001E39  3  A5 rr        	lda prtmod		; Double line if bigtxt
001E3B  3  F0 08        	beq noskip
001E3D  3  A5 rr        	lda dispx
001E3F  3  29 E0        	and #$e0
001E41  3  F0 02        	beq noskip
001E43  3  E6 rr        	inc scraddr+1
001E45  3               noskip:
001E45  3               
001E45  3  68           	pla
001E46  3  A8           	tay
001E47  3  60           	rts
001E48  3               ;--------------------------------------------------------------
001E48  3               ; Get property buffer address of char at (dispx, dispy) in hl.
001E48  3               ;
001E48  3               ; Output:
001E48  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
001E48  3               ;--------------------------------------------------------------
001E48  3               
001E48  3               pradd:
001E48  3  A5 rr        	lda dispy 		; y coordinate.
001E4A  3  85 rr        	sta bufaddr
001E4C  3  A9 00        	lda #0
001E4E  3  85 rr        	sta bufaddr+1
001E50  3  06 rr        	asl bufaddr  		; multiply char by 32
001E52  3  26 rr        	rol bufaddr+1
001E54  3  06 rr        	asl bufaddr
001E56  3  26 rr        	rol bufaddr+1
001E58  3  06 rr        	asl bufaddr
001E5A  3  26 rr        	rol bufaddr+1
001E5C  3  06 rr        	asl bufaddr
001E5E  3  26 rr        	rol bufaddr+1
001E60  3  06 rr        	asl bufaddr
001E62  3  26 rr        	rol bufaddr+1
001E64  3  18           	clc			; add address of MAP graphics.
001E65  3  A5 rr        	lda bufaddr
001E67  3  65 rr        	adc dispx
001E69  3  69 00        	adc #<MAP
001E6B  3  85 rr        	sta bufaddr
001E6D  3  A5 rr        	lda bufaddr+1
001E6F  3  69 03        	adc #>MAP
001E71  3  85 rr        	sta bufaddr+1
001E73  3  60           	rts
001E74  3               
001E74  3               ;.if kflag
001E74  3               ;gaadd:
001E74  3               ;	lda dispy 		; y coordinate.
001E74  3               ;	sta bufaddr
001E74  3               ;	lda #0
001E74  3               ;	sta bufaddr+1
001E74  3               ;	asl bufaddr  		; multiply char by 32
001E74  3               ;	rol bufaddr+1
001E74  3               ;	asl bufaddr
001E74  3               ;	rol bufaddr+1
001E74  3               ;	asl bufaddr
001E74  3               ;	rol bufaddr+1
001E74  3               ;	asl bufaddr
001E74  3               ;	rol bufaddr+1
001E74  3               ;	asl bufaddr
001E74  3               ;	rol bufaddr+1
001E74  3               ;	clc			; add address of MAP graphics.
001E74  3               ;	lda bufaddr
001E74  3               ;	adc dispx
001E74  3               ;	adc #<att_table
001E74  3               ;	sta bufaddr
001E74  3               ;	lda bufaddr+1
001E74  3               ;	adc #>att_table
001E74  3               ;	sta bufaddr+1
001E74  3               ;	rts
001E74  3               ;.endif
001E74  3               
001E74  3               ;----------------------------------------------
001E74  3               ; Print attributes, properties and pixels.
001E74  3               ;
001E74  3               ; Input:
001E74  3               ;  A	= tile number
001E74  3               ;----------------------------------------------
001E74  3               
001E74  3               pbpattr:			; entry PUTBLOCK command
001E74  3  A4 rr        	ldy charx
001E76  3  84 rr        	sty dispx
001E78  3  A4 rr        	ldy chary
001E7A  3  84 rr        	sty dispy
001E7C  3               pattr:
001E7C  3               .if aflag
001E7C  3               	pha
001E7C  3               	jsr wbloc		; save blockinfo
001E7C  3               	pla
001E7C  3               .endif
001E7C  3               
001E7C  3               pattr2:
001E7C  3  85 rr        	sta z80_b		; store cell in b register for now.
001E7E  3  AA           	tax
001E7F  3               .if swrflag
001E7F  3  BD 9C 85     	lda bprop + data_address - data_start,x 		; block properties.
001E82  3               .else
001E82  3               	lda bprop,x 		; block properties.
001E82  3               .endif
001E82  3  85 rr        	sta z80_c
001E84  3  C9 08        	cmp #COLECT
001E86  3  D0 04        	bne :+
001E88  3  A5 rr        	lda z80_b
001E8A  3  85 rr        	sta colpatt
001E8C  3               :
001E8C  3  20 48 1E     	jsr pradd 		; get property buffer address.
001E8F  3  A5 rr        	lda z80_c
001E91  3  A0 00        	ldy #0
001E93  3  91 rr        	sta (bufaddr),y 	; write property.
001E95  3  A5 rr        	lda z80_b 		; restore cell.
001E97  3  4C 9A 1E     	jmp panp
001E9A  3               ; Print attributes, no properties.
001E9A  3               
001E9A  3               ;colpatt:	.byte 0
001E9A  3               
001E9A  3               panp:
001E9A  3  85 rr        	sta z80_e		; displacement in e.
001E9C  3  A9 00        	lda #0
001E9E  3  85 rr        	sta z80_d		; no high byte.
001EA0  3  06 rr        	asl z80_e  		; multiply char by 8.
001EA2  3  26 rr        	rol z80_d
001EA4  3  06 rr        	asl z80_e
001EA6  3  26 rr        	rol z80_d
001EA8  3  06 rr        	asl z80_e
001EAA  3  26 rr        	rol z80_d
001EAC  3  18           	clc
001EAD  3  A5 rr        	lda z80_e
001EAF  3               .if swrflag
001EAF  3  69 CC        	adc #<(chgfx + data_address - data_start) 		; address of graphics.
001EB1  3  85 rr        	sta tileaddr
001EB3  3  A5 rr        	lda z80_d
001EB5  3  69 82        	adc #>(chgfx + data_address - data_start)
001EB7  3               .else
001EB7  3               	adc #<chgfx 		; address of graphics.
001EB7  3               	sta tileaddr
001EB7  3               	lda z80_d
001EB7  3               	adc #>chgfx
001EB7  3               .endif
001EB7  3  85 rr        	sta tileaddr+1
001EB9  3  20 0E 1E     	jsr gprad 		; get screen address.
001EBC  3  A2 07        	ldx #7			; number of pixel rows to write.
001EBE  3               panp0:
001EBE  3  A0 00        	ldy #0
001EC0  3  B1 rr        	lda (tileaddr),y 	; get image byte.
001EC2  3               .if iflag
001EC2  3               	eor #$ff		; Invert
001EC2  3               .endif
001EC2  3  BC A6 11     	ldy scrtab,x
001EC5  3  91 rr        	sta (scraddr),y 	; copy to screen.
001EC7  3  E6 rr        	inc tileaddr 		; next image byte.
001EC9  3  D0 02        	bne :+
001ECB  3  E6 rr        	inc tileaddr+1
001ECD  3               :
001ECD  3  CA           	dex	 		; repeat for 8 pixel rows.
001ECE  3  10 EE        	bpl panp0
001ED0  3  E6 rr        	inc dispx 		; move along one.
001ED2  3  E6 rr        	inc charx
001ED4  3  60           	rts
001ED5  3               
001ED5  3               ;----------------------------------------------
001ED5  3               ; Write block
001ED5  3               ;----------------------------------------------
001ED5  3               
001ED5  3               .if aflag
001ED5  3               wbloc:
001ED5  3               	ldy #3
001ED5  3               	sta (pbptr),y		; store block number
001ED5  3               	dey
001ED5  3               	lda dispx
001ED5  3               	sta (pbptr),y		; write x position of block.
001ED5  3               	dey
001ED5  3               	lda dispy
001ED5  3               	sta (pbptr),y		; write y position of block.
001ED5  3               	dey
001ED5  3               	lda scno
001ED5  3               	sta (pbptr),y		; write screen.
001ED5  3               	clc			; point to next free location
001ED5  3               	lda pbptr
001ED5  3               	adc #4
001ED5  3               	sta pbptr
001ED5  3               	bcc :+
001ED5  3               	inc pbptr+1
001ED5  3               :
001ED5  3               	rts
001ED5  3               .endif
001ED5  3               
001ED5  3               ;.if kflag
001ED5  3               ;panp:
001ED5  3               ;.endif
001ED5  3               
001ED5  3               ;----------------------------------------------
001ED5  3               ; Print character pixels, no more.
001ED5  3               ;
001ED5  3               ; Input:
001ED5  3               ;  A	= character to print
001ED5  3               ;----------------------------------------------
001ED5  3               
001ED5  3               pchr:
001ED5  3  20 6F 11     	jsr pchar 		; show character in accumulator.
001ED8  3  E6 rr        	inc dispx		; move along one.
001EDA  3  60           	rts
001EDB  3               
001EDB  3               ;----------------------------------------------------
001EDB  3               ; Shifter sprite routine for objects.
001EDB  3               ;----------------------------------------------------
001EDB  3               
001EDB  3               .if oflag
001EDB  3               sprit7:
001EDB  3  A5 rr        	lda z80_b
001EDD  3  F0 0C        	beq sprit0
001EDF  3  85 rr        	sta z80_a
001EE1  3               sprit3:
001EE1  3  46 rr        	lsr spr			; shift into position.
001EE3  3  66 rr        	ror spr+1
001EE5  3  66 rr        	ror spr+2
001EE7  3  C6 rr        	dec z80_a		; one less iteration.
001EE9  3  D0 F6        	bne sprit3
001EEB  3               sprit0:
001EEB  3  60           	rts 			; now apply to screen.
001EEC  3               .endif
001EEC  3               
001EEC  3               ;-----------------------------------------------------------
001EEC  3               ; Get room address.
001EEC  3               ;-----------------------------------------------------------
001EEC  3               
001EEC  3               groom:
001EEC  3  A6 rr        	ldx scno 		; screen number.
001EEE  3  A0 00        	ldy #0
001EF0  3               groomx:
001EF0  3               .if swrflag
001EF0  3  A9 D6        	lda #<(scdat + data_address - data_start) 		; pointer to screens.
001EF2  3  85 rr        	sta z80_l
001EF4  3  A9 8D        	lda #>(scdat + data_address - data_start)
001EF6  3  85 rr        	sta z80_h
001EF8  3               .else
001EF8  3               	lda #<scdat 		; pointer to screens.
001EF8  3               	sta z80_l
001EF8  3               	lda #>scdat
001EF8  3               	sta z80_h
001EF8  3               .endif
001EF8  3               groom1:
001EF8  3  E0 00        	cpx #0			; is it the first one?
001EFA  3  F0 15        	beq groom0 		; no more screens to skip.
001EFC  3               
001EFC  3  18           	clc
001EFD  3  A5 rr        	lda z80_l
001EFF  3               .if swrflag
001EFF  3  79 D6 8D     	adc scdat + data_address - data_start,y 		; low byte of screen size.
001F02  3  85 rr        	sta z80_l
001F04  3  C8           	iny			; point to high byte.
001F05  3  A5 rr        	lda z80_h
001F07  3  79 D6 8D     	adc scdat+ data_address - data_start,y 		; high byte of screen size.
001F0A  3  85 rr        	sta z80_h
001F0C  3               .else
001F0C  3               	adc scdat,y 		; low byte of screen size.
001F0C  3               	sta z80_l
001F0C  3               	iny			; point to high byte.
001F0C  3               	lda z80_h
001F0C  3               	adc scdat,y 		; high byte of screen size.
001F0C  3               	sta z80_h
001F0C  3               .endif
001F0C  3  C8           	iny			; next address.
001F0D  3               
001F0D  3  CA           	dex 			; one less iteration.
001F0E  3  4C F8 1E     	jmp groom1 		; loop until we reach the end.
001F11  3               groom0:
001F11  3               .if swrflag
001F11  3  AD 82 A0     	lda numsc + data_address - data_start		; add displacement.
001F14  3               .else
001F14  3               	lda numsc		; add displacement.
001F14  3               .endif
001F14  3  0A           	asl a
001F15  3  18           	clc			; add double displacement to address.
001F16  3  65 rr        	adc z80_l
001F18  3  85 rr        	sta z80_l
001F1A  3  A5 rr        	lda z80_h
001F1C  3  69 00        	adc #0
001F1E  3  85 rr        	sta z80_h
001F20  3  60           	rts
001F21  3               
001F21  3               ;-----------------------------------------------------------
001F21  3               ; Draw present room.
001F21  3               ;-----------------------------------------------------------
001F21  3               
001F21  3               droom:
001F21  3  AD 04 16     	lda wintop 		; window top.
001F24  3  85 rr        	sta dispy		; set cursor y position.
001F26  3               droom2:
001F26  3  20 EC 1E     	jsr groom 		; get address of current room.
001F29  3  A9 00        	lda #0	 		; zero in accumulator.
001F2B  3  85 rr        	sta comcnt 		; reset compression counter.
001F2D  3  AD 06 16     	lda winhgt 		; height of window.
001F30  3  85 rr        	sta rrow		; set row counter
001F32  3               droom0:
001F32  3  AD 05 16     	lda winlft 		; window left edge.
001F35  3  85 rr        	sta dispx 		; set cursor x position.
001F37  3  AD 07 16     	lda winwid 		; width of window.
001F3A  3  85 rr        	sta rcol		; set column counter
001F3C  3               droom1:
001F3C  3  20 4D 1F     	jsr flbyt 		; decompress next byte on the fly.
001F3F  3               .if xflag
001F3F  3               	jsr drwmeta
001F3F  3               .else
001F3F  3  20 7C 1E     	jsr pattr2 		; show attributes and block.
001F42  3               .endif
001F42  3  C6 rr        	dec rcol		; one less column.
001F44  3  D0 F6        	bne droom1 		; repeat for entire line.
001F46  3  E6 rr        	inc dispy		; move down one line.
001F48  3               .if xflag
001F48  3               	inc dispy		; move down one line.
001F48  3               .endif
001F48  3  C6 rr        	dec rrow 		; one less row.
001F4A  3  D0 E6        	bne droom0 		; repeat for all rows.
001F4C  3  60           	rts
001F4D  3               
001F4D  3               ;----------------------------------------------
001F4D  3               ; Decompress bytes on-the-fly.
001F4D  3               ;----------------------------------------------
001F4D  3               
001F4D  3               flbyt:
001F4D  3  A5 rr        	lda comcnt 		; compression counter.
001F4F  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
001F51  3               
001F51  3  A0 00        	ldy #0
001F53  3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
001F55  3  E6 rr        	inc z80_l 		; point to next cell.
001F57  3  D0 02        	bne :+
001F59  3  E6 rr        	inc z80_h
001F5B  3               :
001F5B  3  C9 FF        	cmp #255 		; is this byte a control code?
001F5D  3  F0 01        	beq :+
001F5F  3  60           	rts 			; no, this byte is uncompressed.
001F60  3               :
001F60  3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
001F62  3  85 rr        	sta combyt 		; set up the type.
001F64  3  E6 rr        	inc z80_l 		; point to quantity.
001F66  3  D0 02        	bne :+
001F68  3  E6 rr        	inc z80_h
001F6A  3               :
001F6A  3  B1 rr        	lda (z80_hl),y 		; get quantity.
001F6C  3  E6 rr        	inc z80_l 		; point to next byte.
001F6E  3  D0 02        	bne :+
001F70  3  E6 rr        	inc z80_h
001F72  3               :
001F72  3               flbyt1:
001F72  3  85 rr        	sta comcnt 		; store new quantity.
001F74  3  C6 rr        	dec comcnt		; one less.
001F76  3  A5 rr        	lda combyt 		; byte to expand.
001F78  3  60           	rts
001F79  3               
001F79  3               ; ------------------------------------------------------------------------------------------------------------------------------------------
001F79  3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
001F79  3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
001F79  3               ; ------------------------------------------------------------------------------------------------------------------------------------------
001F79  3               .if xflag
001F79  3               drwmeta:
001F79  3               	sta tmpblk
001F79  3               	jsr pattr2
001F79  3               
001F79  3               	inc dispy
001F79  3               	dec dispx
001F79  3               	ldx tmpblk
001F79  3               	beq :+
001F79  3               	inx
001F79  3               :
001F79  3               	txa
001F79  3               	jsr pattr2
001F79  3               
001F79  3               	ldx tmpblk
001F79  3               	beq :+
001F79  3               	inx
001F79  3               	inx
001F79  3               	inx
001F79  3               :
001F79  3               	txa
001F79  3               	jsr pattr2
001F79  3               
001F79  3               	dec dispy
001F79  3               	dec dispx
001F79  3               	ldx tmpblk
001F79  3               	beq :+
001F79  3               	inx
001F79  3               	inx
001F79  3               :
001F79  3               	txa
001F79  3               	jsr pattr2
001F79  3               	rts
001F79  3               
001F79  3               tmpblk:	.byte 0
001F79  3               
001F79  3               .endif
001F79  3               
001F79  3               ;------------------------------------------
001F79  3               ; Ladder down check.
001F79  3               ;
001F79  3               ; Input:
001F79  3               ;  IX = sprite pointer
001F79  3               ;------------------------------------------
001F79  3               
001F79  3               .if lflag
001F79  3               laddd:
001F79  3               	ldy #9
001F79  3               	lda (z80_ix),y		; x coordinate.
001F79  3               	sta dispx
001F79  3               
001F79  3               	ldy #8
001F79  3               	lda (z80_ix),y		; y coordinate.
001F79  3               	and #254		; make it even.
001F79  3               	sta (z80_ix),y 		; reset it.
001F79  3               	clc 			; look down 16 pixels.
001F79  3               numsp5:
001F79  3               	adc #SPR_HGT
001F79  3               	sta dispy		; coords in dispx,dispy.
001F79  3               	jmp laddv
001F79  3               
001F79  3               ;------------------------------------------
001F79  3               ; Ladder up check.
001F79  3               ;
001F79  3               ; Input:
001F79  3               ;  IX = sprite pointer
001F79  3               ;
001F79  3               ; Output:
001F79  3               ;  A  = 0 is ok, A <>0 is not ok
001F79  3               ;------------------------------------------
001F79  3               
001F79  3               laddu:
001F79  3               	ldy #9
001F79  3               	lda (z80_ix),y		; x coordinate.
001F79  3               	sta dispx
001F79  3               
001F79  3               	ldy #8
001F79  3               	lda (z80_ix),y		; y coordinate.
001F79  3               	and #254 		; make it even.
001F79  3               	sta (z80_ix),y		; reset it.
001F79  3               	clc 			; look 2 pixels above feet.
001F79  3               numsp6:
001F79  3               	adc #SPR_HGT-2
001F79  3               	sta dispy		; coords in dispx,dispy.
001F79  3               laddv:
001F79  3               	jsr tstbl 		; get map address.
001F79  3               	jsr ldchk 		; standard ladder check.
001F79  3               	beq :+
001F79  3               	rts 			; no way through.
001F79  3               :
001F79  3               	inc bufaddr 		; look right one cell.
001F79  3               	bne :+
001F79  3               	inc bufaddr+1
001F79  3               :
001F79  3               	jsr ldchk 		; do the check.
001F79  3               	beq :+
001F79  3               	rts 			; impassable.
001F79  3               :
001F79  3               	lda dispx 		; y coordinate.
001F79  3               	and #7 			; position straddling block cells.
001F79  3               	bne :+
001F79  3               	rts 			; no more checks needed.
001F79  3               :
001F79  3               	inc bufaddr 		; look to third cell.
001F79  3               	bne :+
001F79  3               	inc bufaddr+1
001F79  3               :
001F79  3               	jsr ldchk 		; do the check.
001F79  3               	rts  			; return with zero flag set accordingly.
001F79  3               .endif
001F79  3               
001F79  3               ;---------------------------------------------------------
001F79  3               ; Can go up check.
001F79  3               ;
001F79  3               ; Input:
001F79  3               ;  IX = sprite pointer
001F79  3               ;
001F79  3               ; Output:
001F79  3               ;  A  = 0 is ok, A <>0 is not ok
001F79  3               ;---------------------------------------------------------
001F79  3               
001F79  3               cangu:
001F79  3  A0 09        	ldy #9
001F7B  3  B1 rr        	lda (z80_ix),y		; x coordinate.
001F7D  3  85 rr        	sta dispx
001F7F  3  A0 08        	ldy #8
001F81  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
001F83  3  38           	sec
001F84  3  E9 02        	sbc #2
001F86  3  85 rr        	sta dispy		; coords in dispx,dispy.
001F88  3  20 13 21     	jsr tstbl 		; get map address.
001F8B  3  20 2B 20     	jsr lrchk 		; standard left/right check.
001F8E  3  F0 01        	beq :+
001F90  3  60           	rts			; no way through.
001F91  3               :
001F91  3  E6 rr        	inc bufaddr		; look right one cell.
001F93  3  D0 02        	bne :+
001F95  3  E6 rr        	inc bufaddr+1
001F97  3               :
001F97  3  20 2B 20     	jsr lrchk 		; do the check.
001F9A  3  F0 01        	beq :+
001F9C  3  60           	rts			; impassable.
001F9D  3               :
001F9D  3  A5 rr        	lda dispx		; x coordinate.
001F9F  3  29 07        	and #7			; position straddling block cells.
001FA1  3  D0 01        	bne :+
001FA3  3  60           	rts			; no more checks needed.
001FA4  3               :
001FA4  3  E6 rr        	inc bufaddr		; look to third cell.
001FA6  3  D0 02        	bne :+
001FA8  3  E6 rr        	inc bufaddr+1
001FAA  3               :
001FAA  3  20 2B 20     	jsr lrchk		; do the check.
001FAD  3  60           	rts 			; return with zero flag set accordingly.
001FAE  3               
001FAE  3               ;---------------------------------------------------------
001FAE  3               ; Can go down check.
001FAE  3               ;
001FAE  3               ; Input:
001FAE  3               ;  IX = sprite pointer
001FAE  3               ;
001FAE  3               ; Output:
001FAE  3               ;  A  = 0 is ok, A <>0 is not ok
001FAE  3               ;---------------------------------------------------------
001FAE  3               
001FAE  3               cangd:
001FAE  3  A0 09        	ldy #9
001FB0  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
001FB2  3  85 rr        	sta dispx
001FB4  3  A0 08        	ldy #8
001FB6  3  B1 rr        	lda (z80_ix),y		; y coordinate.
001FB8  3  18           	clc
001FB9  3               numsp3:
001FB9  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
001FBB  3  85 rr        	sta dispy		; coords in dispx,dispy.
001FBD  3  20 13 21     	jsr tstbl 		; get map address.
001FC0  3  20 40 20     	jsr plchk 		; block, platform check.
001FC3  3  F0 01        	beq :+
001FC5  3  60           	rts			; no way through.
001FC6  3               :
001FC6  3  E6 rr        	inc bufaddr		; look right one cell.
001FC8  3  D0 02        	bne :+
001FCA  3  E6 rr        	inc bufaddr+1
001FCC  3               :
001FCC  3  20 40 20     	jsr plchk		; block, platform check.
001FCF  3  F0 01        	beq :+
001FD1  3  60           	rts			; impassable.
001FD2  3               :
001FD2  3  A5 rr        	lda dispx		; x coordinate.
001FD4  3  29 07        	and #7			; position straddling block cells.
001FD6  3  D0 01        	bne :+
001FD8  3  60           	rts			; no more checks needed.
001FD9  3               :
001FD9  3  E6 rr        	inc bufaddr		; look to third cell.
001FDB  3  D0 02        	bne :+
001FDD  3  E6 rr        	inc bufaddr+1
001FDF  3               :
001FDF  3  20 40 20     	jsr plchk		; block, platform check.
001FE2  3  60           	rts			; return with zero flag set accordingly.
001FE3  3               
001FE3  3               ;---------------------------------------------------------
001FE3  3               ; Can go left check.
001FE3  3               ;
001FE3  3               ; Input:
001FE3  3               ;  IX = sprite pointer
001FE3  3               ;
001FE3  3               ; Output:
001FE3  3               ;  A  = 0 is ok, A <>0 is not ok
001FE3  3               ;---------------------------------------------------------
001FE3  3               
001FE3  3               cangl:
001FE3  3  A0 08        	ldy #8
001FE5  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
001FE7  3  85 rr        	sta dispy
001FE9  3  A0 09        	ldy #9
001FEB  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
001FED  3  38           	sec
001FEE  3  E9 02        	sbc #2			; look left 2 pixels.
001FF0  3  85 rr        	sta dispx		; coords in dispx,dispy.
001FF2  3  4C 04 20     	jmp cangh		; test if we can go there.
001FF5  3               
001FF5  3               ;---------------------------------------------------------
001FF5  3               ; Can go right check.
001FF5  3               ;
001FF5  3               ; Input:
001FF5  3               ;  IX = sprite pointer
001FF5  3               ;
001FF5  3               ; Output:
001FF5  3               ;  A  = 0 is ok, A <>0 is not ok
001FF5  3               ;---------------------------------------------------------
001FF5  3               
001FF5  3               cangr:
001FF5  3  A0 08        	ldy #8
001FF7  3  B1 rr        	lda (z80_ix),y		; y coordinate.
001FF9  3  85 rr        	sta dispy
001FFB  3  A0 09        	ldy #9
001FFD  3  B1 rr        	lda (z80_ix),y		; x coordinate.
001FFF  3  18           	clc
002000  3  69 10        	adc #16			; look right 16 pixels.
002002  3  85 rr        	sta dispx		; coords in dispx,dispy.
002004  3               cangh:
002004  3               cangh2:
002004  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
002006  3  85 rr        	sta z80_b
002008  3  A5 rr        	lda dispy		; y position.
00200A  3  29 07        	and #7			; does x straddle cells?
00200C  3  D0 02        	bne cangh0		; yes, loop counter is good.
00200E  3  C6 rr        	dec z80_b		; one less row to write.
002010  3               cangh0:
002010  3  20 13 21     	jsr tstbl		; get map address.
002013  3               cangh1:
002013  3  20 2B 20     	jsr lrchk		; standard left/right check.
002016  3  F0 01        	beq :+
002018  3  60           	rts			; no way through.
002019  3               :
002019  3  48           	pha
00201A  3  18           	clc
00201B  3  A5 rr        	lda bufaddr
00201D  3  69 20        	adc #32			; look down.
00201F  3  85 rr        	sta bufaddr
002021  3  90 02        	bcc :+
002023  3  E6 rr        	inc bufaddr+1
002025  3               :
002025  3  68           	pla
002026  3               
002026  3  C6 rr        	dec z80_b
002028  3  D0 E9        	bne cangh1
00202A  3  60           	rts
00202B  3               
00202B  3               ;-------------------------------------
00202B  3               ; Check left/right movement is okay.
00202B  3               ;
00202B  3               ; Input:
00202B  3               ;  bufaddr = MAP + x/8 + y/8*32
00202B  3               ;
00202B  3               ; Output:
00202B  3               ;  A  = 0 is ok, A <>0 is not ok
00202B  3               ;-------------------------------------
00202B  3               
00202B  3               lrchk:
00202B  3  A0 00        	ldy #0
00202D  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
00202F  3  C9 02        	cmp #WALL 		; is it passable?
002031  3  F0 0A        	beq lrchkx		; no.
002033  3               
002033  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002035  3  F0 06        	beq lrchkx		; not passable.
002037  3  A9 00        	lda #0
002039  3  60           	rts
00203A  3               
00203A  3               ;--------------------------------------------------------------
00203A  3               ; Called by mmenu
00203A  3               ;--------------------------------------------------------------
00203A  3               
00203A  3               always:
00203A  3  A9 FF        	lda #255		; report it as okay.
00203C  3  60           	rts
00203D  3               
00203D  3               lrchkx:
00203D  3  A9 01        	lda #1 			; reset all bits.
00203F  3  60           	rts
002040  3               
002040  3               
002040  3               ;--------------------------------------------------------------
002040  3               ; Check platform or solid item is not in way.
002040  3               ;
002040  3               ; Input:
002040  3               ;  bufaddr = MAP + x/8 + y/8*32
002040  3               ;
002040  3               ; Output:
002040  3               ;  A  = 0 is ok, A <>0 is not ok
002040  3               ;--------------------------------------------------------------
002040  3               
002040  3               plchk:
002040  3  A0 00        	ldy #0
002042  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002044  3  C9 02        	cmp #WALL 		; is it passable?
002046  3  F0 F5        	beq lrchkx		; no.
002048  3               .if pflag .or dflag
002048  3               	cmp #FODDER		; fodder has to be dug.
002048  3               	beq lrchkx		; not passable.
002048  3               .endif
002048  3  C9 01        	cmp #PLATFM		; platform is solid.
00204A  3  F0 03        	beq plchkx		; not passable.
00204C  3               .if lflag
00204C  3               	cmp #LADDER		; is it a ladder?
00204C  3               	beq lrchkx		; on ladder, deny movement.
00204C  3               .endif
00204C  3               plchk0:
00204C  3  A9 00        	lda #0			; report as ok
00204E  3  60           	rts
00204F  3               plchkx:
00204F  3  A5 rr        	lda dispy		; x coordinate.
002051  3  29 07        	and #7			; position straddling blocks.
002053  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002055  3  4C 4C 20     	jmp plchk0
002058  3               
002058  3               ;--------------------------------------------------------------
002058  3               ; Check ladder is available.
002058  3               ;
002058  3               ; Input:
002058  3               ;  bufaddr = MAP + x/8 + y/8*32
002058  3               ;
002058  3               ; Output:
002058  3               ;  A  = 0 is ok, A <>0 is not ok
002058  3               ;--------------------------------------------------------------
002058  3               
002058  3               .if lflag
002058  3               ldchk:
002058  3               	ldy #0
002058  3               	lda (bufaddr),y 	; fetch cell.
002058  3               	cmp #LADDER 		; is it a ladder?
002058  3               	beq ldchk1
002058  3               	lda #1
002058  3               	rts  			; return with zero flag set accordingly.
002058  3               ldchk1:
002058  3               	lda #0
002058  3               	rts
002058  3               .endif
002058  3               
002058  3               ;--------------------------------------------------------------
002058  3               ; Get collectables.
002058  3               ;--------------------------------------------------------------
002058  3               
002058  3               .if cflag
002058  3               getcol:
002058  3                       lda #COLECT             ; collectable blocks.
002058  3                       sta z80_b
002058  3                       jsr tded                ; test for collectable blocks.
002058  3                       cmp z80_b               ; did we find one?
002058  3                       beq :+
002058  3                       rts                     ; none were found, job done.
002058  3               :
002058  3                       jsr gtblk               ; get block.
002058  3                       jsr evnt20              ; collected block event.
002058  3                       jmp getcol              ; repeat until none left.
002058  3               
002058  3               ; Get collectable block.
002058  3               
002058  3               gtblk:
002058  3               	ldy #0
002058  3               	lda (bufaddr),y
002058  3               	sta z80_a
002058  3                       lda #0
002058  3                       sta (bufaddr),y		; make it empty now.
002058  3               
002058  3               	lda bufaddr		; set dispx
002058  3               	and #31
002058  3               	sta dispx
002058  3               
002058  3               	lda bufaddr+1		; Set dispy
002058  3               	sec
002058  3               	sbc #>MAP
002058  3               	sta bufaddr+1
002058  3               	asl bufaddr
002058  3               	rol bufaddr+1
002058  3               	asl bufaddr
002058  3               	rol bufaddr+1
002058  3               	asl bufaddr
002058  3               	rol bufaddr+1
002058  3               	lda bufaddr+1
002058  3               	sta dispy
002058  3               
002058  3               	lda colpatt		; get blocknr
002058  3               	sta z80_e		; displacement in e.
002058  3               	lda #0
002058  3               	sta z80_d		; no high byte.
002058  3               	asl z80_e  		; multiply char by 8.
002058  3               	rol z80_d
002058  3               	asl z80_e
002058  3               	rol z80_d
002058  3               	asl z80_e
002058  3               	rol z80_d
002058  3               	clc
002058  3               	lda z80_e
002058  3               .if swrflag
002058  3               	adc #<(chgfx + data_address - data_start) 		; address of graphics.
002058  3               	sta tileaddr
002058  3               	lda z80_d
002058  3               	adc #>(chgfx + data_address - data_start)
002058  3               .else
002058  3               	adc #<chgfx 		; address of graphics.
002058  3               	sta tileaddr
002058  3               	lda z80_d
002058  3               	adc #>chgfx
002058  3               .endif
002058  3               	sta tileaddr+1
002058  3               	jsr gprad 		; get screen address.
002058  3               	ldx #7			; number of pixel rows to write.
002058  3               gtblk0:
002058  3               	ldy #0
002058  3               	lda (tileaddr),y 	; get image byte.
002058  3               	ldy scrtab,x
002058  3               	eor (scraddr),y 	; XOR tile on screen
002058  3               	sta (scraddr),y 	; copy to screen.
002058  3               	inc tileaddr 		; next image byte.
002058  3               	bne :+
002058  3               	inc tileaddr+1
002058  3               :
002058  3               	dex	 		; repeat for 8 pixel rows.
002058  3               	bpl gtblk0
002058  3               	rts
002058  3               .endif
002058  3               
002058  3               ;--------------------------------------------------------------
002058  3               ; Touched deadly block check.
002058  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002058  3               ;
002058  3               ; Input:
002058  3               ;  IX = sprite address
002058  3               ;
002058  3               ; Output:
002058  3               ;  A  = 0 is ok, A=5 is not ok
002058  3               ;--------------------------------------------------------------
002058  3               
002058  3               tded:
002058  3  A0 08        	ldy #8
00205A  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00205C  3  85 rr        	sta dispy
00205E  3  C8           	iny
00205F  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
002061  3  85 rr        	sta dispx		; coords in dispx,dispy.
002063  3  20 13 21     	jsr tstbl		; get map address.
002066  3  48           	pha
002067  3  A9 1F        	lda #31			; default distance to next line down.
002069  3  85 rr        	sta z80_e
00206B  3  68           	pla
00206C  3  C5 rr        	cmp z80_b		; is this the required block?
00206E  3  D0 01        	bne :+
002070  3  60           	rts			; yes.
002071  3               :
002071  3  E6 rr        	inc bufaddr 		; next cell.
002073  3  D0 02        	bne :+
002075  3  E6 rr        	inc bufaddr+1
002077  3               :
002077  3  A0 00        	ldy #0
002079  3  B1 rr        	lda (bufaddr),y		; fetch type.
00207B  3  C5 rr        	cmp z80_b 		; is this deadly/custom?
00207D  3  D0 01        	bne :+
00207F  3  60           	rts			; yes.
002080  3               :
002080  3  A5 rr        	lda dispx		; horizontal position.
002082  3  85 rr        	sta z80_c 		; store column in c register.
002084  3  29 07        	and #7			; is it straddling cells?
002086  3  D0 03        	bne :+
002088  3  4C 9C 20     	jmp tded0		; no.
00208B  3               :
00208B  3  E6 rr        	inc bufaddr 		; last cell.
00208D  3  D0 02        	bne :+
00208F  3  E6 rr        	inc bufaddr+1
002091  3               :
002091  3  A0 00        	ldy #0
002093  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002095  3  C5 rr        	cmp z80_b		; is this the block?
002097  3  D0 01        	bne :+
002099  3  60           	rts			; yes.
00209A  3               :
00209A  3  C6 rr        	dec z80_e		; one less cell to next row down.
00209C  3               tded0:
00209C  3  18           	clc 			; point to next row.
00209D  3  A5 rr        	lda bufaddr
00209F  3  65 rr        	adc z80_e
0020A1  3  85 rr        	sta bufaddr
0020A3  3  90 02        	bcc :+
0020A5  3  E6 rr        	inc bufaddr+1
0020A7  3               :
0020A7  3  A0 00        	ldy #0
0020A9  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
0020AB  3  C5 rr        	cmp z80_b		; is this fatal?
0020AD  3  D0 01        	bne :+
0020AF  3  60           	rts			; yes.
0020B0  3               :
0020B0  3  E6 rr        	inc bufaddr 		; next cell.
0020B2  3  D0 02        	bne :+
0020B4  3  E6 rr        	inc bufaddr+1
0020B6  3               :
0020B6  3  A0 00        	ldy #0
0020B8  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0020BA  3  C5 rr        	cmp z80_b		; is this fatal?
0020BC  3  D0 01        	bne :+
0020BE  3  60           	rts			; yes.
0020BF  3               :
0020BF  3  A5 rr        	lda z80_c		; horizontal position.
0020C1  3  29 07        	and #7			; is it straddling cells?
0020C3  3  D0 03        	bne :+
0020C5  3  4C D7 20     	jmp tded1 		; no.
0020C8  3               :
0020C8  3  E6 rr        	inc bufaddr		; last cell.
0020CA  3  D0 02        	bne :+
0020CC  3  E6 rr        	inc bufaddr+1
0020CE  3               :
0020CE  3  A0 00        	ldy #0
0020D0  3  B1 rr        	lda (bufaddr),y		; fetch type.
0020D2  3  C5 rr        	cmp z80_b		; is this fatal?
0020D4  3  D0 01        	bne :+
0020D6  3  60           	rts			; yes.
0020D7  3               :
0020D7  3               tded1:
0020D7  3  A5 rr        	lda dispy		; vertical position.
0020D9  3  29 07        	and #7 			; is it straddling cells?
0020DB  3  D0 01        	bne :+
0020DD  3  60           	rts			; no, job done.
0020DE  3               :
0020DE  3  18           	clc			; point to next row.
0020DF  3  A5 rr        	lda bufaddr
0020E1  3  65 rr        	adc z80_e
0020E3  3  85 rr        	sta bufaddr
0020E5  3  90 02        	bcc :+
0020E7  3  E6 rr        	inc bufaddr+1
0020E9  3               :
0020E9  3  A0 00        	ldy #0
0020EB  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
0020ED  3  C5 rr        	cmp z80_b		; is this fatal?
0020EF  3  D0 01        	bne :+
0020F1  3  60           	rts			; yes.
0020F2  3               :
0020F2  3  E6 rr        	inc bufaddr		; next cell.
0020F4  3  D0 02        	bne :+
0020F6  3  E6 rr        	inc bufaddr+1
0020F8  3               :
0020F8  3  A0 00        	ldy #0
0020FA  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0020FC  3  C5 rr        	cmp z80_b		; is this fatal?
0020FE  3  D0 01        	bne :+
002100  3  60           	rts			; yes.
002101  3               :
002101  3  A5 rr        	lda z80_c		; horizontal position.
002103  3  29 07        	and #7			; is it straddling cells?
002105  3  D0 01        	bne :+
002107  3  60           	rts			; no.
002108  3               :
002108  3  E6 rr        	inc bufaddr		; last cell.
00210A  3  D0 02        	bne :+
00210C  3  E6 rr        	inc bufaddr+1
00210E  3               :
00210E  3  A0 00        	ldy #0
002110  3  B1 rr        	lda (bufaddr),y		; fetch final type.
002112  3  60           	rts 			; return with final type in accumulator.
002113  3               
002113  3               ;---------------------------------------------------
002113  3               ; Fetch block type at (dispx, dispy).
002113  3               ;
002113  3               ; Output:
002113  3               ;  A = block type
002113  3               ;---------------------------------------------------
002113  3               
002113  3               tstbl:
002113  3  A5 rr        	lda dispy 		; fetch y coord.
002115  3  4A           	lsr a			; bufaddr = y/8
002116  3  4A           	lsr a
002117  3  4A           	lsr a
002118  3               ;	sta chary
002118  3               
002118  3  85 rr        	sta bufaddr
00211A  3  A9 00        	lda #0
00211C  3  85 rr        	sta bufaddr+1
00211E  3               
00211E  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
002120  3  26 rr        	rol bufaddr+1
002122  3  06 rr        	asl bufaddr
002124  3  26 rr        	rol bufaddr+1
002126  3  06 rr        	asl bufaddr
002128  3  26 rr        	rol bufaddr+1
00212A  3  06 rr        	asl bufaddr
00212C  3  26 rr        	rol bufaddr+1
00212E  3  06 rr        	asl bufaddr
002130  3  26 rr        	rol bufaddr+1
002132  3               
002132  3  A5 rr        	lda dispx		; x/8
002134  3  4A           	lsr a
002135  3  4A           	lsr a
002136  3  4A           	lsr a
002137  3               ;	sta charx
002137  3               
002137  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
002138  3  65 rr        	adc bufaddr
00213A  3  69 00        	adc #<MAP
00213C  3  85 rr        	sta bufaddr
00213E  3  A5 rr        	lda bufaddr+1
002140  3  69 03        	adc #>MAP
002142  3  85 rr        	sta bufaddr+1
002144  3               
002144  3  A0 00        	ldy #0
002146  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002148  3  60           	rts
002149  3               
002149  3               ;-------------------------------------------------------------------
002149  3               ; Jump - if we can.
002149  3               ; Requires initial speed to be set up in accumulator prior to call.
002149  3               ;
002149  3               ; Input:
002149  3               ;  IX = sprite address
002149  3               ;-------------------------------------------------------------------
002149  3               
002149  3               jump:
002149  3  A0 0D        	ldy #var_jumpLo
00214B  3  B1 rr        	lda (z80_ix),y		; jump table low.
00214D  3  A0 0E        	ldy #var_jumpHi
00214F  3  11 rr        	ora (z80_ix),y		; jump table high.
002151  3  F0 01        	beq :+
002153  3  60           	rts			; already in the air.
002154  3               :
002154  3               .if swrflag
002154  3  A9 A8        	lda #>(jtab + data_address - data_start)
002156  3  A0 0E        	ldy #var_jumpHi
002158  3  91 rr        	sta (z80_ix),y		; set jump high.
00215A  3  A9 D1        	lda #<(jtab + data_address - data_start)		; jump table start.
00215C  3               .else
00215C  3               	lda #>jtab
00215C  3               	ldy #var_jumpHi
00215C  3               	sta (z80_ix),y		; set jump high.
00215C  3               	lda #<jtab		; jump table start.
00215C  3               .endif
00215C  3  A0 0D        	ldy #var_jumpLo
00215E  3  91 rr        	sta (z80_ix),y		; set jump low.
002160  3  60           	rts
002161  3               
002161  3               ; Jump table.
002161  3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
002161  3               ;.align 32
002161  3               ;jtab:
002161  3               ;	.byte 248,250,252
002161  3               ;	.byte 254,254,255
002161  3               ;	.byte 255,255,0,0
002161  3               ;	.byte 0,1,1,1,2,2
002161  3               ;	.byte 4,6,8,8,8,99
002161  3               
002161  3               ;------------------------------------------------
002161  3               ; Random numbers code.
002161  3               ; Pseudo-random number generator, 8-bit.
002161  3               ;
002161  3               ; Output:
002161  3               ;  RND = random number
002161  3               ;------------------------------------------------
002161  3               
002161  3               random:
002161  3  A5 rr        	lda seed
002163  3  F0 05        	beq doEor
002165  3  0A           	asl a
002166  3  F0 04        	beq noEor
002168  3  90 02        	bcc noEor
00216A  3  49 1D        doEor:	eor #$1d
00216C  3  85 rr        noEor:	sta seed
00216E  3  60           	rts
00216F  3               
00216F  3  A5 rr        	lda seed		; get last random number.
002171  3  0A           	asl a
002172  3  0A           	asl a
002173  3  18           	clc
002174  3  65 rr        	adc seed
002176  3  18           	clc
002177  3  69 45        	adc #$45
002179  3  85 rr        	sta seed		; store new seed.
00217B  3  85 rr        	sta varrnd		; return number in variable.
00217D  3  60           	rts
00217E  3               
00217E  3               ;--------------------------------------------------------
00217E  3               ; Keys
00217E  3               ;
00217E  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
00217E  3               ;             ||||||||
00217E  3               ;             |||||||+> Right    KEY 0  - X
00217E  3               ;             ||||||+-> Left     KEY 1  - Z
00217E  3               ;             |||||+--> Down     KEY 2  - .
00217E  3               ;             ||||+---> Up       KEY 3  - ;
00217E  3               ;             |||+----> Fire1    KEY 4  - SPC
00217E  3               ;             ||+-----> Fire2    KEY 5  - Q
00217E  3               ;             |+------> Fire3    KEY 6  - P
00217E  3               ;             +-------> Not used
00217E  3               ;
00217E  3               ;                       Option1  KEY 7  - 1
00217E  3               ;                       Option2  KEY 8  - 2
00217E  3               ;                       Option3  KEY 9  - 3
00217E  3               ;                       Option4  KEY 10 - 4
00217E  3               ;--------------------------------------------------------
00217E  3               
00217E  3               ;              X   Z   .   ;  SPC  Q   P
00217E  3               ;keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
00217E  3               ;        .byte $30,$31,$11,$12                   ; menu options.;
00217E  3               ;
00217E  3               ;jkeys:  .byte $36,$37,$68,$48,$62,$10,$37       ; Keys defined by game designer.
00217E  3               ;        .byte $30,$31,$11,$12                   ; menu options.
00217E  3               
00217E  3               ;-------------------------------------------------------
00217E  3               ; Joystick and keyboard reading routines.
00217E  3               ;
00217E  3               ; contrl = 0, Keyboard
00217E  3               ;          1, JoyKeyb
00217E  3               ;          2, JoyMMC
00217E  3               ;-------------------------------------------------------
00217E  3               
00217E  3               joykey:
00217E  3  A5 rr        	lda contrl 		; control flag.
002180  3  C9 01        	cmp #1
002182  3  D0 03        	bne :+
002184  3  4C A2 21     	jmp joyjoy 		; read keyboard joystick
002187  3               :
002187  3  C9 02        	cmp #2
002189  3  D0 03        	bne :+
00218B  3  4C 0C 0F     	jmp joysin 		; read MMC joystick.
00218E  3               :
00218E  3               ; Keyboard controls.
00218E  3               
00218E  3  A9 00        	lda #0		 	; zero reading.
002190  3  85 rr        	sta z80_e
002192  3               
002192  3  A0 06        	ldy #6	 		; address of last key.
002194  3               joyke0:
002194  3               .if swrflag
002194  3  B9 E7 A8     	lda keys + data_address - data_start,y 		; get key from table.
002197  3               .else
002197  3               	lda keys,y 		; get key from table.
002197  3               .endif
002197  3  20 D0 0E     	jsr ktest		; being pressed?
00219A  3  26 rr        	rol z80_e 		; rotate into reading.
00219C  3               
00219C  3  88           	dey		 	; next key.
00219D  3  10 F5        	bpl joyke0 		; repeat for all keys.
00219F  3  4C B3 21     	jmp joyjo1 		; store the value.
0021A2  3               
0021A2  3               ; Keyboard joystick controls.
0021A2  3               
0021A2  3               joyjoy:
0021A2  3  A9 00        	lda #0		 	; zero reading.
0021A4  3  85 rr        	sta z80_e
0021A6  3               
0021A6  3  A0 06        	ldy #6	 		; address of last key.
0021A8  3               joyjo3:
0021A8  3  B9 62 0E     	lda jkeys,y 		; get key from table.
0021AB  3  20 D0 0E     	jsr ktest		; being pressed?
0021AE  3  26 rr        	rol z80_e 		; rotate into reading.
0021B0  3               
0021B0  3  88           	dey		 	; next key.
0021B1  3  10 F5        	bpl joyjo3 		; repeat for all keys.
0021B3  3               joyjo1:
0021B3  3  A5 rr        	lda z80_e 		; copy e register to accumulator.
0021B5  3               joyjo2:
0021B5  3  85 rr        	sta joyval		; remember value.
0021B7  3  60           	rts
0021B8  3               
0021B8  3               ;---------------------------------------------------------------
0021B8  3               ; Display message.
0021B8  3               ;
0021B8  3               ; Input:
0021B8  3               ;  A = message number
0021B8  3               ;---------------------------------------------------------------
0021B8  3               
0021B8  3               dmsg:
0021B8  3  AA           	tax
0021B9  3               .if swrflag
0021B9  3  A9 00        	lda #<(msgdat + data_address - data_start)		; pointer to messages.
0021BB  3  85 rr        	sta z80_l
0021BD  3  A9 80        	lda #>(msgdat + data_address - data_start)
0021BF  3  85 rr        	sta z80_h
0021C1  3               .else
0021C1  3               	lda #<msgdat		; pointer to messages.
0021C1  3               	sta z80_l
0021C1  3               	lda #>msgdat
0021C1  3               	sta z80_h
0021C1  3               .endif
0021C1  3  20 D3 22     	jsr getwrd		; get message number.
0021C4  3               dmsg3:
0021C4  3  20 C0 22     	jsr preprt		; pre-printing stuff.
0021C7  3  20 C9 1C     	jsr checkx		; make sure we"re in a printable range.
0021CA  3  A5 rr        	lda prtmod		; print mode.
0021CC  3  D0 47        	bne bmsg1		; no, double-height text.
0021CE  3               dmsg0:
0021CE  3  A5 rr        	lda z80_h		; store string pointer.
0021D0  3  48           	pha
0021D1  3  A5 rr        	lda z80_l
0021D3  3  48           	pha
0021D4  3               
0021D4  3  A0 00        	ldy #0
0021D6  3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
0021D8  3  29 7F        	and #127		; remove any end marker.
0021DA  3  C9 0D        	cmp #ASCII_NEWLINE
0021DC  3  F0 24        	beq dmsg1
0021DE  3  20 6F 11     	jsr pchar		; display character.
0021E1  3  20 AD 22     	jsr nexpos 		; display position.
0021E4  3  D0 03        	bne dmsg2		; not on a new line.
0021E6  3  20 B2 22     	jsr nexlin		; next line down.
0021E9  3               dmsg2:
0021E9  3  68           	pla			; retrieve string pointer
0021EA  3  85 rr        	sta z80_l
0021EC  3  68           	pla
0021ED  3  85 rr        	sta z80_h
0021EF  3               
0021EF  3  A0 00        	ldy #0
0021F1  3  B1 rr        	lda (z80_hl),y		; fetch last character.
0021F3  3  0A           	asl a  			; was it the end?
0021F4  3  90 03        	bcc :+
0021F6  3  4C 1C 1D     	jmp dscor2		; yes, job done.
0021F9  3               :
0021F9  3  E6 rr        	inc z80_l		; next character to display.
0021FB  3  D0 02        	bne :+
0021FD  3  E6 rr        	inc z80_h
0021FF  3               :
0021FF  3  4C CE 21     	jmp dmsg0
002202  3               dmsg1:
002202  3  E6 rr        	inc dispy
002204  3  A5 rr        	lda dispy
002206  3  C9 18        	cmp #24
002208  3  90 04        	bcc dmsg4
00220A  3  A9 00        	lda #0
00220C  3  85 rr        	sta dispy
00220E  3               dmsg4:
00220E  3  A9 00        	lda #0
002210  3  85 rr        	sta dispx
002212  3  4C E9 21     	jmp dmsg2
002215  3               
002215  3               
002215  3               ;----------------------------------------------------------
002215  3               ; Display message in big text.
002215  3               ;
002215  3               ; Input:
002215  3               ;  HL = string pointer
002215  3               ;----------------------------------------------------------
002215  3               
002215  3               bmsg1:
002215  3  A0 00        	ldy #0
002217  3  B1 rr        	lda (z80_hl),y 		; get character to display.
002219  3  29 7F        	and #127		; only want 7 bits.
00221B  3  C9 0D        	cmp #ASCII_NEWLINE
00221D  3  F0 13        	beq bmsg2
00221F  3  20 47 22     	jsr bchar 		; display big char.
002222  3               bmsg3:
002222  3  A0 00        	ldy #0
002224  3  B1 rr        	lda (z80_hl),y 		; look at last character.
002226  3  48           	pha
002227  3  E6 rr        	inc z80_l 		; next character in list.
002229  3  D0 02        	bne :+
00222B  3  E6 rr        	inc z80_h
00222D  3               :
00222D  3  68           	pla
00222E  3  0A           	asl a  			; was terminator flag set?
00222F  3  90 E4        	bcc bmsg1		; no, keep going.
002231  3               
002231  3  60           	rts
002232  3               bmsg2:
002232  3  A9 00        	lda #0
002234  3  85 rr        	sta dispx
002236  3  E6 rr        	inc dispy
002238  3  E6 rr        	inc dispy
00223A  3  A5 rr        	lda dispy
00223C  3  C9 17        	cmp #23
00223E  3  90 E2        	bcc bmsg3
002240  3  A9 00        	lda #0
002242  3  85 rr        	sta dispy
002244  3  4C 22 22     	jmp bmsg3
002247  3               
002247  3               ;----------------------------------------------------------
002247  3               ; Big character display.
002247  3               ;
002247  3               ; Input:
002247  3               ;  A = character
002247  3               ;----------------------------------------------------------
002247  3               
002247  3               bchar:
002247  3  85 rr        	sta z80_e		; save char in lb
002249  3  A9 00        	lda #0
00224B  3  85 rr        	sta z80_d		; reset hb
00224D  3               
00224D  3  06 rr        	asl z80_e 		; multiply char by 8.
00224F  3  26 rr        	rol z80_d
002251  3  06 rr        	asl z80_e
002253  3  26 rr        	rol z80_d
002255  3  06 rr        	asl z80_e
002257  3  26 rr        	rol z80_d		; de = a*8
002259  3               
002259  3  18           	clc			; de = #<(FONT-256) + a*8
00225A  3  A5 rr        	lda z80_e
00225C  3  69 D1        	adc #<(FONT-256) 		; address of font.
00225E  3  85 rr        	sta z80_e
002260  3  A5 rr        	lda z80_d
002262  3  69 A4        	adc #>(FONT-256)
002264  3  85 rr        	sta z80_d
002266  3               
002266  3  20 0E 1E     	jsr gprad 		; get screen address.
002269  3               
002269  3  A2 00        	ldx #0			; height of character in font.
00226B  3               bchar0:
00226B  3  A0 00        	ldy #0
00226D  3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
00226F  3               
00226F  3               .if iflag
00226F  3               	eor #$ff
00226F  3               .endif
00226F  3               
00226F  3  91 rr        	sta (scraddr),y
002271  3  48           	pha
002272  3  20 BC 10     	jsr nline 		; next line down.
002275  3  68           	pla
002276  3  91 rr        	sta (scraddr),y
002278  3  20 BC 10     	jsr nline 		; next line down.
00227B  3               
00227B  3  18           	clc
00227C  3  E6 rr        	inc z80_e 		; next line of font.
00227E  3  D0 02        	bne :+
002280  3  E6 rr        	inc z80_d
002282  3               :
002282  3  E8           	inx
002283  3  E0 08        	cpx #8
002285  3  D0 E4        	bne bchar0
002287  3               
002287  3  20 AD 22     	jsr nexpos		; display position.
00228A  3  D0 05        	bne bchar2 		; not on a new line.
00228C  3               bchar3:
00228C  3  E6 rr        	inc dispy
00228E  3  20 B2 22     	jsr nexlin 		; next line check.
002291  3               bchar2:
002291  3  4C 1C 1D     	jmp dscor2		; tidy up line and column variables.
002294  3               
002294  3               
002294  3               ;-------------------------------------------------
002294  3               ; Display a character.
002294  3               ;
002294  3               ; Input:
002294  3               ;  A = character
002294  3               ;-------------------------------------------------
002294  3               
002294  3               achar:
002294  3  85 rr        	sta z80_b 		; copy to b.
002296  3  20 C0 22     	jsr preprt 		; get ready to print.
002299  3  A5 rr        	lda z80_b		; character in accumulator.
00229B  3  A6 rr        	ldx prtmod 		; print mode.
00229D  3  F0 03        	beq :+
00229F  3  4C 47 22     	jmp bchar 		; no, double-height text.
0022A2  3               :
0022A2  3  20 6F 11     	jsr pchar 		; display character.
0022A5  3  20 AD 22     	jsr nexpos 		; display position.
0022A8  3  F0 E2        	beq bchar3		; next line down.
0022AA  3  4C 91 22     	jmp bchar2 		; tidy up.
0022AD  3               
0022AD  3               
0022AD  3               ;-------------------------------------------------
0022AD  3               ; Get next print column position.
0022AD  3               ;-------------------------------------------------
0022AD  3               
0022AD  3               nexpos:
0022AD  3  E6 rr        	inc dispx		; move along one position.
0022AF  3  A5 rr        	lda dispx 		; get coordinate.
0022B1  3               ;	and #31
0022B1  3  60           	rts 			; return with status in zero flag.
0022B2  3               
0022B2  3               ;-------------------------------------------------
0022B2  3               ; Get next print line position.
0022B2  3               ;-------------------------------------------------
0022B2  3               
0022B2  3               nexlin:
0022B2  3  E6 rr        	inc dispy 		; newline.
0022B4  3  A5 rr        	lda dispy		; vertical position.
0022B6  3  C9 18        	cmp #24			; past screen edge?
0022B8  3  B0 01        	bcs :+
0022BA  3  60           	rts			; no, still okay.
0022BB  3               :
0022BB  3  A9 00        	lda #0			; restart at top.
0022BD  3  85 rr        	sta dispy
0022BF  3  60           	rts
0022C0  3               
0022C0  3               ;--------------------------------------------------------
0022C0  3               ; Pre-print preliminaries.
0022C0  3               ;--------------------------------------------------------
0022C0  3               
0022C0  3               preprt:
0022C0  3  A9 D1        	lda #<(FONT-256)		; font pointer.
0022C2  3  8D C7 1C     	sta grbase		; set up graphics base.
0022C5  3  A9 A4        	lda #>(FONT-256)
0022C7  3  8D C8 1C     	sta grbase+1
0022CA  3               prescr:
0022CA  3  A5 rr        	lda charx 		; display coordinates.
0022CC  3  85 rr        	sta dispx		; set up general coordinates.
0022CE  3  A5 rr        	lda chary
0022D0  3  85 rr        	sta dispy
0022D2  3  60           	rts
0022D3  3               
0022D3  3               ;--------------------------------------------------------------
0022D3  3               ; Get messagenr x in hl
0022D3  3               ;
0022D3  3               ; Input:
0022D3  3               ;  HL = pointer to message list
0022D3  3               ;  X  = message number.
0022D3  3               ;--------------------------------------------------------------
0022D3  3               
0022D3  3               getwrd:
0022D3  3  E0 00        	cpx #0
0022D5  3  D0 01        	bne:+ 			; first word in list?
0022D7  3  60           	rts 			; yep, don't search.
0022D8  3               :
0022D8  3  A0 00        	ldy #0
0022DA  3               getwd0:
0022DA  3  B1 rr        	lda (z80_hl),y
0022DC  3  48           	pha
0022DD  3  E6 rr        	inc z80_l
0022DF  3  D0 02        	bne :+
0022E1  3  E6 rr        	inc z80_h
0022E3  3               :
0022E3  3  68           	pla
0022E4  3  C9 80        	cmp #128		; found end?
0022E6  3  30 F2        	bmi getwd0		; no, carry on.
0022E8  3  CA           	dex			; until we have right number.
0022E9  3  D0 EF        	bne getwd0
0022EB  3  60           	rts
0022EC  3               
0022EC  3               ;-----------------------------------------------------------
0022EC  3               ; Bubble sort.
0022EC  3               ;-----------------------------------------------------------
0022EC  3               
0022EC  3               bsort:
0022EC  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
0022EE  3  85 rr        	sta qscnt
0022F0  3               
0022F0  3  A9 00        	lda #<sprtab 		; sprite table.
0022F2  3  85 rr        	sta z80_x
0022F4  3  A9 0B        	lda #>sprtab
0022F6  3  85 rr        	sta z80_i
0022F8  3               bsort0:
0022F8  3  A0 00        	ldy #0
0022FA  3  B1 rr        	lda (z80_ix),y 		; first sprite type.
0022FC  3  C9 FF        	cmp #255 		; is it switched off?
0022FE  3  F0 30        	beq swemp		; yes, may need to switch another in here.
002300  3               
002300  3  A0 11        	ldy #TABSIZ
002302  3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
002304  3  C9 FF        	cmp #255 		; is it enabled?
002306  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002308  3               
002308  3  A0 14        	ldy #TABSIZ+3
00230A  3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
00230C  3  A0 03        	ldy #3
00230E  3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
002310  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
002312  3               bsort2:
002312  3  18           	clc
002313  3  A5 rr        	lda z80_x
002315  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002317  3  85 rr        	sta z80_x
002319  3  90 02        	bcc :+
00231B  3  E6 rr        	inc z80_i
00231D  3               :
00231D  3  C6 rr        	dec qscnt
00231F  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
002321  3  60           	rts
002322  3               
002322  3               bsort1:
002322  3  A0 11        	ldy #TABSIZ
002324  3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
002326  3  C9 FF        	cmp #255		; is it enabled?
002328  3  F0 E8        	beq bsort2		; no, nothing to swap.
00232A  3  20 3E 23     	jsr swspr		; swap positions.
00232D  3  4C 12 23     	jmp bsort2
002330  3               swemp:
002330  3  A0 11        	ldy #TABSIZ
002332  3  B1 rr        	lda (z80_ix),y		; next table entry.
002334  3  C9 FF        	cmp #255		; is that one on?
002336  3  F0 DA        	beq bsort2		; no, nothing to swap.
002338  3  20 3E 23     	jsr swspr		; swap positions.
00233B  3  4C 12 23     	jmp bsort2
00233E  3               
00233E  3               ; Swap sprites.
00233E  3               
00233E  3               swspr:
00233E  3  A5 rr        	lda z80_x		; table address
002340  3  85 rr        	sta z80_e		; copy to de pair.
002342  3  85 rr        	sta z80_l		; copy to hl pair.
002344  3  A5 rr        	lda z80_i
002346  3  85 rr        	sta z80_h
002348  3  85 rr        	sta z80_d
00234A  3               
00234A  3  18           	clc
00234B  3  A5 rr        	lda z80_l
00234D  3  69 11        	adc #TABSIZ		; distance to second entry.
00234F  3  85 rr        	sta z80_l
002351  3  90 02        	bcc :+
002353  3  E6 rr        	inc z80_h
002355  3               :
002355  3  A9 11        	lda #TABSIZ		; bytes to swap.
002357  3  85 rr        	sta z80_b
002359  3  A0 00        	ldy #0
00235B  3               swspr0:
00235B  3  B1 rr        	lda (z80_hl),y		; fetch second byte.
00235D  3  48           	pha
00235E  3  B1 rr        	lda (z80_de),y 		; fetch first byte.
002360  3  91 rr        	sta (z80_hl),y 		; copy to second.
002362  3  68           	pla
002363  3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
002365  3               
002365  3  E6 rr        	inc z80_e 		; next byte.
002367  3  D0 02        	bne :+
002369  3  E6 rr        	inc z80_d
00236B  3               :
00236B  3  E6 rr        	inc z80_l 		; next byte.
00236D  3  D0 02        	bne :+
00236F  3  E6 rr        	inc z80_h
002371  3               :
002371  3  C6 rr        	dec z80_b
002373  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002375  3  60           	rts
002376  3               
002376  3               ;----------------------------------------------------
002376  3               ; Process sprites.
002376  3               ;----------------------------------------------------
002376  3               
002376  3               pspr:
002376  3  A9 0C        	lda #NUMSPR		; sprites to process.
002378  3  85 rr        	sta sprptr
00237A  3               
00237A  3  A9 00        	lda #<sprtab 		; sprite table.
00237C  3  85 rr        	sta z80_x
00237E  3  A9 0B        	lda #>sprtab
002380  3  85 rr        	sta z80_i
002382  3               pspr1:
002382  3  A0 00        	ldy #0
002384  3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
002386  3  C9 09        	cmp #9 			; within range of sprite types?
002388  3  B0 03        	bcs :+
00238A  3  20 9D 23     	jsr pspr2 		; yes, process this one.
00238D  3               :
00238D  3  18           	clc
00238E  3  A5 rr        	lda z80_x
002390  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002392  3  85 rr        	sta z80_x
002394  3  90 02        	bcc :+
002396  3  E6 rr        	inc z80_i		; next sprite.
002398  3               :
002398  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
00239A  3  D0 E6        	bne pspr1
00239C  3  60           	rts
00239D  3               
00239D  3               pspr2:
00239D  3  A5 rr        	lda z80_x 		; store original sprite pointer.
00239F  3  85 rr        	sta ogptr
0023A1  3  A5 rr        	lda z80_i
0023A3  3  85 rr        	sta ogptr+1
0023A5  3  20 B1 23     	jsr pspr3		; do the routine.
0023A8  3               rtorg:
0023A8  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
0023AA  3  85 rr        	sta z80_x
0023AC  3  A5 rr        	lda ogptr+1
0023AE  3  85 rr        	sta z80_i
0023B0  3               rtorg0:
0023B0  3  60           	rts
0023B1  3               
0023B1  3               pspr3:
0023B1  3  A9 E6        	lda #<evtyp0		; sprite type events list.
0023B3  3  85 rr        	sta z80_l
0023B5  3  A9 23        	lda #>evtyp0
0023B7  3  85 rr        	sta z80_h
0023B9  3               pspr4:
0023B9  3  B1 rr        	lda (z80_ix),y
0023BB  3  0A           	asl a			; double accumulator.
0023BC  3  18           	clc
0023BD  3  65 rr        	adc z80_l
0023BF  3  85 rr        	sta z80_l
0023C1  3  90 02        	bcc :+
0023C3  3  E6 rr        	inc z80_h
0023C5  3               :
0023C5  3  B1 rr        	lda (z80_hl),y
0023C7  3  85 rr        	sta z80_e 		; copy to de.
0023C9  3  48           	pha
0023CA  3               
0023CA  3  E6 rr        	inc z80_l 		; next byte of address.
0023CC  3  D0 02        	bne :+
0023CE  3  E6 rr        	inc z80_h
0023D0  3               :
0023D0  3  B1 rr        	lda (z80_hl),y 		; address high.
0023D2  3  85 rr        	sta z80_d
0023D4  3               
0023D4  3  48           	pha	 		; swap address into hl.
0023D5  3  A5 rr        	lda z80_h
0023D7  3  85 rr        	sta z80_d
0023D9  3  68           	pla
0023DA  3  85 rr        	sta z80_h
0023DC  3  68           	pla
0023DD  3  85 rr        	sta z80_l
0023DF  3  A5 rr        	lda z80_l
0023E1  3  85 rr        	sta z80_e
0023E3  3               
0023E3  3  6C rr rr     	jmp (z80_hl) 		; go there.
0023E6  3               
0023E6  3               ; Address of each sprite type's routine.
0023E6  3               
0023E6  3  DD 29        evtyp0:	.word evnt00
0023E8  3  93 2B        evtyp1:	.word evnt01
0023EA  3  7C 2C        evtyp2:	.word evnt02
0023EC  3  08 2D        evtyp3:	.word evnt03
0023EE  3  A2 2D        evtyp4:	.word evnt04
0023F0  3  A3 2D        evtyp5:	.word evnt05
0023F2  3  A9 2D        evtyp6:	.word evnt06
0023F4  3  85 2E        evtyp7:	.word evnt07
0023F6  3  3C 2F        evtyp8:	.word evnt08
0023F8  3               
0023F8  3               ;--------------------------------------------------------------
0023F8  3               ; Display sprites.
0023F8  3               ;
0023F8  3               ; Input:
0023F8  3               ;  IX = sprite table
0023F8  3               ;--------------------------------------------------------------
0023F8  3               
0023F8  3               dspr:
0023F8  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
0023FA  3  85 rr        	sta sprcnt
0023FC  3               
0023FC  3               dspr0:
0023FC  3  A0 00        	ldy #var_Type
0023FE  3  B1 rr        	lda (z80_ix),y 		; get sprite type.
002400  3  C9 FF        	cmp #255 			; is it enabled?
002402  3  D0 45        	bne dspr1 			; yes, it needs deleting.
002404  3               dspr5:
002404  3  A0 05        	ldy #var_newType
002406  3  B1 rr        	lda (z80_ix),y 		; new type.
002408  3  C9 FF        	cmp #255			; is it enabled?
00240A  3  F0 03        	beq dspr2
00240C  3  4C 98 24     	jmp dspr3 			; yes, it needs drawing.
00240F  3               dspr2:
00240F  3  A0 05        	ldy #var_newType
002411  3  B1 rr        	lda (z80_ix),y 		; copy new type.
002413  3  A0 00        	ldy #var_Type
002415  3  91 rr        	sta (z80_ix),y
002417  3  A0 06        	ldy #var_newImage
002419  3  B1 rr        	lda (z80_ix),y 		; copy new image number.
00241B  3  A0 01        	ldy #var_Image
00241D  3  91 rr        	sta (z80_ix),y
00241F  3  A0 07        	ldy #var_newFrame
002421  3  B1 rr        	lda (z80_ix),y 		; copy new frame.
002423  3  A0 02        	ldy #var_Frame
002425  3  91 rr        	sta (z80_ix),y
002427  3  A0 08        	ldy #var_newY
002429  3  B1 rr        	lda (z80_ix),y 		; copy new y.
00242B  3  A0 03        	ldy #var_Y
00242D  3  91 rr        	sta (z80_ix),y
00242F  3  A0 09        	ldy #var_newX
002431  3  B1 rr        	lda (z80_ix),y 		; copy new x.
002433  3  A0 04        	ldy #var_X
002435  3  91 rr        	sta (z80_ix),y
002437  3               
002437  3  18           	clc
002438  3  A5 rr        	lda z80_x
00243A  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
00243C  3  85 rr        	sta z80_x
00243E  3  A5 rr        	lda z80_i
002440  3  69 00        	adc #0
002442  3  85 rr        	sta z80_i 			; next sprite.
002444  3  C6 rr        	dec sprcnt
002446  3  D0 B4        	bne dspr0			; repeat for remaining sprites.
002448  3  60           	rts
002449  3               
002449  3               dspr1:
002449  3               	; _BEEB clipping code copied from CPC Engine
002449  3  A0 03        	ldy #var_Y
00244B  3  B1 rr        	lda (z80_ix), y		; old x coord
00244D  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
00244F  3  B0 B3        	bcs dspr5			; yes, don't delete it.
002451  3               
002451  3  A0 05        	ldy #var_newType
002453  3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
002455  3  C9 FF        	cmp #255			; is this enabled?
002457  3  D0 06        	bne dspr4 			; yes, display both.
002459  3               
002459  3               dspr6:
002459  3  20 EE 0F     	jsr sspria 			; show single sprite.
00245C  3  4C 0F 24     	jmp dspr2
00245F  3               
00245F  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
00245F  3               
00245F  3               dspr4:
00245F  3               	; _BEEB clipping code copied from CPC Engine
00245F  3  A0 08        	ldy #var_newY
002461  3  B1 rr        	lda (z80_ix), y		; old x coord
002463  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
002465  3  B0 F2        	bcs dspr6			; yes, don't display it.
002467  3               
002467  3  A0 04        	ldy #var_X
002469  3  B1 rr        	lda (z80_ix),y		; old x.
00246B  3  A0 09        	ldy #var_newX
00246D  3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
00246F  3  D0 21        	bne dspr7 			; they differ, need to redraw.
002471  3               
002471  3  A0 03        	ldy #var_Y
002473  3  B1 rr        	lda (z80_ix),y		; old y.
002475  3  A0 08        	ldy #var_newY
002477  3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
002479  3  D0 17        	bne dspr7			; they differ, need to redraw.
00247B  3               
00247B  3  A0 02        	ldy #var_Frame
00247D  3  B1 rr        	lda (z80_ix),y 		; old frame.
00247F  3  A0 07        	ldy #var_newFrame
002481  3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
002483  3  D0 0D        	bne dspr7 			; they differ, need to redraw.
002485  3               
002485  3  A0 01        	ldy #var_Image
002487  3  B1 rr        	lda (z80_ix),y 		; old image.
002489  3  A0 06        	ldy #var_newImage
00248B  3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
00248D  3  D0 03        	bne dspr7 			; they differ, need to redraw.
00248F  3  4C 0F 24     	jmp dspr2			; everything is the same, don't redraw.
002492  3               dspr7:
002492  3  20 25 10     	jsr sspric 			; delete old sprite, draw new one simultaneously.
002495  3  4C 0F 24     	jmp dspr2
002498  3               dspr3:
002498  3               	; _BEEB clipping code copied from CPC Engine
002498  3  A0 08        	ldy #var_newY
00249A  3  B1 rr        	lda (z80_ix), y		; old x coord
00249C  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
00249E  3  90 03        	bcc :+				; no, continue
0024A0  3  4C 0F 24     	jmp dspr2			; yes, don't display it.
0024A3  3               :
0024A3  3  20 1F 10     	jsr ssprib 			; show single sprite.
0024A6  3  4C 0F 24     	jmp dspr2
0024A9  3               
0024A9  3               ;-----------------------------------------
0024A9  3               ; Get sprite address calculations.
0024A9  3               ; gspran = new sprite, gsprad = old sprite.
0024A9  3               ;
0024A9  3               ; Input:
0024A9  3               ;  IX = sprite address
0024A9  3               ;-----------------------------------------
0024A9  3               
0024A9  3               gspran:
0024A9  3  A0 08        	ldy #var_newY
0024AB  3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
0024AD  3  85 rr        	sta dispy
0024AF  3  A0 09        	ldy #var_newX
0024B1  3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
0024B3  3  85 rr        	sta dispx
0024B5  3  A0 06        	ldy #var_newImage
0024B7  3  B1 rr        	lda (z80_ix),y 		; new sprite image.
0024B9  3  20 8B 27     	jsr gfrm		; fetch start frame for this sprite.
0024BC  3               
0024BC  3  A0 00        	ldy #0
0024BE  3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
0024C0  3  A0 07        	ldy #var_newFrame
0024C2  3  18           	clc
0024C3  3  71 rr        	adc (z80_ix),y 		; new add frame number.
0024C5  3  4C E4 24     	jmp gspra0
0024C8  3               
0024C8  3               ;-----------------------------------------
0024C8  3               ; Calculate old sprite address
0024C8  3               ;
0024C8  3               ; Input:
0024C8  3               ;  IX = sprite address
0024C8  3               ;
0024C8  3               ; Output:
0024C8  3               ;  B  = right byte mask
0024C8  3               ;  C  = left byte mask
0024C8  3               ;  DE = spriteframe address
0024C8  3               ;  scraddr = screenaddress(dispx,dispy)
0024C8  3               ;-----------------------------------------
0024C8  3               
0024C8  3               gsprad:
0024C8  3  A0 03        	ldy #var_Y
0024CA  3  B1 rr        	lda (z80_ix),y		; y coordinate.
0024CC  3  85 rr        	sta dispy
0024CE  3  A0 04        	ldy #var_X
0024D0  3  B1 rr        	lda (z80_ix),y		; x coordinate.
0024D2  3  85 rr        	sta dispx
0024D4  3  A0 01        	ldy #var_Image
0024D6  3  B1 rr        	lda (z80_ix),y 		; sprite image.
0024D8  3  20 8B 27     	jsr gfrm 		; fetch start frame for this sprite.
0024DB  3               
0024DB  3  A0 00        	ldy #0
0024DD  3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
0024DF  3  A0 02        	ldy #var_Frame
0024E1  3  18           	clc
0024E2  3  71 rr        	adc (z80_ix),y 		; add frame number.
0024E4  3               
0024E4  3               gspra0:
0024E4  3               .if rflag
0024E4  3  85 rr        	sta z80_e		; multiply by 32.
0024E6  3  A9 00        	lda #0
0024E8  3  85 rr        	sta z80_d
0024EA  3               
0024EA  3  06 rr        	asl z80_e
0024EC  3  26 rr        	rol z80_d
0024EE  3  06 rr        	asl z80_e
0024F0  3  26 rr        	rol z80_d
0024F2  3  06 rr        	asl z80_e
0024F4  3  26 rr        	rol z80_d
0024F6  3  06 rr        	asl z80_e
0024F8  3  26 rr        	rol z80_d
0024FA  3               .if bflag
0024FA  3               	lda z80_e		; multiply by 48
0024FA  3               	sta tmp1
0024FA  3               	lda z80_d
0024FA  3               	sta tmp2
0024FA  3               .endif
0024FA  3  06 rr        	asl z80_e
0024FC  3  26 rr        	rol z80_d
0024FE  3               .if bflag
0024FE  3               	clc
0024FE  3               	lda z80_e
0024FE  3               	adc tmp1
0024FE  3               	sta z80_e
0024FE  3               	lda z80_d
0024FE  3               	adc tmp2
0024FE  3               	sta z80_d
0024FE  3               .endif
0024FE  3               .else
0024FE  3               	lsr a	  		; multiply by 128.
0024FE  3               	sta z80_d 		; store in d.
0024FE  3               	sta tmp1
0024FE  3               	lda #0
0024FE  3               	ror a
0024FE  3               	sta z80_e 		; got low byte.
0024FE  3               	sta tmp2
0024FE  3               .if bflag
0024FE  3               	lsr tmp1		; multiply by 192
0024FE  3               	ror tmp2
0024FE  3               	clc
0024FE  3               	lda tmp2
0024FE  3               	adc z80_e
0024FE  3               	sta z80_e
0024FE  3               	lda tmp1
0024FE  3               	adc z80_d
0024FE  3               	sta z80_d
0024FE  3               .endif
0024FE  3               .endif
0024FE  3  18           	clc 			; address of play sprites.
0024FF  3  A5 rr        	lda z80_e
002501  3               .if swrflag
002501  3  69 F6        	adc #<(sprgfx + data_address - data_start)
002503  3  85 rr        	sta z80_e
002505  3  A5 rr        	lda z80_d
002507  3  69 85        	adc #>(sprgfx + data_address - data_start)
002509  3  85 rr        	sta z80_d
00250B  3               .else
00250B  3               	adc #<sprgfx
00250B  3               	sta z80_e
00250B  3               	lda z80_d
00250B  3               	adc #>sprgfx
00250B  3               	sta z80_d
00250B  3               .endif
00250B  3               
00250B  3  A5 rr        	lda dispx 		; y coordinate.
00250D  3  29 06        	and #6 			; position within byte boundary.
00250F  3  AA           	tax	 		; low byte of table displacement.
002510  3               .if rflag
002510  3  86 rr        	stx sprshft
002512  3               .else
002512  3               	asl a	  		; multiply by 32.
002512  3               	asl a  			; already a multiple
002512  3               	asl a  			; of 2, so just 4
002512  3               .if bflag
002512  3               	sta tmp1
002512  3               	asl a  			; shifts needed.
002512  3               	clc
002512  3               	adc tmp1
002512  3               .else
002512  3               	asl a  			; shifts needed.
002512  3               .endif
002512  3               	clc 			; add to sprite address.
002512  3               	adc z80_e
002512  3               	sta z80_e
002512  3               	bcc :+
002512  3               	inc z80_d
002512  3               :
002512  3               .endif
002512  3  BD 1F 25     	lda spmask,x		 ; pointer to mask table.
002515  3  85 rr        	sta z80_c 		; left mask.
002517  3  BD 20 25     	lda spmask+1,x
00251A  3  85 rr        	sta z80_b 		; right mask.
00251C  3               ; Drop into screen address routine.
00251C  3  4C DA 0F     	jmp scadd
00251F  3               
00251F  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
002523  3  0F F0 03 FC  
002527  3               
002527  3               
002527  3               ;-----------------------------------------------------------
002527  3               ; Animates a sprite.
002527  3               ;
002527  3               ; Input:
002527  3               ;  IX = sprite address
002527  3               ;  HL = last sprite address
002527  3               ;-----------------------------------------------------------
002527  3               
002527  3               animsp:
002527  3  25 rr        	and frmno
002529  3  F0 01        	beq :+
00252B  3  60           	rts
00252C  3               :
00252C  3  A0 06        	ldy #var_newImage
00252E  3  B1 rr        	lda (z80_ix),y		; sprite image
002530  3  20 8B 27     	jsr gfrm		; get frame data.
002533  3               
002533  3  E6 rr        	inc z80_l		; point to frames.
002535  3  D0 02        	bne :+
002537  3  E6 rr        	inc z80_h
002539  3               :
002539  3  A0 07        	ldy #var_newFrame
00253B  3  B1 rr        	lda (z80_ix),y		; sprite frame.
00253D  3  18           	clc
00253E  3  69 01        	adc #1			; next one along.
002540  3  A0 00        	ldy #0
002542  3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
002544  3  90 02        	bcc anims0		; no, not yet.
002546  3  A9 00        	lda #0			; start at first frame.
002548  3               anims0:
002548  3  A0 07        	ldy #var_newFrame
00254A  3  91 rr        	sta (z80_ix),y		; new frame.
00254C  3  60           	rts
00254D  3               
00254D  3               ;--------------------------------------------------------------
00254D  3               ; Animate back
00254D  3               ;
00254D  3               ; Input:
00254D  3               ;  IX = sprite address
00254D  3               ;  HL = last sprite address
00254D  3               ;--------------------------------------------------------------
00254D  3               
00254D  3               animbk:
00254D  3  25 rr        	and frmno
00254F  3  F0 01        	beq :+
002551  3  60           	rts
002552  3               :
002552  3  A0 06        	ldy #var_newImage
002554  3  B1 rr        	lda (z80_ix),y		; sprite image.
002556  3  20 8B 27     	jsr gfrm		; get frame data.
002559  3               
002559  3  E6 rr        	inc z80_l 		; point to frames.
00255B  3  D0 02        	bne :+
00255D  3  E6 rr        	inc z80_h
00255F  3               :
00255F  3  A0 07        	ldy #var_newFrame
002561  3  B1 rr        	lda (z80_ix),y 		; sprite frame.
002563  3  F0 03        	beq :+
002565  3  4C 6C 25     	jmp rtanb0 		; yes, start at end.
002568  3               :
002568  3  A0 00        	ldy #0
00256A  3  B1 rr        	lda (z80_hl),y 		; last sprite.
00256C  3               rtanb0:
00256C  3  38           	sec
00256D  3  E9 01        	sbc #1			; next one along.
00256F  3  4C 48 25     	jmp anims0		; set new frame.
002572  3               
002572  3               ;--------------------------------------------------------------
002572  3               ; Check for collision with other sprite, strict enforcement.
002572  3               ;
002572  3               ; Input:
002572  3               ;  b		= sprite to test for
002572  3               ;  ix		= current sprite pointer
002572  3               ;
002572  3               ; global:	b
002572  3               ; local:	x,y,hl,de,skptr
002572  3               ; calls:	-
002572  3               ;--------------------------------------------------------------
002572  3               
002572  3               sktyp:
002572  3  A9 00        	lda #<sprtab				; sprite table.
002574  3  85 rr        	sta z80_l
002576  3  A9 0B        	lda #>sprtab
002578  3  85 rr        	sta z80_h
00257A  3               numsp2:
00257A  3  A9 0C        	lda #NUMSPR				; number of sprites.
00257C  3  85 rr        	sta sktptr
00257E  3               sktyp0:
00257E  3  A5 rr        	lda z80_l 				; store pointer to sprite.
002580  3  85 rr        	sta skptr
002582  3  A5 rr        	lda z80_h
002584  3  85 rr        	sta skptr+1
002586  3               
002586  3  A0 00        	ldy #0
002588  3  B1 rr        	lda (z80_hl),y 				; get sprite type.
00258A  3  C5 rr        	cmp z80_b				; is it the type we seek?
00258C  3  F0 1D        	beq coltyp				; yes, we can use this one.
00258E  3               sktyp1:
00258E  3  18           	clc
00258F  3  A5 rr        	lda skptr				; retrieve sprite pointer.
002591  3  69 11        	adc #TABSIZ				; size of each entry.
002593  3  85 rr        	sta z80_l
002595  3  A5 rr        	lda skptr+1
002597  3  69 00        	adc #0
002599  3  85 rr        	sta z80_h
00259B  3  C6 rr        	dec sktptr					; one less iteration.
00259D  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
00259F  3  A9 00        	lda #0					; default to ROM address - no sprite.
0025A1  3  85 rr        	sta z80_l
0025A3  3  85 rr        	sta z80_h
0025A5  3  85 rr        	sta skptr				; store pointer to sprite.
0025A7  3  85 rr        	sta skptr+1
0025A9  3               
0025A9  3  18           	clc					; don't return with zero flag set.
0025AA  3  60           	rts 					; didn't find one.
0025AB  3               
0025AB  3               coltyp:
0025AB  3  A0 00        	ldy #0
0025AD  3  B1 rr        	lda (z80_ix),y				; current sprite type.
0025AF  3  C5 rr        	cmp z80_b				; seeking sprite of same type?
0025B1  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0025B3  3               colty0:
0025B3  3  A0 09        	ldy #9					; distance to x position in table.
0025B5  3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
0025B7  3  85 rr        	sta z80_e
0025B9  3  88           	dey
0025BA  3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
0025BC  3  85 rr        	sta z80_d
0025BE  3               
0025BE  3               ; Drop into collision detection.
0025BE  3               
0025BE  3               colc16:
0025BE  3  A0 09        	ldy #9
0025C0  3  B1 rr        	lda (z80_ix),y			 	; x coord.
0025C2  3  38           	sec					; subtract x.
0025C3  3  E5 rr        	sbc z80_e
0025C5  3  B0 05        	bcs  colc1a 				; result is positive.
0025C7  3  49 FF        	eor #$ff				; make negative positive.
0025C9  3  18           	clc
0025CA  3  69 01        	adc #1
0025CC  3               colc1a:
0025CC  3  C9 10        	cmp #16 				; within x range?
0025CE  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0025D0  3  85 rr        	sta z80_c				; store difference.
0025D2  3               
0025D2  3  A0 08        	ldy #8
0025D4  3  B1 rr        	lda (z80_ix),y				; y coord.
0025D6  3  38           	sec
0025D7  3  E5 rr        	sbc z80_d				; subtract y.
0025D9  3  B0 05        	bcs colc1b				; result is positive.
0025DB  3  49 FF        	eor #$ff				; make negative positive.
0025DD  3  18           	clc
0025DE  3  69 01        	adc #1
0025E0  3               colc1b:
0025E0  3  C9 10        	cmp #16					; within y range?
0025E2  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0025E4  3  18           	clc					; add x difference.
0025E5  3  65 rr        	adc z80_c
0025E7  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0025E9  3  B0 02        	bcs :+
0025EB  3  38           	sec
0025EC  3  60           	rts 					; carry set if there's a collision.
0025ED  3               :
0025ED  3  4C 8E 25     	jmp sktyp1				; try next sprite in table.
0025F0  3               colty1:
0025F0  3  A5 rr        	lda z80_x  				; compare the two.
0025F2  3  C5 rr        	cmp z80_l
0025F4  3  D0 09        	bne end_col
0025F6  3  A5 rr        	lda z80_i
0025F8  3  C5 rr        	cmp z80_h
0025FA  3  D0 03        	bne end_col
0025FC  3  4C 8E 25     	jmp sktyp1 				; addresses are identical.
0025FF  3               end_col:
0025FF  3  4C B3 25     	jmp colty0
002602  3               
002602  3               ;-----------------------------------------------------------
002602  3               ; Display number, left aligned
002602  3               ;
002602  3               ; Input:
002602  3               ;  a		= number
002602  3               ;
002602  3               ; global:	-
002602  3               ; local:	a,y,bc,hl,displ0
002602  3               ; calls:	num2ch,dmsg3
002602  3               ;-----------------------------------------------------------
002602  3               
002602  3               disply:
002602  3  85 rr        	sta z80_a
002604  3  A9 2A        	lda #<displ0				; display workspace.
002606  3  85 rr        	sta z80_c
002608  3  A9 26        	lda #>displ0
00260A  3  85 rr        	sta z80_b
00260C  3  A5 rr        	lda z80_a
00260E  3  20 4E 1A     	jsr num2ch				; convert accumulator to string.
002611  3               displ1:
002611  3  C6 rr        	dec z80_c				; back one character.
002613  3  D0 02        	bne :+
002615  3  C6 rr        	dec z80_b
002617  3               :
002617  3  A0 00        	ldy #0
002619  3  B1 rr        	lda (z80_bc),y				; fetch digit.
00261B  3  09 80        	ora #128				; insert end marker.
00261D  3  91 rr        	sta (z80_bc),y				; new value.
00261F  3               
00261F  3  A9 2A        	lda #<displ0				; display space.
002621  3  85 rr        	sta z80_l
002623  3  A9 26        	lda #>displ0
002625  3  85 rr        	sta z80_h
002627  3  4C C4 21     	jmp dmsg3				; display the string.
00262A  3               
00262A  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
00262E  3               
00262E  3               ;----------------------------------------------------------------
00262E  3               ; Initialise screen.
00262E  3               ;
00262E  3               ; global:	roomtb,scno
00262E  3               ; local:	-
00262E  3               ; calls:	tstcs
00262E  3               ;----------------------------------------------------------------
00262E  3               
00262E  3               initsc:
00262E  3  AD 9A 29     	lda roomtb 			; whereabouts in the map are we?
002631  3  20 3B 26     	jsr tstsc 			; find displacement.
002634  3  C9 FF        	cmp #255 			; is it valid?
002636  3  F0 02        	beq init_end 			; no, it's rubbish.
002638  3  85 rr        	sta scno			; store new room number.
00263A  3               init_end:
00263A  3  60           	rts
00263B  3               
00263B  3               ;----------------------------------------------------------------
00263B  3               ; Test screen.
00263B  3               ;
00263B  3               ; global:	-
00263B  3               ; local:	x
00263B  3               ; calls:	-
00263B  3               ;----------------------------------------------------------------
00263B  3               
00263B  3               tstsc:
00263B  3  85 rr        	sta tmproom
00263D  3  18           	clc
00263E  3  69 09        	adc #MAPWID 			; add width in case we"re negative.
002640  3  AA           	tax 				; add displacement to map data.
002641  3  BD 9D 29     	lda mapdat-MAPWID,x 		; find room number there.
002644  3  60           	rts
002645  3               
002645  3               ;--------------------------
002645  3               ; Screen left.
002645  3               ;--------------------------
002645  3               
002645  3               scrl:
002645  3  AD 9A 29     	lda roomtb 			; present room table pointer.
002648  3  38           	sec
002649  3  E9 01        	sbc #1				; room left.
00264B  3               scrl0:
00264B  3  20 3B 26     	jsr tstsc			; test screen.
00264E  3  C9 FF        	cmp #255			; is there a screen this way?
002650  3  D0 01        	bne :+
002652  3  60           	rts				; no, return to loop.
002653  3               :
002653  3  A5 rr        	lda tmproom			; restore room displacement.
002655  3  8D 9A 29     	sta roomtb			; new room table position.
002658  3               scrl1:
002658  3  20 2E 26     	jsr initsc 			; set new screen.
00265B  3  A9 02        	lda #2
00265D  3  85 rr        	sta restfl 			; set it.
00265F  3  60           	rts
002660  3               scrr:
002660  3  AD 9A 29     	lda roomtb 			; room table pointer.
002663  3  18           	clc
002664  3  69 01        	adc #1				; room right.
002666  3  4C 4B 26     	jmp scrl0
002669  3               scru:
002669  3  AD 9A 29     	lda roomtb 			; room table pointer.
00266C  3  38           	sec
00266D  3  E9 09        	sbc #MAPWID 			; room up.
00266F  3  4C 4B 26     	jmp scrl0
002672  3               scrd:
002672  3  AD 9A 29     	lda roomtb 			; room table pointer.
002675  3  18           	clc
002676  3  69 09        	adc #MAPWID 			; room down.
002678  3  4C 4B 26     	jmp scrl0
00267B  3               
00267B  3               ;-----------------------------------------
00267B  3               ; Jump to new screen.
00267B  3               ;-----------------------------------------
00267B  3               
00267B  3               nwscr:
00267B  3  A2 00        	ldx #0				; start of map data.
00267D  3               nwscr0:
00267D  3  DD A6 29     	cmp mapdat,x
002680  3  F0 06        	beq nwscr1			; have we found a match for screen?
002682  3  E8           	inx 				; next room.
002683  3  E0 50        	cpx #80				; zero room count, 80 to search.
002685  3  D0 F6        	bne nwscr0			; keep looking.
002687  3  60           	rts
002688  3               nwscr1:
002688  3  8E 9A 29     	stx roomtb			; set the map position.
00268B  3  4C 58 26     	jmp scrl1			; draw new room.
00268E  3               
00268E  3               
00268E  3               ;----------------------------------------------------------
00268E  3               ; Gravity processing.
00268E  3               ;----------------------------------------------------------
00268E  3               
00268E  3               grav:
00268E  3  A0 0D        	ldy #13
002690  3  B1 rr        	lda (z80_ix),y			; jump pointer low.
002692  3  85 rr        	sta z80_l
002694  3  A0 0E        	ldy #14
002696  3  B1 rr        	lda (z80_ix),y			; jump pointer high.
002698  3  85 rr        	sta z80_h
00269A  3  05 rr        	ora z80_l			; merge in low byte.
00269C  3  D0 01        	bne :+
00269E  3  60           	rts				; if neither is set, we're not in the air.
00269F  3               :
00269F  3  A0 00        	ldy #0
0026A1  3  B1 rr        	lda (z80_hl),y			; pixels to move.
0026A3  3  85 rr        	sta z80_a
0026A5  3  C9 63        	cmp #99				; reached the end?
0026A7  3  D0 0C        	bne grav0			; no, continue.
0026A9  3               grav2:
0026A9  3  C6 rr        	dec z80_l			; go back to previous value.
0026AB  3  C9 FF        	cmp #$ff
0026AD  3  D0 02        	bne :+
0026AF  3  C6 rr        	dec z80_h
0026B1  3               :
0026B1  3  B1 rr        	lda (z80_hl),y			; fetch that from table.
0026B3  3  85 rr        	sta z80_a
0026B5  3               grav0:
0026B5  3  E6 rr        	inc z80_l			; point to next table entry.
0026B7  3  D0 02        	bne :+
0026B9  3  E6 rr        	inc z80_h
0026BB  3               :
0026BB  3  A5 rr        	lda z80_l
0026BD  3  A0 0D        	ldy #13
0026BF  3  91 rr        	sta (z80_ix),y			; store new pointer low.
0026C1  3  A5 rr        	lda z80_h
0026C3  3  A0 0E        	ldy #14
0026C5  3  91 rr        	sta (z80_ix),y			; store new pointer high.
0026C7  3               grav1:
0026C7  3  A5 rr        	lda z80_a
0026C9  3  D0 01        	bne :+				; any movement required?
0026CB  3  60           	rts				; no, not this time.
0026CC  3               :
0026CC  3  A5 rr        	lda z80_a
0026CE  3  C9 80        	cmp #128			; is it up or down?
0026D0  3  B0 15        	bcs gravu			; it's up.
0026D2  3               gravd:
0026D2  3  85 rr        	sta z80_b			; set pixels to move.
0026D4  3               gravd0:
0026D4  3  20 AE 1F     	jsr cangd			; can we go down?
0026D7  3  D0 28        	bne gravst			; can't move down, so stop.
0026D9  3  A0 08        	ldy #8
0026DB  3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
0026DD  3  18           	clc
0026DE  3  69 01        	adc #1
0026E0  3  91 rr        	sta (z80_ix),y
0026E2  3  C6 rr        	dec z80_b
0026E4  3  D0 EE        	bne gravd0
0026E6  3  60           	rts
0026E7  3               gravu:
0026E7  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0026E9  3  18           	clc
0026EA  3  69 01        	adc #1
0026EC  3  85 rr        	sta z80_b			; set pixels to move.
0026EE  3               gravu0:
0026EE  3  20 79 1F     	jsr cangu			; can we go up?
0026F1  3  D0 6E        	bne ifalls			; can't move up, go down next.
0026F3  3  A0 08        	ldy #8
0026F5  3  B1 rr        	lda (z80_ix),y
0026F7  3  38           	sec
0026F8  3  E9 01        	sbc #1
0026FA  3  91 rr        	sta (z80_ix),y			; adjust new x coord.
0026FC  3  C6 rr        	dec z80_b
0026FE  3  D0 EE        	bne gravu0
002700  3  60           	rts
002701  3               gravst:
002701  3  A0 0D        	ldy #var_jumpLo
002703  3  B1 rr        	lda (z80_ix),y			; jump pointer low.
002705  3  85 rr        	sta z80_l
002707  3  A0 0E        	ldy #var_jumpHi
002709  3  B1 rr        	lda (z80_ix),y			; jump pointer high.
00270B  3  85 rr        	sta z80_h
00270D  3               
00270D  3  A9 00        	lda #0				; null value in pointer.
00270F  3  A0 0D        	ldy #var_jumpLo
002711  3  91 rr        	sta (z80_ix),y			; store new pointer low.
002713  3  C8           	iny
002714  3  91 rr        	sta (z80_ix),y			; store new pointer high.
002716  3               
002716  3  A0 00        	ldy #0
002718  3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
00271A  3  C9 63        	cmp #99				; is it the end marker?
00271C  3               evftf:
00271C  3  F0 01        	beq :+				; yes, fallen too far.
00271E  3  60           	rts
00271F  3               :
00271F  3  4C F7 33     	jmp evnt15			; EVENT FELLTOOFAR
002722  3               
002722  3               ;------------------------------------------------
002722  3               ; Initiate fall check.
002722  3               ;------------------------------------------------
002722  3               
002722  3               ifall:
002722  3  A0 0D        	ldy #var_jumpLo
002724  3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
002726  3  85 rr        	sta z80_l
002728  3  A0 0E        	ldy #var_jumpHi
00272A  3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
00272C  3  85 rr        	sta z80_h			; high byte in accumulator.
00272E  3  05 rr        	ora z80_l			; merge in low byte.
002730  3  F0 01        	beq :+
002732  3  60           	rts				; if either is set, we're already in the air.
002733  3               :
002733  3  A0 09        	ldy #9
002735  3  B1 rr        	lda (z80_ix),y			; y coordinate.
002737  3  85 rr        	sta dispx
002739  3  A0 08        	ldy #8
00273B  3  B1 rr        	lda (z80_ix),y			; look x coordinate.
00273D  3  18           	clc
00273E  3               numsp7:
00273E  3  69 10        	adc #SPR_HGT			; add 16 pixels.
002740  3  85 rr        	sta dispy			; set up test coordinates.
002742  3  20 13 21     	jsr tstbl			; get map address.
002745  3  20 40 20     	jsr plchk			; block, platform check.
002748  3  F0 01        	beq :+
00274A  3  60           	rts				; it's solid, don't fall.
00274B  3               :
00274B  3  E6 rr        	inc bufaddr			; look right one cell.
00274D  3  20 40 20     	jsr plchk			; block, platform check.
002750  3  F0 01        	beq :+
002752  3  60           	rts				; it's solid, don't fall.
002753  3               :
002753  3  A5 rr        	lda dispx			; y coordinate.
002755  3  29 07        	and #7				; position straddling block cells.
002757  3  F0 08        	beq ifalls			; no more checks needed.
002759  3  E6 rr        	inc bufaddr			; look to third cell.
00275B  3  20 40 20     	jsr plchk			; block, platform check.
00275E  3  F0 01        	beq :+
002760  3  60           	rts				; it's solid, don't fall.
002761  3               :
002761  3               ifalls:
002761  3               .if swrflag
002761  3  A9 D1        	lda #<(jtab + data_address - data_start)			; jump table start.
002763  3  85 rr        	sta z80_l
002765  3  A9 A8        	lda #>(jtab + data_address - data_start)
002767  3  85 rr        	sta z80_h
002769  3               .else
002769  3               	lda #<jtab			; jump table start.
002769  3               	sta z80_l
002769  3               	lda #>jtab
002769  3               	sta z80_h
002769  3               .endif
002769  3               ifal0:
002769  3  E6 rr        	inc z80_l			; point to next value.
00276B  3  D0 02        	bne :+
00276D  3  E6 rr        	inc z80_h
00276F  3               :
00276F  3  A0 00        	ldy #0
002771  3  B1 rr        	lda (z80_hl),y			; fetch value.
002773  3  F0 F4        	beq ifal0			; no, get next value.
002775  3  C9 63        	cmp #99				; reached end of table?
002777  3  D0 01        	bne :+
002779  3  60           	rts				; yes, don't fall.
00277A  3               :
00277A  3  C9 80        	cmp #128			; is it going up?
00277C  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
00277E  3               
00277E  3  A0 0D        	ldy #13
002780  3  A5 rr        	lda z80_l
002782  3  91 rr        	sta (z80_ix),y 			; set jump low.
002784  3  A0 0E        	ldy #14
002786  3  A5 rr        	lda z80_h
002788  3  91 rr        	sta (z80_ix),y 			; set jump high.
00278A  3  60           	rts
00278B  3               
00278B  3               
00278B  3               ;----------------------------------------------------
00278B  3               ; Get frame data for a particular sprite.
00278B  3               ; Input:
00278B  3               ;  a		= framenumer
00278B  3               ; Output:
00278B  3               ;  hl		= frame address
00278B  3               ;
00278B  3               ; global:	hl,frmptr
00278B  3               ; local:	-
00278B  3               ; calls:	-
00278B  3               ;----------------------------------------------------
00278B  3               
00278B  3               gfrm:
00278B  3  0A           	asl a	 		 	; multiple of 2.
00278C  3  18           	clc
00278D  3  6D 0D 16     	adc frmptr 			; frames used by game.
002790  3  85 rr        	sta z80_l
002792  3  AD 0E 16     	lda frmptr+1
002795  3  69 00        	adc #0
002797  3  85 rr        	sta z80_h 			; point to frame start.
002799  3  60           	rts
00279A  3               
00279A  3               ;----------------------------------------------------
00279A  3               ; Find sprite list for current room.
00279A  3               ;
00279A  3               ; global:	hl
00279A  3               ; local:	x,y
00279A  3               ; calls:	-
00279A  3               ;----------------------------------------------------
00279A  3               
00279A  3               sprlst:
00279A  3               .if swrflag
00279A  3  A9 83        	lda #<(nmedat + data_address - data_start) 			; list of enemy sprites.
00279C  3  85 rr        	sta z80_l
00279E  3  A9 A0        	lda #>(nmedat + data_address - data_start)
0027A0  3  85 rr        	sta z80_h
0027A2  3               .else
0027A2  3               	lda #<nmedat 			; list of enemy sprites.
0027A2  3               	sta z80_l
0027A2  3               	lda #>nmedat
0027A2  3               	sta z80_h
0027A2  3               .endif
0027A2  3  A6 rr        	ldx scno 			; screen number.
0027A4  3  D0 01        	bne sprls2 			; is it the first screen?
0027A6  3  60           	rts 				; yes, don't need to search data.
0027A7  3               sprls2:
0027A7  3  A0 00        	ldy #0
0027A9  3               sprls1:
0027A9  3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
0027AB  3  C9 FF        	cmp #255			; is it an end marker?
0027AD  3  F0 0E        	beq sprls0 			; yes, end of this room.
0027AF  3               
0027AF  3  18           	clc 				; point to next sprite in list.
0027B0  3  A5 rr        	lda z80_l
0027B2  3  69 04        	adc #NMESIZ
0027B4  3  85 rr        	sta z80_l
0027B6  3  90 02        	bcc :+
0027B8  3  E6 rr        	inc z80_h
0027BA  3               :
0027BA  3  4C A9 27     	jmp sprls1 			; continue until end of room.
0027BD  3               sprls0:
0027BD  3  E6 rr        	inc z80_l 			; point to start of next screen.s
0027BF  3  D0 02        	bne :+
0027C1  3  E6 rr        	inc z80_h
0027C3  3               :
0027C3  3  CA           	dex
0027C4  3  D0 E3        	bne sprls1 			; continue until room found.
0027C6  3  60           	rts
0027C7  3               
0027C7  3               
0027C7  3               ;----------------------------------------------------
0027C7  3               ; Clear all but a single player sprite.
0027C7  3               ;
0027C7  3               ; global:	-
0027C7  3               ; local:	x,y,ix
0027C7  3               ; calls:	-
0027C7  3               ;----------------------------------------------------
0027C7  3               
0027C7  3               nspr:
0027C7  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0027C9  3  85 rr        	sta sprcnt
0027CB  3  A9 00        	lda #<sprtab 			; sprite table.
0027CD  3  85 rr        	sta z80_x
0027CF  3  A9 0B        	lda #>sprtab
0027D1  3  85 rr        	sta z80_i
0027D3  3               nspr0:
0027D3  3  A0 00        	ldy #0 				; fetch sprite type.
0027D5  3  B1 rr        	lda (z80_ix),y 			; is it a player?
0027D7  3  F0 1A        	beq nspr1 			; yes, keep this one.
0027D9  3               
0027D9  3  A9 FF        	lda #255
0027DB  3  A0 00        	ldy #0 				; fetch sprite type.
0027DD  3  91 rr        	sta (z80_ix),y 			; delete sprite.
0027DF  3  A0 05        	ldy #5
0027E1  3  91 rr        	sta (z80_ix),y 			; remove next type.
0027E3  3               
0027E3  3  18           	clc	 			; next sprite.
0027E4  3  A5 rr        	lda z80_x
0027E6  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0027E8  3  85 rr        	sta z80_x
0027EA  3  90 02        	bcc :+
0027EC  3  E6 rr        	inc z80_i
0027EE  3               :
0027EE  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0027F0  3  D0 E1        	bne nspr0
0027F2  3  60           	rts
0027F3  3               nspr1:
0027F3  3  A9 FF        	lda #255
0027F5  3  A0 00        	ldy #0
0027F7  3  91 rr        	sta (z80_ix),y 			; delete sprite.
0027F9  3               
0027F9  3  18           	clc	 			; point to next sprite.
0027FA  3  A5 rr        	lda z80_x
0027FC  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0027FE  3  85 rr        	sta z80_x
002800  3  90 02        	bcc :+
002802  3  E6 rr        	inc z80_i
002804  3               :
002804  3  C6 rr        	dec sprcnt	 			; one less to do.
002806  3  D0 01        	bne nspr2
002808  3  60           	rts
002809  3               nspr2:
002809  3  A9 FF        	lda #255
00280B  3  A0 00        	ldy #0
00280D  3  91 rr        	sta (z80_ix),y 			; delete sprite.
00280F  3  A0 05        	ldy #5
002811  3  91 rr        	sta (z80_ix),y 			; remove next type.
002813  3               
002813  3  18           	clc	 			; next sprite.
002814  3  A5 rr        	lda z80_x
002816  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
002818  3  85 rr        	sta z80_x
00281A  3  90 02        	bcc :+
00281C  3  E6 rr        	inc z80_i
00281E  3               :
00281E  3  C6 rr        	dec sprcnt	 			; one less space in table.
002820  3  D0 E7        	bne nspr2
002822  3  60           	rts
002823  3               
002823  3               ;----------------------------------------------------------
002823  3               ; Two initialisation routines.
002823  3               ; Initialise sprites - copy everything from list to table.
002823  3               ;
002823  3               ; global:	-
002823  3               ; local:	x,y,ix
002823  3               ; calls:	cpsp
002823  3               ;----------------------------------------------------------
002823  3               
002823  3               ispr:
002823  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
002825  3  85 rr        	sta sprcnt
002827  3  A9 00        	lda #<sprtab			; sprite table.
002829  3  85 rr        	sta z80_x
00282B  3  A9 0B        	lda #>sprtab
00282D  3  85 rr        	sta z80_i
00282F  3               ispr2:
00282F  3  A0 00        	ldy #0
002831  3  B1 rr        	lda (z80_hl),y 			; fetch byte.
002833  3  C9 FF        	cmp #255 			; is it an end marker?
002835  3  D0 01        	bne :+
002837  3  60           	rts 				; yes, no more to do.
002838  3               :
002838  3               ispr1:
002838  3  A0 00        	ldy #0
00283A  3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
00283C  3  C9 FF        	cmp #255 			; is it enabled yet?
00283E  3  D0 08        	bne ispr4			; yes, try another slot.
002840  3               
002840  3  A0 05        	ldy #5
002842  3  B1 rr        	lda (z80_ix),y		 	; next type.
002844  3  C9 FF        	cmp #255 			; is it enabled yet?
002846  3  F0 10        	beq ispr3 			; no, process this one.
002848  3               ispr4:
002848  3  18           	clc 				; next sprite.
002849  3  A5 rr        	lda z80_x
00284B  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00284D  3  85 rr        	sta z80_x
00284F  3  90 02        	bcc :+
002851  3  E6 rr        	inc z80_i
002853  3               :
002853  3  C6 rr        	dec sprcnt
002855  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
002857  3  60           	rts  				; no more room in table.
002858  3               ispr3:
002858  3  20 AB 28     	jsr cpsp			; initialise a sprite.
00285B  3  C6 rr        	dec sprcnt			; one less space in the table.
00285D  3  D0 D0        	bne ispr2
00285F  3  60           	rts
002860  3               
002860  3               
002860  3               ;-----------------------------------------------------------------------
002860  3               ; Initialise sprites - but not player, we're keeping the old one.
002860  3               ;
002860  3               ; global:	-
002860  3               ; local:	x,y,ix
002860  3               ; calls:	cpsp
002860  3               ;-----------------------------------------------------------------------
002860  3               
002860  3               kspr:
002860  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
002862  3  A9 00        	lda #<sprtab 			; sprite table.
002864  3  85 rr        	sta z80_x
002866  3  A9 0B        	lda #>sprtab
002868  3  85 rr        	sta z80_i
00286A  3               kspr2:
00286A  3  A0 00        	ldy #0
00286C  3  B1 rr        	lda (z80_hl),y 			; fetch byte.
00286E  3  C9 FF        	cmp #255 			; is it an end marker?
002870  3  D0 01        	bne :+
002872  3  60           	rts 				; yes, no more to do.
002873  3               :
002873  3  C9 00        	cmp #0
002875  3  D0 0E        	bne kspr1 			; no, add to table as normal.
002877  3               
002877  3  18           	clc 				; next sprite.
002878  3  A5 rr        	lda z80_l
00287A  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00287C  3  85 rr        	sta z80_l
00287E  3  90 02        	bcc :+
002880  3  E6 rr        	inc z80_h
002882  3               :
002882  3  4C 6A 28     	jmp kspr2
002885  3               kspr1:
002885  3  A0 00        	ldy #0 				; fetch sprite type.
002887  3  B1 rr        	lda (z80_ix),y
002889  3  C9 FF        	cmp #255 			; is it enabled yet?
00288B  3  D0 08        	bne kspr4 			; yes, try another slot.
00288D  3               
00288D  3  A0 05        	ldy #5 				; next type.
00288F  3  B1 rr        	lda (z80_ix),y
002891  3  C9 FF        	cmp #255 			; is it enabled yet?
002893  3  F0 0F        	beq kspr3 			; no, process this one.
002895  3               kspr4:
002895  3  18           	clc 				; next sprite.
002896  3  A5 rr        	lda z80_x
002898  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00289A  3  85 rr        	sta z80_x
00289C  3  90 02        	bcc :+
00289E  3  E6 rr        	inc z80_i
0028A0  3               :
0028A0  3  CA           	dex	 			; repeat for remaining sprites.
0028A1  3  D0 E2        	bne kspr1
0028A3  3  60           	rts  				; no more room in table.
0028A4  3               kspr3:
0028A4  3  20 AB 28     	jsr cpsp 			; copy sprite to table.
0028A7  3  CA           	dex	 			; one less space in the table.
0028A8  3  D0 C0        	bne kspr2
0028AA  3  60           	rts
0028AB  3               
0028AB  3               ;----------------------------------------------
0028AB  3               ; Copy sprite from list to table.
0028AB  3               ;
0028AB  3               ; global:	hl,ix
0028AB  3               ; local:	y
0028AB  3               ; calls:	evnt09
0028AB  3               ;----------------------------------------------
0028AB  3               
0028AB  3               cpsp:
0028AB  3  A0 00        	ldy #0					; fetch byte from table.
0028AD  3  B1 rr        	lda (z80_hl),y
0028AF  3               	; y=var_Type
0028AF  3  91 rr        	sta (z80_ix),y			; set up type.
0028B1  3  A0 05        	ldy #var_newType
0028B3  3  91 rr        	sta (z80_ix),y 			; set up type.
0028B5  3               
0028B5  3  E6 rr        	inc z80_l 				; move to next byte.
0028B7  3  D0 02        	bne :+
0028B9  3  E6 rr        	inc z80_h
0028BB  3               :
0028BB  3  A0 00        	ldy #0 					; fetch byte from table.
0028BD  3  B1 rr        	lda (z80_hl),y
0028BF  3  A0 06        	ldy #var_newImage
0028C1  3  91 rr        	sta (z80_ix),y			; set up image.
0028C3  3               
0028C3  3  E6 rr        	inc z80_l 				; move to next byte.
0028C5  3  D0 02        	bne :+
0028C7  3  E6 rr        	inc z80_h
0028C9  3               :
0028C9  3  A0 00        	ldy #0
0028CB  3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
0028CD  3  A0 08        	ldy #var_newY
0028CF  3  91 rr        	sta (z80_ix),y 			; set up coordinate.
0028D1  3               
0028D1  3  A9 C8        	lda #200 				; set initial coordinate off screen.
0028D3  3  A0 03        	ldy #var_Y
0028D5  3  91 rr        	sta (z80_ix),y
0028D7  3               
0028D7  3  E6 rr        	inc z80_l 				; move to next byte.
0028D9  3  D0 02        	bne :+
0028DB  3  E6 rr        	inc z80_h
0028DD  3               :
0028DD  3  A0 00        	ldy #0 					; fetch byte from table.
0028DF  3  B1 rr        	lda (z80_hl),y
0028E1  3  A0 09        	ldy #var_newX
0028E3  3  91 rr        	sta (z80_ix),y 			; set up coordinate.
0028E5  3               
0028E5  3  E6 rr        	inc z80_l 				; move to next byte.
0028E7  3  D0 02        	bne :+
0028E9  3  E6 rr        	inc z80_h
0028EB  3               :
0028EB  3  A9 00        	lda #0					; zeroes in accumulator.
0028ED  3  A0 07        	ldy #var_newFrame 		; reset frame number.
0028EF  3  91 rr        	sta (z80_ix),y
0028F1  3  A0 0A        	ldy #var_Direction 		; reset direction.
0028F3  3  91 rr        	sta (z80_ix),y
0028F5  3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
0028F7  3  91 rr        	sta (z80_ix),y
0028F9  3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
0028FB  3  91 rr        	sta (z80_ix),y
0028FD  3               
0028FD  3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
0028FF  3  A0 10        	ldy #var_dataHi
002901  3  91 rr        	sta (z80_ix),y
002903  3               evis0:
002903  3  A5 rr        	lda z80_i
002905  3  48           	pha
002906  3  A5 rr        	lda z80_x
002908  3  48           	pha
002909  3  A5 rr        	lda z80_h
00290B  3  48           	pha
00290C  3  A5 rr        	lda z80_l
00290E  3  48           	pha
00290F  3               
00290F  3  20 82 2F     	jsr evnt09 				; perform event.
002912  3               
002912  3  68           	pla
002913  3  85 rr        	sta z80_l
002915  3  68           	pla
002916  3  85 rr        	sta z80_h
002918  3  68           	pla
002919  3  85 rr        	sta z80_x
00291B  3  68           	pla
00291C  3  85 rr        	sta z80_i
00291E  3               
00291E  3  18           	clc
00291F  3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
002921  3  69 11        	adc #TABSIZ		 	; next sprite.
002923  3  85 rr        	sta z80_x
002925  3  90 02        	bcc :+
002927  3  E6 rr        	inc z80_i
002929  3               :
002929  3  60           	rts
00292A  3               
00292A  3               
00292A  3               ;-------------------------------------
00292A  3               ; Clear the play area window.
00292A  3               ;-------------------------------------
00292A  3               
00292A  3               clw:
00292A  3  AD 04 16     	lda wintop			; get coordinates of window.
00292D  3  85 rr        	sta dispy			; put into dispx for calculation.
00292F  3  AD 05 16     	lda winlft
002932  3  85 rr        	sta dispx
002934  3               
002934  3  AD 06 16     	lda winhgt			; height of window.
002937  3  85 rr        	sta rrow			; copy to b register.
002939  3               clw3:
002939  3  AD 07 16     	lda winwid 			; width of window.
00293C  3  85 rr        	sta rcol
00293E  3               clw2:
00293E  3  20 0E 1E     	jsr gprad 			; get print address.
002941  3  A9 00        	lda #0				; zero byte to write.
002943  3  A2 07        	ldx #7				; pixel height of each cell.
002945  3               clw1:
002945  3  BC A6 11     	ldy scrtab,x
002948  3  91 rr        	sta (scraddr),y 			; copy to screen.
00294A  3  CA           	dex				; next screen row down.
00294B  3  10 F8        	bpl clw1
00294D  3               
00294D  3  E6 rr        	inc dispx			; next column.
00294F  3  C6 rr        	dec rcol			; one less to do.
002951  3  D0 EB        	bne clw2			; repeat for remaining columns.
002953  3               
002953  3  AD 05 16     	lda winlft			; get left edge.
002956  3  85 rr        	sta dispx 			; reset x.
002958  3  E6 rr        	inc dispy 			; next line down.
00295A  3               
00295A  3  C6 rr        	dec rrow
00295C  3  D0 DB        	bne clw3			; repeat down the screen.
00295E  3               
00295E  3  AD 04 16     	lda wintop			; get coordinates of window.
002961  3  85 rr        	sta chary			; put into display position.
002963  3  AD 05 16     	lda winlft
002966  3  85 rr        	sta charx
002968  3  60           	rts
002969  3               
002969  3               
002969  3               ;----------------------------------------------------------
002969  3               ; Effects code.
002969  3               ; Ticker routine is called 25 times per second.
002969  3               ;
002969  3               ; txtini = text scroller address
002969  3               ; txtscr = left text screen address
002969  3               ; txtwid = scroller width
002969  3               ; txtbit = 128
002969  3               ; X      = message nr
002969  3               ;----------------------------------------------------------
002969  3               
002969  3  00 08 10 18  scrollpos:	.byte   0,  8, 16, 24, 32, 40, 48, 56
00296D  3  20 28 30 38  
002971  3  40 48 50 58  		.byte  64, 72, 80, 88, 96,104,112,120
002975  3  60 68 70 78  
002979  3  80 88 90 98  		.byte 128,136,144,152,160,168,176,184
00297D  3  A0 A8 B0 B8  
002981  3  C0 C8 D0 D8  		.byte 192,200,208,216,224,232,240,248
002985  3  E0 E8 F0 F8  
002989  3               .if sflag
002989  3               scrly:
002989  3               	rts
002989  3               	.word txtscr         	; set scr_l = left screen address.
002989  3               	sta scr_l
002989  3               	sta tmp_byte		; tmp_byte = lb left screen address
002989  3               	lda txtscr+1
002989  3               	sta scr_l+1
002989  3               	sta scr_r+1		; set hb scr_r = hb left screen address
002989  3               
002989  3               	stx xtmp		; save x
002989  3               
002989  3               	ldx txtwid
002989  3               	dex
002989  3               	ldy scrollpos,x
002989  3               	tya
002989  3               	clc
002989  3               	adc scr_l
002989  3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
002989  3               
002989  3               	lda #8
002989  3               	sta line_cnt
002989  3               scrly1:
002989  3               	ldx txtwid		; set txtwide
002989  3               	dex
002989  3               	clc
002989  3               scrly0:
002989  3               	ldy scrollpos,x
002989  3               	lda (scr_l),y		; scroll 1 line
002989  3               	rol a
002989  3               	sta (scr_l),y
002989  3               	dex
002989  3               	bpl scrly0
002989  3               
002989  3               	inc scr_l
002989  3               	dec line_cnt
002989  3               	bne scrly1		; repeat 8 times
002989  3               
002989  3               	lda txtpos 		; get text pointer.
002989  3               	sta scr_txt
002989  3               	lda txtpos+1
002989  3               	sta scr_txt+1
002989  3               
002989  3               	ldy #0
002989  3               	lda (scr_txt),y 	; find character we're displaying.
002989  3               	and #127 		; remove end marker bit if applicable.
002989  3               	cmp #13			; is it newline?
002989  3               	bne scrly5 		; no, it's okay.
002989  3               	lda #32			; convert to a space instead.
002989  3               scrly5:
002989  3               	sta fntaddr		; calculate char address
002989  3               	lda #0
002989  3               	sta fntaddr+1
002989  3               	asl fntaddr  		; multiply char by 8.
002989  3               	rol fntaddr+1
002989  3               	asl fntaddr
002989  3               	rol fntaddr+1
002989  3               	asl fntaddr
002989  3               	rol fntaddr+1
002989  3               	lda fntaddr
002989  3               	clc
002989  3               	adc #<(FONT-256)
002989  3               	sta scrly3+1		; that's the low byte.
002989  3               	lda fntaddr+1
002989  3               	adc #>(FONT-256)
002989  3               	sta scrly3+2		; add displacement.
002989  3               
002989  3               	ldy #0
002989  3               scrly3:
002989  3               	lda $3333,y		; get image of char line.
002989  3               	and txtbit
002989  3               	beq scrly2		; don't plot pixel
002989  3               ;	ldy scrline,x
002989  3               	lda (scr_r),y
002989  3               	clc
002989  3               	ora #1
002989  3               	sta (scr_r),y		; plot pixel
002989  3               scrly2:
002989  3               	iny			; next line of char.
002989  3               	cpy #8
002989  3               	bne scrly3
002989  3               
002989  3               	lsr txtbit		; bit of text to display.
002989  3               	bcs :+
002989  3               	rts
002989  3               :
002989  3               	ldy #0
002989  3               	lda (scr_txt),y 	; what was the character?
002989  3               	asl a	  		; end of message?
002989  3               	bcs scrly4
002989  3               	inc txtpos
002989  3               	bne :+
002989  3               	inc txtpos+1
002989  3               :
002989  3               	jmp scrly6 		; not yet - continue.
002989  3               scrly4:
002989  3               	lda txtini 		; start of scrolling message.
002989  3               	sta txtpos
002989  3               	lda txtini+1
002989  3               	sta txtpos+1
002989  3               scrly6:
002989  3               	lda #128
002989  3               	sta txtbit
002989  3               	ldx xtmp
002989  3               	rts
002989  3               
002989  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
002989  3               tmp_byte:	.byte 0
002989  3               line_cnt:	.byte 0
002989  3               
002989  3               ;-------------------------------------------------------
002989  3               ; Entry TICKER command
002989  3               ;
002989  3               ; Entry:
002989  3               ;  z80_b = message nr
002989  3               ;  z80_c = width
002989  3               ;-------------------------------------------------------
002989  3               
002989  3               iscrly:
002989  3               	jsr prescr 		; set up display position.
002989  3               .if swrflag
002989  3               	lda #<(msgdat + data_address - data_start) 		; text messages.
002989  3               	sta z80_l
002989  3               	lda #>(msgdat + data_address - data_start)
002989  3               	sta z80_h
002989  3               .else
002989  3               	lda #<msgdat 		; text messages.
002989  3               	sta z80_l
002989  3               	lda #>msgdat
002989  3               	sta z80_h
002989  3               .endif
002989  3               	lda z80_c 		; width.
002989  3               	sec
002989  3               	sbc #1			; subtract one.
002989  3               	cmp #32 		; is it between 1 and 32?
002989  3               	bcc :+
002989  3               	lda #$60
002989  3               	jmp iscrl0		; no, disable messages.
002989  3               :
002989  3               	ldx z80_b		; message number.
002989  3               	jsr getwrd 		; find message start.
002989  3               
002989  3               	lda z80_l		; set initial text position.
002989  3               	sta txtini
002989  3               	lda z80_h
002989  3               	sta txtini+1
002989  3               
002989  3               	lda #$ad		; code for lda adrr
002989  3               iscrl0:
002989  3               	sta scrly		; enable/disable scrolling routine.
002989  3               
002989  3               	jsr prescr 		; set up display position.
002989  3               	jsr gprad 		; get print address.
002989  3               
002989  3               	lda scraddr 		; set text screen address.
002989  3               	sta txtscr
002989  3               	lda scraddr+1
002989  3               	sta txtscr+1
002989  3               
002989  3               	lda z80_c		; width.
002989  3               	sta txtwid		; set width in working storage.
002989  3               
002989  3               	lda #128 		; start with leftmost bit.
002989  3               	sta txtbit
002989  3               
002989  3               	jmp scrly4
002989  3               .endif
002989  3               
002989  3               ;------------------------------------------------------------------
002989  3               ; Dig routine, conditional assembly depending on dflag
002989  3               ;------------------------------------------------------------------
002989  3               .if dflag
002989  3               dig:
002989  3               	and #3
002989  3               	beq digr		; dig right
002989  3               	cmp #1
002989  3               	beq digl		; dig left
002989  3               	cmp #2
002989  3               	beq digd		; dig down
002989  3               
002989  3               ; Dig up.
002989  3               
002989  3               digu:				; dig up
002989  3               	ldy #8
002989  3               	lda (z80_ix),y
002989  3               	sec
002989  3               	sbc #2
002989  3               	sta dispy		; set y
002989  3               
002989  3               	iny
002989  3               	lda (z80_ix),y
002989  3               	sta dispx		; set x
002989  3               	jmp digv
002989  3               
002989  3               ; Dig down.
002989  3               
002989  3               digd:
002989  3               	ldy #9
002989  3               	lda (z80_ix),y
002989  3               	sta dispx		; set y
002989  3               
002989  3               	dey
002989  3               	clc
002989  3               	lda (z80_ix),y
002989  3               	adc #16
002989  3               	sta dispy		; set y
002989  3               	jmp digv
002989  3               
002989  3               ; Dig left.
002989  3               
002989  3               digl:
002989  3               	ldy #8
002989  3               	lda (z80_ix),y
002989  3               	sta dispy		; set y
002989  3               
002989  3               	iny
002989  3               	lda (z80_ix),y
002989  3               	sec
002989  3               	sbc #2			; x=x-2
002989  3               	sta dispx		; set x
002989  3               	jmp digh
002989  3               
002989  3               ; Dig right.
002989  3               
002989  3               digr:
002989  3               	ldy #8
002989  3               	lda (z80_ix),y
002989  3               	sta dispy		; set y
002989  3               
002989  3               	iny
002989  3               	lda (z80_ix),y
002989  3               	clc
002989  3               	adc #16
002989  3               	sta dispx		; set x+16
002989  3               	jmp digh
002989  3               
002989  3               ; Vertical digging
002989  3               
002989  3               digv:
002989  3               	jsr tstbl		; check blocktype in MAP
002989  3               	jsr fdchk		; test if FODDER
002989  3               
002989  3               	clc
002989  3               	lda dispx		; look 1 cell down
002989  3               	adc #8
002989  3               	sta dispx
002989  3               	jsr tstbl		; check blocktype in MAP
002989  3               	jsr fdchk
002989  3               	lda dispx
002989  3               	and #7
002989  3               	bne :+
002989  3               	rts
002989  3               :
002989  3               	clc
002989  3               	lda dispx		; look 1 cell down
002989  3               	adc #8
002989  3               	sta dispx
002989  3               	jsr tstbl		; check blocktype in MAP
002989  3               	jmp fdchk
002989  3               
002989  3               ; Horizontal digging
002989  3               
002989  3               digh:
002989  3               	jsr tstbl		; check blocktype in MAP
002989  3               	jsr fdchk		; test if FODDER
002989  3               
002989  3               	clc
002989  3               	lda dispy		; look 1 cell down
002989  3               	adc #8
002989  3               	sta dispy
002989  3               	jsr tstbl		; check blocktype in MAP
002989  3               	jsr fdchk
002989  3               	lda dispy
002989  3               	and #7
002989  3               	bne :+
002989  3               	rts
002989  3               :
002989  3               	clc
002989  3               	lda dispy		; look 1 cell down
002989  3               	adc #8
002989  3               	sta dispy
002989  3               	jsr tstbl		; check blocktype in MAP
002989  3               	jmp fdchk
002989  3               
002989  3               digcnt:	.byte 0
002989  3               
002989  3               .endif
002989  3               
002989  3               ;------------------------------------------------------------------
002989  3               ; Sprite table
002989  3               ;------------------------------------------------------------------
002989  3               
002989  3               
002989  3               ; ix+0  = type.
002989  3               ; ix+1  = sprite image number.
002989  3               ; ix+2  = frame.
002989  3               ; ix+3  = y coord.
002989  3               ; ix+4  = x coord.
002989  3               
002989  3               ; ix+5  = new type.
002989  3               ; ix+6  = new image number.
002989  3               ; ix+7  = new frame.
002989  3               ; ix+8  = new y coord.
002989  3               ; ix+9  = new x coord.
002989  3               
002989  3               ; ix+10 = direction.
002989  3               ; ix+11 = parameter 1.
002989  3               ; ix+12 = parameter 2.
002989  3               ; ix+13 = jump pointer low.
002989  3               ; ix+14 = jump pointer high.
002989  3               ; ix+15 = data pointer low.
002989  3               ; ix+16 = data pointer high.
002989  3               
002989  3               ; block NUMSPR * TABSIZ,255
002989  3               
002989  3               ;sprtab:	.res NUMSPR*TABSIZ,255
002989  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00298D  3  FF FF FF 00  
002991  3  C0 78 00 00  
00299A  3  07           roomtb:	.byte 7                      ; start room map offset.
00299B  3               
00299B  3               ; User routine.  Put your own code in here to be called with USER instruction.
00299B  3               ; if USER has an argument it will be passed in the accumulator.
00299B  3               
00299B  3               user:
00299B  3  60           	rts
00299C  3               
00299C  3               ; Everything below here will be generated by the editors.
00299C  3               
00299C  3               
00299C  3  60                   rts
00299D  3               WINDOWTOP = 1
00299D  3               WINDOWLFT = 1
00299D  3               WINDOWHGT = 18
00299D  3               WINDOWWID = 30 ;a
00299D  3               MAPWID = 9
00299D  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255
0029A1  3  FF FF FF FF  
0029A5  3  FF           
0029A6  3               mapdat:
0029A6  3  FF FF FF FF          .byte 255,255,255,255,0,255,255,255,255,255,255,1,2,3,4,5,255,255,255,6,7,8,9,10,11,255,255,255,12,13,14,15,16,17,18,255,255,19,20,21,255,255,255,255,255
0029AA  3  00 FF FF FF  
0029AE  3  FF FF FF 01  
0029D3  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255
0029D7  3  FF FF FF FF  
0029DB  3  FF           
0029DC  3  04           stmap:  .byte 4
0029DD  3               
0029DD  3               evnt00:
0029DD  3  A9 06                lda #CUSTOM	; CUSTOM
0029DF  3  85 rr                sta z80_b
0029E1  3  20 58 20             jsr tded
0029E4  3  C5 rr                cmp z80_b
0029E6  3  F0 03                beq :+
0029E8  3  4C F2 29             jmp a00046
0029EB  3               :
0029EB  3  A5 rr                lda varp
0029ED  3  18                   clc
0029EE  3  69 01                adc #1
0029F0  3  85 rr                sta varp
0029F2  3  A9 28        a00046: lda #40
0029F4  3  C5 rr                cmp varp
0029F6  3  90 03                bcc *+5
0029F8  3  4C FF 29             jmp a00072
0029FB  3  A9 28                lda #40
0029FD  3  85 rr                sta varp
0029FF  3  A5 rr        a00072: lda joyval	; KEY
002A01  3  29 20                and #32
002A03  3  F0 03                beq :+
002A05  3  4C 11 2A             jmp a00111
002A08  3               :
002A08  3  A9 03                lda #3		; MENU
002A0A  3  AA                   tax
002A0B  3  20 2C 16             jsr mmenu
002A0E  3  20 A8 18             jsr redraw	; REDRAW
002A11  3  A9 FF        a00111: lda #255
002A13  3  C5 rr                cmp varb
002A15  3  F0 03                beq *+5
002A17  3  4C 2F 2A             jmp a00173
002A1A  3  A9 FF                lda #255
002A1C  3  C5 rr                cmp varc
002A1E  3  F0 03                beq *+5
002A20  3  4C 2F 2A             jmp a00173
002A23  3  A0 08                ldy #8
002A25  3  B1 rr                lda (z80_ix),y
002A27  3  85 rr                sta varb
002A29  3  A0 09                ldy #9
002A2B  3  B1 rr                lda (z80_ix),y
002A2D  3  85 rr                sta varc
002A2F  3  A0 0B        a00173: ldy #11
002A31  3  B1 rr                lda (z80_ix),y
002A33  3  18                   clc
002A34  3  69 01                adc #1
002A36  3  A0 0B                ldy #11
002A38  3  91 rr                sta (z80_ix),y
002A3A  3  A9 02                lda #2
002A3C  3  A0 0B                ldy #11
002A3E  3  D1 rr                cmp (z80_ix),y
002A40  3  90 03                bcc *+5
002A42  3  4C 4B 2A             jmp a00235
002A45  3  A9 00                lda #0
002A47  3  A0 0B                ldy #11
002A49  3  91 rr                sta (z80_ix),y
002A4B  3  20 C1 1B     a00235: jsr skobj	; DETECTOBJECT
002A4E  3  85 rr                sta varobj
002A50  3  A9 03                lda #3
002A52  3  C5 rr                cmp varobj
002A54  3  90 03                bcc *+5
002A56  3  4C 68 2A             jmp a00297
002A59  3  A9 0A                lda #10
002A5B  3  C5 rr                cmp varobj
002A5D  3  B0 03                bcs *+5
002A5F  3  4C 68 2A             jmp a00297
002A62  3  A9 5A                lda #90		; BEEP
002A64  3  0A                   asl a
002A65  3  8D 45 0F             sta sndtyp
002A68  3  A9 FF        a00297: lda #255
002A6A  3  C5 rr                cmp varobj
002A6C  3  F0 03                beq *+5
002A6E  3  4C 74 2A             jmp a00320
002A71  3  4C 8A 2A             jmp a00369
002A74  3  A5 rr        a00320: lda varobj	; GET
002A76  3  20 40 1B             jsr getob
002A79  3  A9 0A                lda #<10		; SCORE
002A7B  3  85 rr                sta z80_l
002A7D  3  A9 00                lda #>10
002A7F  3  85 rr                sta z80_h
002A81  3  20 3A 1D             jsr addsc
002A84  3  A9 5A                lda #90		; BEEP
002A86  3  0A                   asl a
002A87  3  8D 45 0F             sta sndtyp
002A8A  3  20 22 27     a00369: jsr ifall	; TABLEFALL
002A8D  3  A9 0C                lda #12
002A8F  3  A0 08                ldy #8
002A91  3  D1 rr                cmp (z80_ix),y
002A93  3  B0 03                bcs *+5
002A95  3  4C A5 2A             jmp a00427
002A98  3  A9 7E                lda #126
002A9A  3  A0 08                ldy #8
002A9C  3  91 rr                sta (z80_ix),y
002A9E  3  20 69 26             jsr scru	; SCREENUP
002AA1  3  A9 00                lda #0
002AA3  3  85 rr                sta vard
002AA5  3  A9 84        a00427: lda #132
002AA7  3  A0 08                ldy #8
002AA9  3  D1 rr                cmp (z80_ix),y
002AAB  3  90 03                bcc *+5
002AAD  3  4C BD 2A             jmp a00479
002AB0  3  A9 0D                lda #13
002AB2  3  A0 08                ldy #8
002AB4  3  91 rr                sta (z80_ix),y
002AB6  3  20 72 26             jsr scrd	; SCREENDOWN
002AB9  3  A9 00                lda #0
002ABB  3  85 rr                sta vard
002ABD  3  A5 rr        a00479: lda joyval	; KEY
002ABF  3  29 01                and #1
002AC1  3  F0 03                beq :+
002AC3  3  4C 0F 2B             jmp a00663
002AC6  3               :
002AC6  3  A9 E6                lda #230
002AC8  3  A0 09                ldy #9
002ACA  3  D1 rr                cmp (z80_ix),y
002ACC  3  90 03                bcc *+5
002ACE  3  4C E2 2A             jmp a00559
002AD1  3  20 60 26             jsr scrr	; SCREENRIGHT
002AD4  3  A9 00                lda #0
002AD6  3  85 rr                sta vard
002AD8  3  A9 10                lda #16
002ADA  3  A0 09                ldy #9
002ADC  3  91 rr                sta (z80_ix),y
002ADE  3  60                   rts		; EXIT
002ADF  3  4C 0F 2B             jmp a00663
002AE2  3  20 F5 1F     a00559: jsr cangr	; CANGORIGHT
002AE5  3  F0 03                beq :+
002AE7  3  4C 0F 2B             jmp a00663
002AEA  3               :
002AEA  3  A9 00                lda #0
002AEC  3  A0 06                ldy #6
002AEE  3  91 rr                sta (z80_ix),y
002AF0  3  A9 00                lda #0		; ANIMATE
002AF2  3  20 27 25             jsr animsp
002AF5  3  A9 00                lda #0
002AF7  3  A0 0B                ldy #11
002AF9  3  D1 rr                cmp (z80_ix),y
002AFB  3  F0 03                beq *+5
002AFD  3  4C 06 2B             jmp a00637
002B00  3  A9 05                lda #5		; BEEP
002B02  3  0A                   asl a
002B03  3  8D 45 0F             sta sndtyp
002B06  3  A0 09        a00637: ldy #9 		; SPRITERIGHT
002B08  3  B1 rr                lda (z80_ix),y
002B0A  3  18                   clc
002B0B  3  69 02                adc #2
002B0D  3  91 rr                sta (z80_ix),y
002B0F  3  A5 rr        a00663: lda joyval	; KEY
002B11  3  29 02                and #2
002B13  3  F0 03                beq :+
002B15  3  4C 61 2B             jmp a00846
002B18  3               :
002B18  3  A9 08                lda #8
002B1A  3  A0 09                ldy #9
002B1C  3  D1 rr                cmp (z80_ix),y
002B1E  3  B0 03                bcs *+5
002B20  3  4C 34 2B             jmp a00743
002B23  3  20 45 26             jsr scrl	; SCREENLEFT
002B26  3  A9 00                lda #0
002B28  3  85 rr                sta vard
002B2A  3  A9 E4                lda #228
002B2C  3  A0 09                ldy #9
002B2E  3  91 rr                sta (z80_ix),y
002B30  3  60                   rts		; EXIT
002B31  3  4C 61 2B             jmp a00846
002B34  3  20 E3 1F     a00743: jsr cangl	; CANGOLEFT
002B37  3  F0 03                beq :+
002B39  3  4C 61 2B             jmp a00846
002B3C  3               :
002B3C  3  A9 01                lda #1
002B3E  3  A0 06                ldy #6
002B40  3  91 rr                sta (z80_ix),y
002B42  3  A9 00                lda #0		; ANIMATE
002B44  3  20 27 25             jsr animsp
002B47  3  A9 00                lda #0
002B49  3  A0 0B                ldy #11
002B4B  3  D1 rr                cmp (z80_ix),y
002B4D  3  F0 03                beq *+5
002B4F  3  4C 58 2B             jmp a00820
002B52  3  A9 05                lda #5		; BEEP
002B54  3  0A                   asl a
002B55  3  8D 45 0F             sta sndtyp
002B58  3  A0 09        a00820: ldy #9 		; SPRITELEFT
002B5A  3  B1 rr                lda (z80_ix),y
002B5C  3  38                   sec
002B5D  3  E9 02                sbc #2
002B5F  3  91 rr                sta (z80_ix),y
002B61  3  A5 rr        a00846: lda joyval	; KEY
002B63  3  29 10                and #16
002B65  3  F0 03                beq :+
002B67  3  4C 7E 2B             jmp a00908
002B6A  3               :
002B6A  3  20 49 21             jsr jump	; TABLEJUMP
002B6D  3  20 AE 1F             jsr cangd	; CANGODOWN
002B70  3  F0 03                beq :+
002B72  3  4C 78 2B             jmp a00894
002B75  3               :
002B75  3  4C 7E 2B             jmp a00908
002B78  3  A9 3C        a00894: lda #60		; BEEP
002B7A  3  0A                   asl a
002B7B  3  8D 45 0F             sta sndtyp
002B7E  3  A9 05        a00908: lda #DEADLY	; DEADLY
002B80  3  85 rr                sta z80_b
002B82  3  20 58 20             jsr tded
002B85  3  C5 rr                cmp z80_b
002B87  3  F0 03                beq :+
002B89  3  4C 90 2B             jmp a00948
002B8C  3               :
002B8C  3  A9 01                lda #1 		; KILL
002B8E  3  85 rr                sta deadf
002B90  3  4C 8E 26     a00948: jmp grav
002B93  3               evnt01:
002B93  3  A9 03                lda #3
002B95  3  A0 06                ldy #6
002B97  3  D1 rr                cmp (z80_ix),y
002B99  3  F0 03                beq *+5
002B9B  3  4C A7 2B             jmp b00042
002B9E  3  A9 01                lda #1
002BA0  3  A0 0C                ldy #12
002BA2  3  91 rr                sta (z80_ix),y
002BA4  3  4C AD 2B             jmp b00055
002BA7  3  A9 01        b00042: lda #1
002BA9  3  A0 0C                ldy #12
002BAB  3  91 rr                sta (z80_ix),y
002BAD  3  A9 00        b00055: lda #0
002BAF  3  A0 0B                ldy #11
002BB1  3  D1 rr                cmp (z80_ix),y
002BB3  3  F0 03                beq *+5
002BB5  3  4C 13 2C             jmp b00288
002BB8  3  A0 0C                ldy #12
002BBA  3  B1 rr                lda (z80_ix),y 	; REPEAT
002BBC  3  85 rr                sta loopa
002BBE  3  20 E3 1F     b00094: jsr cangl	; CANGOLEFT
002BC1  3  F0 03                beq :+
002BC3  3  4C FE 2B             jmp b00241
002BC6  3               :
002BC6  3  A0 09                ldy #9 		; SPRITELEFT
002BC8  3  B1 rr                lda (z80_ix),y
002BCA  3  38                   sec
002BCB  3  E9 02                sbc #2
002BCD  3  91 rr                sta (z80_ix),y
002BCF  3  A9 10                lda #16
002BD1  3  85 rr                sta z80_c
002BD3  3  A0 09                ldy #9
002BD5  3  B1 rr                lda (z80_ix),y
002BD7  3  38                   sec
002BD8  3  E5 rr                sbc z80_c
002BDA  3  A0 09                ldy #9
002BDC  3  91 rr                sta (z80_ix),y
002BDE  3  20 AE 1F             jsr cangd	; CANGODOWN
002BE1  3  F0 03                beq :+
002BE3  3  4C EC 2B             jmp b00202
002BE6  3               :
002BE6  3  A9 01                lda #1
002BE8  3  A0 0B                ldy #11
002BEA  3  91 rr                sta (z80_ix),y
002BEC  3  A9 10        b00202: lda #16
002BEE  3  85 rr                sta z80_c
002BF0  3  A0 09                ldy #9
002BF2  3  B1 rr                lda (z80_ix),y
002BF4  3  18                   clc
002BF5  3  65 rr                adc z80_c
002BF7  3  A0 09                ldy #9
002BF9  3  91 rr                sta (z80_ix),y
002BFB  3  4C 04 2C             jmp b00255
002BFE  3  A9 01        b00241: lda #1
002C00  3  A0 0B                ldy #11
002C02  3  91 rr                sta (z80_ix),y
002C04  3  C6 rr        b00255: dec loopa	; ENDREPEAT
002C06  3  F0 03                beq :+
002C08  3  4C BE 2B             jmp b00094
002C0B  3               :
002C0B  3  A9 00                lda #0		; ANIMATEBACK
002C0D  3  20 4D 25             jsr animbk
002C10  3  4C 6B 2C             jmp b00494
002C13  3  A0 0C        b00288: ldy #12
002C15  3  B1 rr                lda (z80_ix),y 	; REPEAT
002C17  3  85 rr                sta loopa
002C19  3  20 F5 1F     b00305: jsr cangr	; CANGORIGHT
002C1C  3  F0 03                beq :+
002C1E  3  4C 59 2C             jmp b00453
002C21  3               :
002C21  3  A0 09                ldy #9 		; SPRITERIGHT
002C23  3  B1 rr                lda (z80_ix),y
002C25  3  18                   clc
002C26  3  69 02                adc #2
002C28  3  91 rr                sta (z80_ix),y
002C2A  3  A9 10                lda #16
002C2C  3  85 rr                sta z80_c
002C2E  3  A0 09                ldy #9
002C30  3  B1 rr                lda (z80_ix),y
002C32  3  18                   clc
002C33  3  65 rr                adc z80_c
002C35  3  A0 09                ldy #9
002C37  3  91 rr                sta (z80_ix),y
002C39  3  20 AE 1F             jsr cangd	; CANGODOWN
002C3C  3  F0 03                beq :+
002C3E  3  4C 47 2C             jmp b00413
002C41  3               :
002C41  3  A9 00                lda #0
002C43  3  A0 0B                ldy #11
002C45  3  91 rr                sta (z80_ix),y
002C47  3  A9 10        b00413: lda #16
002C49  3  85 rr                sta z80_c
002C4B  3  A0 09                ldy #9
002C4D  3  B1 rr                lda (z80_ix),y
002C4F  3  38                   sec
002C50  3  E5 rr                sbc z80_c
002C52  3  A0 09                ldy #9
002C54  3  91 rr                sta (z80_ix),y
002C56  3  4C 5F 2C             jmp b00466
002C59  3  A9 00        b00453: lda #0
002C5B  3  A0 0B                ldy #11
002C5D  3  91 rr                sta (z80_ix),y
002C5F  3  C6 rr        b00466: dec loopa	; ENDREPEAT
002C61  3  F0 03                beq :+
002C63  3  4C 19 2C             jmp b00305
002C66  3               :
002C66  3  A9 00                lda #0		; ANIMATE
002C68  3  20 27 25             jsr animsp
002C6B  3  A9 00        b00494: lda #0 	; COLLISION
002C6D  3  85 rr                sta z80_b
002C6F  3  20 72 25             jsr sktyp
002C72  3  B0 03                bcs :+
002C74  3  4C 7B 2C             jmp b00529
002C77  3               :
002C77  3  A9 01                lda #1 		; KILL
002C79  3  85 rr                sta deadf
002C7B  3  60           b00529: rts
002C7C  3               evnt02:
002C7C  3  A9 05                lda #5
002C7E  3  A0 06                ldy #6
002C80  3  D1 rr                cmp (z80_ix),y
002C82  3  F0 03                beq *+5
002C84  3  4C 90 2C             jmp c00042
002C87  3  A9 02                lda #2
002C89  3  A0 0C                ldy #12
002C8B  3  91 rr                sta (z80_ix),y
002C8D  3  4C 96 2C             jmp c00055
002C90  3  A9 01        c00042: lda #1
002C92  3  A0 0C                ldy #12
002C94  3  91 rr                sta (z80_ix),y
002C96  3  A9 00        c00055: lda #0
002C98  3  A0 0B                ldy #11
002C9A  3  D1 rr                cmp (z80_ix),y
002C9C  3  F0 03                beq *+5
002C9E  3  4C CB 2C             jmp c00175
002CA1  3  A0 0C                ldy #12
002CA3  3  B1 rr                lda (z80_ix),y 	; REPEAT
002CA5  3  85 rr                sta loopa
002CA7  3  20 79 1F     c00094: jsr cangu	; CANGOUP
002CAA  3  F0 03                beq :+
002CAC  3  4C BB 2C             jmp c00140
002CAF  3               :
002CAF  3  A0 08                ldy #8 		; SPRITEUP
002CB1  3  B1 rr                lda (z80_ix),y
002CB3  3  38                   sec
002CB4  3  E9 02                sbc #2
002CB6  3  91 rr                sta (z80_ix),y
002CB8  3  4C C1 2C             jmp c00154
002CBB  3  A9 01        c00140: lda #1
002CBD  3  A0 0B                ldy #11
002CBF  3  91 rr                sta (z80_ix),y
002CC1  3  C6 rr        c00154: dec loopa	; ENDREPEAT
002CC3  3  F0 03                beq :+
002CC5  3  4C A7 2C             jmp c00094
002CC8  3               :
002CC8  3  4C F2 2C             jmp c00269
002CCB  3  A0 0C        c00175: ldy #12
002CCD  3  B1 rr                lda (z80_ix),y 	; REPEAT
002CCF  3  85 rr                sta loopa
002CD1  3  20 AE 1F     c00192: jsr cangd	; CANGODOWN
002CD4  3  F0 03                beq :+
002CD6  3  4C E5 2C             jmp c00239
002CD9  3               :
002CD9  3  A0 08                ldy #8 		; SPRITEDOWN
002CDB  3  B1 rr                lda (z80_ix),y
002CDD  3  18                   clc
002CDE  3  69 02                adc #2
002CE0  3  91 rr                sta (z80_ix),y
002CE2  3  4C EB 2C             jmp c00252
002CE5  3  A9 00        c00239: lda #0
002CE7  3  A0 0B                ldy #11
002CE9  3  91 rr                sta (z80_ix),y
002CEB  3  C6 rr        c00252: dec loopa	; ENDREPEAT
002CED  3  F0 03                beq :+
002CEF  3  4C D1 2C             jmp c00192
002CF2  3               :
002CF2  3  A9 00        c00269: lda #0		; ANIMATE
002CF4  3  20 27 25             jsr animsp
002CF7  3  A9 00                lda #0 	; COLLISION
002CF9  3  85 rr                sta z80_b
002CFB  3  20 72 25             jsr sktyp
002CFE  3  B0 03                bcs :+
002D00  3  4C 07 2D             jmp c00316
002D03  3               :
002D03  3  A9 01                lda #1 		; KILL
002D05  3  85 rr                sta deadf
002D07  3  60           c00316: rts
002D08  3               evnt03:
002D08  3  A9 00                lda #0
002D0A  3  A0 0B                ldy #11
002D0C  3  D1 rr                cmp (z80_ix),y
002D0E  3  F0 03                beq *+5
002D10  3  4C 30 2D             jmp d00089
002D13  3  20 E3 1F             jsr cangl	; CANGOLEFT
002D16  3  F0 03                beq :+
002D18  3  4C 27 2D             jmp d00071
002D1B  3               :
002D1B  3  A0 09                ldy #9 		; SPRITELEFT
002D1D  3  B1 rr                lda (z80_ix),y
002D1F  3  38                   sec
002D20  3  E9 02                sbc #2
002D22  3  91 rr                sta (z80_ix),y
002D24  3  4C 2D 2D             jmp d00084
002D27  3  A9 01        d00071: lda #1
002D29  3  A0 0B                ldy #11
002D2B  3  91 rr                sta (z80_ix),y
002D2D  3  4C 4A 2D     d00084: jmp d00150
002D30  3  20 F5 1F     d00089: jsr cangr	; CANGORIGHT
002D33  3  F0 03                beq :+
002D35  3  4C 44 2D             jmp d00137
002D38  3               :
002D38  3  A0 09                ldy #9 		; SPRITERIGHT
002D3A  3  B1 rr                lda (z80_ix),y
002D3C  3  18                   clc
002D3D  3  69 02                adc #2
002D3F  3  91 rr                sta (z80_ix),y
002D41  3  4C 4A 2D             jmp d00150
002D44  3  A9 00        d00137: lda #0
002D46  3  A0 0B                ldy #11
002D48  3  91 rr                sta (z80_ix),y
002D4A  3  A9 00        d00150: lda #0
002D4C  3  A0 0A                ldy #10
002D4E  3  D1 rr                cmp (z80_ix),y
002D50  3  F0 03                beq *+5
002D52  3  4C 72 2D             jmp d00237
002D55  3  20 79 1F             jsr cangu	; CANGOUP
002D58  3  F0 03                beq :+
002D5A  3  4C 69 2D             jmp d00218
002D5D  3               :
002D5D  3  A0 08                ldy #8 		; SPRITEUP
002D5F  3  B1 rr                lda (z80_ix),y
002D61  3  38                   sec
002D62  3  E9 02                sbc #2
002D64  3  91 rr                sta (z80_ix),y
002D66  3  4C 6F 2D             jmp d00232
002D69  3  A9 01        d00218: lda #1
002D6B  3  A0 0A                ldy #10
002D6D  3  91 rr                sta (z80_ix),y
002D6F  3  4C 8C 2D     d00232: jmp d00297
002D72  3  20 AE 1F     d00237: jsr cangd	; CANGODOWN
002D75  3  F0 03                beq :+
002D77  3  4C 86 2D             jmp d00284
002D7A  3               :
002D7A  3  A0 08                ldy #8 		; SPRITEDOWN
002D7C  3  B1 rr                lda (z80_ix),y
002D7E  3  18                   clc
002D7F  3  69 02                adc #2
002D81  3  91 rr                sta (z80_ix),y
002D83  3  4C 8C 2D             jmp d00297
002D86  3  A9 00        d00284: lda #0
002D88  3  A0 0A                ldy #10
002D8A  3  91 rr                sta (z80_ix),y
002D8C  3  A9 00        d00297: lda #0		; ANIMATE
002D8E  3  20 27 25             jsr animsp
002D91  3  A9 00                lda #0 	; COLLISION
002D93  3  85 rr                sta z80_b
002D95  3  20 72 25             jsr sktyp
002D98  3  B0 03                bcs :+
002D9A  3  4C A1 2D             jmp d00344
002D9D  3               :
002D9D  3  A9 01                lda #1 		; KILL
002D9F  3  85 rr                sta deadf
002DA1  3  60           d00344: rts
002DA2  3               evnt04:
002DA2  3  60                   rts
002DA3  3               evnt05:
002DA3  3  A9 00                lda #0		; ANIMATE
002DA5  3  20 27 25             jsr animsp
002DA8  3  60                   rts
002DA9  3               evnt06:
002DA9  3  20 C1 1B             jsr skobj	; DETECTOBJECT
002DAC  3  85 rr                sta varobj
002DAE  3  A9 FE                lda #254
002DB0  3  C5 rr                cmp varobj
002DB2  3  B0 03                bcs *+5
002DB4  3  4C BE 2D             jmp g00053
002DB7  3  A9 FF                lda #255	; REMOVE
002DB9  3  A0 05                ldy #5
002DBB  3  91 rr                sta (z80_ix),y
002DBD  3  60                   rts		; EXIT
002DBE  3  A5 rr        g00053: lda varj
002DC0  3  C5 rr                cmp scno
002DC2  3  F0 03                beq *+5
002DC4  3  4C EE 2D             jmp g00157
002DC7  3  A9 00                lda #0		; GOT
002DC9  3  20 6F 1B             jsr gotob
002DCC  3  C9 FF                cmp #255
002DCE  3  F0 03                beq :+
002DD0  3  4C D6 2D             jmp g00099
002DD3  3               :
002DD3  3  4C E7 2D             jmp g00136
002DD6  3  A0 09        g00099: ldy #9
002DD8  3  B1 rr                lda (z80_ix),y	; PUT
002DDA  3  85 rr                sta dispx
002DDC  3  A0 08                ldy #8
002DDE  3  B1 rr                lda (z80_ix),y
002DE0  3  85 rr                sta dispy
002DE2  3  A9 00                lda #0
002DE4  3  20 A0 1B             jsr drpob
002DE7  3  A9 FF        g00136: lda #255	; REMOVE
002DE9  3  A0 05                ldy #5
002DEB  3  91 rr                sta (z80_ix),y
002DED  3  60                   rts		; EXIT
002DEE  3  A5 rr        g00157: lda vark
002DF0  3  C5 rr                cmp scno
002DF2  3  F0 03                beq *+5
002DF4  3  4C 1E 2E             jmp g00261
002DF7  3  A9 01                lda #1		; GOT
002DF9  3  20 6F 1B             jsr gotob
002DFC  3  C9 FF                cmp #255
002DFE  3  F0 03                beq :+
002E00  3  4C 06 2E             jmp g00203
002E03  3               :
002E03  3  4C 17 2E             jmp g00240
002E06  3  A0 09        g00203: ldy #9
002E08  3  B1 rr                lda (z80_ix),y	; PUT
002E0A  3  85 rr                sta dispx
002E0C  3  A0 08                ldy #8
002E0E  3  B1 rr                lda (z80_ix),y
002E10  3  85 rr                sta dispy
002E12  3  A9 01                lda #1
002E14  3  20 A0 1B             jsr drpob
002E17  3  A9 FF        g00240: lda #255	; REMOVE
002E19  3  A0 05                ldy #5
002E1B  3  91 rr                sta (z80_ix),y
002E1D  3  60                   rts		; EXIT
002E1E  3  A5 rr        g00261: lda varl
002E20  3  C5 rr                cmp scno
002E22  3  F0 03                beq *+5
002E24  3  4C 4E 2E             jmp g00365
002E27  3  A9 02                lda #2		; GOT
002E29  3  20 6F 1B             jsr gotob
002E2C  3  C9 FF                cmp #255
002E2E  3  F0 03                beq :+
002E30  3  4C 36 2E             jmp g00307
002E33  3               :
002E33  3  4C 47 2E             jmp g00344
002E36  3  A0 09        g00307: ldy #9
002E38  3  B1 rr                lda (z80_ix),y	; PUT
002E3A  3  85 rr                sta dispx
002E3C  3  A0 08                ldy #8
002E3E  3  B1 rr                lda (z80_ix),y
002E40  3  85 rr                sta dispy
002E42  3  A9 02                lda #2
002E44  3  20 A0 1B             jsr drpob
002E47  3  A9 FF        g00344: lda #255	; REMOVE
002E49  3  A0 05                ldy #5
002E4B  3  91 rr                sta (z80_ix),y
002E4D  3  60                   rts		; EXIT
002E4E  3  A5 rr        g00365: lda vari
002E50  3  C5 rr                cmp scno
002E52  3  F0 03                beq *+5
002E54  3  4C 7E 2E             jmp g00469
002E57  3  A9 03                lda #3		; GOT
002E59  3  20 6F 1B             jsr gotob
002E5C  3  C9 FF                cmp #255
002E5E  3  F0 03                beq :+
002E60  3  4C 66 2E             jmp g00411
002E63  3               :
002E63  3  4C 77 2E             jmp g00448
002E66  3  A0 09        g00411: ldy #9
002E68  3  B1 rr                lda (z80_ix),y	; PUT
002E6A  3  85 rr                sta dispx
002E6C  3  A0 08                ldy #8
002E6E  3  B1 rr                lda (z80_ix),y
002E70  3  85 rr                sta dispy
002E72  3  A9 03                lda #3
002E74  3  20 A0 1B             jsr drpob
002E77  3  A9 FF        g00448: lda #255	; REMOVE
002E79  3  A0 05                ldy #5
002E7B  3  91 rr                sta (z80_ix),y
002E7D  3  60                   rts		; EXIT
002E7E  3  A9 FF        g00469: lda #255	; REMOVE
002E80  3  A0 05                ldy #5
002E82  3  91 rr                sta (z80_ix),y
002E84  3  60                   rts
002E85  3               evnt07:
002E85  3  A9 00                lda #0 	; COLLISION
002E87  3  85 rr                sta z80_b
002E89  3  20 72 25             jsr sktyp
002E8C  3  B0 03                bcs :+
002E8E  3  4C E9 2E             jmp h00243
002E91  3               :
002E91  3  A9 00                lda #0
002E93  3  A0 07                ldy #7
002E95  3  D1 rr                cmp (z80_ix),y
002E97  3  F0 03                beq *+5
002E99  3  4C 9F 2E             jmp h00053
002E9C  3  4C E9 2E             jmp h00243
002E9F  3  A5 rr        h00053: lda skptr	; OTHER
002EA1  3  85 rr                sta z80_x
002EA3  3  A5 rr                lda skptr+1
002EA5  3  85 rr                sta z80_i
002EA7  3  A9 01                lda #1
002EA9  3  A0 06                ldy #6
002EAB  3  D1 rr                cmp (z80_ix),y
002EAD  3  F0 03                beq *+5
002EAF  3  4C C4 2E             jmp h00148
002EB2  3  A0 09                ldy #9 		; SPRITERIGHT
002EB4  3  B1 rr                lda (z80_ix),y
002EB6  3  18                   clc
002EB7  3  69 02                adc #2
002EB9  3  91 rr                sta (z80_ix),y
002EBB  3  A0 09                ldy #9 		; SPRITERIGHT
002EBD  3  B1 rr                lda (z80_ix),y
002EBF  3  18                   clc
002EC0  3  69 02                adc #2
002EC2  3  91 rr                sta (z80_ix),y
002EC4  3  A9 00        h00148: lda #0
002EC6  3  A0 06                ldy #6
002EC8  3  D1 rr                cmp (z80_ix),y
002ECA  3  F0 03                beq *+5
002ECC  3  4C E1 2E             jmp h00221
002ECF  3  A0 09                ldy #9 		; SPRITELEFT
002ED1  3  B1 rr                lda (z80_ix),y
002ED3  3  38                   sec
002ED4  3  E9 02                sbc #2
002ED6  3  91 rr                sta (z80_ix),y
002ED8  3  A0 09                ldy #9 		; SPRITELEFT
002EDA  3  B1 rr                lda (z80_ix),y
002EDC  3  38                   sec
002EDD  3  E9 02                sbc #2
002EDF  3  91 rr                sta (z80_ix),y
002EE1  3  A5 rr        h00221: lda ogptr	; ENDSPRITE
002EE3  3  85 rr                sta z80_x
002EE5  3  A5 rr                lda ogptr+1
002EE7  3  85 rr                sta z80_i
002EE9  3  A9 00        h00243: lda #0
002EEB  3  A0 0B                ldy #11
002EED  3  D1 rr                cmp (z80_ix),y
002EEF  3  90 03                bcc *+5
002EF1  3  4C 04 2F             jmp h00299
002EF4  3  A9 04                lda #4
002EF6  3  A0 0B                ldy #11
002EF8  3  D1 rr                cmp (z80_ix),y
002EFA  3  B0 03                bcs *+5
002EFC  3  4C 04 2F             jmp h00299
002EFF  3  A9 00                lda #0		; ANIMATE
002F01  3  20 27 25             jsr animsp
002F04  3  A9 19        h00299: lda #25
002F06  3  A0 0B                ldy #11
002F08  3  D1 rr                cmp (z80_ix),y
002F0A  3  90 03                bcc *+5
002F0C  3  4C 1F 2F             jmp h00356
002F0F  3  A9 1D                lda #29
002F11  3  A0 0B                ldy #11
002F13  3  D1 rr                cmp (z80_ix),y
002F15  3  B0 03                bcs *+5
002F17  3  4C 1F 2F             jmp h00356
002F1A  3  A9 00                lda #0		; ANIMATEBACK
002F1C  3  20 4D 25             jsr animbk
002F1F  3  A0 0B        h00356: ldy #11
002F21  3  B1 rr                lda (z80_ix),y
002F23  3  18                   clc
002F24  3  69 01                adc #1
002F26  3  A0 0B                ldy #11
002F28  3  91 rr                sta (z80_ix),y
002F2A  3  A9 96                lda #150
002F2C  3  A0 0B                ldy #11
002F2E  3  D1 rr                cmp (z80_ix),y
002F30  3  F0 03                beq *+5
002F32  3  4C 3B 2F             jmp h00418
002F35  3  A9 00                lda #0
002F37  3  A0 0B                ldy #11
002F39  3  91 rr                sta (z80_ix),y
002F3B  3  60           h00418: rts
002F3C  3               evnt08:
002F3C  3  A9 00                lda #0		; ANIMATE
002F3E  3  20 27 25             jsr animsp
002F41  3  A9 00                lda #0 	; COLLISION
002F43  3  85 rr                sta z80_b
002F45  3  20 72 25             jsr sktyp
002F48  3  B0 03                bcs :+
002F4A  3  4C 81 2F             jmp i00142
002F4D  3               :
002F4D  3  A9 00                lda #0		; GOT
002F4F  3  20 6F 1B             jsr gotob
002F52  3  C9 FF                cmp #255
002F54  3  F0 03                beq :+
002F56  3  4C 81 2F             jmp i00142
002F59  3               :
002F59  3  A9 01                lda #1		; GOT
002F5B  3  20 6F 1B             jsr gotob
002F5E  3  C9 FF                cmp #255
002F60  3  F0 03                beq :+
002F62  3  4C 81 2F             jmp i00142
002F65  3               :
002F65  3  A9 02                lda #2		; GOT
002F67  3  20 6F 1B             jsr gotob
002F6A  3  C9 FF                cmp #255
002F6C  3  F0 03                beq :+
002F6E  3  4C 81 2F             jmp i00142
002F71  3               :
002F71  3  A9 03                lda #3		; GOT
002F73  3  20 6F 1B             jsr gotob
002F76  3  C9 FF                cmp #255
002F78  3  F0 03                beq :+
002F7A  3  4C 81 2F             jmp i00142
002F7D  3               :
002F7D  3  A9 01                lda #1		; ENDGAME
002F7F  3  85 rr                sta gamwon
002F81  3  60           i00142: rts
002F82  3               evnt09:
002F82  3  A9 00                lda #0
002F84  3  A0 05                ldy #5
002F86  3  D1 rr                cmp (z80_ix),y
002F88  3  F0 03                beq *+5
002F8A  3  4C C9 2F             jmp j00150
002F8D  3  A9 FF                lda #255
002F8F  3  C5 rr                cmp varb
002F91  3  D0 03                bne *+5
002F93  3  4C AB 2F             jmp j00086
002F96  3  A9 FF                lda #255
002F98  3  C5 rr                cmp varc
002F9A  3  D0 03                bne *+5
002F9C  3  4C AB 2F             jmp j00086
002F9F  3  A5 rr                lda varb
002FA1  3  A0 08                ldy #8
002FA3  3  91 rr                sta (z80_ix),y
002FA5  3  A5 rr                lda varc
002FA7  3  A0 09                ldy #9
002FA9  3  91 rr                sta (z80_ix),y
002FAB  3  A9 02        j00086: lda #2
002FAD  3  A0 05                ldy #5
002FAF  3  D1 rr                cmp (z80_ix),y
002FB1  3  F0 03                beq *+5
002FB3  3  4C C9 2F             jmp j00150
002FB6  3  A5 rr                lda vara
002FB8  3  18                   clc
002FB9  3  69 01                adc #1
002FBB  3  85 rr                sta vara
002FBD  3  A9 00                lda #0
002FBF  3  A0 0B                ldy #11
002FC1  3  91 rr                sta (z80_ix),y
002FC3  3  A9 45                lda #69
002FC5  3  A0 0C                ldy #12
002FC7  3  91 rr                sta (z80_ix),y
002FC9  3  60           j00150: rts
002FCA  3               evnt10:
002FCA  3  A9 15                lda #21
002FCC  3  85 rr                sta chary
002FCE  3  A9 18                lda #24
002FD0  3  85 rr                sta charx
002FD2  3  A0 00                ldy #0		; SHOWSCORE
002FD4  3  A9 06                lda #6
002FD6  3  85 rr                sta z80_b
002FD8  3  20 EA 1C             jsr dscor
002FDB  3  A9 18                lda #24
002FDD  3  85 rr                sta charx
002FDF  3  A9 03                lda #3 	; REPEAT
002FE1  3  85 rr                sta loopa
002FE3  3  A9 00        k00058: lda #0 		; PUTBLOCK
002FE5  3  20 74 1E             jsr pbpattr
002FE8  3  C6 rr                dec loopa	; ENDREPEAT
002FEA  3  F0 03                beq :+
002FEC  3  4C E3 2F             jmp k00058
002FEF  3               :
002FEF  3  A9 0C                lda #12
002FF1  3  85 rr                sta charx
002FF3  3  A9 00                lda #0		; GOT
002FF5  3  20 6F 1B             jsr gotob
002FF8  3  C9 FF                cmp #255
002FFA  3  F0 03                beq :+
002FFC  3  4C 07 30             jmp k00135
002FFF  3               :
002FFF  3  A9 49                lda #73 		; PUTBLOCK
003001  3  20 74 1E             jsr pbpattr
003004  3  4C 0C 30             jmp k00147
003007  3  A9 46        k00135: lda #70 		; PUTBLOCK
003009  3  20 74 1E             jsr pbpattr
00300C  3  A9 01        k00147: lda #1		; GOT
00300E  3  20 6F 1B             jsr gotob
003011  3  C9 FF                cmp #255
003013  3  F0 03                beq :+
003015  3  4C 20 30             jmp k00187
003018  3               :
003018  3  A9 4A                lda #74 		; PUTBLOCK
00301A  3  20 74 1E             jsr pbpattr
00301D  3  4C 25 30             jmp k00200
003020  3  A9 47        k00187: lda #71 		; PUTBLOCK
003022  3  20 74 1E             jsr pbpattr
003025  3  A9 02        k00200: lda #2		; GOT
003027  3  20 6F 1B             jsr gotob
00302A  3  C9 FF                cmp #255
00302C  3  F0 03                beq :+
00302E  3  4C 39 30             jmp k00240
003031  3               :
003031  3  A9 4B                lda #75 		; PUTBLOCK
003033  3  20 74 1E             jsr pbpattr
003036  3  4C 3E 30             jmp k00252
003039  3  A9 48        k00240: lda #72 		; PUTBLOCK
00303B  3  20 74 1E             jsr pbpattr
00303E  3  A9 03        k00252: lda #3		; GOT
003040  3  20 6F 1B             jsr gotob
003043  3  C9 FF                cmp #255
003045  3  F0 03                beq :+
003047  3  4C 52 30             jmp k00292
00304A  3               :
00304A  3  A9 4C                lda #76 		; PUTBLOCK
00304C  3  20 74 1E             jsr pbpattr
00304F  3  4C 57 30             jmp k00305
003052  3  A9 4D        k00292: lda #77 		; PUTBLOCK
003054  3  20 74 1E             jsr pbpattr
003057  3  A9 00        k00305: lda #0
003059  3  C5 rr                cmp varm
00305B  3  F0 03                beq *+5
00305D  3  4C 72 30             jmp k00362
003060  3  A9 00                lda #0
003062  3  C5 rr                cmp varn
003064  3  F0 03                beq *+5
003066  3  4C 72 30             jmp k00362
003069  3  A9 01                lda #1
00306B  3  85 rr                sta numlif
00306D  3  A9 01                lda #1 		; KILL
00306F  3  85 rr                sta deadf
003071  3  60                   rts		; EXIT
003072  3  A5 rr        k00362: lda vara
003074  3  18                   clc
003075  3  69 01                adc #1
003077  3  85 rr                sta vara
003079  3  A9 0A                lda #10
00307B  3  C5 rr                cmp vara
00307D  3  F0 03                beq *+5
00307F  3  4C 86 30             jmp k00402
003082  3  A9 00                lda #0
003084  3  85 rr                sta vara
003086  3  A9 15        k00402: lda #21
003088  3  85 rr                sta chary
00308A  3  A9 07                lda #7
00308C  3  85 rr                sta charx
00308E  3  A9 54                lda #84 		; PUTBLOCK
003090  3  20 74 1E             jsr pbpattr
003093  3  A5 rr                lda charx
003095  3  18                   clc
003096  3  69 01                adc #1
003098  3  85 rr                sta charx
00309A  3  A5 rr                lda numlif	; DISPLAY
00309C  3  20 02 26             jsr disply
00309F  3  A9 15                lda #21
0030A1  3  85 rr                sta chary
0030A3  3  A9 13                lda #19
0030A5  3  85 rr                sta charx
0030A7  3  A9 59                lda #89 		; PUTBLOCK
0030A9  3  20 74 1E             jsr pbpattr
0030AC  3  A9 00                lda #0 		; PUTBLOCK
0030AE  3  20 74 1E             jsr pbpattr
0030B1  3  A5 rr                lda varp
0030B3  3  85 rr                sta vars
0030B5  3  A5 rr                lda vars
0030B7  3  4A                   lsr a
0030B8  3  4A                   lsr a
0030B9  3  4A                   lsr a
0030BA  3  85 rr                sta vars
0030BC  3  A9 00                lda #0
0030BE  3  C5 rr                cmp vars
0030C0  3  90 03                bcc *+5
0030C2  3  4C D5 30             jmp k00585
0030C5  3  A5 rr                lda vars 	; REPEAT
0030C7  3  85 rr                sta loopa
0030C9  3  A9 53        k00556: lda #83 		; PUTBLOCK
0030CB  3  20 74 1E             jsr pbpattr
0030CE  3  C6 rr                dec loopa	; ENDREPEAT
0030D0  3  F0 03                beq :+
0030D2  3  4C C9 30             jmp k00556
0030D5  3               :
0030D5  3  A5 rr        k00585: lda vars
0030D7  3  0A                   asl a
0030D8  3  0A                   asl a
0030D9  3  0A                   asl a
0030DA  3  85 rr                sta vars
0030DC  3  A5 rr                lda vars
0030DE  3  85 rr                sta z80_c
0030E0  3  A5 rr                lda varp
0030E2  3  38                   sec
0030E3  3  E5 rr                sbc z80_c
0030E5  3  85 rr                sta varp
0030E7  3  A5 rr                lda varp
0030E9  3  85 rr                sta vart
0030EB  3  A5 rr                lda vart
0030ED  3  4A                   lsr a
0030EE  3  85 rr                sta vart
0030F0  3  A9 4F                lda #79
0030F2  3  85 rr                sta z80_c
0030F4  3  A5 rr                lda vart
0030F6  3  18                   clc
0030F7  3  65 rr                adc z80_c
0030F9  3  85 rr                sta vart
0030FB  3  A9 0A                lda #10
0030FD  3  C5 rr                cmp vart
0030FF  3  90 03                bcc *+5
003101  3  4C 0C 31             jmp k00708
003104  3  A5 rr                lda vart 		; PUTBLOCK
003106  3  20 74 1E             jsr pbpattr
003109  3  4C 11 31             jmp k00720
00310C  3  A9 4F        k00708: lda #79 		; PUTBLOCK
00310E  3  20 74 1E             jsr pbpattr
003111  3  A5 rr        k00720: lda vars
003113  3  85 rr                sta z80_c
003115  3  A5 rr                lda varp
003117  3  18                   clc
003118  3  65 rr                adc z80_c
00311A  3  85 rr                sta varp
00311C  3  A5 rr                lda varq
00311E  3  38                   sec
00311F  3  E9 01                sbc #1
003121  3  85 rr                sta varq
003123  3  A9 1E                lda #30
003125  3  C5 rr                cmp varq
003127  3  B0 03                bcs *+5
003129  3  4C 30 31             jmp k00785
00312C  3  A9 64                lda #100
00312E  3  85 rr                sta varq
003130  3  A9 64        k00785: lda #100
003132  3  C5 rr                cmp varq
003134  3  F0 03                beq *+5
003136  3  4C 40 31             jmp k00818
003139  3  A5 rr                lda varp
00313B  3  38                   sec
00313C  3  E9 01                sbc #1
00313E  3  85 rr                sta varp
003140  3  A9 00        k00818: lda #0
003142  3  C5 rr                cmp varp
003144  3  F0 03                beq *+5
003146  3  4C 55 31             jmp k00862
003149  3  A9 01                lda #1 		; KILL
00314B  3  85 rr                sta deadf
00314D  3  A9 28                lda #40
00314F  3  85 rr                sta varp
003151  3  A9 63                lda #99
003153  3  85 rr                sta varq
003155  3  A5 rr        k00862: lda varo
003157  3  38                   sec
003158  3  E9 01                sbc #1
00315A  3  85 rr                sta varo
00315C  3  A9 FF                lda #255
00315E  3  C5 rr                cmp varo
003160  3  F0 03                beq *+5
003162  3  4C 70 31             jmp k00918
003165  3  A9 19                lda #25
003167  3  85 rr                sta varo
003169  3  A5 rr                lda varn
00316B  3  38                   sec
00316C  3  E9 01                sbc #1
00316E  3  85 rr                sta varn
003170  3  A9 FF        k00918: lda #255
003172  3  C5 rr                cmp varn
003174  3  F0 03                beq *+5
003176  3  4C 84 31             jmp k00958
003179  3  A9 3B                lda #59
00317B  3  85 rr                sta varn
00317D  3  A5 rr                lda varm
00317F  3  38                   sec
003180  3  E9 01                sbc #1
003182  3  85 rr                sta varm
003184  3  A9 00        k00958: lda #0
003186  3  C5 rr                cmp varm
003188  3  F0 03                beq *+5
00318A  3  4C A5 31             jmp k01023
00318D  3  A9 1E                lda #30
00318F  3  C5 rr                cmp varn
003191  3  B0 03                bcs *+5
003193  3  4C A5 31             jmp k01023
003196  3  A9 19                lda #25
003198  3  C5 rr                cmp varo
00319A  3  F0 03                beq *+5
00319C  3  4C A5 31             jmp k01023
00319F  3  A9 28                lda #40		; BEEP
0031A1  3  0A                   asl a
0031A2  3  8D 45 0F             sta sndtyp
0031A5  3  A9 15        k01023: lda #21
0031A7  3  85 rr                sta chary
0031A9  3  A9 02                lda #2
0031AB  3  85 rr                sta charx
0031AD  3  A5 rr                lda varm	; DISPLAY
0031AF  3  20 02 26             jsr disply
0031B2  3  A9 05                lda #5
0031B4  3  C5 rr                cmp varo
0031B6  3  90 03                bcc *+5
0031B8  3  4C C3 31             jmp k01085
0031BB  3  A9 00                lda #0 		; PUTBLOCK
0031BD  3  20 74 1E             jsr pbpattr
0031C0  3  4C C8 31             jmp k01097
0031C3  3  A9 4E        k01085: lda #78 		; PUTBLOCK
0031C5  3  20 74 1E             jsr pbpattr
0031C8  3  A9 09        k01097: lda #9
0031CA  3  C5 rr                cmp varn
0031CC  3  B0 03                bcs *+5
0031CE  3  4C D6 31             jmp k01125
0031D1  3  A9 00                lda #0	; DISPLAY
0031D3  3  20 02 26             jsr disply
0031D6  3  A5 rr        k01125: lda varn	; DISPLAY
0031D8  3  20 02 26             jsr disply
0031DB  3  A9 00                lda #0 		; PUTBLOCK
0031DD  3  20 74 1E             jsr pbpattr
0031E0  3  A9 08                lda #8
0031E2  3  C5 rr                cmp varp
0031E4  3  B0 03                bcs *+5
0031E6  3  4C F8 31             jmp k01196
0031E9  3  A9 02                lda #2
0031EB  3  C5 rr                cmp vara
0031ED  3  B0 03                bcs *+5
0031EF  3  4C F8 31             jmp k01196
0031F2  3  A9 28                lda #40		; BEEP
0031F4  3  0A                   asl a
0031F5  3  8D 45 0F             sta sndtyp
0031F8  3  60           k01196: rts
0031F9  3               evnt11:
0031F9  3  60                   rts
0031FA  3               evnt12:
0031FA  3  A9 01                lda #1
0031FC  3  85 rr                sta chary
0031FE  3  A9 09                lda #9
003200  3  85 rr                sta charx
003202  3  A9 00                lda #0  	; MESSAGE
003204  3  20 B8 21             jsr dmsg 	; INK 	; PAPER
003207  3  A9 02                lda #2
003209  3  85 rr                sta chary
00320B  3  A9 06                lda #6
00320D  3  85 rr                sta charx
00320F  3  A9 01                lda #1		; PRINTMODE
003211  3  85 rr                sta prtmod
003213  3  A9 01                lda #1  	; MESSAGE
003215  3  20 B8 21             jsr dmsg
003218  3  A9 00                lda #0		; PRINTMODE
00321A  3  85 rr                sta prtmod 	; INK 	; PAPER
00321C  3  A9 05                lda #5
00321E  3  85 rr                sta chary
003220  3  A9 07                lda #7
003222  3  85 rr                sta charx
003224  3  A9 09                lda #9  	; MESSAGE
003226  3  20 B8 21             jsr dmsg
003229  3  A9 09                lda #9
00322B  3  85 rr                sta chary
00322D  3  A9 00                lda #0
00322F  3  85 rr                sta charx 	; INK 	; PAPER
003231  3  A9 02                lda #2  	; MESSAGE
003233  3  20 B8 21             jsr dmsg
003236  3  A9 16                lda #22
003238  3  85 rr                sta chary
00323A  3  A9 06                lda #6
00323C  3  85 rr                sta charx 	; INK 	; PAPER
00323E  3  A9 08                lda #8  	; MESSAGE
003240  3  20 B8 21             jsr dmsg
003243  3  A9 63                lda #99
003245  3  85 rr                sta contrl
003247  3  A9 63        m00188: lda #99
003249  3  C5 rr                cmp contrl
00324B  3  F0 03                beq *+5
00324D  3  4C 93 32             jmp m00427
003250  3  A0 07                ldy #7 	; KEY
003252  3                       .if swrflag
003252  3  B9 E7 A8             lda keys + data_address - data_start,y
003255  3                       .else
003255  3                       lda keys,y
003255  3                       .endif
003255  3  20 D0 0E             jsr ktest
003258  3  90 03                bcc :+
00325A  3  4C 61 32             jmp m00261
00325D  3               :
00325D  3  A9 00                lda #0
00325F  3  85 rr                sta contrl
003261  3  A0 08        m00261: ldy #8 	; KEY
003263  3                       .if swrflag
003263  3  B9 E7 A8             lda keys + data_address - data_start,y
003266  3                       .else
003266  3                       lda keys,y
003266  3                       .endif
003266  3  20 D0 0E             jsr ktest
003269  3  90 03                bcc :+
00326B  3  4C 72 32             jmp m00318
00326E  3               :
00326E  3  A9 01                lda #1
003270  3  85 rr                sta contrl
003272  3  A0 09        m00318: ldy #9 	; KEY
003274  3                       .if swrflag
003274  3  B9 E7 A8             lda keys + data_address - data_start,y
003277  3                       .else
003277  3                       lda keys,y
003277  3                       .endif
003277  3  20 D0 0E             jsr ktest
00327A  3  90 03                bcc :+
00327C  3  4C 83 32             jmp m00374
00327F  3               :
00327F  3  A9 02                lda #2
003281  3  85 rr                sta contrl
003283  3  A0 0A        m00374: ldy #10 	; KEY
003285  3                       .if swrflag
003285  3  B9 E7 A8             lda keys + data_address - data_start,y
003288  3                       .else
003288  3                       lda keys,y
003288  3                       .endif
003288  3  20 D0 0E             jsr ktest
00328B  3  90 03                bcc :+
00328D  3  4C 90 32             jmp m00422
003290  3               :
003290  3  4C 47 32     m00422: jmp m00188
003293  3  60           m00427: rts
003294  3               evnt13: 	; INK 	; PAPER
003294  3  20 E9 18             jsr cls		; CLS
003297  3  A9 00                lda #0
003299  3  85 rr                sta vara
00329B  3  A9 FF                lda #255
00329D  3  85 rr                sta varb
00329F  3  A9 FF                lda #255
0032A1  3  85 rr                sta varc
0032A3  3  A9 28                lda #40
0032A5  3  85 rr                sta varp
0032A7  3  A9 63                lda #99
0032A9  3  85 rr                sta varq
0032AB  3  A9 04                lda #4
0032AD  3  85 rr                sta varm
0032AF  3  A9 3B                lda #59
0032B1  3  85 rr                sta varn
0032B3  3  A9 19                lda #25
0032B5  3  85 rr                sta varo
0032B7  3  A9 1D                lda #29 		; PUTBLOCK
0032B9  3  20 74 1E             jsr pbpattr
0032BC  3  A9 1E                lda #30 	; REPEAT
0032BE  3  85 rr                sta loopa
0032C0  3  A9 21        n00101: lda #33 		; PUTBLOCK
0032C2  3  20 74 1E             jsr pbpattr
0032C5  3  C6 rr                dec loopa	; ENDREPEAT
0032C7  3  F0 03                beq :+
0032C9  3  4C C0 32             jmp n00101
0032CC  3               :
0032CC  3  A9 1E                lda #30 		; PUTBLOCK
0032CE  3  20 74 1E             jsr pbpattr
0032D1  3  A9 00                lda #0
0032D3  3  85 rr                sta chary
0032D5  3  A9 12                lda #18 	; REPEAT
0032D7  3  85 rr                sta loopa
0032D9  3  A5 rr        n00161: lda chary
0032DB  3  18                   clc
0032DC  3  69 01                adc #1
0032DE  3  85 rr                sta chary
0032E0  3  A9 00                lda #0
0032E2  3  85 rr                sta charx
0032E4  3  A9 22                lda #34 		; PUTBLOCK
0032E6  3  20 74 1E             jsr pbpattr
0032E9  3  A9 1F                lda #31
0032EB  3  85 rr                sta charx
0032ED  3  A9 22                lda #34 		; PUTBLOCK
0032EF  3  20 74 1E             jsr pbpattr
0032F2  3  C6 rr                dec loopa	; ENDREPEAT
0032F4  3  F0 03                beq :+
0032F6  3  4C D9 32             jmp n00161
0032F9  3               :
0032F9  3  A5 rr                lda chary
0032FB  3  18                   clc
0032FC  3  69 01                adc #1
0032FE  3  85 rr                sta chary
003300  3  A9 00                lda #0
003302  3  85 rr                sta charx
003304  3  A9 25                lda #37 		; PUTBLOCK
003306  3  20 74 1E             jsr pbpattr
003309  3  A9 1E                lda #30 	; REPEAT
00330B  3  85 rr                sta loopa
00330D  3  A9 21        n00282: lda #33 		; PUTBLOCK
00330F  3  20 74 1E             jsr pbpattr
003312  3  C6 rr                dec loopa	; ENDREPEAT
003314  3  F0 03                beq :+
003316  3  4C 0D 33             jmp n00282
003319  3               :
003319  3  A9 25                lda #37 		; PUTBLOCK
00331B  3  20 74 1E             jsr pbpattr
00331E  3  A9 03                lda #3 	; REPEAT
003320  3  85 rr                sta loopa
003322  3  A5 rr        n00333: lda chary
003324  3  18                   clc
003325  3  69 01                adc #1
003327  3  85 rr                sta chary
003329  3  A9 00                lda #0
00332B  3  85 rr                sta charx
00332D  3  A9 22                lda #34 		; PUTBLOCK
00332F  3  20 74 1E             jsr pbpattr
003332  3  A9 1F                lda #31
003334  3  85 rr                sta charx
003336  3  A9 22                lda #34 		; PUTBLOCK
003338  3  20 74 1E             jsr pbpattr
00333B  3  C6 rr                dec loopa	; ENDREPEAT
00333D  3  F0 03                beq :+
00333F  3  4C 22 33             jmp n00333
003342  3               :
003342  3  A9 00                lda #0
003344  3  85 rr                sta charx
003346  3  A9 17                lda #23
003348  3  85 rr                sta chary
00334A  3  A9 20                lda #32 		; PUTBLOCK
00334C  3  20 74 1E             jsr pbpattr
00334F  3  A9 1E                lda #30 	; REPEAT
003351  3  85 rr                sta loopa
003353  3  A9 21        n00447: lda #33 		; PUTBLOCK
003355  3  20 74 1E             jsr pbpattr
003358  3  C6 rr                dec loopa	; ENDREPEAT
00335A  3  F0 03                beq :+
00335C  3  4C 53 33             jmp n00447
00335F  3               :
00335F  3  A9 1F                lda #31 		; PUTBLOCK
003361  3  20 74 1E             jsr pbpattr
003364  3  A9 05                lda #5
003366  3  85 rr                sta numlif
003368  3  A9 05                lda #5
00336A  3  85 rr                sta z80_d	; GETRANDOM
00336C  3  20 61 21             jsr random
00336F  3  85 rr                sta z80_h
003371  3  20 AE 1A             jsr imul
003374  3  A5 rr                lda z80_h
003376  3  85 rr                sta varrnd
003378  3  A5 rr                lda varrnd
00337A  3  18                   clc
00337B  3  69 01                adc #1
00337D  3  85 rr                sta varrnd
00337F  3  A5 rr                lda varrnd
003381  3  85 rr                sta varj
003383  3  A9 05                lda #5
003385  3  85 rr                sta z80_d	; GETRANDOM
003387  3  20 61 21             jsr random
00338A  3  85 rr                sta z80_h
00338C  3  20 AE 1A             jsr imul
00338F  3  A5 rr                lda z80_h
003391  3  85 rr                sta varrnd
003393  3  A9 07                lda #7
003395  3  85 rr                sta z80_c
003397  3  A5 rr                lda varrnd
003399  3  18                   clc
00339A  3  65 rr                adc z80_c
00339C  3  85 rr                sta varrnd
00339E  3  A5 rr                lda varrnd
0033A0  3  85 rr                sta vark
0033A2  3  A9 05                lda #5
0033A4  3  85 rr                sta z80_d	; GETRANDOM
0033A6  3  20 61 21             jsr random
0033A9  3  85 rr                sta z80_h
0033AB  3  20 AE 1A             jsr imul
0033AE  3  A5 rr                lda z80_h
0033B0  3  85 rr                sta varrnd
0033B2  3  A9 0D                lda #13
0033B4  3  85 rr                sta z80_c
0033B6  3  A5 rr                lda varrnd
0033B8  3  18                   clc
0033B9  3  65 rr                adc z80_c
0033BB  3  85 rr                sta varrnd
0033BD  3  A5 rr                lda varrnd
0033BF  3  85 rr                sta varl
0033C1  3  A9 03                lda #3
0033C3  3  85 rr                sta z80_d	; GETRANDOM
0033C5  3  20 61 21             jsr random
0033C8  3  85 rr                sta z80_h
0033CA  3  20 AE 1A             jsr imul
0033CD  3  A5 rr                lda z80_h
0033CF  3  85 rr                sta varrnd
0033D1  3  A9 13                lda #19
0033D3  3  85 rr                sta z80_c
0033D5  3  A5 rr                lda varrnd
0033D7  3  18                   clc
0033D8  3  65 rr                adc z80_c
0033DA  3  85 rr                sta varrnd
0033DC  3  A5 rr                lda varrnd
0033DE  3  85 rr                sta vari
0033E0  3  60                   rts
0033E1  3               evnt14:
0033E1  3  A9 00                lda #0
0033E3  3  85 rr                sta vara
0033E5  3  A9 00                lda #0
0033E7  3  C5 rr                cmp vard
0033E9  3  F0 03                beq *+5
0033EB  3  4C F6 33             jmp o00043
0033EE  3  A9 FF                lda #255
0033F0  3  85 rr                sta varb
0033F2  3  A9 FF                lda #255
0033F4  3  85 rr                sta varc
0033F6  3  60           o00043: rts
0033F7  3               evnt15:
0033F7  3  A9 09                lda #9
0033F9  3  A0 05                ldy #5
0033FB  3  D1 rr                cmp (z80_ix),y
0033FD  3  F0 03                beq *+5
0033FF  3  4C 06 34             jmp p00034
003402  3  A9 01                lda #1 		; KILL
003404  3  85 rr                sta deadf
003406  3  60           p00034: rts
003407  3               evnt16:
003407  3  A9 7F                lda #127		; BEEP
003409  3  0A                   asl a
00340A  3  8D 45 0F             sta sndtyp
00340D  3  A5 rr                lda numlif
00340F  3  38                   sec
003410  3  E9 01                sbc #1
003412  3  85 rr                sta numlif
003414  3  A9 01                lda #1
003416  3  85 rr                sta vard
003418  3  60                   rts
003419  3               evnt17: 	; INK 	; PAPER
003419  3  20 E9 18             jsr cls		; CLS
00341C  3  A9 08                lda #8
00341E  3  85 rr                sta chary
003420  3  A9 0B                lda #11
003422  3  85 rr                sta charx
003424  3  A9 01                lda #1		; PRINTMODE
003426  3  85 rr                sta prtmod
003428  3  A9 07                lda #7  	; MESSAGE
00342A  3  20 B8 21             jsr dmsg
00342D  3  A9 00                lda #0		; PRINTMODE
00342F  3  85 rr                sta prtmod 	; INK 	; PAPER
003431  3  A5 rr                lda chary
003433  3  18                   clc
003434  3  69 01                adc #1
003436  3  85 rr                sta chary
003438  3  A9 00                lda #0
00343A  3  85 rr                sta charx
00343C  3  A9 05                lda #5  	; MESSAGE
00343E  3  20 B8 21             jsr dmsg
003441  3  A9 FA                lda #250 	; DELAY
003443  3  20 0D 0F             jsr delay
003446  3  A9 C8                lda #200 	; DELAY
003448  3  20 0D 0F             jsr delay
00344B  3  60                   rts
00344C  3               evnt18:
00344C  3  A5 rr                lda numlif 	; REPEAT
00344E  3  85 rr                sta loopa
003450  3  A9 64        s00013: lda #<100		; SCORE
003452  3  85 rr                sta z80_l
003454  3  A9 00                lda #>100
003456  3  85 rr                sta z80_h
003458  3  20 3A 1D             jsr addsc
00345B  3  C6 rr                dec loopa	; ENDREPEAT
00345D  3  F0 03                beq :+
00345F  3  4C 50 34             jmp s00013
003462  3               :
003462  3  A5 rr                lda varm 	; REPEAT
003464  3  85 rr                sta loopa
003466  3  A9 3C        s00066: lda #<60		; SCORE
003468  3  85 rr                sta z80_l
00346A  3  A9 00                lda #>60
00346C  3  85 rr                sta z80_h
00346E  3  20 3A 1D             jsr addsc
003471  3  C6 rr                dec loopa	; ENDREPEAT
003473  3  F0 03                beq :+
003475  3  4C 66 34             jmp s00066
003478  3               :
003478  3  A5 rr                lda varn 	; REPEAT
00347A  3  85 rr                sta loopa
00347C  3  A9 01        s00118: lda #<1		; SCORE
00347E  3  85 rr                sta z80_l
003480  3  A9 00                lda #>1
003482  3  85 rr                sta z80_h
003484  3  20 3A 1D             jsr addsc
003487  3  C6 rr                dec loopa	; ENDREPEAT
003489  3  F0 03                beq :+
00348B  3  4C 7C 34             jmp s00118
00348E  3               : 	; INK 	; PAPER
00348E  3  20 E9 18             jsr cls		; CLS
003491  3  A9 09                lda #9
003493  3  85 rr                sta chary
003495  3  A9 09                lda #9
003497  3  85 rr                sta charx 	; INK 	; PAPER
003499  3  A9 01                lda #1		; PRINTMODE
00349B  3  85 rr                sta prtmod
00349D  3  A9 06                lda #6  	; MESSAGE
00349F  3  20 B8 21             jsr dmsg
0034A2  3  A9 00                lda #0		; PRINTMODE
0034A4  3  85 rr                sta prtmod
0034A6  3  A9 64                lda #100 	; DELAY
0034A8  3  20 0D 0F             jsr delay 	; INK 	; PAPER
0034AB  3  A9 04                lda #4  	; MESSAGE
0034AD  3  20 B8 21             jsr dmsg
0034B0  3  A9 0E                lda #14
0034B2  3  85 rr                sta chary
0034B4  3  A9 0A                lda #10
0034B6  3  85 rr                sta charx
0034B8  3  A5 rr                lda varm	; DISPLAY
0034BA  3  20 02 26             jsr disply
0034BD  3  A9 4E                lda #78 		; PUTBLOCK
0034BF  3  20 74 1E             jsr pbpattr
0034C2  3  A9 09                lda #9
0034C4  3  C5 rr                cmp varn
0034C6  3  B0 03                bcs *+5
0034C8  3  4C D0 34             jmp s00317
0034CB  3  A9 00                lda #0	; DISPLAY
0034CD  3  20 02 26             jsr disply
0034D0  3  A5 rr        s00317: lda varn	; DISPLAY
0034D2  3  20 02 26             jsr disply
0034D5  3  A9 41                lda #65
0034D7  3  85 rr                sta vara
0034D9  3  A9 FA                lda #250 	; REPEAT
0034DB  3  85 rr                sta loopa 	; INK 	; PAPER
0034DD  3  A9 10        s00348: lda #16
0034DF  3  85 rr                sta chary
0034E1  3  A9 11                lda #17
0034E3  3  85 rr                sta charx
0034E5  3  A0 00                ldy #0		; SHOWSCORE
0034E7  3  A9 06                lda #6
0034E9  3  85 rr                sta z80_b
0034EB  3  20 EA 1C             jsr dscor
0034EE  3  A9 02                lda #2 	; DELAY
0034F0  3  20 0D 0F             jsr delay
0034F3  3  A9 47                lda #71
0034F5  3  C5 rr                cmp vara
0034F7  3  F0 03                beq *+5
0034F9  3  4C 00 35             jmp s00425
0034FC  3  A9 41                lda #65
0034FE  3  85 rr                sta vara
003500  3  A5 rr        s00425: lda vara
003502  3  18                   clc
003503  3  69 01                adc #1
003505  3  85 rr                sta vara
003507  3  C6 rr                dec loopa	; ENDREPEAT
003509  3  F0 03                beq :+
00350B  3  4C DD 34             jmp s00348
00350E  3               :
00350E  3  A9 32                lda #50 	; DELAY
003510  3  20 0D 0F             jsr delay
003513  3  60                   rts
003514  3               evnt19:
003514  3  60                   rts
003515  3               evnt20:
003515  3  60                   rts
003516  3  60           ptcusr: rts
003517  3               data_start:
003517  3               msgdat:
003517  3  52 4F 42 4F          .byte "ROBOT_1_IN...",141
00351B  3  54 5F 31 5F  
00351F  3  49 4E 2E 2E  
003525  3  54 48 45 5F          .byte "THE_SHIP_OF_DOOM;;",141
003529  3  53 48 49 50  
00352D  3  5F 4F 46 5F  
003538  3  5F 54 48 45          .byte "_THE_CREW_LEFT_YOU_BEHIND....",13
00353C  3  5F 43 52 45  
003540  3  57 5F 4C 45  
003556  3  5F 54 48 45          .byte "_THE_SHIP_WILL_CRASH_INTO_THE",13
00355A  3  5F 53 48 49  
00355E  3  50 5F 57 49  
003574  3  5F 53 55 4E          .byte "_SUN_IN_5_MINUTES.",13
003578  3  5F 49 4E 5F  
00357C  3  35 5F 4D 49  
003587  3  5F 54 4F 5F          .byte "_TO_SAVE_YOURSELF,_COLLECT_ALL",13
00358B  3  53 41 56 45  
00358F  3  5F 59 4F 55  
0035A6  3  5F 46 4F 55          .byte "_FOUR_KEYS_AND_GET_TO_THE",13
0035AA  3  52 5F 4B 45  
0035AE  3  59 53 5F 41  
0035C0  3  5F 54 45 4C          .byte "_TELEPORT_ROOM.",13
0035C4  3  45 50 4F 52  
0035C8  3  54 5F 52 4F  
0035D0  3  5F 43 4F 4C          .byte "_COLLECT_DATA_KEYS_FOR_POINTS.",13
0035D4  3  4C 45 43 54  
0035D8  3  5F 44 41 54  
0035EF  3  5F 52 45 43          .byte "_RECHARGE_SOCKETS_ARE_LOCATED",13
0035F3  3  48 41 52 47  
0035F7  3  45 5F 53 4F  
00360D  3  5F 54 48 52          .byte "_THROUGHOUT_THE_SHIP.",13
003611  3  4F 55 47 48  
003615  3  4F 55 54 5F  
003623  3  0D                   .byte 13
003624  3  5F 52 55 4E          .byte "_RUN_OUT_OF_BATTERY._YOU_DIE.",13
003628  3  5F 4F 55 54  
00362C  3  5F 4F 46 5F  
003642  3  5F 5F 52 55          .byte "__RUN_OUT_OF_TIME._YOU_DIE.",13
003646  3  4E 5F 4F 55  
00364A  3  54 5F 4F 46  
00365E  3  5F 5F 5F 5F          .byte "_________DON",39
003662  3  5F 5F 5F 5F  
003666  3  5F 44 4F 4E  
00366B  3  54 5F 44 49          .byte "T_DIE;",141
00366F  3  45 3B 8D     
003672  3  47 41 4D 45          .byte "GAME_PAUSED",141
003676  3  5F 50 41 55  
00367A  3  53 45 44 8D  
00367E  3  0D                   .byte 13
00367F  3  5F 5F 5F 5F          .byte "______ROBOT_1_ESCAPED_A",13
003683  3  5F 5F 52 4F  
003687  3  42 4F 54 5F  
003697  3  5F 5F 5F 5F          .byte "____FIREY_DEATH_WITH_JUST",13
00369B  3  46 49 52 45  
00369F  3  59 5F 44 45  
0036B1  3  5F 5F 5F 5F          .byte "__________XXXX_LEFT",13
0036B5  3  5F 5F 5F 5F  
0036B9  3  5F 5F 58 58  
0036C5  3  0D                   .byte 13
0036C6  3  5F 59 4F 55          .byte "_YOU_ALSO_SCORED_XXXXXX_POINTS;",141
0036CA  3  5F 41 4C 53  
0036CE  3  4F 5F 53 43  
0036E6  3  5F 5F 5F 5F          .byte "___________YOU__DIED",13
0036EA  3  5F 5F 5F 5F  
0036EE  3  5F 5F 5F 59  
0036FB  3  0D                   .byte 13
0036FC  3  5F 45 49 54          .byte "_EITHER_YOU_DIDNT_GET_OFF_THE_",13
003700  3  48 45 52 5F  
003704  3  59 4F 55 5F  
00371B  3  5F 53 48 49          .byte "_SHIP_IN_TIME_OR_YOU_RAN_OUT_OF",13
00371F  3  50 5F 49 4E  
003723  3  5F 54 49 4D  
00373B  3  5F 4C 49 56          .byte "_LIVES.",13
00373F  3  45 53 2E 0D  
003743  3  5F 5F 5F 5F          .byte "_______EITHER_WAY,_YOU",39
003747  3  5F 5F 5F 45  
00374B  3  49 54 48 45  
00375A  3  52 45 5F 44          .byte "RE_DEAD.",13
00375E  3  45 41 44 2E  
003762  3  0D           
003763  3  8D                   .byte 141
003764  3  57 45 4C 4C          .byte "WELL_DONE;",141
003768  3  5F 44 4F 4E  
00376C  3  45 3B 8D     
00376F  3  47 41 4D 45          .byte "GAME_OVER",141
003773  3  5F 4F 56 45  
003777  3  52 8D        
003779  3  7F 32 30 31          .byte "2017_Mat_Recardo",13
00377D  3  37 5F 4D 61  
003781  3  74 5F 52 65  
00378B  3  5F 5F 5F 5F          .byte "____Music_by_Sergey_Kosov",141
00378F  3  4D 75 73 69  
003793  3  63 5F 62 79  
0037A5  3  31 5F 46 4F          .byte "1_FOR_KEYS_(ZXP)",13
0037A9  3  52 5F 4B 45  
0037AD  3  59 53 5F 28  
0037B6  3  5F 5F 5F 5F          .byte "_______2_FOR_KEMPSTON",13
0037BA  3  5F 5F 5F 32  
0037BE  3  5F 46 4F 52  
0037CC  3  5F 5F 5F 5F          .byte "_______3_FOR_SINCLAIR",141
0037D0  3  5F 5F 5F 33  
0037D4  3  5F 46 4F 52  
0037E2  3               nummsg:
0037E2  3  0A                   .byte 10
0037E3  3               chgfx:
0037E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0037E7  3  00 00 00 00  
0037EB  3  97 AB 97 AB          .byte 151,171,151,171,151,171,151,171
0037EF  3  97 AB 97 AB  
0037F3  3  D5 E9 D5 E9          .byte 213,233,213,233,213,233,213,233
0037F7  3  D5 E9 D5 E9  
0037FB  3  FF FF 99 66          .byte 255,255,153,102,0,0,0,0
0037FF  3  00 00 00 00  
003803  3  FF AA 55 FF          .byte 255,170,85,255,0,0,0,0
003807  3  00 00 00 00  
00380B  3  FF 99 FF 00          .byte 255,153,255,0,0,0,0,0
00380F  3  00 00 00 00  
003813  3  FF FF 00 FF          .byte 255,255,0,255,0,0,0,0
003817  3  00 00 00 00  
00381B  3  FF FF 55 AA          .byte 255,255,85,170,85,170,0,0
00381F  3  55 AA 00 00  
003823  3  FF FF 00 FF          .byte 255,255,0,255,0,255,0,0
003827  3  00 FF 00 00  
00382B  3  FF 44 22 FF          .byte 255,68,34,255,0,0,0,0
00382F  3  00 00 00 00  
003833  3  80 FF 80 FF          .byte 128,255,128,255,128,255,128,255
003837  3  80 FF 80 FF  
00383B  3  FF BD A5 A5          .byte 255,189,165,165,165,66,0,0
00383F  3  A5 42 00 00  
003843  3  FF 55 FF 00          .byte 255,85,255,0,90,90,24,0
003847  3  5A 5A 18 00  
00384B  3  FF 00 22 66          .byte 255,0,34,102,102,68,255,0
00384F  3  66 44 FF 00  
003853  3  FF 00 23 13          .byte 255,0,35,19,11,5,2,1
003857  3  0B 05 02 01  
00385B  3  FF 00 23 13          .byte 255,0,35,19,11,5,2,253
00385F  3  0B 05 02 FD  
003863  3  FC 82 44 28          .byte 252,130,68,40,16,32,64,128
003867  3  10 20 40 80  
00386B  3  62 52 4A 46          .byte 98,82,74,70,70,74,82,98
00386F  3  46 4A 52 62  
003873  3  46 4A 52 62          .byte 70,74,82,98,98,82,74,70
003877  3  62 52 4A 46  
00387B  3  FF 81 42 24          .byte 255,129,66,36,24,255,0,0
00387F  3  18 FF 00 00  
003883  3  81 42 24 18          .byte 129,66,36,24,24,36,66,129
003887  3  18 24 42 81  
00388B  3  FF 80 BF BF          .byte 255,128,191,191,255,0,127,0
00388F  3  FF 00 7F 00  
003893  3  FF 00 FF FF          .byte 255,0,255,255,255,0,255,0
003897  3  FF 00 FF 00  
00389B  3  FF 05 FF FF          .byte 255,5,255,255,255,0,254,0
00389F  3  FF 00 FE 00  
0038A3  3  80 82 84 82          .byte 128,130,132,130,148,170,128,255
0038A7  3  94 AA 80 FF  
0038AB  3  80 81 82 85          .byte 128,129,130,133,138,149,170,255
0038AF  3  8A 95 AA FF  
0038B3  3  00 00 00 00          .byte 0,0,0,0,68,68,238,255
0038B7  3  44 44 EE FF  
0038BB  3  3F 20 00 00          .byte 63,32,0,0,63,32,0,0
0038BF  3  3F 20 00 00  
0038C3  3  FC 04 00 00          .byte 252,4,0,0,252,4,0,0
0038C7  3  FC 04 00 00  
0038CB  3  00 03 0D 1D          .byte 0,3,13,29,61,57,113,127
0038CF  3  3D 39 71 7F  
0038D3  3  00 C0 B0 C8          .byte 0,192,176,200,244,244,250,254
0038D7  3  F4 F4 FA FE  
0038DB  3  FE FA F4 F4          .byte 254,250,244,244,200,176,192,0
0038DF  3  C8 B0 C0 00  
0038E3  3  7F 71 3D 3D          .byte 127,113,61,61,29,15,3,0
0038E7  3  1D 0F 03 00  
0038EB  3  00 FF 00 FF          .byte 0,255,0,255,255,170,85,0
0038EF  3  FF AA 55 00  
0038F3  3  7A 7A 7A 7A          .byte 122,122,122,122,122,122,122,122
0038F7  3  7A 7A 7A 7A  
0038FB  3  7A 00 FD FD          .byte 122,0,253,253,253,253,0,122
0038FF  3  FD FD 00 7A  
003903  3  7A 00 3C 00          .byte 122,0,60,0,122,0,60,0
003907  3  7A 00 3C 00  
00390B  3  34 7A 7A 7A          .byte 52,122,122,122,122,122,0,52
00390F  3  7A 7A 00 34  
003913  3  00 FE 00 FE          .byte 0,254,0,254,0,254,0,254
003917  3  00 FE 00 FE  
00391B  3  55 95 15 E5          .byte 85,149,21,229,9,241,2,252
00391F  3  09 F1 02 FC  
003923  3  55 55 55 55          .byte 85,85,85,85,85,85,85,0
003927  3  55 55 55 00  
00392B  3  00 00 00 00          .byte 0,0,0,0,3,5,10,13
00392F  3  03 05 0A 0D  
003933  3  00 00 00 00          .byte 0,0,0,0,255,85,170,255
003937  3  FF 55 AA FF  
00393B  3  00 00 00 00          .byte 0,0,0,0,128,96,176,208
00393F  3  80 60 B0 D0  
003943  3  B0 D0 B0 D0          .byte 176,208,176,208,176,208,176,208
003947  3  B0 D0 B0 D0  
00394B  3  B0 50 A0 C0          .byte 176,80,160,192,0,0,0,0
00394F  3  00 00 00 00  
003953  3  FF 55 AA FF          .byte 255,85,170,255,0,0,0,0
003957  3  00 00 00 00  
00395B  3  0B 0D 06 03          .byte 11,13,6,3,0,0,0,0
00395F  3  00 00 00 00  
003963  3  0B 0D 0B 0D          .byte 11,13,11,13,11,13,11,13
003967  3  0B 0D 0B 0D  
00396B  3  CF 00 67 67          .byte 207,0,103,103,103,103,103,207
00396F  3  67 67 67 CF  
003973  3  FE 00 78 B8          .byte 254,0,120,184,120,120,180,0
003977  3  78 78 B4 00  
00397B  3  00 60 77 3B          .byte 0,96,119,59,28,110,119,3
00397F  3  1C 6E 77 03  
003983  3  00 00 FE FE          .byte 0,0,254,254,0,254,126,128
003987  3  00 FE 7E 80  
00398B  3  7D 7E 00 7F          .byte 125,126,0,127,127,0,127,0
00398F  3  7F 00 7F 00  
003993  3  DE EE 70 BA          .byte 222,238,112,186,220,14,246,0
003997  3  DC 0E F6 00  
00399B  3  FF A4 FF 00          .byte 255,164,255,0,31,31,15,3
00399F  3  1F 1F 0F 03  
0039A3  3  FF 24 FF 00          .byte 255,36,255,0,255,255,255,255
0039A7  3  FF FF FF FF  
0039AB  3  FF 25 FF 00          .byte 255,37,255,0,248,248,240,192
0039AF  3  F8 F8 F0 C0  
0039B3  3  FF 00 55 FF          .byte 255,0,85,255,0,0,0,0
0039B7  3  00 00 00 00  
0039BB  3  FF 00 59 AD          .byte 255,0,89,173,44,44,44,44
0039BF  3  2C 2C 2C 2C  
0039C3  3  2C 2C 2C 2C          .byte 44,44,44,44,44,0,44,94
0039C7  3  2C 00 2C 5E  
0039CB  3  55 54 54 53          .byte 85,84,84,83,72,71,32,31
0039CF  3  48 47 20 1F  
0039D3  3  FF 3F 00 1F          .byte 255,63,0,31,16,31,31,31
0039D7  3  10 1F 1F 1F  
0039DB  3  80 E0 18 FC          .byte 128,224,24,252,7,249,254,255
0039DF  3  07 F9 FE FF  
0039E3  3  00 00 00 00          .byte 0,0,0,0,252,255,248,240
0039E7  3  FC FF F8 F0  
0039EB  3  00 00 00 00          .byte 0,0,0,0,0,128,64,112
0039EF  3  00 80 40 70  
0039F3  3  00 FC 03 00          .byte 0,252,3,0,253,253,253,254
0039F7  3  FD FD FD FE  
0039FB  3  E0 3F 3F 7F          .byte 224,63,63,127,127,112,191,0
0039FF  3  7F 70 BF 00  
003A03  3  FF FF FF FF          .byte 255,255,255,255,252,0,255,0
003A07  3  FC 00 FF 00  
003A0B  3  FC FE FF FF          .byte 252,254,255,255,3,2,252,0
003A0F  3  03 02 FC 00  
003A13  3  FF 81 81 81          .byte 255,129,129,129,129,129,129,255
003A17  3  81 81 81 FF  
003A1B  3  3C 42 81 81          .byte 60,66,129,129,129,129,66,60
003A1F  3  81 81 42 3C  
003A23  3  18 24 24 42          .byte 24,36,36,66,66,129,129,255
003A27  3  42 81 81 FF  
003A2B  3  FF 81 81 81          .byte 255,129,129,129,129,129,129,255
003A2F  3  81 81 81 FF  
003A33  3  3C 42 81 81          .byte 60,66,129,129,129,129,66,60
003A37  3  81 81 42 3C  
003A3B  3  18 24 24 42          .byte 24,36,36,66,66,129,129,255
003A3F  3  42 81 81 FF  
003A43  3  3C 24 E7 81          .byte 60,36,231,129,129,231,36,60
003A47  3  81 E7 24 3C  
003A4B  3  3C 24 E7 81          .byte 60,36,231,129,129,231,36,60
003A4F  3  81 E7 24 3C  
003A53  3  00 00 10 00          .byte 0,0,16,0,0,16,0,0
003A57  3  00 10 00 00  
003A5B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003A5F  3  00 00 00 00  
003A63  3  00 40 40 40          .byte 0,64,64,64,64,64,64,0
003A67  3  40 40 40 00  
003A6B  3  00 50 50 50          .byte 0,80,80,80,80,80,80,0
003A6F  3  50 50 50 00  
003A73  3  00 54 54 54          .byte 0,84,84,84,84,84,84,0
003A77  3  54 54 54 00  
003A7B  3  00 55 55 55          .byte 0,85,85,85,85,85,85,0
003A7F  3  55 55 55 00  
003A83  3  0E 3D 6D ED          .byte 14,61,109,237,229,126,129,126
003A87  3  E5 7E 81 7E  
003A8B  3  07 18 20 40          .byte 7,24,32,64,85,255,128,255
003A8F  3  55 FF 80 FF  
003A93  3  FF 00 00 00          .byte 255,0,0,0,85,255,0,255
003A97  3  55 FF 00 FF  
003A9B  3  F0 0C 02 01          .byte 240,12,2,1,85,255,1,255
003A9F  3  55 FF 01 FF  
003AA3  3  FE FE DA FA          .byte 254,254,218,250,174,254,254,0
003AA7  3  AE FE FE 00  
003AAB  3  08 10 20 7E          .byte 8,16,32,126,4,8,16,0
003AAF  3  04 08 10 00  
003AB3  3               bprop:
003AB3  3  00                   .byte 0
003AB4  3  02                   .byte 2
003AB5  3  02                   .byte 2
003AB6  3  01                   .byte 1
003AB7  3  02                   .byte 2
003AB8  3  01                   .byte 1
003AB9  3  01                   .byte 1
003ABA  3  01                   .byte 1
003ABB  3  02                   .byte 2
003ABC  3  01                   .byte 1
003ABD  3  02                   .byte 2
003ABE  3  01                   .byte 1
003ABF  3  01                   .byte 1
003AC0  3  01                   .byte 1
003AC1  3  01                   .byte 1
003AC2  3  01                   .byte 1
003AC3  3  01                   .byte 1
003AC4  3  02                   .byte 2
003AC5  3  02                   .byte 2
003AC6  3  01                   .byte 1
003AC7  3  00                   .byte 0
003AC8  3  02                   .byte 2
003AC9  3  02                   .byte 2
003ACA  3  02                   .byte 2
003ACB  3  02                   .byte 2
003ACC  3  02                   .byte 2
003ACD  3  05                   .byte 5
003ACE  3  03                   .byte 3
003ACF  3  03                   .byte 3
003AD0  3  00                   .byte 0
003AD1  3  00                   .byte 0
003AD2  3  00                   .byte 0
003AD3  3  00                   .byte 0
003AD4  3  00                   .byte 0
003AD5  3  00                   .byte 0
003AD6  3  00                   .byte 0
003AD7  3  00                   .byte 0
003AD8  3  00                   .byte 0
003AD9  3  00                   .byte 0
003ADA  3  00                   .byte 0
003ADB  3  00                   .byte 0
003ADC  3  00                   .byte 0
003ADD  3  00                   .byte 0
003ADE  3  00                   .byte 0
003ADF  3  00                   .byte 0
003AE0  3  00                   .byte 0
003AE1  3  00                   .byte 0
003AE2  3  00                   .byte 0
003AE3  3  00                   .byte 0
003AE4  3  02                   .byte 2
003AE5  3  02                   .byte 2
003AE6  3  02                   .byte 2
003AE7  3  02                   .byte 2
003AE8  3  02                   .byte 2
003AE9  3  02                   .byte 2
003AEA  3  01                   .byte 1
003AEB  3  01                   .byte 1
003AEC  3  01                   .byte 1
003AED  3  01                   .byte 1
003AEE  3  01                   .byte 1
003AEF  3  00                   .byte 0
003AF0  3  02                   .byte 2
003AF1  3  02                   .byte 2
003AF2  3  02                   .byte 2
003AF3  3  02                   .byte 2
003AF4  3  02                   .byte 2
003AF5  3  02                   .byte 2
003AF6  3  02                   .byte 2
003AF7  3  02                   .byte 2
003AF8  3  02                   .byte 2
003AF9  3  00                   .byte 0
003AFA  3  02                   .byte 2
003AFB  3  00                   .byte 0
003AFC  3  00                   .byte 0
003AFD  3  00                   .byte 0
003AFE  3  00                   .byte 0
003AFF  3  00                   .byte 0
003B00  3  00                   .byte 0
003B01  3  00                   .byte 0
003B02  3  00                   .byte 0
003B03  3  00                   .byte 0
003B04  3  00                   .byte 0
003B05  3  00                   .byte 0
003B06  3  00                   .byte 0
003B07  3  00                   .byte 0
003B08  3  02                   .byte 2
003B09  3  02                   .byte 2
003B0A  3  02                   .byte 2
003B0B  3  06                   .byte 6
003B0C  3  06                   .byte 6
003B0D  3               sprgfx:
003B0D  3  00 00 40 00          .byte 0,0,64,0,67,239,76,57,80,249,35,251,38,139,78,239,78,14,255,255,128,1,91,108,144,9,43,213,144,8,109,182
003B11  3  43 EF 4C 39  
003B15  3  50 F9 23 FB  
003B2D  3  00 00 40 00          .byte 0,0,64,0,67,239,76,57,80,249,35,251,38,139,78,239,78,14,255,255,128,1,109,182,16,8,171,213,144,9,91,108
003B31  3  43 EF 4C 39  
003B35  3  50 F9 23 FB  
003B4D  3  80 00 83 EF          .byte 128,0,131,239,76,57,80,249,35,251,38,139,78,239,78,14,255,255,128,1,0,0,54,218,144,9,171,212,16,9,54,218
003B51  3  4C 39 50 F9  
003B55  3  23 FB 26 8B  
003B6D  3  00 00 00 02          .byte 0,0,0,2,247,194,156,50,159,10,223,196,209,100,247,114,112,114,255,255,128,1,54,218,144,9,171,212,16,9,109,182
003B71  3  F7 C2 9C 32  
003B75  3  9F 0A DF C4  
003B8D  3  00 00 00 02          .byte 0,0,0,2,247,194,156,50,159,10,223,196,209,100,247,114,112,114,255,255,128,1,109,182,16,8,171,213,144,9,54,218
003B91  3  F7 C2 9C 32  
003B95  3  9F 0A DF C4  
003BAD  3  00 01 F7 C1          .byte 0,1,247,193,156,50,159,10,223,196,209,100,247,114,112,114,255,255,128,1,0,0,91,108,144,9,43,213,144,8,91,108
003BB1  3  9C 32 9F 0A  
003BB5  3  DF C4 D1 64  
003BCD  3  01 80 06 60          .byte 1,128,6,96,8,16,16,136,32,68,32,36,64,18,64,18,64,2,64,2,32,4,32,4,16,8,8,16,6,96,1,128
003BD1  3  08 10 10 88  
003BD5  3  20 44 20 24  
003BED  3  00 00 03 C0          .byte 0,0,3,192,12,48,16,8,32,196,32,36,64,18,64,18,64,2,64,2,32,4,32,4,16,8,12,48,3,192,0,0
003BF1  3  0C 30 10 08  
003BF5  3  20 C4 20 24  
003C0D  3  00 00 03 C0          .byte 0,0,3,192,12,48,16,8,32,196,64,34,64,18,128,9,128,9,64,2,64,2,32,4,16,8,12,48,3,192,0,0
003C11  3  0C 30 10 08  
003C15  3  20 C4 40 22  
003C2D  3  03 C0 0C 30          .byte 3,192,12,48,16,8,32,196,64,34,64,18,128,9,128,9,128,1,128,1,64,2,64,2,32,4,16,8,12,48,3,192
003C31  3  10 08 20 C4  
003C35  3  40 22 40 12  
003C4D  3  00 00 00 00          .byte 0,0,0,0,0,0,63,252,32,4,63,252,6,96,1,128,255,255,135,225,51,204,73,146,181,173,165,169,72,18,48,12
003C51  3  00 00 3F FC  
003C55  3  20 04 3F FC  
003C6D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,63,252,32,4,63,252,6,96,255,255,135,225,51,204,73,146,181,173,149,165,72,18,48,12
003C71  3  00 00 00 00  
003C75  3  3F FC 20 04  
003C8D  3  00 00 00 00          .byte 0,0,0,0,0,0,63,252,32,4,63,252,6,96,1,128,255,255,135,225,51,204,73,146,149,165,181,173,72,18,48,12
003C91  3  00 00 3F FC  
003C95  3  20 04 3F FC  
003CAD  3  00 00 00 00          .byte 0,0,0,0,63,252,32,4,63,252,6,96,1,128,6,96,255,255,135,225,51,204,73,146,165,169,181,173,72,18,48,12
003CB1  3  3F FC 20 04  
003CB5  3  3F FC 06 60  
003CCD  3  01 80 BF FD          .byte 1,128,191,253,1,128,15,240,16,8,32,20,32,20,32,20,32,4,63,252,20,8,24,8,15,240,4,32,4,32,14,112
003CD1  3  01 80 0F F0  
003CD5  3  10 08 20 14  
003CED  3  01 80 0F F0          .byte 1,128,15,240,1,128,15,240,16,8,32,68,32,68,32,68,32,4,63,252,17,8,18,8,15,240,4,32,4,112,14,0
003CF1  3  01 80 0F F0  
003CF5  3  10 08 20 44  
003D0D  3  01 80 03 C0          .byte 1,128,3,192,1,128,15,240,16,8,34,4,34,4,34,4,32,4,63,252,16,72,16,136,15,240,4,32,14,112,0,0
003D11  3  01 80 0F F0  
003D15  3  10 08 22 04  
003D2D  3  01 80 0F F0          .byte 1,128,15,240,1,128,15,240,16,8,40,4,40,4,40,4,32,4,63,252,16,24,16,40,15,240,4,32,14,32,0,112
003D31  3  01 80 0F F0  
003D35  3  10 08 28 04  
003D4D  3  03 C0 0C 30          .byte 3,192,12,48,16,8,38,100,41,148,72,18,74,82,127,254,32,4,63,252,8,16,16,8,31,248,0,0,0,0,0,0
003D51  3  10 08 26 64  
003D55  3  29 94 48 12  
003D6D  3  03 C0 0C 30          .byte 3,192,12,48,16,8,32,4,32,4,70,98,73,146,127,254,32,4,63,252,8,16,16,8,31,248,2,64,1,128,0,0
003D71  3  10 08 20 04  
003D75  3  20 04 46 62  
003D8D  3  03 C0 0C 30          .byte 3,192,12,48,16,8,38,100,41,148,72,18,74,82,127,254,32,4,63,252,8,16,16,8,31,248,4,32,2,64,1,128
003D91  3  10 08 26 64  
003D95  3  29 94 48 12  
003DAD  3  03 C0 0C 30          .byte 3,192,12,48,16,8,38,100,41,148,74,82,72,18,127,254,32,4,63,252,8,16,16,8,31,248,16,8,8,16,7,224
003DB1  3  10 08 26 64  
003DB5  3  29 94 4A 52  
003DCD  3  01 80 03 40          .byte 1,128,3,64,2,64,1,128,1,0,97,134,223,253,149,169,97,6,1,128,1,0,1,128,1,128,3,64,2,64,1,128
003DD1  3  02 40 01 80  
003DD5  3  01 00 61 86  
003DED  3  06 60 0D D0          .byte 6,96,13,208,9,144,7,224,1,0,25,152,55,244,37,164,25,24,1,128,1,0,1,128,7,224,13,208,9,144,6,96
003DF1  3  09 90 07 E0  
003DF5  3  01 00 19 98  
003E0D  3  19 98 37 F4          .byte 25,152,55,244,37,36,25,152,1,0,1,128,3,64,2,64,1,128,1,128,1,0,1,128,25,152,55,244,37,100,24,24
003E11  3  25 24 19 98  
003E15  3  01 00 01 80  
003E2D  3  06 60 0D D0          .byte 6,96,13,208,9,144,7,224,1,0,25,152,55,244,37,164,25,24,1,128,1,0,1,128,7,224,13,208,9,144,6,96
003E31  3  09 90 07 E0  
003E35  3  01 00 19 98  
003E4D  3  0F E0 17 F0          .byte 15,224,23,240,19,248,0,0,126,120,1,144,62,96,0,12,15,176,58,192,68,252,130,194,146,152,162,164,68,52,56,24
003E51  3  13 F8 00 00  
003E55  3  7E 78 01 90  
003E6D  3  0F E0 17 F0          .byte 15,224,23,240,19,248,0,0,126,120,1,144,62,96,0,12,15,176,58,192,68,252,162,194,146,152,130,180,68,36,56,24
003E71  3  13 F8 00 00  
003E75  3  7E 78 01 90  
003E8D  3  0F E0 17 F0          .byte 15,224,23,240,19,248,0,0,126,120,1,144,62,96,0,12,15,176,58,192,68,252,138,194,146,152,130,172,68,36,56,24
003E91  3  13 F8 00 00  
003E95  3  7E 78 01 90  
003EAD  3  0F E0 17 F0          .byte 15,224,23,240,19,248,0,0,126,120,1,144,62,96,0,12,15,176,58,192,68,252,130,194,146,152,138,164,68,44,56,24
003EB1  3  13 F8 00 00  
003EB5  3  7E 78 01 90  
003ECD  3  00 00 20 20          .byte 0,0,32,32,47,160,31,192,54,224,50,96,127,240,112,112,63,224,16,64,32,32,64,16,128,8,192,24,192,24,192,24
003ED1  3  2F A0 1F C0  
003ED5  3  36 E0 32 60  
003EED  3  10 10 17 D0          .byte 16,16,23,208,15,224,27,112,25,48,63,248,56,56,31,240,8,32,16,16,32,8,64,4,128,12,192,12,192,12,192,0
003EF1  3  0F E0 1B 70  
003EF5  3  19 30 3F F8  
003F0D  3  08 08 0B E8          .byte 8,8,11,232,7,240,13,184,12,152,31,252,28,28,15,248,4,16,8,8,16,4,32,2,48,1,48,3,48,3,0,3
003F11  3  07 F0 0D B8  
003F15  3  0C 98 1F FC  
003F2D  3  08 08 0B E8          .byte 8,8,11,232,7,240,13,184,12,152,31,252,28,28,15,248,4,16,4,8,4,4,4,2,4,1,6,3,6,3,6,3
003F31  3  07 F0 0D B8  
003F35  3  0C 98 1F FC  
003F4D  3  00 00 04 04          .byte 0,0,4,4,5,244,3,248,6,220,6,76,15,254,14,14,7,252,2,8,4,4,8,2,16,1,24,3,24,3,24,3
003F51  3  05 F4 03 F8  
003F55  3  06 DC 06 4C  
003F6D  3  00 00 04 04          .byte 0,0,4,4,5,244,3,248,6,220,6,76,15,254,14,14,7,252,6,8,24,8,32,8,64,8,96,24,96,24,96,24
003F71  3  05 F4 03 F8  
003F75  3  06 DC 06 4C  
003F8D  3  07 E0 18 78          .byte 7,224,24,120,32,52,64,18,64,14,128,7,128,5,255,255,176,195,67,14,44,60,16,216,11,16,4,32,2,192,1,128
003F91  3  20 34 40 12  
003F95  3  40 0E 80 07  
003FAD  3  07 E0 18 98          .byte 7,224,24,152,32,68,64,34,64,34,128,17,128,17,255,255,152,97,97,134,38,28,24,120,9,176,6,32,2,64,1,128
003FB1  3  20 44 40 22  
003FB5  3  40 22 80 11  
003FCD  3  07 E0 18 98          .byte 7,224,24,152,32,132,64,130,64,66,128,65,128,65,255,255,140,49,112,194,35,12,28,56,8,240,7,96,2,64,1,128
003FD1  3  20 84 40 82  
003FD5  3  40 42 80 41  
003FED  3  07 E0 19 18          .byte 7,224,25,24,33,4,65,2,66,2,130,1,130,1,255,255,134,25,88,98,33,132,22,24,8,112,5,224,2,192,1,128
003FF1  3  21 04 41 02  
003FF5  3  42 02 82 01  
00400D  3  07 E0 19 18          .byte 7,224,25,24,34,4,68,2,68,2,136,1,136,1,255,255,131,13,76,50,48,196,19,8,12,48,4,224,3,64,1,128
004011  3  22 04 44 02  
004015  3  44 02 88 01  
00402D  3  07 E0 1E 18          .byte 7,224,30,24,40,4,72,2,112,2,224,1,160,1,255,255,129,135,70,30,56,108,17,136,14,16,4,96,3,192,1,128
004031  3  28 04 48 02  
004035  3  70 02 E0 01  
00404D  3  00 00 01 80          .byte 0,0,1,128,2,64,3,60,0,102,0,114,31,122,32,126,80,60,64,64,80,72,88,92,77,72,32,128,31,0,0,0
004051  3  02 40 03 3C  
004055  3  00 66 00 72  
00406D  3  01 E0 03 30          .byte 1,224,3,48,3,144,3,192,3,192,1,152,0,36,7,52,8,152,16,68,20,82,18,90,8,140,7,0,0,0,0,0
004071  3  03 90 03 C0  
004075  3  03 C0 01 98  
00408D  3  00 C0 01 20          .byte 0,192,1,32,1,160,0,208,0,56,0,16,0,14,6,51,9,57,16,189,16,191,9,30,6,0,0,0,0,0,0,0
004091  3  01 A0 00 D0  
004095  3  00 38 00 10  
0040AD  3  00 00 00 80          .byte 0,0,0,128,1,192,0,160,0,112,0,32,0,30,0,51,6,57,9,61,9,63,6,30,0,0,0,0,0,0,0,0
0040B1  3  01 C0 00 A0  
0040B5  3  00 70 00 20  
0040CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,255
0040D1  3  00 00 00 00  
0040D5  3  00 00 00 00  
0040ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,255,0,0,75,254,0,0
0040F1  3  00 00 00 00  
0040F5  3  00 00 00 00  
00410D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,255,0,0,75,254,0,0,175,255,151,254,175,253,151,254
004111  3  00 00 00 00  
004115  3  00 00 00 00  
00412D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,151,255,0,0,75,254,0,0,175,255,151,254,175,253,151,254,175,253,151,254,175,253
004131  3  00 00 00 00  
004135  3  00 00 97 FF  
00414D  3  97 FF 00 00          .byte 151,255,0,0,75,254,0,0,175,255,151,254,175,253,151,254,175,253,151,254,175,253,151,254,175,253,151,254,175,253,151,254
004151  3  4B FE 00 00  
004155  3  AF FF 97 FE  
00416D  3  00 00 00 00          .byte 0,0,0,0,32,4,0,0,4,32,128,1,128,1,0,0,32,4,32,4,4,32,128,1,129,1,0,0,160,5,255,255
004171  3  20 04 00 00  
004175  3  04 20 80 01  
00418D  3  00 00 00 00          .byte 0,0,0,0,4,32,0,0,128,1,0,0,32,4,32,4,4,32,129,1,128,1,0,0,32,4,32,4,132,33,255,255
004191  3  04 20 00 00  
004195  3  80 01 00 00  
0041AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,33,4,32,4,4,32,128,1,128,1,0,0,32,4,32,4,4,32,128,1,128,1,255,255
0041B1  3  00 00 00 00  
0041B5  3  21 04 20 04  
0041CD  3  00 00 80 00          .byte 0,0,128,0,0,0,2,0,0,1,0,0,0,0,16,0,0,64,0,0,0,0,0,4,0,0,32,0,0,0,0,0
0041D1  3  00 00 02 00  
0041D5  3  00 01 00 00  
0041ED  3  00 00 00 02          .byte 0,0,0,2,0,0,8,0,0,4,0,0,0,0,64,0,1,0,0,0,0,0,0,16,0,0,128,0,0,0,0,0
0041F1  3  00 00 08 00  
0041F5  3  00 04 00 00  
00420D  3  00 00 00 08          .byte 0,0,0,8,0,0,32,0,0,16,0,0,0,0,0,1,4,0,0,0,0,0,0,64,0,0,0,2,0,0,0,0
004211  3  00 00 20 00  
004215  3  00 10 00 00  
00422D  3  00 00 00 20          .byte 0,0,0,32,0,0,128,0,0,64,0,0,0,0,0,4,16,0,0,0,0,0,1,0,0,0,0,8,0,0,0,0
004231  3  00 00 80 00  
004235  3  00 40 00 00  
00424D  3  00 00 00 80          .byte 0,0,0,128,0,0,0,2,1,0,0,0,0,0,0,16,64,0,0,0,0,0,4,0,0,0,0,32,0,0,0,0
004251  3  00 00 00 02  
004255  3  01 00 00 00  
00426D  3  00 00 02 00          .byte 0,0,2,0,0,0,0,8,4,0,0,0,0,0,0,64,0,1,0,0,0,0,16,0,0,0,0,128,0,0,0,0
004271  3  00 00 00 08  
004275  3  04 00 00 00  
00428D  3  00 00 10 00          .byte 0,0,16,0,0,0,0,64,32,0,0,0,0,0,2,0,0,8,0,0,0,0,128,0,0,0,4,0,0,0,0,0
004291  3  00 00 00 40  
004295  3  20 00 00 00  
0042AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0042B1  3  00 00 00 00  
0042B5  3  00 00 00 00  
0042CD  3               frmlst:
0042CD  3  00 03                .byte 0,3
0042CF  3  03 03                .byte 3,3
0042D1  3  06 04                .byte 6,4
0042D3  3  0A 04                .byte 10,4
0042D5  3  0E 04                .byte 14,4
0042D7  3  12 04                .byte 18,4
0042D9  3  16 04                .byte 22,4
0042DB  3  1A 04                .byte 26,4
0042DD  3  1E 06                .byte 30,6
0042DF  3  24 06                .byte 36,6
0042E1  3  2A 04                .byte 42,4
0042E3  3  2E 05                .byte 46,5
0042E5  3  33 03                .byte 51,3
0042E7  3  36 07                .byte 54,7
0042E9  3  3D 01 3E 00          .byte 61,1,62,0
0042ED  3               scdat:
0042ED  3  BA 00 D7 00          .word 186,215,282,205,209,226,221,179,222,293,222,213,274,189,156,208,211,251,148,152,266,208
0042F1  3  1A 01 CD 00  
0042F5  3  D1 00 E2 00  
004319  3  FF 00 26 19          .byte 255,0,38,25,24,25,24,25,24,25,24,25,24,25,24,255,0,18,24,255,0,10,25,255,0,16,37,0,25,255,0,10,24
00431D  3  18 19 18 19  
004321  3  18 19 18 19  
00433A  3  FF 00 10 3B          .byte 255,0,16,59,0,24,255,0,6,55,56,56,57,25,255,0,16,60,0,25,255,0,7,12,12,0,24,255,0,15,25,24,25
00433E  3  00 18 FF 00  
004342  3  06 37 38 38  
00435B  3  18 FF 00 07          .byte 24,255,0,7,60,60,0,25,24,25,24,255,0,12,24,8,8,8,0,0,0,255,8,10,25,255,0,12,25,255,0,16,24
00435F  3  3C 3C 00 19  
004363  3  18 19 18 FF  
00437C  3  FF 00 0C 18          .byte 255,0,12,24,255,0,16,25,255,0,12,25,255,0,16,24,255,0,12,24,255,0,16,25,255,0,12,25,255,8,10,0,0,0
004380  3  FF 00 10 19  
004384  3  FF 00 0C 19  
00439E  3  08 08 08 18          .byte 8,8,8,24,255,0,12,24,255,0,16,25,255,0,12,25,255,0,16,24,255,0,12,24,255,0,16,25,255,0,12,25,255,0,16
0043A2  3  FF 00 0C 18  
0043A6  3  FF 00 10 19  
0043C1  3  18 FF 00 0C          .byte 24,255,0,12,24,8,8,8,0,0,0,255,8,10,25,255,0,7
0043C5  3  18 08 08 08  
0043C9  3  00 00 00 FF  
0043D3  3  FF 00 10 1D          .byte 255,0,16,29,255,10,13,255,0,10,37,255,0,4,29,10,255,25,13,255,0,10,59,0,0,0,29,10,255,0,13,25,255,0,10
0043D7  3  FF 0A 0D FF  
0043DB  3  00 0A 25 FF  
0043F6  3  3C 00 00 1D          .byte 60,0,0,29,10,255,0,14,25,255,0,9,29,255,10,4,255,0,15,25,255,0,6,29,10,10,10,255,0,8,27,28,255,8,9
0043FA  3  0A FF 00 0E  
0043FE  3  19 FF 00 09  
004419  3  19 FF 00 04          .byte 25,255,0,4,29,10,10,255,0,14,36,255,0,7,25,0,0,0,29,10,255,0,13,27,28,0,36,255,0,7,25,0,0
00441D  3  1D 0A 0A FF  
004421  3  00 0E 24 FF  
00443A  3  1D 0A FF 00          .byte 29,10,255,0,17,36,255,0,7,25,0,0,10,255,0,8,27,28,255,8,16,25,0,29,10,255,0,11,36,255,0,14,25
00443E  3  11 24 FF 00  
004442  3  07 19 00 00  
00445B  3  00 0A FF 00          .byte 0,10,255,0,9,27,28,0,36,255,0,14,25,0,10,255,0,12,36,255,0,14,25,29,10,255,0,5,27,28,255,8,20
00445F  3  09 1B 1C 00  
004463  3  24 FF 00 0E  
00447C  3  19 0A 19 00          .byte 25,10,25,0,89,255,0,6,36,255,0,18,25,10,25,255,0,5,27,28,0,36,255,0,19,10,25,0,88,255,0,6,36
004480  3  59 FF 00 06  
004484  3  24 FF 00 12  
00449D  3  FF 00 13 0A          .byte 255,0,19,10,25,255,8,22,255,0,4,8,8
0044A1  3  19 FF 08 16  
0044A5  3  FF 00 04 08  
0044AA  3  FF 0A 1F 00          .byte 255,10,31,0,0,40,255,0,7,36,255,0,6,36,255,0,7,40,0,0,10,10,38,38,39,255,0,7,36,255,0,6,36
0044AE  3  00 28 FF 00  
0044B2  3  07 24 FF 00  
0044CB  3  FF 00 07 3D          .byte 255,0,7,61,38,38,10,10,255,0,10,36,255,0,6,36,255,0,10,10,10,0,0,255,8,10,0,27,28,0,255,8,10
0044CF  3  26 26 0A 0A  
0044D3  3  FF 00 0A 24  
0044EC  3  00 00 0A 0A          .byte 0,0,10,10,255,0,4,36,255,0,8,27,28,255,0,8,36,255,0,4,10,10,255,0,4,36,255,0,8,27,28,255,0,8
0044F0  3  FF 00 04 24  
0044F4  3  FF 00 08 1B  
00450E  3  24 FF 00 04          .byte 36,255,0,4,10,10,255,0,4,36,255,0,8,27,28,255,0,8,36,255,0,4,10,10,255,8,6,0,0,0,8,8,8
004512  3  0A 0A FF 00  
004516  3  04 24 FF 00  
00452F  3  00 1B 1C 00          .byte 0,27,28,0,8,8,8,0,0,0,255,8,6,10,10,255,0,10,36,0,0,27,28,255,0,8,36,255,0,4,10,10,255,0,10
004533  3  08 08 08 00  
004537  3  00 00 FF 08  
004552  3  24 00 00 1B          .byte 36,0,0,27,28,255,0,8,36,255,0,4,10,10,255,0,10,36,0,0,27,28,255,0,8,36,255,0,4,10,10,0,0
004556  3  1C FF 00 08  
00455A  3  24 FF 00 04  
004573  3  FF 08 0A 00          .byte 255,8,10,0,27,28,0,255,8,10,0,0,10,10,255,0,4,34,255,0,4,34,0,0,0,27,28,0,0,0,34,255,0,4
004577  3  1B 1C 00 FF  
00457B  3  08 0A 00 00  
004595  3  22 FF 00 04          .byte 34,255,0,4,10,10,255,0,4,32,255,33,4,31,0,0,0,27,28,0,0,0,32,255,33,4,31,255,0,4,10,255,0,14
004599  3  0A 0A FF 00  
00459D  3  04 20 FF 21  
0045B7  3  1B 1C FF 00          .byte 27,28,255,0,28,27,28,255,0,14,255,8,30
0045BB  3  1C 1B 1C FF  
0045BF  3  00 0E FF 08  
0045C4  3  FF 0A 09 00          .byte 255,10,9,0,0,0,255,10,19,255,0,28,10,10,255,0,28,10,10,255,0,28,10,10,255,8,17,255,0,8,8,8,8
0045C8  3  00 00 FF 0A  
0045CC  3  13 FF 00 1C  
0045E5  3  0A 0A FF 00          .byte 10,10,255,0,15,36,255,0,12,10,10,255,0,15,36,255,0,12,10,10,255,0,15,36,0,0,27,28,8,8,27,28,255,0,4
0045E9  3  0F 24 FF 00  
0045ED  3  0C 0A 0A FF  
004608  3  0A 0A FF 00          .byte 10,10,255,0,15,36,0,0,27,28,0,0,27,28,255,0,5,10,255,0,15,36,255,0,13,10,255,8,17,255,0,8,8,8,8
00460C  3  0F 24 00 00  
004610  3  1B 1C 00 00  
00462B  3  0A 0A 00 00          .byte 10,10,0,0,34,0,40,255,0,7,40,0,34,255,0,5,27,28,255,0,6,10,10,0,0,35,0,61,255,38,7,39,0
00462F  3  22 00 28 FF  
004633  3  00 07 28 00  
00464C  3  23 FF 00 05          .byte 35,255,0,5,27,28,255,0,6,10,10,0,0,34,255,0,11,34,255,0,5,27,28,255,0,6,10,10,0,0,32,255,33,11
004650  3  1B 1C FF 00  
004654  3  06 0A 0A 00  
00466E  3  1F FF 00 05          .byte 31,255,0,5,27,28,255,0,4,89,0,10,255,0,21,27,28,255,0,6,10,255,0,21,27,28,255,0,4,88,0,10,255,8,30
004672  3  1B 1C FF 00  
004676  3  04 59 00 0A  
004691  3  FF 0A 1F FF          .byte 255,10,31,255,0,11,40,0,0,40,40,0,0,40,0,0,34,0,34,0,34,0,0,10,10,0,41,42,42,43,0,41,42,42
004695  3  00 0B 28 00  
004699  3  00 28 28 00  
0046B3  3  2B 00 28 00          .byte 43,0,40,0,0,40,40,0,0,40,0,0,35,0,35,0,35,0,0,10,10,0,48,0,0,44,0,48,0,0,44,0,61
0046B7  3  00 28 28 00  
0046BB  3  00 28 00 00  
0046D4  3  26 26 27 3D          .byte 38,38,39,61,38,38,39,0,0,34,0,34,0,34,0,0,10,10,0,48,0,0,44,0,48,0,0,44,255,0,11,32,33
0046D8  3  26 26 27 00  
0046DC  3  00 22 00 22  
0046F5  3  25 21 25 21          .byte 37,33,37,33,33,10,10,0,47,46,46,45,0,47,46,46,45,255,0,18,10,10,255,0,28,10,10,255,0,28,10,255,0,29
0046F9  3  21 0A 0A 00  
0046FD  3  2F 2E 2E 2D  
004717  3  0A FF 00 1D          .byte 10,255,0,29,10,255,8,7,255,0,22,10,10,255,0,4,36,255,0,23,10,10,255,0,4,36,0,8,8,255,0,20,10,10
00471B  3  0A FF 08 07  
00471F  3  FF 00 16 0A  
004739  3  FF 00 04 24          .byte 255,0,4,36,255,0,23,10,10,255,0,4,36,0,0,0,8,8,255,0,18,10,10,255,0,4,36,255,0,24,10,255,0,4
00473D  3  FF 00 17 0A  
004741  3  0A FF 00 04  
00475B  3  24 FF 00 18          .byte 36,255,0,24,255,8,30
00475F  3  FF 08 1E     
004762  3  FF 0A 05 1E          .byte 255,10,5,30,255,0,24,10,0,0,0,14,10,30,255,0,6,37,255,0,16,10,255,0,4,14,10,30,255,0,5,59,255,0,16
004766  3  FF 00 18 0A  
00476A  3  00 00 00 0E  
004785  3  0A FF 00 05          .byte 10,255,0,5,14,10,30,255,0,4,60,255,0,16,10,255,0,6,14,255,10,12,30,255,0,9,10,255,0,18,14,10,10,10
004789  3  0E 0A 1E FF  
00478D  3  00 04 3C FF  
0047A7  3  1E FF 00 06          .byte 30,255,0,6,10,255,0,21,14,10,10,30,255,0,4,10,255,0,22,36,14,10,30,0,0,0,10,255,0,22,36,0,14
0047AB  3  0A FF 00 15  
0047AF  3  0E 0A 0A 1E  
0047C8  3  0A 1E 00 00          .byte 10,30,0,0,10,255,4,5,27,28,255,0,15,36,0,0,14,10,0,0,10,0,89,0,0,0,27,28,255,0,15,36,0,0,0
0047CC  3  0A FF 04 05  
0047D0  3  1B 1C FF 00  
0047EB  3  0A 1E 00 0A          .byte 10,30,0,10,255,0,5,27,28,255,0,15,36,0,0,0,14,10,0,10,0,88,0,0,0,27,28,255,0,15,36,255,0,4
0047EF  3  FF 00 05 1B  
0047F3  3  1C FF 00 0F  
00480D  3  0A 00 0A FF          .byte 10,0,10,255,4,12,27,28,255,0,8,21,255,22,4,10,30,10,255,0,12,27,28,255,0,13,14,10,255,0,13,27,28
004811  3  04 0C 1B 1C  
004815  3  FF 00 08 15  
00482E  3  FF 00 0E 0A          .byte 255,0,14,10,255,0,13,27,28,255,0,14,10,255,8,23,255,0,4,8,8,10
004832  3  FF 00 0D 1B  
004836  3  1C FF 00 0E  
004844  3  FF 0A 1F FF          .byte 255,10,31,255,0,28,1,10,255,0,10,41,42,42,43,255,0,14,1,10,255,0,10,48,0,0,44,255,0,14,1,10,255,0,10
004848  3  00 1C 01 0A  
00484C  3  FF 00 0A 29  
004867  3  30 00 00 2C          .byte 48,0,0,44,255,0,9,27,28,6,6,6,1,10,255,0,10,47,46,46,45,255,0,9,27,28,0,0,0,1,10,255,0,23
00486B  3  FF 00 09 1B  
00486F  3  1C 06 06 06  
004889  3  1B 1C 00 00          .byte 27,28,0,0,0,1,10,0,0,255,9,18,0,0,0,27,28,6,6,6,1,10,255,0,23,27,28,0,0,0,1,10,255,0,23
00488D  3  00 01 0A 00  
004891  3  00 FF 09 12  
0048AC  3  1B 1C 00 00          .byte 27,28,0,0,0,1,10,255,0,23,27,28,0,0,0,1,10,0,0,255,9,18,0,0,0,27,28,6,6,6,1,10,255,0,23
0048B0  3  00 01 0A FF  
0048B4  3  00 17 1B 1C  
0048CF  3  1B 1C 00 00          .byte 27,28,0,0,0,1,10,255,0,6,29,255,33,8,30,255,0,7,27,28,0,0,0,1,10,5,5,255,0,4,34,255,0,8
0048D3  3  00 01 0A FF  
0048D7  3  00 06 1D FF  
0048F1  3  22 FF 00 07          .byte 34,255,0,7,27,28,0,0,0,1,10,255,0,6,35,255,0,8,35,255,0,7,27,28,255,0,4,10,255,0,6,34,255,0,8
0048F5  3  1B 1C 00 00  
0048F9  3  00 01 0A FF  
004914  3  22 FF 00 0D          .byte 34,255,0,13,255,3,23,255,0,4,3,3,3
004918  3  FF 03 17 FF  
00491C  3  00 04 03 03  
004921  3  FF 0A 18 FF          .byte 255,10,24,255,0,4,10,10,2,255,0,8,34,255,0,10,34,255,0,8,1,2,255,0,8,35,255,0,10,35,255,0,8
004925  3  00 04 0A 0A  
004929  3  02 FF 00 08  
004942  3  01 02 FF 00          .byte 1,2,255,0,8,32,255,33,10,31,255,0,8,1,2,6,6,255,0,23,6,6,6,1,2,255,0,28,1,2,255,0,4
004946  3  08 20 FF 21  
00494A  3  0A 1F FF 00  
004963  3  FF 0B 05 00          .byte 255,11,5,0,0,0,255,11,4,0,0,0,255,11,4,255,0,5,1,2,255,0,28,1,2,6,6,255,0,24,6,6,1
004967  3  00 00 FF 0B  
00496B  3  04 00 00 00  
004984  3  02 FF 00 1A          .byte 2,255,0,26,89,0,1,2,255,0,4,255,11,5,0,0,0,255,11,4,0,0,0,255,11,5,255,0,4,1,2,255,0,26
004988  3  59 00 01 02  
00498C  3  FF 00 04 FF  
0049A6  3  58 00 01 02          .byte 88,0,1,2,6,6,255,0,24,6,6,1,2,255,0,28,1,2,255,0,4,255,11,5,0,0,0,255,11,4,0,0,0
0049AA  3  06 06 FF 00  
0049AE  3  18 06 06 01  
0049C7  3  FF 0B 05 FF          .byte 255,11,5,255,0,4,1,255,0,60,255,3,30
0049CB  3  00 04 01 FF  
0049CF  3  00 3C FF 03  
0049D4  3  FF 0A 1E 02          .byte 255,10,30,2,255,0,5,40,255,0,14,40,0,34,255,0,5,1,2,255,0,5,40,255,0,14,40,0,35,255,0,5,1
0049D8  3  FF 00 05 28  
0049DC  3  FF 00 0E 28  
0049F5  3  02 FF 26 05          .byte 2,255,38,5,39,255,0,14,61,38,34,255,38,5,1,2,255,0,22,35,255,0,5,1,2,255,0,22,32,255,33,5,1
0049F9  3  27 FF 00 0E  
0049FD  3  3D 26 22 FF  
004A16  3  02 FF 00 1C          .byte 2,255,0,28,1,2,255,0,28,1,2,255,11,9,255,0,4,11,11,11,255,0,4,255,11,8,1,2,255,0,28,1,2
004A1A  3  01 02 FF 00  
004A1E  3  1C 01 02 FF  
004A37  3  FF 00 09 1B          .byte 255,0,9,27,28,255,0,7,27,28,255,0,8,1,2,255,0,9,27,28,255,0,7,27,28,255,0,8,1,2,255,0,28
004A3B  3  1C FF 00 07  
004A3F  3  1B 1C FF 00  
004A58  3  01 02 00 00          .byte 1,2,0,0,0,49,50,255,9,6,0,0,0,9,0,0,0,255,9,5,49,50,0,0,0,1,2,9,0,0,49,50,27
004A5C  3  00 31 32 FF  
004A60  3  09 06 00 00  
004A79  3  1C FF 00 0E          .byte 28,255,0,14,27,28,49,50,0,0,9,1,255,0,4,49,50,27,28,255,0,14,27,28,49,50,255,0,8,49,50,27,28
004A7D  3  1B 1C 31 32  
004A81  3  00 00 09 01  
004A9A  3  00 00 1A 1A          .byte 0,0,26,26,0,0,0,26,0,0,0,26,26,0,27,28,49,50,255,0,4,255,6,30
004A9E  3  00 00 00 1A  
004AA2  3  00 00 00 1A  
004AB2  3  FF 0A 1E 02          .byte 255,10,30,2,255,0,28,1,2,255,0,23,41,42,42,43,0,1,2,255,0,23,48,0,0,44,0,1,2,255,0,23,48
004AB6  3  FF 00 1C 01  
004ABA  3  02 FF 00 17  
004AD3  3  00 00 2C 00          .byte 0,0,44,0,1,2,0,0,0,255,3,4,2,3,3,255,0,13,47,46,46,45,0,1,2,255,0,7,2,255,0,20,1
004AD7  3  01 02 00 00  
004ADB  3  00 FF 03 04  
004AF4  3  02 FF 00 07          .byte 2,255,0,7,2,0,0,0,3,3,2,3,3,3,255,0,11,1,2,3,3,255,0,5,2,255,0,5,2,255,0,14,1
004AF8  3  02 00 00 00  
004AFC  3  03 03 02 03  
004B15  3  02 FF 00 07          .byte 2,255,0,7,2,0,29,37,30,0,2,255,0,5,3,3,2,255,0,6,1,2,255,0,7,2,0,35,35,35,0,2,255,33,5
004B19  3  02 00 1D 25  
004B1D  3  1E 00 02 FF  
004B38  3  1E 00 02 FF          .byte 30,0,2,255,0,6,1,2,0,0,0,3,3,0,0,2,0,34,34,34,0,2,33,33,33,30,0,34,0,2,0,0,0
004B3C  3  00 06 01 02  
004B40  3  00 00 00 03  
004B59  3  03 03 03 01          .byte 3,3,3,1,2,255,0,7,2,29,37,34,37,30,2,33,30,0,34,0,34,0,2,255,0,6,1,2,255,0,7,2,34
004B5D  3  02 FF 00 07  
004B61  3  02 1D 25 22  
004B7A  3  00 22 00 22          .byte 0,34,0,34,2,0,34,0,34,0,34,0,2,255,0,6,1,2,3,3,0,0,0,27,28,2,34,0,34,0,34,2,0
004B7E  3  02 00 22 00  
004B82  3  22 00 22 00  
004B9B  3  22 00 22 00          .byte 34,0,34,0,34,0,2,3,3,3,0,0,0,1,255,0,6,27,28,2,35,0,35,0,35,2,0,35,0,35,0,35,0
004B9F  3  22 00 02 03  
004BA3  3  03 03 00 00  
004BBC  3  02 FF 00 0D          .byte 2,255,0,13,27,28,2,34,26,34,26,34,2,26,34,26,34,26,34,26,2,255,0,7,255,9,30
004BC0  3  1B 1C 02 22  
004BC4  3  1A 22 1A 22  
004BD7  3  FF 0A 1E 02          .byte 255,10,30,2,255,0,5,34,0,0,0,40,255,0,8,40,0,0,0,34,255,0,5,1,2,255,38,5,35,38,38,38,39
004BDB  3  FF 00 05 22  
004BDF  3  00 00 00 28  
004BF8  3  FF 00 08 3D          .byte 255,0,8,61,38,38,38,35,255,38,5,1,2,255,0,5,34,255,0,16,34,255,0,5,1,2,255,33,5,31,255,0,16
004BFC  3  26 26 26 23  
004C00  3  FF 26 05 01  
004C19  3  20 21 1E 00          .byte 32,33,30,0,0,0,1,2,255,0,24,34,0,0,0,1,2,255,0,24,32,33,33,33,1,2,255,0,28,1,2,255,0,28
004C1D  3  00 00 01 02  
004C21  3  FF 00 18 22  
004C3B  3  01 02 FF 00          .byte 1,2,255,0,28,1,2,255,0,12,49,50,0,0,0,49,50,255,0,9,1,2,255,0,12,49,50,0,0,0,49,50,255,0,9
004C3F  3  1C 01 02 FF  
004C43  3  00 0C 31 32  
004C5E  3  01 02 FF 00          .byte 1,2,255,0,8,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,255,0,5,1,2,255,0,8,54,60,0,60,0
004C62  3  08 3A 3B 3A  
004C66  3  3B 3A 3B 3A  
004C7F  3  3C 00 3C 00          .byte 60,0,60,0,60,0,60,0,60,54,255,0,5,1,2,0,0,0,6,6,27,28,255,6,17,1,0,0,0,1,255,0,6
004C83  3  3C 00 3C 00  
004C87  3  3C 36 FF 00  
004CA0  3  1B 1C FF 00          .byte 27,28,255,0,17,1,255,0,10,27,28,255,0,17,1,255,0,4,255,9,30
004CA4  3  11 01 FF 00  
004CA8  3  0A 1B 1C FF  
004CB5  3  FF 0A 17 FF          .byte 255,10,23,255,0,4,10,10,10,2,0,34,255,0,26,10,2,0,35,255,0,8,41,42,42,43,255,0,14,10,2,33,31
004CB9  3  00 04 0A 0A  
004CBD  3  0A 02 00 22  
004CD6  3  FF 00 08 30          .byte 255,0,8,48,0,0,44,255,0,14,10,2,255,0,10,48,0,0,44,255,0,9,27,28,9,9,9,10,2,255,0,10,47
004CDA  3  00 00 2C FF  
004CDE  3  00 0E 0A 02  
004CF7  3  2E 2E 2D FF          .byte 46,46,45,255,0,9,27,28,0,0,0,10,2,255,0,23,27,28,0,0,0,10,2,0,0,0,255,9,17,0,0,0,27
004CFB  3  00 09 1B 1C  
004CFF  3  00 00 00 0A  
004D18  3  1C 09 09 09          .byte 28,9,9,9,10,2,255,0,23,27,28,0,0,0,10,2,9,9,255,0,19,9,9,27,28,0,0,0,10,2,255,0,23
004D1C  3  0A 02 FF 00  
004D20  3  17 1B 1C 00  
004D39  3  1B 1C 00 00          .byte 27,28,0,0,0,10,2,0,0,0,255,9,17,0,0,0,27,28,9,9,9,10,2,255,0,23,27,28,0,0,0,10,2
004D3D  3  00 0A 02 00  
004D41  3  00 00 FF 09  
004D5A  3  FF 00 17 1B          .byte 255,0,23,27,28,0,0,0,10,2,9,9,255,0,21,27,28,0,89,0,10,255,0,24,27,28,0,0,0,10,255,0,24
004D5E  3  1C 00 00 00  
004D62  3  0A 02 09 09  
004D7B  3  1B 1C 00 58          .byte 27,28,0,88,0,10,255,3,23,255,0,4,3,3,3
004D7F  3  00 0A FF 03  
004D83  3  17 FF 00 04  
004D8A  3  FF 0A 05 22          .byte 255,10,5,34,10,34,10,10,10,40,255,10,11,255,0,4,10,10,18,10,255,38,4,35,38,35,38,38,38,39,255,0,17
004D8E  3  0A 22 0A 0A  
004D92  3  0A 28 FF 0A  
004DAB  3  12 0A FF 00          .byte 18,10,255,0,4,35,0,35,255,0,21,18,10,255,0,4,34,0,34,0,41,42,42,43,255,0,16,18,255,10,7,35,0
004DAF  3  04 23 00 23  
004DB3  3  FF 00 15 12  
004DCC  3  30 00 00 2C          .byte 48,0,0,44,255,0,7,55,255,56,6,27,28,18,30,255,33,5,10,35,0,48,0,0,44,255,0,14,27,28,18,31,255,33,5
004DD0  3  FF 00 07 37  
004DD4  3  FF 38 06 1B  
004DEF  3  0A 22 00 2F          .byte 10,34,0,47,46,46,45,255,0,4,55,57,255,0,8,27,28,18,30,255,33,5,10,35,255,0,19,27,28,18,31,255,33,5
004DF3  3  2E 2E 2D FF  
004DF7  3  00 04 37 39  
004E11  3  0A 23 FF 00          .byte 10,35,255,0,19,27,28,18,30,255,33,5,10,34,255,0,11,55,57,255,0,6,27,28,18,31,255,33,5,10,35,255,0,21
004E15  3  13 1B 1C 12  
004E19  3  1E FF 21 05  
004E33  3  12 1E FF 21          .byte 18,30,255,33,5,10,35,255,0,21,18,31,255,33,5,10,31,255,0,12,55,255,56,4,57,0,0,0,18,255,10,7,255,0,5
004E37  3  05 0A 23 FF  
004E3B  3  00 15 12 1F  
004E56  3  33 34 FF 00          .byte 51,52,255,0,15,18,10,255,0,11,53,54,0,89,0,0,21,23,255,0,8,55,18,10,0,49,50,0,49,50,0,49,50
004E5A  3  0F 12 0A FF  
004E5E  3  00 0B 35 36  
004E77  3  00 33 34 33          .byte 0,51,52,51,52,255,0,15,10,0,49,50,0,49,50,0,49,50,0,53,54,53,54,88,255,0,14,10,255,7,16,255,0,4
004E7B  3  34 FF 00 0F  
004E7F  3  0A 00 31 32  
004E99  3  FF 07 09             .byte 255,7,9
004E9C  3  FF 0A 1E 12          .byte 255,10,30,18,255,0,28,17,18,255,0,28,17,18,255,0,28,17,18,255,0,28,17,18,255,0,7,49,50,255,0,10,51
004EA0  3  FF 00 1C 11  
004EA4  3  12 FF 00 1C  
004EBD  3  34 FF 00 07          .byte 52,255,0,7,17,18,255,0,7,49,50,255,0,10,53,54,255,0,7,17,18,255,0,6,49,50,49,50,255,0,8,51,52
004EC1  3  11 12 FF 00  
004EC5  3  07 31 32 FF  
004EDE  3  33 34 FF 00          .byte 51,52,255,0,6,17,18,255,0,6,49,50,49,50,255,0,8,53,54,53,54,255,0,6,17,18,27,28,14,255,15,8,16
004EE2  3  06 11 12 FF  
004EE6  3  00 06 31 32  
004EFF  3  FF 00 04 0E          .byte 255,0,4,14,255,15,8,16,27,28,17,18,27,28,255,0,24,27,28,17,18,27,28,255,0,24,27,28,17,18,27,28,255,0,24
004F03  3  FF 0F 08 10  
004F07  3  1B 1C 11 12  
004F22  3  1B 1C 11 12          .byte 27,28,17,18,27,28,255,0,24,27,28,17,18,14,255,15,4,16,27,28,0,0,0,14,255,15,4,16,0,0,0,27,28
004F26  3  1B 1C FF 00  
004F2A  3  18 1B 1C 11  
004F43  3  0E FF 0F 04          .byte 14,255,15,4,16,17,255,0,7,27,28,255,0,12,27,28,255,0,37,255,7,30
004F47  3  10 11 FF 00  
004F4B  3  07 1B 1C FF  
004F59  3  FF 0A 1E 12          .byte 255,10,30,18,255,0,29,18,255,0,29,18,255,0,29,18,255,0,22,14,255,15,6,18,255,0,14,14,255,15,5,16,255,0,7
004F5D  3  FF 00 1D 12  
004F61  3  FF 00 1D 12  
004F7C  3  11 12 FF 00          .byte 17,18,255,0,28,17,18,255,0,7,14,255,15,5,16,255,0,14,17,18,255,0,28,17,18,14,27,28,15,16,255,0,23
004F80  3  1C 11 12 FF  
004F84  3  00 07 0E FF  
004F9D  3  11 12 00 1B          .byte 17,18,0,27,28,255,0,24,14,17,18,0,27,28,255,0,25,17,18,255,0,8,21,255,22,16,23,0,0,17,18,14,15,15,15
004FA1  3  1C FF 00 18  
004FA5  3  0E 11 12 00  
004FC0  3  10 FF 00 08          .byte 16,255,0,8,61,38,38,39,255,0,9,27,28,17,18,255,0,14,21,23,255,0,7,89,0,0,27,28,17,255,0,27,27
004FC4  3  3D 26 26 27  
004FC8  3  FF 00 09 1B  
004FE1  3  1C 11 FF 00          .byte 28,17,255,0,24,88,0,0,27,28,17,255,7,14,255,0,4,255,7,12
004FE5  3  18 58 00 00  
004FE9  3  1B 1C 11 FF  
004FF5  3  FF 0A 1E FF          .byte 255,10,30,255,0,29,17,255,0,29,17,255,0,29,17,255,22,23,23,255,0,5,17,18,255,0,28,17,18,255,0,25,55
004FF9  3  00 1D 11 FF  
004FFD  3  00 1D 11 FF  
005016  3  38 38 11 12          .byte 56,56,17,18,255,0,5,49,50,255,0,5,41,42,42,43,255,0,12,17,18,255,0,5,49,50,255,0,5,48,0,0,44
00501A  3  FF 00 05 31  
00501E  3  32 FF 00 05  
005037  3  FF 00 0C 11          .byte 255,0,12,17,18,255,0,4,49,50,49,50,255,0,4,48,0,0,44,255,0,7,55,255,56,4,17,18,255,0,4,49,50
00503B  3  12 FF 00 04  
00503F  3  31 32 31 32  
005058  3  31 32 FF 00          .byte 49,50,255,0,4,47,46,46,45,255,0,12,17,18,0,0,0,49,50,49,50,49,50,255,0,19,17,18,0,0,0,49,50
00505C  3  04 2F 2E 2E  
005060  3  2D FF 00 0C  
005079  3  31 32 31 32          .byte 49,50,49,50,255,0,13,55,255,56,5,17,18,0,0,49,50,49,50,49,50,49,50,255,0,18,17,18,0,0,49,50,49
00507D  3  FF 00 0D 37  
005081  3  FF 38 05 11  
00509A  3  32 31 32 31          .byte 50,49,50,49,50,255,0,6,55,56,56,57,255,0,8,17,18,0,58,59,255,58,6,59,58,255,0,18,18,0,26,60,255,0,6
00509E  3  32 FF 00 06  
0050A2  3  37 38 38 39  
0050BD  3  3C 1A FF 00          .byte 60,26,255,0,18,255,7,30
0050C1  3  12 FF 07 1E  
0050C5  3  FF 0A 1E 12          .byte 255,10,30,18,255,0,4,255,37,4,255,0,12,255,37,4,255,0,4,17,18,255,0,4,255,35,4,255,0,12,255,35,4
0050C9  3  FF 00 04 FF  
0050CD  3  25 04 FF 00  
0050E6  3  FF 00 04 11          .byte 255,0,4,17,18,255,0,4,255,34,4,255,0,12,255,34,4,255,0,4,17,18,255,33,4,31,34,34,34,255,0,12,34,34,34
0050EA  3  12 FF 00 04  
0050EE  3  FF 22 04 FF  
005109  3  20 FF 21 04          .byte 32,255,33,4,17,18,255,0,5,34,34,34,255,0,12,34,34,34,255,0,5,17,18,255,33,5,31,35,35,255,0,12,35,35
00510D  3  11 12 FF 00  
005111  3  05 22 22 22  
00512B  3  20 FF 21 05          .byte 32,255,33,5,17,18,255,0,6,34,34,255,0,12,34,34,255,0,6,17,18,255,33,6,31,34,255,0,12,34,32,255,33,6
00512F  3  11 12 FF 00  
005133  3  06 22 22 FF  
00514D  3  11 12 FF 00          .byte 17,18,255,0,7,34,255,0,12,34,255,0,7,17,18,255,33,7,31,255,0,12,32,255,33,7,17,18,255,0,28,17,18
005151  3  07 22 FF 00  
005155  3  0C 22 FF 00  
00516E  3  FF 00 1C 11          .byte 255,0,28,17,18,255,0,28,17,18,255,0,28,17,255,0,8,58,59,255,58,10,59,58,255,0,15,26,26,60,255,0,10
005172  3  12 FF 00 1C  
005176  3  11 12 FF 00  
00518F  3  3C 1A 1A FF          .byte 60,26,26,255,0,7,255,7,30
005193  3  00 07 FF 07  
005197  3  1E           
005198  3  FF 0A 17 FF          .byte 255,10,23,255,0,4,10,10,10,18,255,0,28,17,18,255,0,27,89,17,18,255,0,28,17,18,255,0,27,88,17,18,255,0,23
00519C  3  00 04 0A 0A  
0051A0  3  0A 12 FF 00  
0051BB  3  0E FF 0F 04          .byte 14,255,15,4,17,18,255,0,5,27,28,21,255,22,10,23,27,28,255,0,7,17,18,255,0,5,27,28,0,36,255,0,8
0051BF  3  11 12 FF 00  
0051C3  3  05 1B 1C 15  
0051DC  3  24 00 1B 1C          .byte 36,0,27,28,255,0,7,17,18,255,0,5,27,28,0,36,255,0,8,36,0,27,28,255,0,7,17,18,255,0,5,27,28
0051E0  3  FF 00 07 11  
0051E4  3  12 FF 00 05  
0051FD  3  00 24 FF 00          .byte 0,36,255,0,8,36,0,27,28,255,0,7,17,18,255,0,5,27,28,0,36,255,0,8,36,0,27,28,255,0,7,17,18
005201  3  08 24 00 1B  
005205  3  1C FF 00 07  
00521E  3  00 00 00 31          .byte 0,0,0,49,50,21,255,22,16,23,49,50,0,0,0,17,18,0,0,0,49,50,255,0,18,49,50,0,0,0,17,18,0,0,0
005222  3  32 15 FF 16  
005226  3  10 17 31 32  
005241  3  31 32 FF 00          .byte 49,50,255,0,18,49,50,0,0,0,17,18,16,0,0,49,50,255,0,18,49,50,0,0,14,17,255,0,4,51,52,0,0
005245  3  12 31 32 00  
005249  3  00 00 11 12  
005262  3  33 34 00 33          .byte 51,52,0,51,52,0,51,52,0,51,52,0,51,52,0,0,51,52,255,0,8,53,54,0,0,53,54,0,53,54,0,53,54
005266  3  34 00 33 34  
00526A  3  00 33 34 00  
005283  3  00 35 36 00          .byte 0,53,54,0,53,54,0,0,53,54,255,0,4,255,7,30
005287  3  35 36 00 00  
00528B  3  35 36 FF 00  
005293  3  FF 0A 10 1E          .byte 255,10,16,30,255,0,13,18,255,0,14,32,255,10,4,30,255,0,9,18,255,0,18,32,10,10,10,30,255,0,6,18,255,0,21
005297  3  FF 00 0D 12  
00529B  3  FF 00 0E 20  
0052B6  3  20 0A 0A 1E          .byte 32,10,10,30,255,0,4,18,255,0,21,255,10,4,30,0,0,0,18,255,0,21,10,62,63,64,65,0,0,0,18,255,0,21
0052BA  3  FF 00 04 12  
0052BE  3  FF 00 15 FF  
0052D8  3  0A 42 43 44          .byte 10,66,67,68,69,0,0,0,18,255,0,21,255,10,6,30,0,18,255,0,26,32,10,0,18,255,0,27,10,0,18,255,0,27
0052DC  3  45 00 00 00  
0052E0  3  12 FF 00 15  
0052FA  3  0A 1E 12 FF          .byte 10,30,18,255,0,27,32,10,18,255,0,28,10,18,255,0,28,10,18,255,0,22,85,86,86,87,0,0,10,255,0,29,10
0052FE  3  00 1B 20 0A  
005302  3  12 FF 00 1C  
00531B  3  FF 00 1D FF          .byte 255,0,29,255,10,24,255,12,4,10,10,10
00531F  3  0A 18 FF 0C  
005323  3  04 0A 0A 0A  
005327  3  FF 0A 11 FF          .byte 255,10,17,255,0,4,255,10,10,255,0,28,17,10,255,0,28,17,10,255,0,28,17,10,255,0,28,17,10,255,0,15,14
00532B  3  00 04 FF 0A  
00532F  3  0A FF 00 1C  
005348  3  FF 0F 04 10          .byte 255,15,4,16,255,0,7,17,10,255,0,28,17,10,255,15,12,16,255,0,10,14,255,15,4,17,10,255,0,28,17,10,255,0,28
00534C  3  FF 00 07 11  
005350  3  0A FF 00 1C  
00536B  3  11 0A FF 00          .byte 17,10,255,0,14,14,255,15,6,16,255,0,6,17,10,255,0,28,17,10,255,0,28,17,10,255,15,12,16,255,0,10,14
00536F  3  0E 0E FF 0F  
005373  3  06 10 FF 00  
00538C  3  FF 0F 04 11          .byte 255,15,4,17,10,0,49,50,0,49,50,0,49,50,0,49,50,255,0,17,10,0,49,50,0,49,50,0,49,50,0,49,50
005390  3  0A 00 31 32  
005394  3  00 31 32 00  
0053AD  3  FF 00 11 0A          .byte 255,0,17,10,58,59,255,58,9,59,58,255,0,16,10,255,15,29
0053B1  3  3A 3B FF 3A  
0053B5  3  09 3B 3A FF  
0053BF  3  FF 0A 1E 12          .byte 255,10,30,18,255,0,5,40,0,34,0,34,0,34,0,34,255,0,14,18,18,0,41,42,42,43,40,0,35,0,35,0,35
0053C3  3  FF 00 05 28  
0053C7  3  00 22 00 22  
0053E0  3  00 23 FF 00          .byte 0,35,255,0,9,41,42,42,43,0,18,18,0,48,0,0,44,40,0,34,0,34,0,34,0,34,255,0,9,48,0,0,44
0053E4  3  09 29 2A 2A  
0053E8  3  2B 00 12 12  
005401  3  00 12 12 00          .byte 0,18,18,0,48,0,0,44,40,0,35,0,35,0,35,0,35,255,0,9,48,0,0,44,0,18,18,0,47,46,46,45,40
005405  3  30 00 00 2C  
005409  3  28 00 23 00  
005422  3  00 20 FF 21          .byte 0,32,255,33,13,30,0,47,46,46,45,0,18,18,255,38,5,39,255,0,15,34,255,0,6,18,18,255,0,21,35,255,0,6
005426  3  0D 1E 00 2F  
00542A  3  2E 2E 2D 00  
005444  3  12 12 FF 00          .byte 18,18,255,0,21,34,255,0,6,18,18,255,0,5,49,50,255,0,14,32,33,33,37,33,33,33,18,18,255,0,5,49,50
005448  3  15 22 FF 00  
00544C  3  06 12 12 FF  
005465  3  FF 00 11 22          .byte 255,0,17,34,0,0,0,18,18,255,0,4,49,50,49,50,255,0,16,35,0,0,0,18,18,255,0,4,49,50,49,50,255,0,16
005469  3  00 00 00 12  
00546D  3  12 FF 00 04  
005488  3  22 00 00 00          .byte 34,0,0,0,18,18,0,0,0,49,50,49,50,49,50,255,0,15,32,33,33,33,18,18,0,0,0,49,50,49,50,49,50
00548C  3  12 12 00 00  
005490  3  00 31 32 31  
0054A9  3  FF 00 13 12          .byte 255,0,19,18,0,0,0,49,50,49,50,49,50,49,50,255,0,22,49,50,49,50,49,50,49,50,255,0,19,255,15,30
0054AD  3  00 00 00 31  
0054B1  3  32 31 32 31  
0054C9  3  FF 16 0D 17          .byte 255,22,13,23,255,0,4,21,255,22,11,18,0,0,34,255,0,25,18,18,33,33,31,255,0,25,18,18,255,0,28,18,17
0054CD  3  FF 00 04 15  
0054D1  3  FF 16 0B 12  
0054EA  3  00 00 00 15          .byte 0,0,0,21,255,22,20,23,0,27,28,18,18,255,0,6,34,255,0,15,34,0,0,0,27,28,18,18,255,0,6,34,255,0,15
0054EE  3  FF 16 14 17  
0054F2  3  00 1B 1C 12  
00550D  3  22 00 00 00          .byte 34,0,0,0,27,28,18,18,16,255,0,5,35,255,0,15,35,0,0,0,27,28,18,18,255,0,6,34,255,0,15,34,0,0,0
005511  3  1B 1C 12 12  
005515  3  10 FF 00 05  
005530  3  1B 1C 12 12          .byte 27,28,18,18,0,0,0,14,255,15,20,16,0,27,28,18,18,255,0,6,34,255,0,15,34,0,0,0,27,28,18,18,255,0,6
005534  3  00 00 00 0E  
005538  3  FF 0F 14 10  
005553  3  23 FF 00 0F          .byte 35,255,0,15,35,0,0,0,27,28,18,18,16,255,0,5,34,255,0,15,34,0,0,0,27,28,18,18,255,0,6,34,255,0,15
005557  3  23 00 00 00  
00555B  3  1B 1C 12 12  
005576  3  22 00 00 00          .byte 34,0,0,0,27,28,18,18,0,0,0,14,255,15,20,16,0,27,28,18,255,0,27,27,28,18,255,0,27,27,28,18,255,15,30
00557A  3  1B 1C 12 12  
00557E  3  00 00 00 0E  
005599  3               numsc:
005599  3  16                   .byte 22
00559A  3               nmedat:
00559A  3  00 01 18 88          .byte 0,1,24,136,255
00559E  3  FF           
00559F  3  00 01 80 E0          .byte 0,1,128,224,1,3,96,160,6,14,24,224,1,7,64,184,255
0055A3  3  01 03 60 A0  
0055A7  3  06 0E 18 E0  
0055B0  3  00 00 80 10          .byte 0,0,128,16,6,14,56,224,1,8,24,160,1,8,88,64,255
0055B4  3  06 0E 38 E0  
0055B8  3  01 08 18 A0  
0055C1  3  00 00 18 58          .byte 0,0,24,88,6,14,48,16,1,3,72,80,1,8,128,80,255
0055C5  3  06 0E 30 10  
0055C9  3  01 03 48 50  
0055D2  3  00 00 48 10          .byte 0,0,72,16,6,14,128,16,2,5,40,112,2,4,64,152,2,9,56,200,7,11,128,80,5,13,32,32,5,13,32,72,255
0055D6  3  06 0E 80 10  
0055DA  3  02 05 28 70  
0055F3  3  00 00 80 10          .byte 0,0,128,16,6,14,40,16,2,2,56,88,2,2,64,168,2,2,96,144,255
0055F7  3  06 0E 28 10  
0055FB  3  02 02 38 58  
005608  3  00 01 80 E0          .byte 0,1,128,224,5,13,32,104,1,3,48,48,1,7,80,64,1,8,128,80,255
00560C  3  05 0D 20 68  
005610  3  01 03 30 30  
00561D  3  00 00 80 10          .byte 0,0,128,16,6,14,24,16,2,5,24,32,2,5,48,88,2,5,80,152,7,11,128,72,7,11,128,168,255
005621  3  06 0E 18 10  
005625  3  02 05 18 20  
00563A  3  00 00 80 10          .byte 0,0,128,16,6,14,40,120,1,8,56,16,1,8,56,184,2,5,72,104,2,5,72,144,255
00563E  3  06 0E 28 78  
005642  3  01 08 38 10  
005653  3  00 00 80 10          .byte 0,0,128,16,5,13,32,208,6,14,16,16,2,5,16,152,255
005657  3  05 0D 20 D0  
00565B  3  06 0E 10 10  
005664  3  00 00 80 10          .byte 0,0,128,16,6,14,128,192,2,5,40,88,2,5,72,176,7,11,128,72,255
005668  3  06 0E 80 C0  
00566C  3  02 05 28 58  
005679  3  00 01 18 C8          .byte 0,1,24,200,5,13,32,104,6,14,40,16,1,8,48,40,1,8,80,56,1,8,128,72,255
00567D  3  05 0D 20 68  
005681  3  06 0E 28 10  
005692  3  00 01 18 C8          .byte 0,1,24,200,5,13,40,88,2,9,24,128,255
005696  3  05 0D 28 58  
00569A  3  02 09 18 80  
00569F  3  00 00 80 10          .byte 0,0,128,16,6,14,16,40,2,5,72,120,7,11,128,120,255
0056A3  3  06 0E 10 28  
0056A7  3  02 05 48 78  
0056B0  3  00 00 80 10          .byte 0,0,128,16,6,14,48,224,1,7,88,80,2,5,24,56,255
0056B4  3  06 0E 30 E0  
0056B8  3  01 07 58 50  
0056C1  3  00 01 80 E0          .byte 0,1,128,224,5,13,72,120,6,14,112,16,2,9,104,96,2,5,96,152,7,11,128,152,255
0056C5  3  05 0D 48 78  
0056C9  3  06 0E 70 10  
0056DA  3  00 01 80 E0          .byte 0,1,128,224,6,14,112,120,2,5,104,88,2,5,104,152,2,4,48,104,2,4,48,136,255
0056DE  3  06 0E 70 78  
0056E2  3  02 05 68 58  
0056F3  3  00 01 18 C8          .byte 0,1,24,200,6,14,80,112,1,8,40,128,1,7,80,72,255
0056F7  3  06 0E 50 70  
0056FB  3  01 08 28 80  
005704  3  00 00 80 10          .byte 0,0,128,16,8,12,128,200,3,2,24,16,3,6,32,80,3,10,48,152,255
005708  3  08 0C 80 C8  
00570C  3  03 02 18 10  
005719  3  00 00 18 98          .byte 0,0,24,152,1,3,128,128,1,8,48,40,6,14,96,16,255
00571D  3  01 03 80 80  
005721  3  01 08 30 28  
00572A  3  00 00 80 10          .byte 0,0,128,16,5,13,32,32,5,13,32,208,2,5,64,136,2,5,104,160,3,10,24,160,6,14,64,56,255
00572E  3  05 0D 20 20  
005732  3  05 0D 20 D0  
005747  3  00 00 80 10          .byte 0,0,128,16,1,7,104,112,1,7,64,120,6,14,24,224,255
00574B  3  01 07 68 70  
00574F  3  01 07 40 78  
005758  3               NUMOBJ = 24
005758  3               objdta:
005758  3  1F F8 20 04          .byte 31,248,32,4,42,84,42,84,32,4,47,244,40,20,40,20,40,20,40,20,40,20,40,20,47,244,32,4,16,8,15,240,254,128,64,254,128,64
00575C  3  2A 54 2A 54  
005760  3  20 04 2F F4  
00577E  3  1F F8 20 04          .byte 31,248,32,4,42,84,42,84,32,4,35,196,36,36,40,20,40,20,40,20,40,20,36,36,35,196,32,4,16,8,15,240,254,8,8,254,8,8
005782  3  2A 54 2A 54  
005786  3  20 04 23 C4  
0057A4  3  1F F8 20 04          .byte 31,248,32,4,42,84,42,84,32,4,33,132,34,68,34,68,36,36,36,36,40,20,40,20,47,244,32,4,16,8,15,240,254,8,8,254,8,8
0057A8  3  2A 54 2A 54  
0057AC  3  20 04 21 84  
0057CA  3  1F F8 20 04          .byte 31,248,32,4,42,84,42,84,32,4,35,196,34,68,46,116,40,20,40,20,46,116,34,68,35,196,32,4,16,8,15,240,254,8,8,254,8,8
0057CE  3  2A 54 2A 54  
0057D2  3  20 04 23 C4  
0057F0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,1,128,160,1,128,160
0057F4  3  00 00 00 00  
0057F8  3  00 00 00 00  
005816  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,2,56,96,2,56,96
00581A  3  00 00 00 00  
00581E  3  00 00 00 00  
00583C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,3,128,56,3,128,56
005840  3  00 00 00 00  
005844  3  00 00 00 00  
005862  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,4,128,200,4,128,200
005866  3  00 00 00 00  
00586A  3  00 00 00 00  
005888  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,5,128,64,5,128,64
00588C  3  00 00 00 00  
005890  3  00 00 00 00  
0058AE  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,6,128,128,6,128,128
0058B2  3  00 00 00 00  
0058B6  3  00 00 00 00  
0058D4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,7,88,16,7,88,16
0058D8  3  00 00 00 00  
0058DC  3  00 00 00 00  
0058FA  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,8,96,120,8,96,120
0058FE  3  00 00 00 00  
005902  3  00 00 00 00  
005920  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,9,48,136,9,48,136
005924  3  00 00 00 00  
005928  3  00 00 00 00  
005946  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,10,104,56,10,104,56
00594A  3  00 00 00 00  
00594E  3  00 00 00 00  
00596C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,11,80,224,11,80,224
005970  3  00 00 00 00  
005974  3  00 00 00 00  
005992  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,12,104,152,12,104,152
005996  3  00 00 00 00  
00599A  3  00 00 00 00  
0059B8  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,13,104,200,13,104,200
0059BC  3  00 00 00 00  
0059C0  3  00 00 00 00  
0059DE  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,14,128,168,14,128,168
0059E2  3  00 00 00 00  
0059E6  3  00 00 00 00  
005A04  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,15,88,200,15,88,200
005A08  3  00 00 00 00  
005A0C  3  00 00 00 00  
005A2A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,16,128,24,16,128,24
005A2E  3  00 00 00 00  
005A32  3  00 00 00 00  
005A50  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,17,80,192,17,80,192
005A54  3  00 00 00 00  
005A58  3  00 00 00 00  
005A76  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,19,128,152,19,128,152
005A7A  3  00 00 00 00  
005A7E  3  00 00 00 00  
005A9C  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,20,128,96,20,128,96
005AA0  3  00 00 00 00  
005AA4  3  00 00 00 00  
005AC2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,13,80,10,176,13,80,15,240,4,32,7,224,21,128,208,21,128,208
005AC6  3  00 00 00 00  
005ACA  3  00 00 00 00  
005AE8  3               font:
005AE8  3  79 3E 32 47          .byte 121,62,50,71,205,236,126,205
005AEC  3  CD EC 7E CD  
005AF0  3  18 81 CD D5          .byte 24,129,205,213,220,201,48,0
005AF4  3  DC C9 30 00  
005AF8  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
005AFC  3  00 00 00 00  
005B00  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
005B04  3  6C FE 6C 00  
005B08  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
005B0C  3  7E 1E 7E 18  
005B10  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
005B14  3  30 6E CE 00  
005B18  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
005B1C  3  7E CC 7E 00  
005B20  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
005B24  3  00 00 00 00  
005B28  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
005B2C  3  18 18 0C 00  
005B30  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
005B34  3  30 30 60 00  
005B38  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
005B3C  3  7E 18 3C 00  
005B40  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
005B44  3  7E 18 18 00  
005B48  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
005B4C  3  00 18 18 30  
005B50  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
005B54  3  7E 00 00 00  
005B58  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
005B5C  3  00 38 38 00  
005B60  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
005B64  3  18 30 60 00  
005B68  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
005B6C  3  F6 E6 7C 00  
005B70  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
005B74  3  18 18 7E 00  
005B78  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
005B7C  3  7C C0 FE 00  
005B80  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
005B84  3  06 C6 7C 00  
005B88  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
005B8C  3  D8 FE 18 00  
005B90  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
005B94  3  06 C6 7C 00  
005B98  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
005B9C  3  C6 C6 7C 00  
005BA0  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
005BA4  3  18 30 30 00  
005BA8  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
005BAC  3  C6 C6 7C 00  
005BB0  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
005BB4  3  7E 06 7C 00  
005BB8  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
005BBC  3  00 00 30 00  
005BC0  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
005BC4  3  30 00 30 00  
005BC8  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
005BCC  3  30 18 0C 00  
005BD0  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
005BD4  3  00 7E 00 00  
005BD8  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
005BDC  3  0C 18 30 00  
005BE0  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
005BE4  3  18 00 18 00  
005BE8  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
005BEC  3  FE C0 7C 00  
005BF0  3  00 FC C6 C6          .byte 0,252,198,198,254,198,198,0
005BF4  3  FE C6 C6 00  
005BF8  3  00 FC C6 FC          .byte 0,252,198,252,198,198,254,0
005BFC  3  C6 C6 FE 00  
005C00  3  00 7E C6 C0          .byte 0,126,198,192,192,198,126,0
005C04  3  C0 C6 7E 00  
005C08  3  00 F8 CC C6          .byte 0,248,204,198,198,198,254,0
005C0C  3  C6 C6 FE 00  
005C10  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
005C14  3  C0 C0 FE 00  
005C18  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
005C1C  3  C0 C0 C0 00  
005C20  3  00 7E C6 C0          .byte 0,126,198,192,222,198,126,0
005C24  3  DE C6 7E 00  
005C28  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
005C2C  3  C6 C6 C6 00  
005C30  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
005C34  3  18 18 7E 00  
005C38  3  00 06 06 06          .byte 0,6,6,6,198,198,252,0
005C3C  3  C6 C6 FC 00  
005C40  3  00 C6 CC F8          .byte 0,198,204,248,222,198,198,0
005C44  3  DE C6 C6 00  
005C48  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
005C4C  3  C0 C0 FE 00  
005C50  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
005C54  3  C6 C6 C6 00  
005C58  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
005C5C  3  DE CE C6 00  
005C60  3  00 7E C6 C6          .byte 0,126,198,198,198,198,124,0
005C64  3  C6 C6 7C 00  
005C68  3  00 FC C6 C6          .byte 0,252,198,198,254,192,192,0
005C6C  3  FE C0 C0 00  
005C70  3  00 7E C6 C6          .byte 0,126,198,198,246,222,124,0
005C74  3  F6 DE 7C 00  
005C78  3  00 FE C6 C6          .byte 0,254,198,198,252,204,198,0
005C7C  3  FC CC C6 00  
005C80  3  00 FC C0 FE          .byte 0,252,192,254,6,198,254,0
005C84  3  06 C6 FE 00  
005C88  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
005C8C  3  30 30 30 00  
005C90  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,126,0
005C94  3  C6 C6 7E 00  
005C98  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
005C9C  3  C6 6C 38 00  
005CA0  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,110,0
005CA4  3  C6 FE 6E 00  
005CA8  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
005CAC  3  38 6C C6 00  
005CB0  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
005CB4  3  30 30 30 00  
005CB8  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
005CBC  3  30 60 FE 00  
005CC0  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
005CC4  3  18 18 1E 00  
005CC8  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
005CCC  3  30 18 0C 00  
005CD0  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
005CD4  3  30 30 F0 00  
005CD8  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
005CDC  3  30 30 30 00  
005CE0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
005CE4  3  00 00 00 00  
005CE8  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
005CEC  3  60 60 FE 00  
005CF0  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
005CF4  3  7C CC 7C 00  
005CF8  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
005CFC  3  66 66 7C 00  
005D00  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
005D04  3  60 60 3C 00  
005D08  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
005D0C  3  CC CC 7C 00  
005D10  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
005D14  3  F8 C0 7C 00  
005D18  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
005D1C  3  30 30 30 00  
005D20  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
005D24  3  CC 7C 0C 78  
005D28  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
005D2C  3  CC CC CC 00  
005D30  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
005D34  3  30 30 78 00  
005D38  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
005D3C  3  0C 0C 6C 38  
005D40  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
005D44  3  70 78 6C 00  
005D48  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
005D4C  3  30 30 1C 00  
005D50  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
005D54  3  FC FC FC 00  
005D58  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
005D5C  3  CC CC CC 00  
005D60  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
005D64  3  CC CC 78 00  
005D68  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
005D6C  3  CC F8 C0 C0  
005D70  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
005D74  3  CC 7C 0C 0E  
005D78  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
005D7C  3  60 60 60 00  
005D80  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
005D84  3  78 0C F8 00  
005D88  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
005D8C  3  30 30 1C 00  
005D90  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
005D94  3  CC CC 78 00  
005D98  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
005D9C  3  78 78 30 00  
005DA0  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
005DA4  3  FC FC 78 00  
005DA8  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
005DAC  3  30 78 CC 00  
005DB0  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
005DB4  3  CC 7C 0C 78  
005DB8  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
005DBC  3  30 60 FC 00  
005DC0  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
005DC4  3  18 18 1E 00  
005DC8  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
005DCC  3  18 18 18 00  
005DD0  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
005DD4  3  30 30 F0 00  
005DD8  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
005DDC  3  00 00 00 00  
005DE0  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
005DE4  3  E3 BB C6 7C  
005DE8  3               jtab:
005DE8  3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,255,0,0,0,1,1,1,2,2,4,6,8,8,8,99
005DEC  3  FE FF FF FF  
005DF0  3  00 00 00 01  
005DFE  3  42 61 46 36  keys:   .byte 66,97,70,54,55,48,49,48,49,17,18
005E02  3  37 30 31 30  
005E06  3  31 11 12     
005E09  3               
005E09  2               
005E09  1               
005E09  1               end_asm:
005E09  1               
005E09  1               ;----------------------------------------------------------------------
005E09  1               ; RELOCATION OF BEEB CODE FROM LOAD ADDRESS
005E09  1               ;----------------------------------------------------------------------
005E09  1               
005E09  1               relocate:
005E09  1               ; Issue *TAPE otherwise DFS goes mental that we've overwritten workspace from &E00 - &1100
005E09  1               
005E09  1  A9 8C            lda #$8C
005E0B  1  A2 0C            ldx #$0C
005E0D  1  A0 00            ldy #$00
005E0F  1  20 F4 FF         jsr OSBYTE					; *FX &8C,0,0 - *TAPE 1200
005E12  1               
005E12  1  78           	sei
005E13  1  A9 7F        	lda #$7f
005E15  1  8D 4E FE     	sta $fe4e					; disable all interupts
005E18  1  A9 82        	lda #$82
005E1A  1  8D 4E FE     	sta $fe4e					; enable vsync interupt only
005E1D  1  58           	cli
005E1E  1               
005E1E  1               
005E1E  1               
005E1E  1               
005E1E  1               
005E1E  1               
005E1E  1               
005E1E  1               
005E1E  1               
005E1E  1               .if swrflag
005E1E  1  A9 04        	lda #4						; select SWRAM
005E20  1  85 F4        	sta $f4
005E22  1  8D 30 FE     	sta $fe30
005E25  1               .endif
005E25  1               
005E25  1               
005E25  1               
005E25  1               
005E25  1               
005E25  1               ; Other one off initialisation could happen here...
005E25  1               
005E25  1               ; Relocate all code down to &E00
005E25  1               .if swrflag
005E25  1  A2 28        	ldx #>(data_start - start_asm) + 1
005E27  1               .else
005E27  1               	ldx #>(end_asm - start_asm) + 1
005E27  1               .endif
005E27  1  A0 00        	ldy #0
005E29  1               reloop:
005E29  1  B9 00 12     	lda load_address, y
005E2C  1  99 00 0E     	sta asm_code, y
005E2F  1  C8           	iny
005E30  1  D0 F7        	bne reloop
005E32  1  EE 2B 62     	inc reloop + 2 + load_address - asm_code
005E35  1  EE 2E 62     	inc reloop + 5 + load_address - asm_code
005E38  1  CA           	dex
005E39  1  D0 EE        	bne reloop
005E3B  1               
005E3B  1               .if swrflag
005E3B  1               ; Relocate all data up to &8000
005E3B  1  A2 29        	ldx #>(end_asm - data_start) + 1
005E3D  1  A0 00        	ldy #0
005E3F  1               uploop:
005E3F  1  B9 17 39     	lda data_start + load_address - asm_code, y
005E42  1  99 00 80     	sta data_address, y
005E45  1  C8           	iny
005E46  1  D0 F7        	bne uploop
005E48  1  EE 41 62     	inc uploop + 2 + load_address - asm_code
005E4B  1  EE 44 62     	inc uploop + 5 + load_address - asm_code
005E4E  1  CA           	dex
005E4F  1  D0 EE        	bne uploop
005E51  1               .endif
005E51  1               
005E51  1  4C 03 0E     	jmp boot_game
005E54  1               
005E54  1               
005E54  1               
005E54  1               
005E54  1               
005E54  1               .if swrflag
005E54  1               	.out "- SWRAM mode enabled"
005E54  1               	.out "- Memory:"
005E54  1               	.out .sprintf("   SWRAM : max %6d bytes, used %6d bytes, free %6d bytes", ($c000-$8000)			 , (end_asm - data_start)	,($c000-$8000)-(end_asm - data_start))
005E54  1               	.out .sprintf("   CODE  : max %6d bytes, used %6d bytes, free %6d bytes", (ScreenAddr-$e00)		 , (data_start-$e00)		,(ScreenAddr-data_start))
005E54  1               	.out .sprintf("   TOTAL : max %6d bytes, used %6d bytes, free %6d bytes", ($c000-$8000)+(ScreenAddr-$e00), (end_asm - $e00)		,($c000-$8000)-(end_asm - data_start)+(ScreenAddr-data_start))
005E54  1               .else
005E54  1               	.out "- Memory:"
005E54  1               	.out .sprintf("   CODE  : max %6d bytes, used %6d bytes, free %6d bytes", (ScreenAddr-$e00), (end_asm - start_asm),(ScreenAddr-$e00)-(end_asm - start_asm))
005E54  1               .endif
005E54  1               	.out .sprintf("")
005E54  1               eop:					; End Of Program
005E54  1               
